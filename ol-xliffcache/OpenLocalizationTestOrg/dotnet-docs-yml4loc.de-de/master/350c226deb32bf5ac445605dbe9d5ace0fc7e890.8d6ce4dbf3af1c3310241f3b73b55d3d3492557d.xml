{"nodes":[{"content":"Defines a stream that links data streams to cryptographic transformations.","nodes":[{"pos":[0,74],"content":"Defines a stream that links data streams to cryptographic transformations.","nodes":[{"content":"Defines a stream that links data streams to cryptographic transformations.","pos":[0,74]}]}],"pos":[2187,2262],"yaml":true},{"content":"The common language runtime uses a stream-oriented design for cryptography. The core of this design is <xref:System.Security.Cryptography.CryptoStream>. Any cryptographic objects that implement <xref:System.Security.Cryptography.CryptoStream> can be chained together with any objects that implement <xref:System.IO.Stream>, so the streamed output from one object can be fed into the input of another object. The intermediate result (the output from the first object) does not need to be stored separately.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly by calling its <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method, which in turn calls its <xref:System.IDisposable> implementation. To dispose of the type directly, call its <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n You should always explicitly close your <xref:System.Security.Cryptography.CryptoStream> object after you are done using it by calling the <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method.  Doing so flushes the underlying stream and causes all remaining blocks of data to be processed by the <xref:System.Security.Cryptography.CryptoStream> object.  However, if an exception occurs before you call the <xref:System.IO.Stream.Close%2A> method, the <xref:System.Security.Cryptography.CryptoStream> object might not be closed.  To ensure that the <xref:System.IO.Stream.Close%2A> method always gets called, place your call to the <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method within the `finally` block of a `try`/`catch` statement.","nodes":[{"pos":[0,505],"content":"The common language runtime uses a stream-oriented design for cryptography. The core of this design is <xref:System.Security.Cryptography.CryptoStream>. Any cryptographic objects that implement <xref:System.Security.Cryptography.CryptoStream> can be chained together with any objects that implement <xref:System.IO.Stream>, so the streamed output from one object can be fed into the input of another object. The intermediate result (the output from the first object) does not need to be stored separately.","nodes":[{"content":"The common language runtime uses a stream-oriented design for cryptography. The core of this design is <xref:System.Security.Cryptography.CryptoStream>. Any cryptographic objects that implement <xref:System.Security.Cryptography.CryptoStream> can be chained together with any objects that implement <xref:System.IO.Stream>, so the streamed output from one object can be fed into the input of another object. The intermediate result (the output from the first object) does not need to be stored separately.","pos":[0,505],"nodes":[{"content":"The common language runtime uses a stream-oriented design for cryptography.","pos":[0,75]},{"content":"The core of this design is <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph>.","pos":[76,152],"source":" The core of this design is <xref:System.Security.Cryptography.CryptoStream>."},{"content":"Any cryptographic objects that implement <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph> can be chained together with any objects that implement <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph>, so the streamed output from one object can be fed into the input of another object.","pos":[153,407],"source":" Any cryptographic objects that implement <xref:System.Security.Cryptography.CryptoStream> can be chained together with any objects that implement <xref:System.IO.Stream>, so the streamed output from one object can be fed into the input of another object."},{"content":"The intermediate result (the output from the first object) does not need to be stored separately.","pos":[408,505]}]}]},{"pos":[513,1206],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly by calling its <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method, which in turn calls its <xref:System.IDisposable> implementation. To dispose of the type directly, call its <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly by calling its <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method, which in turn calls its <xref:System.IDisposable> implementation. To dispose of the type directly, call its <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,691],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly by calling its <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream.Clear%2A&gt;</ph> method, which in turn calls its <ph id=\"ph2\">&lt;xref:System.IDisposable&gt;</ph> implementation.","pos":[63,303],"source":" When you have finished using the type, you should dispose of it either directly or indirectly by calling its <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method, which in turn calls its <xref:System.IDisposable> implementation."},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream.Clear%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[304,436],"source":" To dispose of the type directly, call its <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[437,544],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[545,678],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]},{"pos":[1213,1977],"content":"You should always explicitly close your <xref:System.Security.Cryptography.CryptoStream> object after you are done using it by calling the <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method.  Doing so flushes the underlying stream and causes all remaining blocks of data to be processed by the <xref:System.Security.Cryptography.CryptoStream> object.  However, if an exception occurs before you call the <xref:System.IO.Stream.Close%2A> method, the <xref:System.Security.Cryptography.CryptoStream> object might not be closed.  To ensure that the <xref:System.IO.Stream.Close%2A> method always gets called, place your call to the <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method within the `finally` block of a `try`/`catch` statement.","nodes":[{"content":"You should always explicitly close your <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph> object after you are done using it by calling the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CryptoStream.Clear%2A&gt;</ph> method.","pos":[0,204],"source":"You should always explicitly close your <xref:System.Security.Cryptography.CryptoStream> object after you are done using it by calling the <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method."},{"content":"Doing so flushes the underlying stream and causes all remaining blocks of data to be processed by the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph> object.","pos":[206,364],"source":"  Doing so flushes the underlying stream and causes all remaining blocks of data to be processed by the <xref:System.Security.Cryptography.CryptoStream> object."},{"content":"However, if an exception occurs before you call the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method, the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph> object might not be closed.","pos":[366,539],"source":"  However, if an exception occurs before you call the <xref:System.IO.Stream.Close%2A> method, the <xref:System.Security.Cryptography.CryptoStream> object might not be closed."},{"content":"To ensure that the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method always gets called, place your call to the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CryptoStream.Clear%2A&gt;</ph> method within the <ph id=\"ph3\">`finally`</ph> block of a <ph id=\"ph4\">`try`</ph><ph id=\"ph5\">/</ph><ph id=\"ph6\">`catch`</ph> statement.","pos":[541,764],"source":"  To ensure that the <xref:System.IO.Stream.Close%2A> method always gets called, place your call to the <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method within the `finally` block of a `try`/`catch` statement."}]}],"pos":[2273,4260],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> class with a target data stream, the transformation to use, and the mode of the stream.","nodes":[{"pos":[0,184],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;&lt;/xref&gt;</ph> class with a target data stream, the transformation to use, and the mode of the stream.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> class with a target data stream, the transformation to use, and the mode of the stream."}],"pos":[8490,8675],"yaml":true},{"content":"Any object that derives from <xref:System.IO.Stream> can be passed into the `stream` parameter. Any object that implements <xref:System.Security.Cryptography.ICryptoTransform> (such as <xref:System.Security.Cryptography.HashAlgorithm>) can be passed into the `transform` parameter.","nodes":[{"pos":[0,281],"content":"Any object that derives from <xref:System.IO.Stream> can be passed into the `stream` parameter. Any object that implements <xref:System.Security.Cryptography.ICryptoTransform> (such as <xref:System.Security.Cryptography.HashAlgorithm>) can be passed into the `transform` parameter.","nodes":[{"content":"Any object that derives from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> can be passed into the <ph id=\"ph2\">`stream`</ph> parameter.","pos":[0,95],"source":"Any object that derives from <xref:System.IO.Stream> can be passed into the `stream` parameter."},{"content":"Any object that implements <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ICryptoTransform&gt;</ph> (such as <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithm&gt;</ph>) can be passed into the <ph id=\"ph3\">`transform`</ph> parameter.","pos":[96,281],"source":" Any object that implements <xref:System.Security.Cryptography.ICryptoTransform> (such as <xref:System.Security.Cryptography.HashAlgorithm>) can be passed into the `transform` parameter."}]}],"pos":[8686,8968],"yaml":true,"extradata":"MT"},{"content":"The stream on which to perform the cryptographic transformation.","nodes":[{"pos":[0,64],"content":"The stream on which to perform the cryptographic transformation.","nodes":[{"content":"The stream on which to perform the cryptographic transformation.","pos":[0,64]}]}],"pos":[9228,9293],"yaml":true},{"content":"The cryptographic transformation that is to be performed on the stream.","nodes":[{"pos":[0,71],"content":"The cryptographic transformation that is to be performed on the stream.","nodes":[{"content":"The cryptographic transformation that is to be performed on the stream.","pos":[0,71]}]}],"pos":[9390,9462],"yaml":true},{"content":"One of the <xref href=\"System.Security.Cryptography.CryptoStreamMode\"></xref> values.","nodes":[{"pos":[0,85],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStreamMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Security.Cryptography.CryptoStreamMode\"></xref> values."}],"pos":[9554,9640],"yaml":true},{"content":"<code>stream</code> is invalid.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;stream&lt;/code&gt;</ph> is invalid.","source":"<code>stream</code> is invalid."}],"pos":[9809,9841],"yaml":true},{"content":"Gets a value indicating whether the current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> is readable.","nodes":[{"pos":[0,119],"content":"Gets a value indicating whether the current <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;&lt;/xref&gt;</ph> is readable.","source":"Gets a value indicating whether the current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> is readable."}],"pos":[12958,13078],"yaml":true},{"content":"`true` if the current stream is readable; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if the current stream is readable; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current stream is readable; otherwise, `false`."}],"pos":[13197,13261],"yaml":true},{"content":"Gets a value indicating whether you can seek within the current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref>.","nodes":[{"pos":[0,127],"content":"Gets a value indicating whether you can seek within the current <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a value indicating whether you can seek within the current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref>."}],"pos":[14711,14839],"yaml":true},{"content":"Seeking is not enabled in a <xref:System.Security.Cryptography.CryptoStream>, so this method always returns `false`.","nodes":[{"pos":[0,116],"content":"Seeking is not enabled in a <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph>, so this method always returns <ph id=\"ph2\">`false`</ph>.","source":"Seeking is not enabled in a <xref:System.Security.Cryptography.CryptoStream>, so this method always returns `false`."}],"pos":[14850,14967],"yaml":true,"extradata":"MT"},{"content":"Always `false`.","nodes":[{"pos":[0,15],"content":"Always <ph id=\"ph1\">`false`</ph>.","source":"Always `false`."}],"pos":[15086,15102],"yaml":true},{"content":"Gets a value indicating whether the current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> is writable.","nodes":[{"pos":[0,119],"content":"Gets a value indicating whether the current <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;&lt;/xref&gt;</ph> is writable.","source":"Gets a value indicating whether the current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> is writable."}],"pos":[16558,16678],"yaml":true},{"content":"`true` if the current stream is writable; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if the current stream is writable; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current stream is writable; otherwise, `false`."}],"pos":[16798,16862],"yaml":true},{"content":"Releases all resources used by the <xref href=\"System.Security.Cryptography.CryptoStream\"></xref>.","nodes":[{"pos":[0,98],"content":"Releases all resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;&lt;/xref&gt;</ph>.","source":"Releases all resources used by the <xref href=\"System.Security.Cryptography.CryptoStream\"></xref>."}],"pos":[18305,18404],"yaml":true},{"content":"This method wraps a call to the type's <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> implementation.  \n  \n Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.CryptoStream> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md)","nodes":[{"pos":[0,116],"content":"This method wraps a call to the type's <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> implementation.","nodes":[{"content":"This method wraps a call to the type's <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;</ph> implementation.","pos":[0,116],"source":"This method wraps a call to the type's <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> implementation."}]},{"pos":[123,385],"content":"Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.CryptoStream> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md)","nodes":[{"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph> to be reallocated for other purposes.","pos":[0,137],"source":"Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.CryptoStream> to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">`Dispose`</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept>","pos":[138,262],"source":" For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md)"}]}],"pos":[18415,18805],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,154],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> and optionally releases the managed resources."}],"pos":[20206,20361],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.CryptoStream> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,245],"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">`Finalize`</ph> method.","pos":[0,81],"source":"This method is called by the public `Dispose()` method and the `Finalize` method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the disposing parameter set to <ph id=\"ph3\">`true`</ph>.","pos":[82,185],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with disposing set to <ph id=\"ph3\">`false`</ph>.","pos":[186,245],"source":"`Finalize` invokes `Dispose` with disposing set to `false`."}]},{"pos":[252,497],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.CryptoStream> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph> references.","pos":[0,175],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.CryptoStream> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[176,245],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[20372,20874],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[21029,21132],"yaml":true},{"content":"Clears all buffers for the current stream and causes any buffered data to be written to the underlying device.","nodes":[{"pos":[0,110],"content":"Clears all buffers for the current stream and causes any buffered data to be written to the underlying device.","nodes":[{"content":"Clears all buffers for the current stream and causes any buffered data to be written to the underlying device.","pos":[0,110]}]}],"pos":[22574,22685],"yaml":true},{"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Security.Cryptography.CryptoStream.Flush%2A> or <xref:System.IO.Stream.Close%2A>. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  \n  \n> [!NOTE]\n>  You should call either the <xref:System.IO.Stream.Close%2A> method or the <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> method to complete flushing the buffer.","nodes":[{"pos":[0,617],"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Security.Cryptography.CryptoStream.Flush%2A> or <xref:System.IO.Stream.Close%2A>. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","nodes":[{"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream.Flush%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>.","pos":[0,179],"source":"Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Security.Cryptography.CryptoStream.Flush%2A> or <xref:System.IO.Stream.Close%2A>."},{"content":"Setting <ph id=\"ph1\">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.","pos":[180,346],"source":" Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed."},{"content":"This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.","pos":[347,471]},{"content":"This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","pos":[472,617]}]},{"pos":[625,817],"content":"[!NOTE]\n You should call either the <xref:System.IO.Stream.Close%2A> method or the <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> method to complete flushing the buffer.","leadings":["","> "],"nodes":[{"content":"You should call either the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method or the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A&gt;</ph> method to complete flushing the buffer.","pos":[9,190],"source":" You should call either the <xref:System.IO.Stream.Close%2A> method or the <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> method to complete flushing the buffer."}]}],"pos":[22696,23519],"yaml":true,"extradata":"MT"},{"content":"Clears all buffers for the current stream asynchronously, causes any buffered data to be written to the underlying device, and monitors cancellation requests.","nodes":[{"pos":[0,158],"content":"Clears all buffers for the current stream asynchronously, causes any buffered data to be written to the underlying device, and monitors cancellation requests.","nodes":[{"content":"Clears all buffers for the current stream asynchronously, causes any buffered data to be written to the underlying device, and monitors cancellation requests.","pos":[0,158]}]}],"pos":[25221,25380],"yaml":true},{"content":"You must preface your call to <xref:System.Security.Cryptography.CryptoStream.FlushAsync%2A> with the `await` (C#) or `Await` (Visual Basic) operator to suspend execution of the method until the task is complete. For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7).  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"pos":[0,359],"content":"You must preface your call to <xref:System.Security.Cryptography.CryptoStream.FlushAsync%2A> with the `await` (C#) or `Await` (Visual Basic) operator to suspend execution of the method until the task is complete. For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7).","nodes":[{"content":"You must preface your call to <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream.FlushAsync%2A&gt;</ph> with the <ph id=\"ph2\">`await`</ph> (C#) or <ph id=\"ph3\">`Await`</ph> (Visual Basic) operator to suspend execution of the method until the task is complete.","pos":[0,212],"source":"You must preface your call to <xref:System.Security.Cryptography.CryptoStream.FlushAsync%2A> with the `await` (C#) or `Await` (Visual Basic) operator to suspend execution of the method until the task is complete."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Programming with Async and Await<ept id=\"p1\">](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)</ept>.","pos":[213,359],"source":" For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)."}]},{"pos":[366,565],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."}]}],"pos":[25391,25961],"yaml":true,"extradata":"MT"},{"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"pos":[0,130],"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken.None\"&gt;&lt;/xref&gt;</ph>.","pos":[48,130],"source":" The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>."}]}],"pos":[26205,26336],"yaml":true},{"content":"A task that represents the asynchronous flush operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous flush operation.","nodes":[{"content":"A task that represents the asynchronous flush operation.","pos":[0,56]}]}],"pos":[26407,26464],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[26650,26680],"yaml":true},{"content":"Updates the underlying data source or repository with the current state of the buffer, then clears the buffer.","nodes":[{"pos":[0,110],"content":"Updates the underlying data source or repository with the current state of the buffer, then clears the buffer.","nodes":[{"content":"Updates the underlying data source or repository with the current state of the buffer, then clears the buffer.","pos":[0,110]}]}],"pos":[28102,28213],"yaml":true},{"content":"Calling the <xref:System.IO.Stream.Close%2A> method will call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>. If you do not call <xref:System.IO.Stream.Close%2A>, call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> to complete flushing the buffer. Call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> only when all stream activity is complete.","nodes":[{"pos":[0,405],"content":"Calling the <xref:System.IO.Stream.Close%2A> method will call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>. If you do not call <xref:System.IO.Stream.Close%2A>, call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> to complete flushing the buffer. Call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> only when all stream activity is complete.","nodes":[{"content":"Calling the <xref:System.IO.Stream.Close%2A> method will call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>. If you do not call <xref:System.IO.Stream.Close%2A>, call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> to complete flushing the buffer. Call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> only when all stream activity is complete.","pos":[0,405],"nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method will call <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A&gt;</ph>.","pos":[0,130],"source":"Calling the <xref:System.IO.Stream.Close%2A> method will call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>."},{"content":"If you do not call <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>, call <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A&gt;</ph> to complete flushing the buffer.","pos":[131,289],"source":" If you do not call <xref:System.IO.Stream.Close%2A>, call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> to complete flushing the buffer."},{"content":"Call <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A&gt;</ph> only when all stream activity is complete.","pos":[290,405],"source":" Call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> only when all stream activity is complete."}]}]}],"pos":[28224,28630],"yaml":true,"extradata":"MT"},{"content":"The key is corrupt which can cause invalid padding to the stream.","nodes":[{"pos":[0,65],"content":"The key is corrupt which can cause invalid padding to the stream.","nodes":[{"content":"The key is corrupt which can cause invalid padding to the stream.","pos":[0,65]}]}],"pos":[28937,29003],"yaml":true},{"content":"The current stream is not writable.  \n  \n -or-  \n  \n The final block has already been transformed.","nodes":[{"pos":[0,35],"content":"The current stream is not writable.","nodes":[{"content":"The current stream is not writable.","pos":[0,35]}]},{"pos":[42,46],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[53,98],"content":"The final block has already been transformed.","nodes":[{"content":"The final block has already been transformed.","pos":[0,45]}]}],"pos":[29105,29210],"yaml":true},{"content":"Gets a value indicating whether the final buffer block has been written to the underlying stream.","nodes":[{"pos":[0,97],"content":"Gets a value indicating whether the final buffer block has been written to the underlying stream.","nodes":[{"content":"Gets a value indicating whether the final buffer block has been written to the underlying stream.","pos":[0,97]}]}],"pos":[30658,30756],"yaml":true},{"content":"This property is set `true` when the <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> method is called.","nodes":[{"pos":[0,122],"content":"This property is set <ph id=\"ph1\">`true`</ph> when the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A&gt;</ph> method is called.","source":"This property is set `true` when the <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> method is called."}],"pos":[30767,30890],"yaml":true,"extradata":"MT"},{"content":"`true` if the final block has been flushed; otherwise, `false`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">`true`</ph> if the final block has been flushed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the final block has been flushed; otherwise, `false`."}],"pos":[31013,31079],"yaml":true},{"content":"Gets the length in bytes of the stream.","nodes":[{"pos":[0,39],"content":"Gets the length in bytes of the stream.","nodes":[{"content":"Gets the length in bytes of the stream.","pos":[0,39]}]}],"pos":[32536,32576],"yaml":true},{"content":"This property exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used.","nodes":[{"pos":[0,98],"content":"This property exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used.","nodes":[{"content":"This property exists only to support inheritance from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph>, and cannot be used.","pos":[0,98],"source":"This property exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used."}]}],"pos":[32587,32686],"yaml":true,"extradata":"MT"},{"content":"This property is not supported.","nodes":[{"pos":[0,31],"content":"This property is not supported.","nodes":[{"content":"This property is not supported.","pos":[0,31]}]}],"pos":[32802,32834],"yaml":true},{"content":"This property is not supported.","nodes":[{"pos":[0,31],"content":"This property is not supported.","nodes":[{"content":"This property is not supported.","pos":[0,31]}]}],"pos":[33012,33044],"yaml":true},{"content":"Gets or sets the position within the current stream.","nodes":[{"pos":[0,52],"content":"Gets or sets the position within the current stream.","nodes":[{"content":"Gets or sets the position within the current stream.","pos":[0,52]}]}],"pos":[34420,34473],"yaml":true},{"content":"This property exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used.","nodes":[{"pos":[0,98],"content":"This property exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used.","nodes":[{"content":"This property exists only to support inheritance from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph>, and cannot be used.","pos":[0,98],"source":"This property exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used."}]}],"pos":[34484,34583],"yaml":true,"extradata":"MT"},{"content":"This property is not supported.","nodes":[{"pos":[0,31],"content":"This property is not supported.","nodes":[{"content":"This property is not supported.","pos":[0,31]}]}],"pos":[34706,34738],"yaml":true},{"content":"This property is not supported.","nodes":[{"pos":[0,31],"content":"This property is not supported.","nodes":[{"content":"This property is not supported.","pos":[0,31]}]}],"pos":[34918,34950],"yaml":true},{"content":"Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.","nodes":[{"pos":[0,122],"content":"Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.","nodes":[{"content":"Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.","pos":[0,122]}]}],"pos":[36489,36612],"yaml":true},{"content":"An array of bytes. A maximum of <code>count</code> bytes are read from the current stream and stored in <code>buffer</code>.","nodes":[{"pos":[0,124],"content":"An array of bytes. A maximum of <code>count</code> bytes are read from the current stream and stored in <code>buffer</code>.","nodes":[{"content":"An array of bytes.","pos":[0,18]},{"content":"A maximum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> bytes are read from the current stream and stored in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[19,124],"source":" A maximum of <code>count</code> bytes are read from the current stream and stored in <code>buffer</code>."}]}],"pos":[36778,36903],"yaml":true},{"content":"The byte offset in <code>buffer</code> at which to begin storing the data read from the current stream.","nodes":[{"pos":[0,103],"content":"The byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin storing the data read from the current stream.","source":"The byte offset in <code>buffer</code> at which to begin storing the data read from the current stream."}],"pos":[36964,37068],"yaml":true},{"content":"The maximum number of bytes to be read from the current stream.","nodes":[{"pos":[0,63],"content":"The maximum number of bytes to be read from the current stream.","nodes":[{"content":"The maximum number of bytes to be read from the current stream.","pos":[0,63]}]}],"pos":[37128,37192],"yaml":true},{"content":"The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream has been reached.","nodes":[{"pos":[0,198],"content":"The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream has been reached.","nodes":[{"content":"The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream has been reached.","pos":[0,198],"nodes":[{"content":"The total number of bytes read into the buffer.","pos":[0,47]},{"content":"This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream has been reached.","pos":[48,198]}]}]}],"pos":[37248,37447],"yaml":true},{"content":"The <xref href=\"System.Security.Cryptography.CryptoStreamMode\"></xref> associated with current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> object does not match the underlying stream.  For example, this exception is thrown when using <xref href=\"System.Security.Cryptography.CryptoStreamMode.Read\"></xref> with an underlying stream that is write only.","nodes":[{"pos":[0,370],"content":"The <xref href=\"System.Security.Cryptography.CryptoStreamMode\"></xref> associated with current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> object does not match the underlying stream.  For example, this exception is thrown when using <xref href=\"System.Security.Cryptography.CryptoStreamMode.Read\"></xref> with an underlying stream that is write only.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStreamMode\"&gt;&lt;/xref&gt;</ph> associated with current <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;&lt;/xref&gt;</ph> object does not match the underlying stream.","pos":[0,202],"source":"The <xref href=\"System.Security.Cryptography.CryptoStreamMode\"></xref> associated with current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> object does not match the underlying stream."},{"content":"For example, this exception is thrown when using <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStreamMode.Read\"&gt;&lt;/xref&gt;</ph> with an underlying stream that is write only.","pos":[204,370],"source":"  For example, this exception is thrown when using <xref href=\"System.Security.Cryptography.CryptoStreamMode.Read\"></xref> with an underlying stream that is write only."}]}],"pos":[37623,37994],"yaml":true},{"content":"The <code>offset</code> parameter is less than zero.  \n  \n -or-  \n  \n The <code>count</code> parameter is less than zero.","nodes":[{"pos":[0,52],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero.","source":"The <code>offset</code> parameter is less than zero."},{"pos":[59,63],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[70,121],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero.","source":"The <code>count</code> parameter is less than zero."}],"pos":[38108,38236],"yaml":true},{"content":"Thesum of the <code>count</code> and <code>offset</code> parameters is longer than the length of the buffer.","nodes":[{"pos":[0,108],"content":"Thesum of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">offset</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters is longer than the length of the buffer.","source":"Thesum of the <code>count</code> and <code>offset</code> parameters is longer than the length of the buffer."}],"pos":[38330,38439],"yaml":true},{"content":"Reads a sequence of bytes from the current stream asynchronously, advances the position within the stream by the number of bytes read, and monitors cancellation requests.","nodes":[{"pos":[0,170],"content":"Reads a sequence of bytes from the current stream asynchronously, advances the position within the stream by the number of bytes read, and monitors cancellation requests.","nodes":[{"content":"Reads a sequence of bytes from the current stream asynchronously, advances the position within the stream by the number of bytes read, and monitors cancellation requests.","pos":[0,170]}]}],"pos":[40170,40341],"yaml":true},{"content":"You must preface your call to <xref:System.Security.Cryptography.CryptoStream.ReadAsync%2A> with the `await` (C#) or `Await` (Visual Basic) operator to suspend execution of the method until the task is complete. For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7).  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"pos":[0,358],"content":"You must preface your call to <xref:System.Security.Cryptography.CryptoStream.ReadAsync%2A> with the `await` (C#) or `Await` (Visual Basic) operator to suspend execution of the method until the task is complete. For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7).","nodes":[{"content":"You must preface your call to <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream.ReadAsync%2A&gt;</ph> with the <ph id=\"ph2\">`await`</ph> (C#) or <ph id=\"ph3\">`Await`</ph> (Visual Basic) operator to suspend execution of the method until the task is complete.","pos":[0,211],"source":"You must preface your call to <xref:System.Security.Cryptography.CryptoStream.ReadAsync%2A> with the `await` (C#) or `Await` (Visual Basic) operator to suspend execution of the method until the task is complete."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Programming with Async and Await<ept id=\"p1\">](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)</ept>.","pos":[212,358],"source":" For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)."}]},{"pos":[365,564],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."}]}],"pos":[40352,40921],"yaml":true,"extradata":"MT"},{"content":"The buffer to write the data into.","nodes":[{"pos":[0,34],"content":"The buffer to write the data into.","nodes":[{"content":"The buffer to write the data into.","pos":[0,34]}]}],"pos":[41175,41210],"yaml":true},{"content":"The byte offset in <code>buffer</code> at which to begin writing data from the stream.","nodes":[{"pos":[0,86],"content":"The byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing data from the stream.","source":"The byte offset in <code>buffer</code> at which to begin writing data from the stream."}],"pos":[41271,41358],"yaml":true},{"content":"The maximum number of bytes to read.","nodes":[{"pos":[0,36],"content":"The maximum number of bytes to read.","nodes":[{"content":"The maximum number of bytes to read.","pos":[0,36]}]}],"pos":[41418,41455],"yaml":true},{"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"pos":[0,130],"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken.None\"&gt;&lt;/xref&gt;</ph>.","pos":[48,130],"source":" The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>."}]}],"pos":[41549,41680],"yaml":true},{"content":"A task that represents the asynchronous read operation. The value of the task object's <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","nodes":[{"pos":[0,375],"content":"A task that represents the asynchronous read operation. The value of the task object's <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the task object's <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.","pos":[56,174],"source":" The value of the task object's <code>TResult</code> parameter contains the total number of bytes read into the buffer."},{"content":"The result can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","pos":[175,375]}]}],"pos":[41765,42141],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[42322,42353],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[42467,42522],"yaml":true},{"content":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,87],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length."}],"pos":[42616,42704],"yaml":true},{"content":"The stream does not support reading.","nodes":[{"pos":[0,36],"content":"The stream does not support reading.","nodes":[{"content":"The stream does not support reading.","pos":[0,36]}]}],"pos":[42806,42843],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[42949,42979],"yaml":true},{"content":"The stream is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The stream is currently in use by a previous read operation.","nodes":[{"content":"The stream is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[43089,43150],"yaml":true},{"content":"Sets the position within the current stream.","nodes":[{"pos":[0,44],"content":"Sets the position within the current stream.","nodes":[{"content":"Sets the position within the current stream.","pos":[0,44]}]}],"pos":[45465,45510],"yaml":true},{"content":"This method exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used.","nodes":[{"pos":[0,96],"content":"This method exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used.","nodes":[{"content":"This method exists only to support inheritance from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph>, and cannot be used.","pos":[0,96],"source":"This method exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used."}]}],"pos":[45521,45618],"yaml":true,"extradata":"MT"},{"content":"A byte offset relative to the <code>origin</code> parameter.","nodes":[{"pos":[0,60],"content":"A byte offset relative to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">origin</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A byte offset relative to the <code>origin</code> parameter."}],"pos":[45788,45849],"yaml":true},{"content":"A <xref href=\"System.IO.SeekOrigin\"></xref> object indicating the reference point used to obtain the new position.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.SeekOrigin\"&gt;&lt;/xref&gt;</ph> object indicating the reference point used to obtain the new position.","source":"A <xref href=\"System.IO.SeekOrigin\"></xref> object indicating the reference point used to obtain the new position."}],"pos":[45918,46033],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[46089,46119],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[46295,46325],"yaml":true},{"content":"Sets the length of the current stream.","nodes":[{"pos":[0,38],"content":"Sets the length of the current stream.","nodes":[{"content":"Sets the length of the current stream.","pos":[0,38]}]}],"pos":[47768,47807],"yaml":true},{"content":"This property exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used.","nodes":[{"pos":[0,98],"content":"This property exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used.","nodes":[{"content":"This property exists only to support inheritance from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph>, and cannot be used.","pos":[0,98],"source":"This property exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used."}]}],"pos":[47818,47917],"yaml":true,"extradata":"MT"},{"content":"The desired length of the current stream in bytes.","nodes":[{"pos":[0,50],"content":"The desired length of the current stream in bytes.","nodes":[{"content":"The desired length of the current stream in bytes.","pos":[0,50]}]}],"pos":[48061,48112],"yaml":true},{"content":"This property exists only to support inheritance from <xref href=\"System.IO.Stream\"></xref>, and cannot be used.","nodes":[{"pos":[0,112],"content":"This property exists only to support inheritance from <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph>, and cannot be used.","source":"This property exists only to support inheritance from <xref href=\"System.IO.Stream\"></xref>, and cannot be used."}],"pos":[48293,48406],"yaml":true},{"content":"Writes a sequence of bytes to the current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> and advances the current position within the stream by the number of bytes written.","nodes":[{"pos":[0,188],"content":"Writes a sequence of bytes to the current <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;&lt;/xref&gt;</ph> and advances the current position within the stream by the number of bytes written.","source":"Writes a sequence of bytes to the current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> and advances the current position within the stream by the number of bytes written."}],"pos":[49951,50140],"yaml":true},{"content":"An array of bytes. This method copies <code>count</code> bytes from <code>buffer</code> to the current stream.","nodes":[{"pos":[0,110],"content":"An array of bytes. This method copies <code>count</code> bytes from <code>buffer</code> to the current stream.","nodes":[{"content":"An array of bytes.","pos":[0,18]},{"content":"This method copies <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> bytes from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept> to the current stream.","pos":[19,110],"source":" This method copies <code>count</code> bytes from <code>buffer</code> to the current stream."}]}],"pos":[50308,50419],"yaml":true},{"content":"The byte offset in <code>buffer</code> at which to begin copying bytes to the current stream.","nodes":[{"pos":[0,93],"content":"The byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin copying bytes to the current stream.","source":"The byte offset in <code>buffer</code> at which to begin copying bytes to the current stream."}],"pos":[50480,50574],"yaml":true},{"content":"The number of bytes to be written to the current stream.","nodes":[{"pos":[0,56],"content":"The number of bytes to be written to the current stream.","nodes":[{"content":"The number of bytes to be written to the current stream.","pos":[0,56]}]}],"pos":[50634,50691],"yaml":true},{"content":"The <xref href=\"System.Security.Cryptography.CryptoStreamMode\"></xref> associated with current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> object does not match the underlying stream.  For example, this exception is thrown when using <xref href=\"System.Security.Cryptography.CryptoStreamMode.Write\"></xref> with an underlying stream that is read only.","nodes":[{"pos":[0,370],"content":"The <xref href=\"System.Security.Cryptography.CryptoStreamMode\"></xref> associated with current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> object does not match the underlying stream.  For example, this exception is thrown when using <xref href=\"System.Security.Cryptography.CryptoStreamMode.Write\"></xref> with an underlying stream that is read only.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStreamMode\"&gt;&lt;/xref&gt;</ph> associated with current <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;&lt;/xref&gt;</ph> object does not match the underlying stream.","pos":[0,202],"source":"The <xref href=\"System.Security.Cryptography.CryptoStreamMode\"></xref> associated with current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> object does not match the underlying stream."},{"content":"For example, this exception is thrown when using <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStreamMode.Write\"&gt;&lt;/xref&gt;</ph> with an underlying stream that is read only.","pos":[204,370],"source":"  For example, this exception is thrown when using <xref href=\"System.Security.Cryptography.CryptoStreamMode.Write\"></xref> with an underlying stream that is read only."}]}],"pos":[50868,51239],"yaml":true},{"content":"The <code>offset</code> parameter is less than zero.  \n  \n -or-  \n  \n The <code>count</code> parameter is less than zero.","nodes":[{"pos":[0,52],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero.","source":"The <code>offset</code> parameter is less than zero."},{"pos":[59,63],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[70,121],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero.","source":"The <code>count</code> parameter is less than zero."}],"pos":[51353,51481],"yaml":true},{"content":"The sum of the <code>count</code> and <code>offset</code> parameters is longer than the length of the buffer.","nodes":[{"pos":[0,109],"content":"The sum of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">offset</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters is longer than the length of the buffer.","source":"The sum of the <code>count</code> and <code>offset</code> parameters is longer than the length of the buffer."}],"pos":[51575,51685],"yaml":true},{"content":"Writes a sequence of bytes to the current stream asynchronously, advances the current position within the stream by the number of bytes written, and monitors cancellation requests.","nodes":[{"pos":[0,180],"content":"Writes a sequence of bytes to the current stream asynchronously, advances the current position within the stream by the number of bytes written, and monitors cancellation requests.","nodes":[{"content":"Writes a sequence of bytes to the current stream asynchronously, advances the current position within the stream by the number of bytes written, and monitors cancellation requests.","pos":[0,180]}]}],"pos":[53422,53603],"yaml":true},{"content":"You must preface your call to <xref:System.Security.Cryptography.CryptoStream.WriteAsync%2A> with the `await` (C#) or `Await` (Visual Basic) operator to suspend execution of the method until the task is complete. For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7).  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"pos":[0,359],"content":"You must preface your call to <xref:System.Security.Cryptography.CryptoStream.WriteAsync%2A> with the `await` (C#) or `Await` (Visual Basic) operator to suspend execution of the method until the task is complete. For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7).","nodes":[{"content":"You must preface your call to <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream.WriteAsync%2A&gt;</ph> with the <ph id=\"ph2\">`await`</ph> (C#) or <ph id=\"ph3\">`Await`</ph> (Visual Basic) operator to suspend execution of the method until the task is complete.","pos":[0,212],"source":"You must preface your call to <xref:System.Security.Cryptography.CryptoStream.WriteAsync%2A> with the `await` (C#) or `Await` (Visual Basic) operator to suspend execution of the method until the task is complete."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Programming with Async and Await<ept id=\"p1\">](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)</ept>.","pos":[213,359],"source":" For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)."}]},{"pos":[366,565],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."}]}],"pos":[53614,54184],"yaml":true,"extradata":"MT"},{"content":"The buffer to write data from.","nodes":[{"pos":[0,30],"content":"The buffer to write data from.","nodes":[{"content":"The buffer to write data from.","pos":[0,30]}]}],"pos":[54434,54465],"yaml":true},{"content":"The zero-based byte offset in <code>buffer</code> from which to begin writing bytes to the stream.","nodes":[{"pos":[0,98],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> from which to begin writing bytes to the stream.","source":"The zero-based byte offset in <code>buffer</code> from which to begin writing bytes to the stream."}],"pos":[54526,54625],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[54685,54723],"yaml":true},{"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"pos":[0,130],"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken.None\"&gt;&lt;/xref&gt;</ph>.","pos":[48,130],"source":" The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>."}]}],"pos":[54817,54948],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[55019,55076],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[55258,55289],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[55403,55458],"yaml":true},{"content":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,87],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length."}],"pos":[55552,55640],"yaml":true},{"content":"The stream does not support writing.","nodes":[{"pos":[0,36],"content":"The stream does not support writing.","nodes":[{"content":"The stream does not support writing.","pos":[0,36]}]}],"pos":[55742,55779],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[55885,55915],"yaml":true},{"content":"The stream is currently in use by a previous write operation.","nodes":[{"pos":[0,61],"content":"The stream is currently in use by a previous write operation.","nodes":[{"content":"The stream is currently in use by a previous write operation.","pos":[0,61]}]}],"pos":[56025,56087],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.CryptoStream\n  commentId: T:System.Security.Cryptography.CryptoStream\n  id: CryptoStream\n  children:\n  - System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)\n  - System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode,System.Boolean)\n  - System.Security.Cryptography.CryptoStream.CanRead\n  - System.Security.Cryptography.CryptoStream.CanSeek\n  - System.Security.Cryptography.CryptoStream.CanWrite\n  - System.Security.Cryptography.CryptoStream.Clear\n  - System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)\n  - System.Security.Cryptography.CryptoStream.Flush\n  - System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)\n  - System.Security.Cryptography.CryptoStream.FlushFinalBlock\n  - System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock\n  - System.Security.Cryptography.CryptoStream.Length\n  - System.Security.Cryptography.CryptoStream.Position\n  - System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.Security.Cryptography.CryptoStream.ReadByte\n  - System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.Security.Cryptography.CryptoStream.SetLength(System.Int64)\n  - System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.Security.Cryptography.CryptoStream.WriteByte(System.Byte)\n  langs:\n  - csharp\n  name: CryptoStream\n  nameWithType: CryptoStream\n  fullName: System.Security.Cryptography.CryptoStream\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Defines a stream that links data streams to cryptographic transformations.\n  remarks: \"The common language runtime uses a stream-oriented design for cryptography. The core of this design is <xref:System.Security.Cryptography.CryptoStream>. Any cryptographic objects that implement <xref:System.Security.Cryptography.CryptoStream> can be chained together with any objects that implement <xref:System.IO.Stream>, so the streamed output from one object can be fed into the input of another object. The intermediate result (the output from the first object) does not need to be stored separately.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly by calling its <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method, which in turn calls its <xref:System.IDisposable> implementation. To dispose of the type directly, call its <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n You should always explicitly close your <xref:System.Security.Cryptography.CryptoStream> object after you are done using it by calling the <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method.  Doing so flushes the underlying stream and causes all remaining blocks of data to be processed by the <xref:System.Security.Cryptography.CryptoStream> object.  However, if an exception occurs before you call the <xref:System.IO.Stream.Close%2A> method, the <xref:System.Security.Cryptography.CryptoStream> object might not be closed.  To ensure that the <xref:System.IO.Stream.Close%2A> method always gets called, place your call to the <xref:System.Security.Cryptography.CryptoStream.Clear%2A> method within the `finally` block of a `try`/`catch` statement.\"\n  example:\n  - \"The following example demonstrates how to use a <xref:System.Security.Cryptography.CryptoStream> to encrypt a string. This method uses <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>).  \\n  \\n [!code-csharp[Cryptography.Rijndael.Create.File#1](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.rijndael.create.file/cs/fileexample.cs#1)]\\n [!code-vb[Cryptography.Rijndael.Create.File#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.rijndael.create.file/vb/fileexample.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class CryptoStream : System.IO.Stream\n  inheritance:\n  - System.Object\n  - System.IO.Stream\n  implements: []\n  inheritedMembers:\n  - System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Stream.CanTimeout\n  - System.IO.Stream.Close\n  - System.IO.Stream.CopyTo(System.IO.Stream)\n  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.CreateWaitHandle\n  - System.IO.Stream.Dispose\n  - System.IO.Stream.EndRead(System.IAsyncResult)\n  - System.IO.Stream.EndWrite(System.IAsyncResult)\n  - System.IO.Stream.FlushAsync\n  - System.IO.Stream.Null\n  - System.IO.Stream.ObjectInvariant\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadTimeout\n  - System.IO.Stream.Synchronized(System.IO.Stream)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteTimeout\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)\n  commentId: M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)\n  id: '#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)'\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: CryptoStream(Stream, ICryptoTransform, CryptoStreamMode)\n  nameWithType: CryptoStream.CryptoStream(Stream, ICryptoTransform, CryptoStreamMode)\n  fullName: CryptoStream.CryptoStream(Stream, ICryptoTransform, CryptoStreamMode)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> class with a target data stream, the transformation to use, and the mode of the stream.\n  remarks: Any object that derives from <xref:System.IO.Stream> can be passed into the `stream` parameter. Any object that implements <xref:System.Security.Cryptography.ICryptoTransform> (such as <xref:System.Security.Cryptography.HashAlgorithm>) can be passed into the `transform` parameter.\n  syntax:\n    content: public CryptoStream (System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream on which to perform the cryptographic transformation.\n    - id: transform\n      type: System.Security.Cryptography.ICryptoTransform\n      description: The cryptographic transformation that is to be performed on the stream.\n    - id: mode\n      type: System.Security.Cryptography.CryptoStreamMode\n      description: One of the <xref href=\"System.Security.Cryptography.CryptoStreamMode\"></xref> values.\n  overload: System.Security.Cryptography.CryptoStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>stream</code> is invalid.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode,System.Boolean)\n  commentId: M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode,System.Boolean)\n  id: '#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode,System.Boolean)'\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: CryptoStream(Stream, ICryptoTransform, CryptoStreamMode, Boolean)\n  nameWithType: CryptoStream.CryptoStream(Stream, ICryptoTransform, CryptoStreamMode, Boolean)\n  fullName: CryptoStream.CryptoStream(Stream, ICryptoTransform, CryptoStreamMode, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public CryptoStream (System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode, bool leaveOpen);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: ''\n    - id: transform\n      type: System.Security.Cryptography.ICryptoTransform\n      description: ''\n    - id: mode\n      type: System.Security.Cryptography.CryptoStreamMode\n      description: ''\n    - id: leaveOpen\n      type: System.Boolean\n      description: ''\n  overload: System.Security.Cryptography.CryptoStream.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.CanRead\n  commentId: P:System.Security.Cryptography.CryptoStream.CanRead\n  id: CanRead\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: CryptoStream.CanRead\n  fullName: CryptoStream.CanRead\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> is readable.\n  syntax:\n    content: public override bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current stream is readable; otherwise, `false`.'\n  overload: System.Security.Cryptography.CryptoStream.CanRead*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.CanSeek\n  commentId: P:System.Security.Cryptography.CryptoStream.CanSeek\n  id: CanSeek\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: CanSeek\n  nameWithType: CryptoStream.CanSeek\n  fullName: CryptoStream.CanSeek\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether you can seek within the current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref>.\n  remarks: Seeking is not enabled in a <xref:System.Security.Cryptography.CryptoStream>, so this method always returns `false`.\n  syntax:\n    content: public override bool CanSeek { get; }\n    return:\n      type: System.Boolean\n      description: Always `false`.\n  overload: System.Security.Cryptography.CryptoStream.CanSeek*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.CanWrite\n  commentId: P:System.Security.Cryptography.CryptoStream.CanWrite\n  id: CanWrite\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: CryptoStream.CanWrite\n  fullName: CryptoStream.CanWrite\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> is writable.\n  syntax:\n    content: public override bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current stream is writable; otherwise, `false`.'\n  overload: System.Security.Cryptography.CryptoStream.CanWrite*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.Clear\n  commentId: M:System.Security.Cryptography.CryptoStream.Clear\n  id: Clear\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: CryptoStream.Clear()\n  fullName: CryptoStream.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the <xref href=\"System.Security.Cryptography.CryptoStream\"></xref>.\n  remarks: \"This method wraps a call to the type's <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> implementation.  \\n  \\n Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.CryptoStream> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md)\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Security.Cryptography.CryptoStream.Clear*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: CryptoStream.Dispose(Boolean)\n  fullName: CryptoStream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.CryptoStream> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Security.Cryptography.CryptoStream.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.Flush\n  commentId: M:System.Security.Cryptography.CryptoStream.Flush\n  id: Flush\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: CryptoStream.Flush()\n  fullName: CryptoStream.Flush()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Clears all buffers for the current stream and causes any buffered data to be written to the underlying device.\n  remarks: \"Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Security.Cryptography.CryptoStream.Flush%2A> or <xref:System.IO.Stream.Close%2A>. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  \\n  \\n> [!NOTE]\\n>  You should call either the <xref:System.IO.Stream.Close%2A> method or the <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> method to complete flushing the buffer.\"\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: System.Security.Cryptography.CryptoStream.Flush*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)\n  commentId: M:System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)\n  id: FlushAsync(System.Threading.CancellationToken)\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: FlushAsync(CancellationToken)\n  nameWithType: CryptoStream.FlushAsync(CancellationToken)\n  fullName: CryptoStream.FlushAsync(CancellationToken)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Clears all buffers for the current stream asynchronously, causes any buffered data to be written to the underlying device, and monitors cancellation requests.\n  remarks: \"You must preface your call to <xref:System.Security.Cryptography.CryptoStream.FlushAsync%2A> with the `await` (C#) or `Await` (Visual Basic) operator to suspend execution of the method until the task is complete. For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7).  \\n  \\n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.\"\n  syntax:\n    content: public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous flush operation.\n  overload: System.Security.Cryptography.CryptoStream.FlushAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock\n  commentId: M:System.Security.Cryptography.CryptoStream.FlushFinalBlock\n  id: FlushFinalBlock\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: FlushFinalBlock()\n  nameWithType: CryptoStream.FlushFinalBlock()\n  fullName: CryptoStream.FlushFinalBlock()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Updates the underlying data source or repository with the current state of the buffer, then clears the buffer.\n  remarks: Calling the <xref:System.IO.Stream.Close%2A> method will call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>. If you do not call <xref:System.IO.Stream.Close%2A>, call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> to complete flushing the buffer. Call <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> only when all stream activity is complete.\n  syntax:\n    content: public void FlushFinalBlock ();\n    parameters: []\n  overload: System.Security.Cryptography.CryptoStream.FlushFinalBlock*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key is corrupt which can cause invalid padding to the stream.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The current stream is not writable.  \\n  \\n -or-  \\n  \\n The final block has already been transformed.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock\n  commentId: P:System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock\n  id: HasFlushedFinalBlock\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: HasFlushedFinalBlock\n  nameWithType: CryptoStream.HasFlushedFinalBlock\n  fullName: CryptoStream.HasFlushedFinalBlock\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the final buffer block has been written to the underlying stream.\n  remarks: This property is set `true` when the <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> method is called.\n  syntax:\n    content: public bool HasFlushedFinalBlock { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the final block has been flushed; otherwise, `false`.'\n  overload: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.Length\n  commentId: P:System.Security.Cryptography.CryptoStream.Length\n  id: Length\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: Length\n  nameWithType: CryptoStream.Length\n  fullName: CryptoStream.Length\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets the length in bytes of the stream.\n  remarks: This property exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used.\n  syntax:\n    content: public override long Length { get; }\n    return:\n      type: System.Int64\n      description: This property is not supported.\n  overload: System.Security.Cryptography.CryptoStream.Length*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This property is not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.Position\n  commentId: P:System.Security.Cryptography.CryptoStream.Position\n  id: Position\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: Position\n  nameWithType: CryptoStream.Position\n  fullName: CryptoStream.Position\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the position within the current stream.\n  remarks: This property exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used.\n  syntax:\n    content: public override long Position { get; set; }\n    return:\n      type: System.Int64\n      description: This property is not supported.\n  overload: System.Security.Cryptography.CryptoStream.Position*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This property is not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: CryptoStream.Read(Byte[], Int32, Int32)\n  fullName: CryptoStream.Read(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.\n  syntax:\n    content: public override int Read (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array of bytes. A maximum of <code>count</code> bytes are read from the current stream and stored in <code>buffer</code>.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in <code>buffer</code> at which to begin storing the data read from the current stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to be read from the current stream.\n    return:\n      type: System.Int32\n      description: The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream has been reached.\n  overload: System.Security.Cryptography.CryptoStream.Read*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Security.Cryptography.CryptoStreamMode\"></xref> associated with current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> object does not match the underlying stream.  For example, this exception is thrown when using <xref href=\"System.Security.Cryptography.CryptoStreamMode.Read\"></xref> with an underlying stream that is write only.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>offset</code> parameter is less than zero.  \\n  \\n -or-  \\n  \\n The <code>count</code> parameter is less than zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Thesum of the <code>count</code> and <code>offset</code> parameters is longer than the length of the buffer.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: CryptoStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: CryptoStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Reads a sequence of bytes from the current stream asynchronously, advances the position within the stream by the number of bytes read, and monitors cancellation requests.\n  remarks: \"You must preface your call to <xref:System.Security.Cryptography.CryptoStream.ReadAsync%2A> with the `await` (C#) or `Await` (Visual Basic) operator to suspend execution of the method until the task is complete. For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7).  \\n  \\n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.\"\n  syntax:\n    content: public override System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write the data into.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in <code>buffer</code> at which to begin writing data from the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: A task that represents the asynchronous read operation. The value of the task object's <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.\n  overload: System.Security.Cryptography.CryptoStream.ReadAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The stream is currently in use by a previous read operation.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.ReadByte\n  commentId: M:System.Security.Cryptography.CryptoStream.ReadByte\n  id: ReadByte\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: ReadByte()\n  nameWithType: CryptoStream.ReadByte()\n  fullName: CryptoStream.ReadByte()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override int ReadByte ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Security.Cryptography.CryptoStream.ReadByte*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)\n  commentId: M:System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: CryptoStream.Seek(Int64, SeekOrigin)\n  fullName: CryptoStream.Seek(Int64, SeekOrigin)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Sets the position within the current stream.\n  remarks: This method exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used.\n  syntax:\n    content: public override long Seek (long offset, System.IO.SeekOrigin origin);\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: A byte offset relative to the <code>origin</code> parameter.\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: A <xref href=\"System.IO.SeekOrigin\"></xref> object indicating the reference point used to obtain the new position.\n    return:\n      type: System.Int64\n      description: This method is not supported.\n  overload: System.Security.Cryptography.CryptoStream.Seek*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)\n  commentId: M:System.Security.Cryptography.CryptoStream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: SetLength(Int64)\n  nameWithType: CryptoStream.SetLength(Int64)\n  fullName: CryptoStream.SetLength(Int64)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Sets the length of the current stream.\n  remarks: This property exists only to support inheritance from <xref:System.IO.Stream>, and cannot be used.\n  syntax:\n    content: public override void SetLength (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The desired length of the current stream in bytes.\n  overload: System.Security.Cryptography.CryptoStream.SetLength*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This property exists only to support inheritance from <xref href=\"System.IO.Stream\"></xref>, and cannot be used.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: CryptoStream.Write(Byte[], Int32, Int32)\n  fullName: CryptoStream.Write(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Writes a sequence of bytes to the current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> and advances the current position within the stream by the number of bytes written.\n  syntax:\n    content: public override void Write (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array of bytes. This method copies <code>count</code> bytes from <code>buffer</code> to the current stream.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in <code>buffer</code> at which to begin copying bytes to the current stream.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to be written to the current stream.\n  overload: System.Security.Cryptography.CryptoStream.Write*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Security.Cryptography.CryptoStreamMode\"></xref> associated with current <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> object does not match the underlying stream.  For example, this exception is thrown when using <xref href=\"System.Security.Cryptography.CryptoStreamMode.Write\"></xref> with an underlying stream that is read only.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>offset</code> parameter is less than zero.  \\n  \\n -or-  \\n  \\n The <code>count</code> parameter is less than zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of the <code>count</code> and <code>offset</code> parameters is longer than the length of the buffer.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: CryptoStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: CryptoStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Writes a sequence of bytes to the current stream asynchronously, advances the current position within the stream by the number of bytes written, and monitors cancellation requests.\n  remarks: \"You must preface your call to <xref:System.Security.Cryptography.CryptoStream.WriteAsync%2A> with the `await` (C#) or `Await` (Visual Basic) operator to suspend execution of the method until the task is complete. For more information, see [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7).  \\n  \\n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.\"\n  syntax:\n    content: public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write data from.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>buffer</code> from which to begin writing bytes to the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.Security.Cryptography.CryptoStream.WriteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The stream is currently in use by a previous write operation.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.CryptoStream.WriteByte(System.Byte)\n  commentId: M:System.Security.Cryptography.CryptoStream.WriteByte(System.Byte)\n  id: WriteByte(System.Byte)\n  parent: System.Security.Cryptography.CryptoStream\n  langs:\n  - csharp\n  name: WriteByte(Byte)\n  nameWithType: CryptoStream.WriteByte(Byte)\n  fullName: CryptoStream.WriteByte(Byte)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void WriteByte (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: ''\n  overload: System.Security.Cryptography.CryptoStream.WriteByte*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\nreferences:\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: CryptoStream(Stream, ICryptoTransform, CryptoStreamMode)\n  nameWithType: CryptoStream.CryptoStream(Stream, ICryptoTransform, CryptoStreamMode)\n  fullName: CryptoStream.CryptoStream(Stream, ICryptoTransform, CryptoStreamMode)\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n- uid: System.Security.Cryptography.CryptoStreamMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptoStreamMode\n  nameWithType: CryptoStreamMode\n  fullName: System.Security.Cryptography.CryptoStreamMode\n- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode,System.Boolean)\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: CryptoStream(Stream, ICryptoTransform, CryptoStreamMode, Boolean)\n  nameWithType: CryptoStream.CryptoStream(Stream, ICryptoTransform, CryptoStreamMode, Boolean)\n  fullName: CryptoStream.CryptoStream(Stream, ICryptoTransform, CryptoStreamMode, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.CryptoStream.CanRead\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: CanRead\n  nameWithType: CryptoStream.CanRead\n  fullName: CryptoStream.CanRead\n- uid: System.Security.Cryptography.CryptoStream.CanSeek\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: CryptoStream.CanSeek\n  fullName: CryptoStream.CanSeek\n- uid: System.Security.Cryptography.CryptoStream.CanWrite\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: CryptoStream.CanWrite\n  fullName: CryptoStream.CanWrite\n- uid: System.Security.Cryptography.CryptoStream.Clear\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Clear()\n  nameWithType: CryptoStream.Clear()\n  fullName: CryptoStream.Clear()\n- uid: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: CryptoStream.Dispose(Boolean)\n  fullName: CryptoStream.Dispose(Boolean)\n- uid: System.Security.Cryptography.CryptoStream.Flush\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Flush()\n  nameWithType: CryptoStream.Flush()\n  fullName: CryptoStream.Flush()\n- uid: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: FlushAsync(CancellationToken)\n  nameWithType: CryptoStream.FlushAsync(CancellationToken)\n  fullName: CryptoStream.FlushAsync(CancellationToken)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: FlushFinalBlock()\n  nameWithType: CryptoStream.FlushFinalBlock()\n  fullName: CryptoStream.FlushFinalBlock()\n- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: HasFlushedFinalBlock\n  nameWithType: CryptoStream.HasFlushedFinalBlock\n  fullName: CryptoStream.HasFlushedFinalBlock\n- uid: System.Security.Cryptography.CryptoStream.Length\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Length\n  nameWithType: CryptoStream.Length\n  fullName: CryptoStream.Length\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Security.Cryptography.CryptoStream.Position\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Position\n  nameWithType: CryptoStream.Position\n  fullName: CryptoStream.Position\n- uid: System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: CryptoStream.Read(Byte[], Int32, Int32)\n  fullName: CryptoStream.Read(Byte[], Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: CryptoStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: CryptoStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Int32>\n  nameWithType: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Security.Cryptography.CryptoStream.ReadByte\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: ReadByte()\n  nameWithType: CryptoStream.ReadByte()\n  fullName: CryptoStream.ReadByte()\n- uid: System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: CryptoStream.Seek(Int64, SeekOrigin)\n  fullName: CryptoStream.Seek(Int64, SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: false\n  name: SeekOrigin\n  nameWithType: SeekOrigin\n  fullName: System.IO.SeekOrigin\n- uid: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: CryptoStream.SetLength(Int64)\n  fullName: CryptoStream.SetLength(Int64)\n- uid: System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: CryptoStream.Write(Byte[], Int32, Int32)\n  fullName: CryptoStream.Write(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: CryptoStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: CryptoStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.Security.Cryptography.CryptoStream.WriteByte(System.Byte)\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: WriteByte(Byte)\n  nameWithType: CryptoStream.WriteByte(Byte)\n  fullName: CryptoStream.WriteByte(Byte)\n- uid: System.Security.Cryptography.CryptoStream.#ctor*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: CryptoStream\n  nameWithType: CryptoStream.CryptoStream\n  fullName: CryptoStream.CryptoStream\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.CanRead*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: CanRead\n  nameWithType: CryptoStream.CanRead\n  fullName: CryptoStream.CanRead\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.CanSeek*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: CryptoStream.CanSeek\n  fullName: CryptoStream.CanSeek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.CanWrite*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: CryptoStream.CanWrite\n  fullName: CryptoStream.CanWrite\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.Clear*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Clear\n  nameWithType: CryptoStream.Clear\n  fullName: CryptoStream.Clear\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.Dispose*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Dispose\n  nameWithType: CryptoStream.Dispose\n  fullName: CryptoStream.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.Flush*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Flush\n  nameWithType: CryptoStream.Flush\n  fullName: CryptoStream.Flush\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.FlushAsync*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: FlushAsync\n  nameWithType: CryptoStream.FlushAsync\n  fullName: CryptoStream.FlushAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: FlushFinalBlock\n  nameWithType: CryptoStream.FlushFinalBlock\n  fullName: CryptoStream.FlushFinalBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: HasFlushedFinalBlock\n  nameWithType: CryptoStream.HasFlushedFinalBlock\n  fullName: CryptoStream.HasFlushedFinalBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.Length*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Length\n  nameWithType: CryptoStream.Length\n  fullName: CryptoStream.Length\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.Position*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Position\n  nameWithType: CryptoStream.Position\n  fullName: CryptoStream.Position\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.Read*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Read\n  nameWithType: CryptoStream.Read\n  fullName: CryptoStream.Read\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.ReadAsync*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: ReadAsync\n  nameWithType: CryptoStream.ReadAsync\n  fullName: CryptoStream.ReadAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.ReadByte*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: ReadByte\n  nameWithType: CryptoStream.ReadByte\n  fullName: CryptoStream.ReadByte\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.Seek*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Seek\n  nameWithType: CryptoStream.Seek\n  fullName: CryptoStream.Seek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.SetLength*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: SetLength\n  nameWithType: CryptoStream.SetLength\n  fullName: CryptoStream.SetLength\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.Write*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: Write\n  nameWithType: CryptoStream.Write\n  fullName: CryptoStream.Write\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.WriteAsync*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: WriteAsync\n  nameWithType: CryptoStream.WriteAsync\n  fullName: CryptoStream.WriteAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Security.Cryptography.CryptoStream.WriteByte*\n  parent: System.Security.Cryptography.CryptoStream\n  isExternal: false\n  name: WriteByte\n  nameWithType: CryptoStream.WriteByte\n  fullName: CryptoStream.WriteByte\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/CryptoStream.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Stream\n  isExternal: false\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Stream\n  isExternal: false\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.Stream.CanTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: Stream.CanTimeout\n  fullName: Stream.CanTimeout\n- uid: System.IO.Stream.Close\n  parent: System.IO.Stream\n  isExternal: false\n  name: Close()\n  nameWithType: Stream.Close()\n  fullName: Stream.Close()\n- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream, Int32)\n  nameWithType: Stream.CopyTo(Stream, Int32)\n  fullName: Stream.CopyTo(Stream, Int32)\n- uid: System.IO.Stream.CopyTo(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream)\n  nameWithType: Stream.CopyTo(Stream)\n  fullName: Stream.CopyTo(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream)\n  nameWithType: Stream.CopyToAsync(Stream)\n  fullName: Stream.CopyToAsync(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32)\n  nameWithType: Stream.CopyToAsync(Stream, Int32)\n  fullName: Stream.CopyToAsync(Stream, Int32)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n- uid: System.IO.Stream.CreateWaitHandle\n  parent: System.IO.Stream\n  isExternal: false\n  name: CreateWaitHandle()\n  nameWithType: Stream.CreateWaitHandle()\n  fullName: Stream.CreateWaitHandle()\n- uid: System.IO.Stream.Dispose\n  parent: System.IO.Stream\n  isExternal: false\n  name: Dispose()\n  nameWithType: Stream.Dispose()\n  fullName: Stream.Dispose()\n- uid: System.IO.Stream.EndRead(System.IAsyncResult)\n  parent: System.IO.Stream\n  isExternal: false\n  name: EndRead(IAsyncResult)\n  nameWithType: Stream.EndRead(IAsyncResult)\n  fullName: Stream.EndRead(IAsyncResult)\n- uid: System.IO.Stream.EndWrite(System.IAsyncResult)\n  parent: System.IO.Stream\n  isExternal: false\n  name: EndWrite(IAsyncResult)\n  nameWithType: Stream.EndWrite(IAsyncResult)\n  fullName: Stream.EndWrite(IAsyncResult)\n- uid: System.IO.Stream.FlushAsync\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync()\n  nameWithType: Stream.FlushAsync()\n  fullName: Stream.FlushAsync()\n- uid: System.IO.Stream.Null\n  parent: System.IO.Stream\n  isExternal: false\n  name: \"Null\"\n  nameWithType: Stream.Null\n  fullName: Stream.Null\n- uid: System.IO.Stream.ObjectInvariant\n  parent: System.IO.Stream\n  isExternal: false\n  name: ObjectInvariant()\n  nameWithType: Stream.ObjectInvariant()\n  fullName: Stream.ObjectInvariant()\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.ReadTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: Stream.ReadTimeout\n  fullName: Stream.ReadTimeout\n- uid: System.IO.Stream.Synchronized(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Synchronized(Stream)\n  nameWithType: Stream.Synchronized(Stream)\n  fullName: Stream.Synchronized(Stream)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.WriteTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: Stream.WriteTimeout\n  fullName: Stream.WriteTimeout\n"}