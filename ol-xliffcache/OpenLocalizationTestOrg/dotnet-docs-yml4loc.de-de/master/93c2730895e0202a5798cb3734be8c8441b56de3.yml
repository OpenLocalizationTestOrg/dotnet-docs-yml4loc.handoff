### YamlMime:ManagedReference
items:
- uid: System.Numerics.Complex
  commentId: T:System.Numerics.Complex
  id: Complex
  children:
  - System.Numerics.Complex.#ctor(System.Double,System.Double)
  - System.Numerics.Complex.Abs(System.Numerics.Complex)
  - System.Numerics.Complex.Acos(System.Numerics.Complex)
  - System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Asin(System.Numerics.Complex)
  - System.Numerics.Complex.Atan(System.Numerics.Complex)
  - System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  - System.Numerics.Complex.Cos(System.Numerics.Complex)
  - System.Numerics.Complex.Cosh(System.Numerics.Complex)
  - System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Equals(System.Numerics.Complex)
  - System.Numerics.Complex.Equals(System.Object)
  - System.Numerics.Complex.Exp(System.Numerics.Complex)
  - System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  - System.Numerics.Complex.GetHashCode
  - System.Numerics.Complex.Imaginary
  - System.Numerics.Complex.ImaginaryOne
  - System.Numerics.Complex.Log(System.Numerics.Complex)
  - System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  - System.Numerics.Complex.Log10(System.Numerics.Complex)
  - System.Numerics.Complex.Magnitude
  - System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Negate(System.Numerics.Complex)
  - System.Numerics.Complex.One
  - System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Explicit(System.Decimal to System.Numerics.Complex)
  - System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger to System.Numerics.Complex)
  - System.Numerics.Complex.op_Implicit(System.UInt64 to System.Numerics.Complex)
  - System.Numerics.Complex.op_Implicit(System.UInt32 to System.Numerics.Complex)
  - System.Numerics.Complex.op_Implicit(System.UInt16 to System.Numerics.Complex)
  - System.Numerics.Complex.op_Implicit(System.Single to System.Numerics.Complex)
  - System.Numerics.Complex.op_Implicit(System.SByte to System.Numerics.Complex)
  - System.Numerics.Complex.op_Implicit(System.Byte to System.Numerics.Complex)
  - System.Numerics.Complex.op_Implicit(System.Int32 to System.Numerics.Complex)
  - System.Numerics.Complex.op_Implicit(System.Int16 to System.Numerics.Complex)
  - System.Numerics.Complex.op_Implicit(System.Double to System.Numerics.Complex)
  - System.Numerics.Complex.op_Implicit(System.Int64 to System.Numerics.Complex)
  - System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  - System.Numerics.Complex.Phase
  - System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  - System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Real
  - System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  - System.Numerics.Complex.Sin(System.Numerics.Complex)
  - System.Numerics.Complex.Sinh(System.Numerics.Complex)
  - System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  - System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Tan(System.Numerics.Complex)
  - System.Numerics.Complex.Tanh(System.Numerics.Complex)
  - System.Numerics.Complex.ToString
  - System.Numerics.Complex.ToString(System.IFormatProvider)
  - System.Numerics.Complex.ToString(System.String)
  - System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  - System.Numerics.Complex.Zero
  langs:
  - csharp
  name: Complex
  nameWithType: Complex
  fullName: System.Numerics.Complex
  type: Struct
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Represents a complex number.
  remarks: "A complex number is a number that comprises a real number part and an imaginary number part. A complex number z is usually written in the form z = x + yi, where *x* and *y* are real numbers, and *i* is the imaginary unit that has the property *i*<sup>2</sup> = -1. The real part of the complex number is represented by *x*, and the imaginary part of the complex number is represented by *y*.  \n  \n The <xref:System.Numerics.Complex> type uses the Cartesian coordinate system (real, imaginary) when instantiating and manipulating complex numbers. A complex number can be represented as a point in a two-dimensional coordinate system, which is known as the complex plane. The real part of the complex number is positioned on the x-axis (the horizontal axis), and the imaginary part is positioned on the y-axis (the vertical axis).  \n  \n Any point in the complex plane can also be expressed based on its absolute value, by using the polar coordinate system., In polar coordinates, a point is characterized by two numbers:  \n  \n-   Its magnitude, which is the distance of the point from the origin (that is, 0,0, or the point at which the x-axis and the y-axis intersect).  \n  \n-   Its phase, which is the angle between the real axis and the line drawn from the origin to the point.  \n  \n## Instantiating a Complex Number  \n You can assign a value to a complex number in one of the following ways:  \n  \n-   By passing two <xref:System.Double> values to its constructor. The first value represents the real part of the complex number, and the second value represents its imaginary part. These values represent the position of the complex number in the two-dimensional Cartesian coordinate system.  \n  \n-   By calling the static (`Shared` in Visual Basic) <xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=fullName> method to create a complex number from its polar coordinates.  \n  \n-   By assigning a <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Single>, or <xref:System.Double> value to a <xref:System.Numerics.Complex> object. The value becomes the real part of the complex number, and its imaginary part equals 0.  \n  \n-   By casting (in C#) or converting (in Visual Basic) a <xref:System.Decimal> or <xref:System.Numerics.BigInteger> value to a <xref:System.Numerics.Complex> object. The value becomes the real part of the complex number, and its imaginary part equals 0.  \n  \n-   By assigning the complex number that is returned by a method or operator to a <xref:System.Numerics.Complex> object. For example, <xref:System.Numerics.Complex.Add%2A?displayProperty=fullName> is a static method that returns a complex number that is the sum of two complex numbers, and the <xref:System.Numerics.Complex.op_Addition%2A?displayProperty=fullName> operator adds two complex numbers and returns the result.  \n  \n The following example demonstrates each of these five ways of assigning a value to a complex number.  \n  \n [!code-csharp[System.Numerics.Complex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/create1.cs#2)]\n [!code-vb[System.Numerics.Complex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/create1.vb#2)]  \n  \n## Operations with Complex Numbers  \n The <xref:System.Numerics.Complex> structure in the .NET Framework includes members that provide the following functionality:  \n  \n-   Methods to compare two complex numbers to determine whether they are equal.  \n  \n-   Operators to perform arithmetic operations on complex numbers. <xref:System.Numerics.Complex> operators enable you to perform addition, subtraction, multiplication, division, and unary negation with complex numbers.  \n  \n-   Methods to perform other numerical operations on complex numbers. In addition to the four basic arithmetic operations, you can raise a complex number to a specified power, find the square root of a complex number, and get the absolute value of a complex number.  \n  \n-   Methods to perform trigonometric operations on complex numbers. For example, you can calculate the tangent of an angle represented by a complex number.  \n  \n Note that, because the <xref:System.Numerics.Complex.Real%2A> and  <xref:System.Numerics.Complex.Imaginary%2A> properties are read-only, you cannot modify the value of an existing <xref:System.Numerics.Complex> object.  All methods that perform an operation on a <xref:System.Numerics.Complex> number, if their return value is of type <xref:System.Numerics.Complex>, return a new <xref:System.Numerics.Complex> number.  \n  \n## Precision and Complex Numbers  \n The real and imaginary parts of a complex number are represented by two double-precision floating-point values. This means that <xref:System.Numerics.Complex> values, like double-precision floating-point values, can lose precision as a result of numerical operations. This means that strict comparisons for equality of two <xref:System.Numerics.Complex> values may fail, even if the difference between the two values is due to a loss of precision. For more information, see <xref:System.Double>.  \n  \n For example, performing exponentiation on the logarithm of a number should return the original number. However, in some cases, the loss of precision of floating-point values can cause slight differences between the two values, as the following example illustrates.  \n  \n [!code-csharp[System.Numerics.Complex.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/precision1.cs#5)]\n [!code-vb[System.Numerics.Complex.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/precision1.vb#5)]  \n  \n Similarly, the following example, which calculates the square root of a <xref:System.Numerics.Complex> number, produces slightly different results on the 32-bit and IA64 versions of the .NET Framework.  \n  \n [!code-csharp[System.Numerics.Complex.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/precision1.cs#6)]\n [!code-vb[System.Numerics.Complex.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/precision1.vb#6)]  \n  \n## Complex Numbers, Infinity, and NaN  \n The real and imaginary parts of a complex number are represented by <xref:System.Double> values. In addition to ranging from <xref:System.Double.MinValue?displayProperty=fullName> to <xref:System.Double.MaxValue?displayProperty=fullName>, the real or imaginary part of a complex number can have a value of <xref:System.Double.PositiveInfinity?displayProperty=fullName>, <xref:System.Double.NegativeInfinity?displayProperty=fullName>, or <xref:System.Double.NaN?displayProperty=fullName>. <xref:System.Double.PositiveInfinity?displayProperty=fullName>, <xref:System.Double.NegativeInfinity?displayProperty=fullName>, and <xref:System.Double.NaN?displayProperty=fullName> all propagate in any arithmetic or trigonometric operation.  \n  \n In the following example, division by <xref:System.Numerics.Complex.Zero> produces a complex number whose real and imaginary parts are both <xref:System.Double.NaN?displayProperty=fullName>. As a result, performing multiplication with this value also produces a complex number whose real and imaginary parts are <xref:System.Double.NaN?displayProperty=fullName>. Similarly, performing a multiplication that overflows the range of the <xref:System.Double> type produces a complex number whose real part is <xref:System.Double.NaN?displayProperty=fullName> and whose imaginary part is <xref:System.Double.PositiveInfinity?displayProperty=fullName>. Subsequently performing division with this complex number returns a complex number whose real part is <xref:System.Double.NaN?displayProperty=fullName> and whose imaginary part is <xref:System.Double.PositiveInfinity?displayProperty=fullName>.  \n  \n [!code-csharp[System.Numerics.Complex.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/nan1.cs#3)]\n [!code-vb[System.Numerics.Complex.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/nan1.vb#3)]  \n  \n Mathematical operations with complex numbers that are invalid or that overflow the range of the <xref:System.Double> data type do not throw an exception. Instead, they return a <xref:System.Double.PositiveInfinity?displayProperty=fullName>, <xref:System.Double.NegativeInfinity?displayProperty=fullName>, or <xref:System.Double.NaN?displayProperty=fullName> under the following conditions:  \n  \n-   The division of a positive number by zero returns <xref:System.Double.PositiveInfinity?displayProperty=fullName>.  \n  \n-   Any operation that overflows the upper bound of the <xref:System.Double> data type returns <xref:System.Double.PositiveInfinity?displayProperty=fullName>.  \n  \n-   The division of a negative number by zero returns <xref:System.Double.NegativeInfinity?displayProperty=fullName>.  \n  \n-   Any operation that overflows the lower bound of the <xref:System.Double> data type returns <xref:System.Double.NegativeInfinity?displayProperty=fullName>.  \n  \n-   The division of a zero by zero returns <xref:System.Double.NaN?displayProperty=fullName>.  \n  \n-   Any operation that is performed on operands whose values are <xref:System.Double.PositiveInfinity?displayProperty=fullName>, <xref:System.Double.NegativeInfinity?displayProperty=fullName>, or <xref:System.Double.NaN?displayProperty=fullName> returns <xref:System.Double.PositiveInfinity?displayProperty=fullName>, <xref:System.Double.NegativeInfinity?displayProperty=fullName>, or <xref:System.Double.NaN?displayProperty=fullName>, depending on the specific operation.  \n  \n Note that this applies to any intermediate calculations performed by a method. For example, the multiplication of `new Complex(9e308, 9e308) and new Complex(2.5, 3.5)` uses the formula (ac - bd) + (ad + bc)i. The calculation of the real component that results from the multiplication evaluates the expression 9e308 * 2.5 - 9e308 * 3.5. Each intermediate multiplication in this expression returns <xref:System.Double.PositiveInfinity?displayProperty=fullName>, and the attempt to subtract <xref:System.Double.PositiveInfinity?displayProperty=fullName> from <xref:System.Double.PositiveInfinity?displayProperty=fullName> returns <xref:System.Double.NaN?displayProperty=fullName>.  \n  \n## Formatting a Complex Number  \n By default, the string representation of a complex number takes the form `(`*real*`,` *imaginary*`)`, where *real* and *imaginary* are the string representations of the <xref:System.Double> values that form the complex number's real and imaginary components. Some overloads of the <xref:System.Numerics.Complex.ToString%2A> method allow customization of the string representations of these <xref:System.Double> values to reflect the formatting conventions of a particular culture or to appear in a particular format defined by a standard or custom numeric format string. (For more information, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).)  \n  \n One of the more common ways of expressing the string representation of a complex number takes the form a + bi, where a is the complex number's real component, and b is the complex number's imaginary component. In electrical engineering, a complex number is most commonly expressed as a + bj. You can return the string representation of a complex number in either of these two forms. To do this, define a custom format provider by implementing the <xref:System.ICustomFormatter> and <xref:System.IFormatProvider> interfaces, and then call the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method.  \n  \n The following example defines a `ComplexFormatter` class that represents a complex number as a string in the form of either a + bi or a + bj.  \n  \n [!code-csharp[System.Numerics.Complex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/customfmt1.cs#1)]\n [!code-vb[System.Numerics.Complex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/customfmt1.vb#1)]  \n  \n The following example then uses this custom formatter to display the string representation of a complex number.  \n  \n [!code-csharp[System.Numerics.Complex.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.class/cs/customfmt1.cs#4)]\n [!code-vb[System.Numerics.Complex.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.class/vb/customfmt1.vb#4)]"
  syntax:
    content: 'public struct Complex : IEquatable<System.Numerics.Complex>, IFormattable'
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.IEquatable{System.Numerics.Complex}
  - System.IFormattable
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.#ctor(System.Double,System.Double)
  commentId: M:System.Numerics.Complex.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Complex(Double, Double)
  nameWithType: Complex.Complex(Double, Double)
  fullName: Complex.Complex(Double, Double)
  type: Constructor
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.Complex"></xref> structure using the specified real and imaginary values.
  remarks: The `real` or `imaginary` arguments may lose precision if they are data types that require an explicit cast to <xref:System.Double>.
  example:
  - "The following example instantiates two complex numbers, and then uses them in addition, subtraction, multiplication, and division operations.  \n  \n [!code-csharp[System.Numerics.Complex.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.ctor/cs/ctor1.cs#1)]\n [!code-vb[System.Numerics.Complex.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.ctor/vb/ctor1.vb#1)]"
  syntax:
    content: public Complex (double real, double imaginary);
    parameters:
    - id: real
      type: System.Double
      description: The real part of the complex number.
    - id: imaginary
      type: System.Double
      description: The imaginary part of the complex number.
  overload: System.Numerics.Complex.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Abs(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Abs(System.Numerics.Complex)
  id: Abs(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Abs(Complex)
  nameWithType: Complex.Abs(Complex)
  fullName: Complex.Abs(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Gets the absolute value (or magnitude) of a complex number.
  remarks: "The absolute value of a complex number is equivalent to its <xref:System.Numerics.Complex.Magnitude%2A> property. The absolute value of a real number a + bi is calculated as follows:  \n  \n-   If b = 0, the result is 0.  \n  \n-   If a > b, the result is a *<xref:System.Math.Sqrt%2A?displayProperty=fullName>(1 + b<sup>2</sup>/a<sup>2</sup>).  \n  \n-   If b > a, the result is b * <xref:System.Math.Sqrt%2A?displayProperty=fullName>(1 + a<sup>2</sup>/b<sup>2</sup>).  \n  \n If the calculation of the absolute value results in an overflow, the method returns either <xref:System.Double.PositiveInfinity?displayProperty=fullName> or <xref:System.Double.NegativeInfinity?displayProperty=fullName>. If either the <xref:System.Numerics.Complex.Real%2A> or <xref:System.Numerics.Complex.Imaginary%2A> property is <xref:System.Double.NaN?displayProperty=fullName> and the other property is neither <xref:System.Double.PositiveInfinity?displayProperty=fullName> nor <xref:System.Double.NegativeInfinity?displayProperty=fullName>, the method returns <xref:System.Double.NaN?displayProperty=fullName>."
  example:
  - "The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <xref:System.Numerics.Complex.Magnitude%2A> property.  \n  \n [!code-csharp[System.Numerics.Complex.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.abs/cs/abs1.cs#1)]\n [!code-vb[System.Numerics.Complex.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.abs/vb/abs1.vb#1)]"
  syntax:
    content: public static double Abs (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Double
      description: The absolute value of <code>value</code>.
  overload: System.Numerics.Complex.Abs*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Acos(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Acos(System.Numerics.Complex)
  id: Acos(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Acos(Complex)
  nameWithType: Complex.Acos(Complex)
  fullName: Complex.Acos(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the angle that is the arc cosine of the specified complex number.
  remarks: "The <xref:System.Numerics.Complex.Acos%2A> method for complex numbers corresponds to the <xref:System.Math.Acos%2A?displayProperty=fullName> method for real numbers.  \n  \n The <xref:System.Numerics.Complex.Acos%2A> method uses the following formula:  \n  \n (-<xref:System.Numerics.Complex.ImaginaryOne>) * <xref:System.Numerics.Complex.Log%2A>(`value` + <xref:System.Numerics.Complex.ImaginaryOne>*<xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - `value` * `value`)))"
  example:
  - "The following example illustrates the <xref:System.Numerics.Complex.Acos%2A> method. It shows that passing the value returned by the <xref:System.Numerics.Complex.Acos%2A> method to the <xref:System.Numerics.Complex.Cos%2A> method returns the original <xref:System.Numerics.Complex> value.  \n  \n [!code-csharp[System.Numerics.Complex.Acos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.acos/cs/acos1.cs#1)]\n [!code-vb[System.Numerics.Complex.Acos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.acos/vb/acos1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Acos (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number that represents a cosine.
    return:
      type: System.Numerics.Complex
      description: The angle, measured in radians, which is the arc cosine of <code>value</code>.
  overload: System.Numerics.Complex.Acos*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  id: Add(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Add(Complex, Complex)
  nameWithType: Complex.Add(Complex, Complex)
  fullName: Complex.Add(Complex, Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Adds two complex numbers and returns the result.
  remarks: "The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form:  \n  \n (a + c) + (b + d)i.  \n  \n If the method call results in an overflow in either the real or imaginary component, the value of the component is either <xref:System.Double.PositiveInfinity?displayProperty=fullName> or <xref:System.Double.NegativeInfinity?displayProperty=fullName>.  \n  \n Languages that do not support custom operators can use the <xref:System.Numerics.Complex.Add%2A> method to perform addition with complex numbers."
  example:
  - "The following example illustrates addition with complex numbers.  \n  \n [!code-csharp[System.Numerics.Complex.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add1.cs#1)]\n [!code-vb[System.Numerics.Complex.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Add (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The first complex number to add.
    - id: right
      type: System.Numerics.Complex
      description: The second complex number to add.
    return:
      type: System.Numerics.Complex
      description: The sum of <code>left</code> and <code>right</code>.
  overload: System.Numerics.Complex.Add*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Asin(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Asin(System.Numerics.Complex)
  id: Asin(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Asin(Complex)
  nameWithType: Complex.Asin(Complex)
  fullName: Complex.Asin(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the angle that is the arc sine of the specified complex number.
  remarks: "The <xref:System.Numerics.Complex.Asin%2A> method for complex numbers corresponds to the <xref:System.Math.Asin%2A?displayProperty=fullName> method for real numbers.  \n  \n The <xref:System.Numerics.Complex.Asin%2A> method uses the following formula:  \n  \n -<xref:System.Numerics.Complex.ImaginaryOne> * <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.ImaginaryOne> * value + <xref:System.Numerics.Complex.Sqrt%2A>(<xref:System.Numerics.Complex.One> - value * value))"
  example:
  - "The following example illustrates the <xref:System.Numerics.Complex.Asin%2A> method. It shows that passing the value returned by the <xref:System.Numerics.Complex.Asin%2A> method to the <xref:System.Numerics.Complex.Sin%2A> method returns the original <xref:System.Numerics.Complex> value.  \n  \n [!code-csharp[System.Numerics.Complex.Asin#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.asin/cs/asin1.cs#1)]\n [!code-vb[System.Numerics.Complex.Asin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.asin/vb/asin1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Asin (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The angle which is the arc sine of <code>value</code>.
  overload: System.Numerics.Complex.Asin*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Atan(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Atan(System.Numerics.Complex)
  id: Atan(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Atan(Complex)
  nameWithType: Complex.Atan(Complex)
  fullName: Complex.Atan(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the angle that is the arc tangent of the specified complex number.
  remarks: "The <xref:System.Numerics.Complex.Atan%2A> method for complex numbers corresponds to the <xref:System.Math.Atan%2A?displayProperty=fullName> method for real numbers.  \n  \n The <xref:System.Numerics.Complex.Atan%2A> method uses the following formula:  \n  \n <xref:System.Numerics.Complex.ImaginaryOne> / new Complex(2.0, 0.0)) * (<xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> - <xref:System.Numerics.Complex.ImaginaryOne> * value) - <xref:System.Numerics.Complex.Log%2A>(<xref:System.Numerics.Complex.One> + ImaginaryOne * value)"
  example:
  - "The following example illustrates the <xref:System.Numerics.Complex.Atan%2A> method. It shows that passing the value returned by the <xref:System.Numerics.Complex.Atan%2A> method to the <xref:System.Numerics.Complex.Tan%2A> method returns the original <xref:System.Numerics.Complex> value.  \n  \n [!code-csharp[System.Numerics.Complex.Atan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.atan/cs/atan1.cs#1)]\n [!code-vb[System.Numerics.Complex.Atan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.atan/vb/atan1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Atan (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The angle that is the arc tangent of <code>value</code>.
  overload: System.Numerics.Complex.Atan*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  id: Conjugate(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Conjugate(Complex)
  nameWithType: Complex.Conjugate(Complex)
  fullName: Complex.Conjugate(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Computes the conjugate of a complex number and returns the result.
  remarks: The conjugate of a complex number inverts the sign of the imaginary component; that is, it applies unary negation to the imaginary component. If a + bi is a complex number, its conjugate is a - bi.
  example:
  - "The following example displays the conjugate of two complex numbers.  \n  \n [!code-csharp[System.Numerics.Complex.Conjugate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.conjugate/cs/conjugate1.cs#1)]\n [!code-vb[System.Numerics.Complex.Conjugate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.conjugate/vb/conjugate1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Conjugate (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The conjugate of <code>value</code>.
  overload: System.Numerics.Complex.Conjugate*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Cos(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Cos(System.Numerics.Complex)
  id: Cos(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Cos(Complex)
  nameWithType: Complex.Cos(Complex)
  fullName: Complex.Cos(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the cosine of the specified complex number.
  remarks: "The <xref:System.Numerics.Complex.Cos%2A> method for complex numbers corresponds to the <xref:System.Math.Cos%2A?displayProperty=fullName> method for real numbers.  \n  \n The <xref:System.Numerics.Complex.Cos%2A> method uses the following formula to calculate the cosine of the complex number a + bi:  \n  \n (<xref:System.Math.Cos%2A>(a) * <xref:System.Math.Cosh%2A>(b), -(<xref:System.Math.Sin%2A>(a) * <xref:System.Math.Sinh%2A>(b)))"
  example:
  - "The following example illustrates the <xref:System.Numerics.Complex.Acos%2A> method. It shows that passing the value returned by the <xref:System.Numerics.Complex.Acos%2A> method to the <xref:System.Numerics.Complex.Cos%2A> method returns the original <xref:System.Numerics.Complex> value.  \n  \n [!code-csharp[System.Numerics.Complex.Acos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.acos/cs/acos1.cs#1)]\n [!code-vb[System.Numerics.Complex.Acos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.acos/vb/acos1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Cos (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The cosine of <code>value</code>.
  overload: System.Numerics.Complex.Cos*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Cosh(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Cosh(System.Numerics.Complex)
  id: Cosh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Cosh(Complex)
  nameWithType: Complex.Cosh(Complex)
  fullName: Complex.Cosh(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the hyperbolic cosine of the specified complex number.
  remarks: "The <xref:System.Numerics.Complex.Cosh%2A> method for complex numbers corresponds to the <xref:System.Math.Cosh%2A?displayProperty=fullName> method for real numbers.  \n  \n The <xref:System.Numerics.Complex.Cosh%2A> method uses the following formula to calculate the hyperbolic cosine of the complex number a + bi:  \n  \n (<xref:System.Math.Cosh%2A>(a) * <xref:System.Math.Cos%2A>(b), <xref:System.Math.Sinh%2A>(a) * <xref:System.Math.Sin%2A>(b))"
  syntax:
    content: public static System.Numerics.Complex Cosh (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The hyperbolic cosine of <code>value</code>.
  overload: System.Numerics.Complex.Cosh*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  id: Divide(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Divide(Complex, Complex)
  nameWithType: Complex.Divide(Complex, Complex)
  fullName: Complex.Divide(Complex, Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Divides one complex number by another and returns the result.
  remarks: "The division of a complex number, a + bi, by a second complex number, number, c + di, takes the following form:  \n  \n ((ac + bd) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc - ad) / (c<sup>2</sup> + d<sup>2</sup>)i  \n  \n If the calculation of the quotient results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=fullName> or <xref:System.Double.NegativeInfinity?displayProperty=fullName>.  \n  \n The <xref:System.Numerics.Complex.Divide%2A> method can be used by languages that do not support custom operators. Its behavior is identical to division using the division operator."
  example:
  - "The following example divides a complex number by each element in an array of complex numbers.  \n  \n [!code-csharp[System.Numerics.Complex.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.divide/cs/divide1.cs#1)]\n [!code-vb[System.Numerics.Complex.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.divide/vb/divide1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Divide (System.Numerics.Complex dividend, System.Numerics.Complex divisor);
    parameters:
    - id: dividend
      type: System.Numerics.Complex
      description: The complex number to be divided.
    - id: divisor
      type: System.Numerics.Complex
      description: The complex number to divide by.
    return:
      type: System.Numerics.Complex
      description: The quotient of the division.
  overload: System.Numerics.Complex.Divide*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Equals(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Equals(System.Numerics.Complex)
  id: Equals(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Equals(Complex)
  nameWithType: Complex.Equals(Complex)
  fullName: Complex.Equals(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and a specified complex number have the same value.
  remarks: "The <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method provides the <xref:System.IEquatable%601> implementation for the <xref:System.Numerics.Complex> structure. It performs slightly better than <xref:System.Numerics.Complex.Equals%28System.Object%29> method because it does not have to convert its parameter to a complex number.  \n  \n Two complex numbers are equal if their real parts are equal and their imaginary parts are equal. The <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method is equivalent to the following expression:  \n  \n [!code-csharp[System.Numerics.Complex.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#1)]\n [!code-vb[System.Numerics.Complex.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#1)]"
  syntax:
    content: public bool Equals (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: The complex number to compare.
    return:
      type: System.Boolean
      description: '`true` if this complex number and <code>value</code> have the same value; otherwise, `false`.'
  overload: System.Numerics.Complex.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Equals(System.Object)
  commentId: M:System.Numerics.Complex.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Complex.Equals(Object)
  fullName: Complex.Equals(Object)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and a specified object have the same value.
  remarks: "Two complex numbers are equal if their real parts are equal and their imaginary parts are equal. The <xref:System.Numerics.Complex.Equals%28System.Object%29> method is equivalent to the following expression:  \n  \n [!code-csharp[System.Numerics.Complex.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#2)]\n [!code-vb[System.Numerics.Complex.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#2)]  \n  \n If the `obj` parameter is not a <xref:System.Numerics.Complex> object, but it is a data type for which an implicit conversion is defined, the <xref:System.Numerics.Complex.Equals%28System.Object%29> method converts `obj` to a <xref:System.Numerics.Complex> object whose real part is equal to the value of `obj` and whose imaginary part is equal to zero before it performs the comparison. The following example illustrates this by finding that a complex number and a double-precision floating-point value are equal.  \n  \n [!code-csharp[System.Numerics.Complex.Equals#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals3.cs#6)]\n [!code-vb[System.Numerics.Complex.Equals#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals3.vb#6)]"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare.
    return:
      type: System.Boolean
      description: '`true` if the <code>obj</code> parameter is a <xref href="System.Numerics.Complex"></xref> object or a type capable of implicit conversion to a <xref href="System.Numerics.Complex"></xref> object, and its value is equal to the current <xref href="System.Numerics.Complex"></xref> object; otherwise, `false`.'
  overload: System.Numerics.Complex.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Exp(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Exp(System.Numerics.Complex)
  id: Exp(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Exp(Complex)
  nameWithType: Complex.Exp(Complex)
  fullName: Complex.Exp(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns `e` raised to the power specified by a complex number.
  remarks: "Use the <xref:System.Numerics.Complex.Pow%2A> method to calculate the powers of other bases.  \n  \n The <xref:System.Numerics.Complex.Exp%2A> method for complex numbers corresponds to the <xref:System.Math.Exp%2A?displayProperty=fullName> method for real numbers. <xref:System.Numerics.Complex.Exp%2A> is the inverse of <xref:System.Numerics.Complex.Log%2A>."
  example:
  - "The following example illustrates the <xref:System.Numerics.Complex.Exp%2A> method. It shows that, with some allowance for the lack of precision of the <xref:System.Double> data type, passing the value returned by the <xref:System.Numerics.Complex.Log%2A> method to the <xref:System.Numerics.Complex.Exp%2A> method returns the original <xref:System.Numerics.Complex> value.  \n  \n [!code-csharp[System.Numerics.Complex.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.log/cs/log1.cs#1)] \n [!code-vb[System.Numerics.Complex.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.log/vb/log1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Exp (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number that specifies a power.
    return:
      type: System.Numerics.Complex
      description: The number `e` raised to the power <code>value</code>.
  overload: System.Numerics.Complex.Exp*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  commentId: M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  id: FromPolarCoordinates(System.Double,System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: FromPolarCoordinates(Double, Double)
  nameWithType: Complex.FromPolarCoordinates(Double, Double)
  fullName: Complex.FromPolarCoordinates(Double, Double)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Creates a complex number from a point's polar coordinates.
  remarks: "The <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method instantiates a complex number based on its polar coordinates.  \n  \n Because there are multiple representations of a point on a complex plane, the return value of the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method is normalized. The magnitude is normalized to a positive number, and the phase is normalized to a value in the range of -<xref:System.Math.PI> to <xref:System.Math.PI>. As a result, the values of the <xref:System.Numerics.Complex.Phase%2A> and <xref:System.Numerics.Complex.Magnitude%2A> properties of the resulting complex number may not equal the original values of the `magnitude` and `phase` parameters.  \n  \n To convert a value from degrees to radians for the `phase` parameter, multiply it by <xref:System.Math.PI?displayProperty=fullName>/180."
  example:
  - "The following example uses the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method to instantiate a complex number based on its polar coordinates and then displays the value of its <xref:System.Numerics.Complex.Magnitude%2A> and <xref:System.Numerics.Complex.Phase%2A> properties.  \n  \n [!code-csharp[System.Numerics.Complex.Phase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.phase/cs/phase1.cs#1)]\n [!code-vb[System.Numerics.Complex.Phase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.phase/vb/phase1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex FromPolarCoordinates (double magnitude, double phase);
    parameters:
    - id: magnitude
      type: System.Double
      description: The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.
    - id: phase
      type: System.Double
      description: The phase, which is the angle from the line to the horizontal axis, measured in radians.
    return:
      type: System.Numerics.Complex
      description: A complex number.
  overload: System.Numerics.Complex.FromPolarCoordinates*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.GetHashCode
  commentId: M:System.Numerics.Complex.GetHashCode
  id: GetHashCode
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Complex.GetHashCode()
  fullName: Complex.GetHashCode()
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the hash code for the current <xref href="System.Numerics.Complex"></xref> object.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Numerics.Complex.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Imaginary
  commentId: P:System.Numerics.Complex.Imaginary
  id: Imaginary
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Imaginary
  nameWithType: Complex.Imaginary
  fullName: Complex.Imaginary
  type: Property
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Gets the imaginary component of the current <xref href="System.Numerics.Complex"></xref> object.
  remarks: Given a complex number a + bi, the <xref:System.Numerics.Complex.Imaginary%2A> property returns the value of b.
  example:
  - "The following example instantiates an array of <xref:System.Numerics.Complex> objects and displays the real and imaginary components of each in the form a + bi.  \n  \n [!code-csharp[System.Numerics.Complex.Real#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.real/cs/real1.cs#1)]\n [!code-vb[System.Numerics.Complex.Real#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.real/vb/real1.vb#1)]"
  syntax:
    content: public double Imaginary { get; }
    return:
      type: System.Double
      description: The imaginary component of a complex number.
  overload: System.Numerics.Complex.Imaginary*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.ImaginaryOne
  commentId: F:System.Numerics.Complex.ImaginaryOne
  id: ImaginaryOne
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: ImaginaryOne
  nameWithType: Complex.ImaginaryOne
  fullName: Complex.ImaginaryOne
  type: Field
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a new <xref href="System.Numerics.Complex"></xref> instance with a real number equal to zero and an imaginary number equal to one.
  remarks: ''
  example:
  - "The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.ImaginaryOne> property. It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to zero and an imaginary part equal to one. As the output from the example shows, the two values are equal.  \n  \n [!code-csharp[System.Numerics.Complex.ImaginaryOne#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.imaginaryone/cs/imaginaryone1.cs#1)]\n [!code-vb[System.Numerics.Complex.ImaginaryOne#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.imaginaryone/vb/imaginaryone1.vb#1)]"
  syntax:
    content: public static readonly System.Numerics.Complex ImaginaryOne;
    return:
      type: System.Numerics.Complex
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Log(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Log(System.Numerics.Complex)
  id: Log(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Log(Complex)
  nameWithType: Complex.Log(Complex)
  fullName: Complex.Log(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the natural (base `e`) logarithm of a specified complex number.
  remarks: The <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%29> method for complex numbers corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=fullName> method for real numbers.
  example:
  - "The following example illustrates the <xref:System.Numerics.Complex.Log%2A> method. It shows that, with some allowance for the lack of precision of the <xref:System.Double> data type, passing the value returned by the <xref:System.Numerics.Complex.Log%2A> method to the <xref:System.Numerics.Complex.Exp%2A> method returns the original <xref:System.Numerics.Complex> value.  \n  \n [!code-csharp[System.Numerics.Complex.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.log/cs/log1.cs#1)] \n [!code-vb[System.Numerics.Complex.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.log/vb/log1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Log (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The natural (base `e`) logarithm of <code>value</code>.
  overload: System.Numerics.Complex.Log*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  commentId: M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  id: Log(System.Numerics.Complex,System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Log(Complex, Double)
  nameWithType: Complex.Log(Complex, Double)
  fullName: Complex.Log(Complex, Double)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the logarithm of a specified complex number in a specified base.
  remarks: The <xref:System.Numerics.Complex.Log%28System.Numerics.Complex%2CSystem.Double%29> method for complex numbers corresponds to the <xref:System.Math.Log%28System.Double%2CSystem.Double%29?displayProperty=fullName> method for real numbers.
  syntax:
    content: public static System.Numerics.Complex Log (System.Numerics.Complex value, double baseValue);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    - id: baseValue
      type: System.Double
      description: The base of the logarithm.
    return:
      type: System.Numerics.Complex
      description: The logarithm of <code>value</code> in base <code>baseValue</code>.
  overload: System.Numerics.Complex.Log*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Log10(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Log10(System.Numerics.Complex)
  id: Log10(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Log10(Complex)
  nameWithType: Complex.Log10(Complex)
  fullName: Complex.Log10(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the base-10 logarithm of a specified complex number.
  remarks: The <xref:System.Numerics.Complex.Log10%2A> method for complex numbers corresponds to the <xref:System.Math.Log10%2A?displayProperty=fullName> method for real numbers.
  syntax:
    content: public static System.Numerics.Complex Log10 (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The base-10 logarithm of <code>value</code>.
  overload: System.Numerics.Complex.Log10*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Magnitude
  commentId: P:System.Numerics.Complex.Magnitude
  id: Magnitude
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Magnitude
  nameWithType: Complex.Magnitude
  fullName: Complex.Magnitude
  type: Property
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Gets the magnitude (or absolute value) of a complex number.
  remarks: "The <xref:System.Numerics.Complex.Magnitude%2A> property is equivalent to the absolute value of a complex number. It specifies the distance from the origin (the intersection of the x-axis and the y-axis in the Cartesian coordinate system) to the two-dimensional point represented by a complex number. The absolute value is calculated as follows:  \n  \n &#124; a + bi &#124; = <xref:System.Math.Sqrt%2A?displayProperty=fullName>(a * a + b * b)  \n  \n If the calculation of the absolute value results in an overflow, this property returns either <xref:System.Double.PositiveInfinity?displayProperty=fullName> or <xref:System.Double.NegativeInfinity?displayProperty=fullName>.  \n  \n The <xref:System.Numerics.Complex.Magnitude%2A> and the <xref:System.Numerics.Complex.Phase%2A> properties define the position of a point that represents a complex number in the polar coordinate system.  \n  \n You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method."
  example:
  - "The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <xref:System.Numerics.Complex.Magnitude%2A> property.  \n  \n [!code-csharp[System.Numerics.Complex.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.abs/cs/abs1.cs#1)]\n [!code-vb[System.Numerics.Complex.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.abs/vb/abs1.vb#1)]"
  syntax:
    content: public double Magnitude { get; }
    return:
      type: System.Double
      description: The magnitude of the current instance.
  overload: System.Numerics.Complex.Magnitude*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  id: Multiply(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Multiply(Complex, Complex)
  nameWithType: Complex.Multiply(Complex, Complex)
  fullName: Complex.Multiply(Complex, Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the product of two complex numbers.
  remarks: "The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form:  \n  \n (ac - bd) + (ad + bc)i  \n  \n If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=fullName> or <xref:System.Double.NegativeInfinity?displayProperty=fullName>.  \n  \n The <xref:System.Numerics.Complex.Multiply%2A> method is implemented for languages that do not support custom operators. Its behavior is identical to multiplication using the multiplication operator."
  example:
  - "The following example multiples a complex number by each element in an array of complex numbers.  \n  \n [!code-csharp[System.Numerics.Complex.Multiply#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.multiply/cs/multiply1.cs#1)]\n [!code-vb[System.Numerics.Complex.Multiply#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.multiply/vb/multiply1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Multiply (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The first complex number to multiply.
    - id: right
      type: System.Numerics.Complex
      description: The second complex number to multiply.
    return:
      type: System.Numerics.Complex
      description: The product of the <code>left</code> and <code>right</code> parameters.
  overload: System.Numerics.Complex.Multiply*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Negate(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Negate(System.Numerics.Complex)
  id: Negate(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Negate(Complex)
  nameWithType: Complex.Negate(Complex)
  fullName: Complex.Negate(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the additive inverse of a specified complex number.
  remarks: "The additive inverse of a complex number is a complex number that produces a value of <xref:System.Numerics.Complex> when it is added to the original complex number. This method returns a complex number in which the real and imaginary components of the original complex number are multiplied by -1.  \n  \n The <xref:System.Numerics.Complex.Negate%2A> method is implemented for languages that do not support custom operators. Its behavior is identical to negation using the unary negation operator, <xref:System.Numerics.Complex.op_UnaryNegation%2A>."
  example:
  - "The following example obtains the additive inverse of each element in an array of complex numbers.  \n  \n [!code-csharp[System.Numerics.Complex.Negate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.negate/cs/negate1.cs#1)]\n [!code-vb[System.Numerics.Complex.Negate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.negate/vb/negate1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Negate (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The result of the <xref href="System.Numerics.Complex.Real"></xref> and <xref href="System.Numerics.Complex.Imaginary"></xref> components of the <code>value</code> parameter multiplied by -1.
  overload: System.Numerics.Complex.Negate*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.One
  commentId: F:System.Numerics.Complex.One
  id: One
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: One
  nameWithType: Complex.One
  fullName: Complex.One
  type: Field
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a new <xref href="System.Numerics.Complex"></xref> instance with a real number equal to one and an imaginary number equal to zero.
  remarks: ''
  example:
  - "The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.One> property. It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to one and an imaginary part equal to zero. As the output from the example shows, the two values are equal.  \n  \n [!code-csharp[System.Numerics.Complex.One#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.one/cs/one1.cs#1)]\n [!code-vb[System.Numerics.Complex.One#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.one/vb/one1.vb#1)]"
  syntax:
    content: public static readonly System.Numerics.Complex One;
    return:
      type: System.Numerics.Complex
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Addition(Complex, Complex)
  nameWithType: Complex.op_Addition(Complex, Complex)
  fullName: Complex.op_Addition(Complex, Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Adds two complex numbers.
  remarks: "The <xref:System.Numerics.Complex.op_Addition%2A> method defines the addition operation for complex numbers. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.Complex.Add#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add3.cs#3)]\n [!code-vb[System.Numerics.Complex.Add#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add3.vb#3)]  \n  \n The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form:  \n  \n (a + c) + (b + d)i  \n  \n If the method call results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=fullName> or <xref:System.Double.NegativeInfinity?displayProperty=fullName>.  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Add%2A> method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.Complex.Add%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=fullName>"
  example:
  - "The following example illustrates addition with complex numbers.  \n  \n [!code-csharp[System.Numerics.Complex.Add#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.add/cs/add2.cs#2)]\n [!code-vb[System.Numerics.Complex.Add#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.add/vb/add2.vb#2)]"
  syntax:
    content: public static System.Numerics.Complex op_Addition (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The first value to add.
    - id: right
      type: System.Numerics.Complex
      description: The second value to add.
    return:
      type: System.Numerics.Complex
      description: The sum of <code>left</code> and <code>right</code>.
  overload: System.Numerics.Complex.op_Addition*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Division(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Division(Complex, Complex)
  nameWithType: Complex.op_Division(Complex, Complex)
  fullName: Complex.op_Division(Complex, Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Divides a specified complex number by another specified complex number.
  remarks: "The <xref:System.Numerics.Complex.op_Division%2A> method defines the division operation for complex numbers. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.Complex.Divide#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.divide/cs/divide2.cs#2)]\n [!code-vb[System.Numerics.Complex.Divide#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.divide/vb/divide2.vb#2)]  \n  \n The division of a complex number, a + bi, and a second complex number, c + di, takes the following form:  \n  \n ((ac + bd) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc - ad) / (c<sup>2</sup> + d<sup>2</sup>)i  \n  \n If the division results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=fullName> or <xref:System.Double.NegativeInfinity?displayProperty=fullName>.  \n  \n Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.Complex.Divide%2A> method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.Complex.Divide%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=fullName>"
  syntax:
    content: public static System.Numerics.Complex op_Division (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The value to be divided.
    - id: right
      type: System.Numerics.Complex
      description: The value to divide by.
    return:
      type: System.Numerics.Complex
      description: The result of dividing <code>left</code> by <code>right</code>.
  overload: System.Numerics.Complex.op_Division*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Equality(Complex, Complex)
  nameWithType: Complex.op_Equality(Complex, Complex)
  fullName: Complex.op_Equality(Complex, Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether two complex numbers are equal.
  remarks: "The <xref:System.Numerics.Complex.op_Equality%2A> method defines the operation of the equality operator for <xref:System.Numerics.Complex> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.Complex.Equals#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/eqoperator1.cs#9)]\n [!code-vb[System.Numerics.Complex.Equals#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/eqoperator1.vb#9)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method instead.  \n  \n Two complex numbers are equal if their real parts are equal and their imaginary parts are equal. The <xref:System.Numerics.Complex.op_Equality%2A> method is equivalent to the following expression:  \n  \n [!code-csharp[System.Numerics.Complex.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.equals/cs/equals1.cs#3)]\n [!code-vb[System.Numerics.Complex.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.equals/vb/equals1.vb#3)]  \n  \n Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal. For more information and a possible workaround, see the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method.  \n  \n The equivalent method for this operator is <xref:System.Numerics.Complex.Equals%2A?displayProperty=fullName>"
  syntax:
    content: public static bool op_Equality (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The first complex number to compare.
    - id: right
      type: System.Numerics.Complex
      description: The second complex number to compare.
    return:
      type: System.Boolean
      description: '`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.'
  overload: System.Numerics.Complex.op_Equality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.op_Explicit(System.Decimal to System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex
  id: op_Explicit(System.Decimal to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Explicit(Decimal to Complex)
  nameWithType: Complex.op_Explicit(Decimal to Complex)
  fullName: Complex.op_Explicit(Decimal to Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Explicit (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: ''
    return:
      type: System.Numerics.Complex
      description: ''
  overload: System.Numerics.Complex.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger to System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex
  id: op_Explicit(System.Numerics.BigInteger to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Explicit(BigInteger to Complex)
  nameWithType: Complex.op_Explicit(BigInteger to Complex)
  fullName: Complex.op_Explicit(BigInteger to Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: ''
    return:
      type: System.Numerics.Complex
      description: ''
  overload: System.Numerics.Complex.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Implicit(System.UInt64 to System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex
  id: op_Implicit(System.UInt64 to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(UInt64 to Complex)
  nameWithType: Complex.op_Implicit(UInt64 to Complex)
  fullName: Complex.op_Implicit(UInt64 to Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static System.Numerics.Complex op_Implicit (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: ''
    return:
      type: System.Numerics.Complex
      description: ''
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Implicit(System.UInt32 to System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex
  id: op_Implicit(System.UInt32 to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(UInt32 to Complex)
  nameWithType: Complex.op_Implicit(UInt32 to Complex)
  fullName: Complex.op_Implicit(UInt32 to Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static System.Numerics.Complex op_Implicit (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: ''
    return:
      type: System.Numerics.Complex
      description: ''
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Implicit(System.UInt16 to System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex
  id: op_Implicit(System.UInt16 to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(UInt16 to Complex)
  nameWithType: Complex.op_Implicit(UInt16 to Complex)
  fullName: Complex.op_Implicit(UInt16 to Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static System.Numerics.Complex op_Implicit (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: ''
    return:
      type: System.Numerics.Complex
      description: ''
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Implicit(System.Single to System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex
  id: op_Implicit(System.Single to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(Single to Complex)
  nameWithType: Complex.op_Implicit(Single to Complex)
  fullName: Complex.op_Implicit(Single to Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (float value);
    parameters:
    - id: value
      type: System.Single
      description: ''
    return:
      type: System.Numerics.Complex
      description: ''
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Implicit(System.SByte to System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex
  id: op_Implicit(System.SByte to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(SByte to Complex)
  nameWithType: Complex.op_Implicit(SByte to Complex)
  fullName: Complex.op_Implicit(SByte to Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static System.Numerics.Complex op_Implicit (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: ''
    return:
      type: System.Numerics.Complex
      description: ''
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Implicit(System.Byte to System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex
  id: op_Implicit(System.Byte to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(Byte to Complex)
  nameWithType: Complex.op_Implicit(Byte to Complex)
  fullName: Complex.op_Implicit(Byte to Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: ''
    return:
      type: System.Numerics.Complex
      description: ''
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Implicit(System.Int32 to System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex
  id: op_Implicit(System.Int32 to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(Int32 to Complex)
  nameWithType: Complex.op_Implicit(Int32 to Complex)
  fullName: Complex.op_Implicit(Int32 to Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (int value);
    parameters:
    - id: value
      type: System.Int32
      description: ''
    return:
      type: System.Numerics.Complex
      description: ''
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Implicit(System.Int16 to System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex
  id: op_Implicit(System.Int16 to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(Int16 to Complex)
  nameWithType: Complex.op_Implicit(Int16 to Complex)
  fullName: Complex.op_Implicit(Int16 to Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (short value);
    parameters:
    - id: value
      type: System.Int16
      description: ''
    return:
      type: System.Numerics.Complex
      description: ''
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Implicit(System.Double to System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex
  id: op_Implicit(System.Double to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(Double to Complex)
  nameWithType: Complex.op_Implicit(Double to Complex)
  fullName: Complex.op_Implicit(Double to Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (double value);
    parameters:
    - id: value
      type: System.Double
      description: ''
    return:
      type: System.Numerics.Complex
      description: ''
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Implicit(System.Int64 to System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex
  id: op_Implicit(System.Int64 to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(Int64 to Complex)
  nameWithType: Complex.op_Implicit(Int64 to Complex)
  fullName: Complex.op_Implicit(Int64 to Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (long value);
    parameters:
    - id: value
      type: System.Int64
      description: ''
    return:
      type: System.Numerics.Complex
      description: ''
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Inequality(Complex, Complex)
  nameWithType: Complex.op_Inequality(Complex, Complex)
  fullName: Complex.op_Inequality(Complex, Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether two complex numbers are not equal.
  remarks: "The <xref:System.Numerics.Complex.op_Equality%2A> method defines the operation of the inequality operator for complex numbers. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.Complex.Inequality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.inequality/cs/inequality1.cs#1)]\n [!code-vb[System.Numerics.Complex.Inequality#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.inequality/vb/inequality1.vb#1)]  \n  \n Languages that do not support custom operators can test for inequality by calling the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method and reversing its value.  \n  \n Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal. One possible workaround is to implement a comparison method that returns `true` only if the difference between the two real and imaginary parts of the complex numbers exceeds a certain threshold (such as .01% of the value of the real or imaginary component of one of the complex numbers). For more information, see the <xref:System.Numerics.Complex.Equals%28System.Numerics.Complex%29> method."
  syntax:
    content: public static bool op_Inequality (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The first value to compare.
    - id: right
      type: System.Numerics.Complex
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'
  overload: System.Numerics.Complex.op_Inequality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Multiply(Complex, Complex)
  nameWithType: Complex.op_Multiply(Complex, Complex)
  fullName: Complex.op_Multiply(Complex, Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Multiplies two specified complex numbers.
  remarks: "The <xref:System.Numerics.Complex.op_Multiply%2A> method defines the operation of the multiplication operator for complex numbers. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.Complex.Multiply#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.multiply/cs/multiply2.cs#2)]\n [!code-vb[System.Numerics.Complex.Multiply#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.multiply/vb/multiply2.vb#2)]  \n  \n The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form:  \n  \n (ac - bd) + (ad + bc)i  \n  \n If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=fullName> or <xref:System.Double.NegativeInfinity?displayProperty=fullName>.  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Multiply%2A> method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.Complex.Multiply%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=fullName>"
  syntax:
    content: public static System.Numerics.Complex op_Multiply (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The first value to multiply.
    - id: right
      type: System.Numerics.Complex
      description: The second value to multiply.
    return:
      type: System.Numerics.Complex
      description: The product of <code>left</code> and <code>right</code>.
  overload: System.Numerics.Complex.op_Multiply*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Subtraction(Complex, Complex)
  nameWithType: Complex.op_Subtraction(Complex, Complex)
  fullName: Complex.op_Subtraction(Complex, Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Subtracts a complex number from another complex number.
  remarks: "The <xref:System.Numerics.Complex.op_Subtraction%2A> method defines the operation of the subtraction operator for complex numbers. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.Complex.Subtract#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.subtract/cs/subtract2.cs#2)]\n [!code-vb[System.Numerics.Complex.Subtract#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.subtract/vb/subtract2.vb#2)]  \n  \n If the method call results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=fullName> or <xref:System.Double.NegativeInfinity?displayProperty=fullName>.  \n  \n The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form:  \n  \n (a - c) + (b - d)i  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Subtract%2A> method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.Complex.Subtract%28System.Numerics.Complex%2CSystem.Numerics.Complex%29?displayProperty=fullName>"
  syntax:
    content: public static System.Numerics.Complex op_Subtraction (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The value to subtract from (the minuend).
    - id: right
      type: System.Numerics.Complex
      description: The value to subtract (the subtrahend).
    return:
      type: System.Numerics.Complex
      description: The result of subtracting <code>right</code> from <code>left</code>.
  overload: System.Numerics.Complex.op_Subtraction*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  id: op_UnaryNegation(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_UnaryNegation(Complex)
  nameWithType: Complex.op_UnaryNegation(Complex)
  fullName: Complex.op_UnaryNegation(Complex)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the additive inverse of a specified complex number.
  remarks: "The <xref:System.Numerics.Complex.op_UnaryNegation%2A> method defines the operation of the unary negation (additive inverse) operator for complex numbers. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.Complex.Negate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.negate/cs/negate2.cs#2)]\n [!code-vb[System.Numerics.Complex.Negate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.negate/vb/negate2.vb#2)]  \n  \n The resulting complex number produces a value of <xref:System.Numerics.Complex> 0 (zero) when it is added to the original complex number. Languages that do not support custom operators can call the <xref:System.Numerics.Complex.Negate%2A> method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.Complex.Negate%28System.Numerics.Complex%29?displayProperty=fullName>"
  syntax:
    content: public static System.Numerics.Complex op_UnaryNegation (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: The value to negate.
    return:
      type: System.Numerics.Complex
      description: The result of the <xref href="System.Numerics.Complex.Real"></xref> and <xref href="System.Numerics.Complex.Imaginary"></xref> components of the <code>value</code> parameter multiplied by -1.
  overload: System.Numerics.Complex.op_UnaryNegation*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Phase
  commentId: P:System.Numerics.Complex.Phase
  id: Phase
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Phase
  nameWithType: Complex.Phase
  fullName: Complex.Phase
  type: Property
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Gets the phase of a complex number.
  remarks: "For a complex number a + bi, the phase is computed as <xref:System.Math.Atan2%2A?displayProperty=fullName>(b, a).  \n  \n You can identify a complex number by its Cartesian coordinates on the complex plane or by its polar coordinates. The phase (argument) of a complex number is the angle to the real axis of a line drawn from the point of origin (the intersection of the x-axis and the y-axis) to the point represented by the complex number. The magnitude (represented by the <xref:System.Numerics.Complex.Magnitude%2A> property) is the distance from the point of origin to the point that is represented by the complex number.  \n  \n You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method.  \n  \n To convert the phase from radians to degrees, multiply it by 180/<xref:System.Math.PI?displayProperty=fullName>."
  example:
  - "The following example uses the <xref:System.Numerics.Complex.FromPolarCoordinates%2A> method to instantiate a complex number based on its polar coordinates, and then displays the value of its <xref:System.Numerics.Complex.Magnitude%2A> and <xref:System.Numerics.Complex.Phase%2A> properties.  \n  \n [!code-csharp[System.Numerics.Complex.Phase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.phase/cs/phase1.cs#1)]\n [!code-vb[System.Numerics.Complex.Phase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.phase/vb/phase1.vb#1)]"
  syntax:
    content: public double Phase { get; }
    return:
      type: System.Double
      description: The phase of a complex number, in radians.
  overload: System.Numerics.Complex.Phase*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  commentId: M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  id: Pow(System.Numerics.Complex,System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Pow(Complex, Double)
  nameWithType: Complex.Pow(Complex, Double)
  fullName: Complex.Pow(Complex, Double)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a specified complex number raised to a power specified by a double-precision floating-point number.
  remarks: "If `value` is <xref:System.Numerics.Complex?displayProperty=fullName>, the method returns <xref:System.Numerics.Complex?displayProperty=fullName>. For other values, if `power` is 0, the method returns <xref:System.Numerics.Complex?displayProperty=fullName>, and if `power` is 1, it returns `value`.  \n  \n This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=fullName> method for primitive numeric types."
  example:
  - "The following example illustrates exponentiation using a complex number and an exponent whose value ranges from -1 to 10.  \n  \n [!code-csharp[System.Numerics.Complex.Pow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.pow/cs/pow1.cs#1)]\n [!code-vb[System.Numerics.Complex.Pow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.pow/vb/pow1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Pow (System.Numerics.Complex value, double power);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number to be raised to a power.
    - id: power
      type: System.Double
      description: A double-precision floating-point number that specifies a power.
    return:
      type: System.Numerics.Complex
      description: The complex number <code>value</code> raised to the power <code>power</code>.
  overload: System.Numerics.Complex.Pow*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  id: Pow(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Pow(Complex, Complex)
  nameWithType: Complex.Pow(Complex, Complex)
  fullName: Complex.Pow(Complex, Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a specified complex number raised to a power specified by a complex number.
  syntax:
    content: public static System.Numerics.Complex Pow (System.Numerics.Complex value, System.Numerics.Complex power);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number to be raised to a power.
    - id: power
      type: System.Numerics.Complex
      description: A complex number that specifies a power.
    return:
      type: System.Numerics.Complex
      description: The complex number <code>value</code> raised to the power <code>power</code>.
  overload: System.Numerics.Complex.Pow*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Real
  commentId: P:System.Numerics.Complex.Real
  id: Real
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Real
  nameWithType: Complex.Real
  fullName: Complex.Real
  type: Property
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Gets the real component of the current <xref href="System.Numerics.Complex"></xref> object.
  remarks: Given a complex number a + bi, the <xref:System.Numerics.Complex.Real%2A> property returns the value of a.
  example:
  - "The following example instantiates an array of <xref:System.Numerics.Complex> objects and displays the real and imaginary components of each in the form a + bi.  \n  \n [!code-csharp[System.Numerics.Complex.Real#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.real/cs/real1.cs#1)]\n [!code-vb[System.Numerics.Complex.Real#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.real/vb/real1.vb#1)]"
  syntax:
    content: public double Real { get; }
    return:
      type: System.Double
      description: The real component of a complex number.
  overload: System.Numerics.Complex.Real*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  id: Reciprocal(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Reciprocal(Complex)
  nameWithType: Complex.Reciprocal(Complex)
  fullName: Complex.Reciprocal(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the multiplicative inverse of a complex number.
  remarks: "The reciprocal, or multiplicative inverse, of a number *x* is a number *y* where *x* multiplied by *y* yields 1. The reciprocal of a complex number is the complex number that produces <xref:System.Numerics.Complex?displayProperty=fullName> when the two numbers are multiplied. If a complex number is represented by a +bi, its reciprocal is represented by the expression a/(a<sup>2</sup>+b<sup>2</sup>) + -b/(a<sup>2</sup> + b<sup>2</sup>).  \n  \n If value is <xref:System.Numerics.Complex?displayProperty=fullName>, the method returns <xref:System.Numerics.Complex?displayProperty=fullName>. Otherwise, it returns the result of the expression <xref:System.Numerics.Complex?displayProperty=fullName>/`value`."
  example:
  - "The following example uses the <xref:System.Numerics.Complex.Reciprocal%2A> method to calculate the reciprocal values of several complex numbers. It also demonstrates that the result of multiplying a complex number by its reciprocal is <xref:System.Numerics.Complex?displayProperty=fullName>.  \n  \n [!code-csharp[System.Numerics.Complex.Reciprocal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.reciprocal/cs/reciprocal1.cs#1)]\n [!code-vb[System.Numerics.Complex.Reciprocal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.reciprocal/vb/reciprocal1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Reciprocal (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The reciprocal of <code>value</code>.
  overload: System.Numerics.Complex.Reciprocal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Sin(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Sin(System.Numerics.Complex)
  id: Sin(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Sin(Complex)
  nameWithType: Complex.Sin(Complex)
  fullName: Complex.Sin(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the sine of the specified complex number.
  remarks: "The <xref:System.Numerics.Complex.Sin%2A> method for complex numbers corresponds to the <xref:System.Math.Sin%2A?displayProperty=fullName> method for real numbers.  \n  \n The <xref:System.Numerics.Complex.Sin%2A> method uses the following formula to calculate the sine of the complex number a + bi:  \n  \n (<xref:System.Math.Sin%2A>(a) * <xref:System.Math.Cosh%2A>(b), <xref:System.Math.Cos%2A>(a) * <xref:System.Math.Sinh%2A>(b))"
  example:
  - "The following example illustrates the <xref:System.Numerics.Complex.Sin%2A> method. It shows that passing the value returned by the <xref:System.Numerics.Complex.Asin%2A> method to the <xref:System.Numerics.Complex.Sin%2A> method returns the original <xref:System.Numerics.Complex> value.  \n  \n [!code-csharp[System.Numerics.Complex.Asin#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.asin/cs/asin1.cs#1)]\n [!code-vb[System.Numerics.Complex.Asin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.asin/vb/asin1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Sin (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The sine of <code>value</code>.
  overload: System.Numerics.Complex.Sin*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Sinh(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Sinh(System.Numerics.Complex)
  id: Sinh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Sinh(Complex)
  nameWithType: Complex.Sinh(Complex)
  fullName: Complex.Sinh(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the hyperbolic sine of the specified complex number.
  remarks: "The <xref:System.Numerics.Complex.Sinh%2A> method for complex numbers corresponds to the <xref:System.Math.Sinh%2A?displayProperty=fullName> method for real numbers.  \n  \n The <xref:System.Numerics.Complex.Sinh%2A> method uses the following formula to calculate the hyperbolic sine of the complex number a + bi:  \n  \n (<xref:System.Math.Sinh%2A>(a) * <xref:System.Math.Cos%2A>(b), <xref:System.Math.Cosh%2A>(a) * <xref:System.Math.Sin%2A>(b))"
  syntax:
    content: public static System.Numerics.Complex Sinh (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The hyperbolic sine of <code>value</code>.
  overload: System.Numerics.Complex.Sinh*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  id: Sqrt(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Sqrt(Complex)
  nameWithType: Complex.Sqrt(Complex)
  fullName: Complex.Sqrt(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the square root of a specified complex number.
  remarks: "The square root of the complex number `value` is calculated by using the following formula:  \n  \n <xref:System.Numerics.Complex.FromPolarCoordinates%2A?displayProperty=fullName>(<xref:System.Math.Sqrt%2A?displayProperty=fullName>(`value`.<xref:System.Numerics.Complex.Magnitude%2A>), `value`.<xref:System.Numerics.Complex.Phase%2A>/2.0)   \n  \n The <xref:System.Numerics.Complex.Sqrt%2A> method for complex numbers corresponds to the <xref:System.Math.Sqrt%2A?displayProperty=fullName> method for real numbers."
  syntax:
    content: public static System.Numerics.Complex Sqrt (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The square root of <code>value</code>.
  overload: System.Numerics.Complex.Sqrt*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  id: Subtract(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Subtract(Complex, Complex)
  nameWithType: Complex.Subtract(Complex, Complex)
  fullName: Complex.Subtract(Complex, Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Subtracts one complex number from another and returns the result.
  remarks: "The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form:  \n  \n (a - c) + (b - d)i  \n  \n If the method call results in an overflow in either the real or imaginary component, the value of that component is either <xref:System.Double.PositiveInfinity?displayProperty=fullName> or <xref:System.Double.NegativeInfinity?displayProperty=fullName>.  \n  \n Languages that do not support custom operators can use the <xref:System.Numerics.Complex.Subtract%2A> method to perform subtraction using complex numbers."
  example:
  - "The following example subtracts each complex number in an array from a complex number.  \n  \n [!code-csharp[System.Numerics.Complex.Subtract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.subtract/cs/subtract1.cs#1)]\n [!code-vb[System.Numerics.Complex.Subtract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.subtract/vb/subtract1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Subtract (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The value to subtract from (the minuend).
    - id: right
      type: System.Numerics.Complex
      description: The value to subtract (the subtrahend).
    return:
      type: System.Numerics.Complex
      description: The result of subtracting <code>right</code> from <code>left</code>.
  overload: System.Numerics.Complex.Subtract*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Tan(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Tan(System.Numerics.Complex)
  id: Tan(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Tan(Complex)
  nameWithType: Complex.Tan(Complex)
  fullName: Complex.Tan(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the tangent of the specified complex number.
  remarks: "The <xref:System.Numerics.Complex.Tan%2A> method for complex numbers corresponds to the <xref:System.Math.Tan%2A?displayProperty=fullName> method for real numbers.  \n  \n The <xref:System.Numerics.Complex.Tan%2A> method uses the following formula to calculate the tangent of the complex number `value`:  \n  \n <xref:System.Numerics.Complex.Sin%2A>(`value`) / <xref:System.Numerics.Complex.Cos%2A>(`value`)"
  example:
  - "The following example illustrates the <xref:System.Numerics.Complex.Tan%2A> method. It shows that passing the value returned by the <xref:System.Numerics.Complex.Atan%2A> method to the <xref:System.Numerics.Complex.Tan%2A> method returns the original <xref:System.Numerics.Complex> value.  \n  \n [!code-csharp[System.Numerics.Complex.Atan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.atan/cs/atan1.cs#1)]\n [!code-vb[System.Numerics.Complex.Atan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.atan/vb/atan1.vb#1)]"
  syntax:
    content: public static System.Numerics.Complex Tan (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The tangent of <code>value</code>.
  overload: System.Numerics.Complex.Tan*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Tanh(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Tanh(System.Numerics.Complex)
  id: Tanh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Tanh(Complex)
  nameWithType: Complex.Tanh(Complex)
  fullName: Complex.Tanh(Complex)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the hyperbolic tangent of the specified complex number.
  remarks: "The <xref:System.Numerics.Complex.Tanh%2A> method for complex numbers corresponds to the <xref:System.Math.Tanh%2A?displayProperty=fullName> method for real numbers.  \n  \n The <xref:System.Numerics.Complex.Tanh%2A> method uses the following formula to calculate the hyperbolic tangent of the complex number `value`:  \n  \n <xref:System.Numerics.Complex.Sinh%2A>(`value`) / <xref:System.Numerics.Complex.Cosh%2A>(`value`)"
  syntax:
    content: public static System.Numerics.Complex Tanh (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The hyperbolic tangent of <code>value</code>.
  overload: System.Numerics.Complex.Tanh*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.ToString
  commentId: M:System.Numerics.Complex.ToString
  id: ToString
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: ToString()
  nameWithType: Complex.ToString()
  fullName: Complex.ToString()
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Converts the value of the current complex number to its equivalent string representation in Cartesian form.
  remarks: The default string representation of a complex number displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part. Both *a* and *b* are formatted using the general format specifier ("G") and the conventions of the current system culture.
  example:
  - "The following example displays the string representation of several complex numbers. The output uses the formatting conventions of the English - United States (\"en-US\") culture, which, in this case, is the current system culture.  \n  \n [!code-csharp[System.Numerics.Complex.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring1.cs#1)]\n [!code-vb[System.Numerics.Complex.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring1.vb#1)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The string representation of the current instance in Cartesian form.
  overload: System.Numerics.Complex.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.ToString(System.IFormatProvider)
  commentId: M:System.Numerics.Complex.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: Complex.ToString(IFormatProvider)
  fullName: Complex.ToString(IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.
  remarks: "The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part. Both *a* and *b* are formatted using the general format specifier (\"G\") and the conventions of the culture defined by `provider`.  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string. If `provider` is `null`, the returned string is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.  \n  \n The `provider` parameter can be one of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information  \n  \n-   The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.  \n  \n-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information."
  example:
  - "The following example displays the string representation of several complex numbers. The result uses the formatting conventions of the English - United States (\"en-US\") and French - France (\"fr-FR\") cultures.  \n  \n [!code-csharp[System.Numerics.Complex.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring2.cs#2)]\n [!code-vb[System.Numerics.Complex.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring2.vb#2)]"
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the current instance in Cartesian form, as specified by <code>provider</code>.
  overload: System.Numerics.Complex.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.ToString(System.String)
  commentId: M:System.Numerics.Complex.ToString(System.String)
  id: ToString(System.String)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: ToString(String)
  nameWithType: Complex.ToString(String)
  fullName: Complex.ToString(String)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.
  remarks: "The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part. Both *a* and *b* are formatted using the format string specified by `format`. The `format` parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers. If `format` is equal to <xref:System.String?displayProperty=fullName> or is `null`, the real and imaginary parts of the complex number are formatted with the general format specifier (\"G\"). If `format` is any other value, the method throws a <xref:System.FormatException>.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:  \n  \n-   For more information about numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture. Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.Complex.ToString%28System.String%2CSystem.IFormatProvider%29> overload."
  example:
  - "The following example initializes a complex number and displays it using several standard format strings.  \n  \n [!code-csharp[System.Numerics.Complex.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring3.cs#3)]\n [!code-vb[System.Numerics.Complex.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring3.vb#3)]"
  syntax:
    content: public string ToString (string format);
    parameters:
    - id: format
      type: System.String
      description: A standard or custom numeric format string.
    return:
      type: System.String
      description: The string representation of the current instance in Cartesian form.
  overload: System.Numerics.Complex.ToString*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>format</code> is not a valid format string.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  commentId: M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: ToString(String, IFormatProvider)
  nameWithType: Complex.ToString(String, IFormatProvider)
  fullName: Complex.ToString(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.
  remarks: "The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form `(`*a*`,` *b*`)`, where *a* is the real part of the complex number, and *b* is its imaginary part. Both *a* and *b* are formatted using the format string specified by `format`. The `format` parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers. If `format` is equal to <xref:System.String?displayProperty=fullName> or is `null`, the real and imaginary parts of the complex number are formatted with the general format specifier (\"G\"). If `format` is any other value, the method throws a <xref:System.FormatException>.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:  \n  \n-   For more information about numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string. Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. If `provider` is `null`, the returned string is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.  \n  \n The `provider` parameter can be one of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information  \n  \n-   The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.  \n  \n-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information."
  example:
  - "The following example creates an array of complex numbers, and displays each using several standard format strings as well as <xref:System.Globalization.CultureInfo> objects that represent the English - United States (\"en-US\") and French - France (\"fr-FR\") cultures.  \n  \n [!code-csharp[System.Numerics.Complex.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.tostring/cs/tostring4.cs#4)]\n [!code-vb[System.Numerics.Complex.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.tostring/vb/tostring4.vb#4)]"
  syntax:
    content: public string ToString (string format, IFormatProvider provider);
    parameters:
    - id: format
      type: System.String
      description: A standard or custom numeric format string.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the current instance in Cartesian form, as specified by <code>format</code> and <code>provider</code>.
  overload: System.Numerics.Complex.ToString*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>format</code> is not a valid format string.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Complex.Zero
  commentId: F:System.Numerics.Complex.Zero
  id: Zero
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Zero
  nameWithType: Complex.Zero
  fullName: Complex.Zero
  type: Field
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a new <xref href="System.Numerics.Complex"></xref> instance with a real number equal to zero and an imaginary number equal to zero.
  remarks: The <xref:System.Numerics.Complex.Zero> property is most frequently used to compare a <xref:System.Numerics.Complex> value to zero.
  example:
  - "The following example instantiates a <xref:System.Numerics.Complex> value by using the <xref:System.Numerics.Complex.Zero> property. It then compares this value to another value that is instantiated by calling the <xref:System.Numerics.Complex> constructor with a real part equal to zero and an imaginary part equal to zero. As the output from the example shows, the two values are equal.  \n  \n [!code-csharp[System.Numerics.Complex.Zero#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.complex.zero/cs/zero1.cs#1)]\n [!code-vb[System.Numerics.Complex.Zero#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.complex.zero/vb/zero1.vb#1)]"
  syntax:
    content: public static readonly System.Numerics.Complex Zero;
    return:
      type: System.Numerics.Complex
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.Numerics.Complex.#ctor(System.Double,System.Double)
  parent: System.Numerics.Complex
  isExternal: false
  name: Complex(Double, Double)
  nameWithType: Complex.Complex(Double, Double)
  fullName: Complex.Complex(Double, Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Numerics.Complex.Abs(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Abs(Complex)
  nameWithType: Complex.Abs(Complex)
  fullName: Complex.Abs(Complex)
- uid: System.Numerics.Complex
  parent: System.Numerics
  isExternal: false
  name: Complex
  nameWithType: Complex
  fullName: System.Numerics.Complex
- uid: System.Numerics.Complex.Acos(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Acos(Complex)
  nameWithType: Complex.Acos(Complex)
  fullName: Complex.Acos(Complex)
- uid: System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Add(Complex, Complex)
  nameWithType: Complex.Add(Complex, Complex)
  fullName: Complex.Add(Complex, Complex)
- uid: System.Numerics.Complex.Asin(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Asin(Complex)
  nameWithType: Complex.Asin(Complex)
  fullName: Complex.Asin(Complex)
- uid: System.Numerics.Complex.Atan(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Atan(Complex)
  nameWithType: Complex.Atan(Complex)
  fullName: Complex.Atan(Complex)
- uid: System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Conjugate(Complex)
  nameWithType: Complex.Conjugate(Complex)
  fullName: Complex.Conjugate(Complex)
- uid: System.Numerics.Complex.Cos(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Cos(Complex)
  nameWithType: Complex.Cos(Complex)
  fullName: Complex.Cos(Complex)
- uid: System.Numerics.Complex.Cosh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Cosh(Complex)
  nameWithType: Complex.Cosh(Complex)
  fullName: Complex.Cosh(Complex)
- uid: System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Divide(Complex, Complex)
  nameWithType: Complex.Divide(Complex, Complex)
  fullName: Complex.Divide(Complex, Complex)
- uid: System.Numerics.Complex.Equals(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Equals(Complex)
  nameWithType: Complex.Equals(Complex)
  fullName: Complex.Equals(Complex)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Numerics.Complex.Equals(System.Object)
  parent: System.Numerics.Complex
  isExternal: false
  name: Equals(Object)
  nameWithType: Complex.Equals(Object)
  fullName: Complex.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Numerics.Complex.Exp(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Exp(Complex)
  nameWithType: Complex.Exp(Complex)
  fullName: Complex.Exp(Complex)
- uid: System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  parent: System.Numerics.Complex
  isExternal: false
  name: FromPolarCoordinates(Double, Double)
  nameWithType: Complex.FromPolarCoordinates(Double, Double)
  fullName: Complex.FromPolarCoordinates(Double, Double)
- uid: System.Numerics.Complex.GetHashCode
  parent: System.Numerics.Complex
  isExternal: false
  name: GetHashCode()
  nameWithType: Complex.GetHashCode()
  fullName: Complex.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Numerics.Complex.Imaginary
  parent: System.Numerics.Complex
  isExternal: false
  name: Imaginary
  nameWithType: Complex.Imaginary
  fullName: Complex.Imaginary
- uid: System.Numerics.Complex.ImaginaryOne
  parent: System.Numerics.Complex
  isExternal: false
  name: ImaginaryOne
  nameWithType: Complex.ImaginaryOne
  fullName: Complex.ImaginaryOne
- uid: System.Numerics.Complex.Log(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Log(Complex)
  nameWithType: Complex.Log(Complex)
  fullName: Complex.Log(Complex)
- uid: System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  parent: System.Numerics.Complex
  isExternal: false
  name: Log(Complex, Double)
  nameWithType: Complex.Log(Complex, Double)
  fullName: Complex.Log(Complex, Double)
- uid: System.Numerics.Complex.Log10(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Log10(Complex)
  nameWithType: Complex.Log10(Complex)
  fullName: Complex.Log10(Complex)
- uid: System.Numerics.Complex.Magnitude
  parent: System.Numerics.Complex
  isExternal: false
  name: Magnitude
  nameWithType: Complex.Magnitude
  fullName: Complex.Magnitude
- uid: System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Multiply(Complex, Complex)
  nameWithType: Complex.Multiply(Complex, Complex)
  fullName: Complex.Multiply(Complex, Complex)
- uid: System.Numerics.Complex.Negate(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Negate(Complex)
  nameWithType: Complex.Negate(Complex)
  fullName: Complex.Negate(Complex)
- uid: System.Numerics.Complex.One
  parent: System.Numerics.Complex
  isExternal: false
  name: One
  nameWithType: Complex.One
  fullName: Complex.One
- uid: System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Addition(Complex, Complex)
  nameWithType: Complex.op_Addition(Complex, Complex)
  fullName: Complex.op_Addition(Complex, Complex)
- uid: System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Division(Complex, Complex)
  nameWithType: Complex.op_Division(Complex, Complex)
  fullName: Complex.op_Division(Complex, Complex)
- uid: System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Equality(Complex, Complex)
  nameWithType: Complex.op_Equality(Complex, Complex)
  fullName: Complex.op_Equality(Complex, Complex)
- uid: System.Numerics.Complex.op_Explicit(System.Decimal to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Explicit(Decimal to Complex)
  nameWithType: Complex.op_Explicit(Decimal to Complex)
  fullName: Complex.op_Explicit(Decimal to Complex)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Explicit(BigInteger to Complex)
  nameWithType: Complex.op_Explicit(BigInteger to Complex)
  fullName: Complex.op_Explicit(BigInteger to Complex)
- uid: System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: false
  name: BigInteger
  nameWithType: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.Numerics.Complex.op_Implicit(System.UInt64 to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(UInt64 to Complex)
  nameWithType: Complex.op_Implicit(UInt64 to Complex)
  fullName: Complex.op_Implicit(UInt64 to Complex)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Numerics.Complex.op_Implicit(System.UInt32 to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(UInt32 to Complex)
  nameWithType: Complex.op_Implicit(UInt32 to Complex)
  fullName: Complex.op_Implicit(UInt32 to Complex)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Numerics.Complex.op_Implicit(System.UInt16 to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(UInt16 to Complex)
  nameWithType: Complex.op_Implicit(UInt16 to Complex)
  fullName: Complex.op_Implicit(UInt16 to Complex)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Numerics.Complex.op_Implicit(System.Single to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(Single to Complex)
  nameWithType: Complex.op_Implicit(Single to Complex)
  fullName: Complex.op_Implicit(Single to Complex)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Numerics.Complex.op_Implicit(System.SByte to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(SByte to Complex)
  nameWithType: Complex.op_Implicit(SByte to Complex)
  fullName: Complex.op_Implicit(SByte to Complex)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Numerics.Complex.op_Implicit(System.Byte to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(Byte to Complex)
  nameWithType: Complex.op_Implicit(Byte to Complex)
  fullName: Complex.op_Implicit(Byte to Complex)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Numerics.Complex.op_Implicit(System.Int32 to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(Int32 to Complex)
  nameWithType: Complex.op_Implicit(Int32 to Complex)
  fullName: Complex.op_Implicit(Int32 to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Int16 to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(Int16 to Complex)
  nameWithType: Complex.op_Implicit(Int16 to Complex)
  fullName: Complex.op_Implicit(Int16 to Complex)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Numerics.Complex.op_Implicit(System.Double to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(Double to Complex)
  nameWithType: Complex.op_Implicit(Double to Complex)
  fullName: Complex.op_Implicit(Double to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Int64 to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(Int64 to Complex)
  nameWithType: Complex.op_Implicit(Int64 to Complex)
  fullName: Complex.op_Implicit(Int64 to Complex)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Inequality(Complex, Complex)
  nameWithType: Complex.op_Inequality(Complex, Complex)
  fullName: Complex.op_Inequality(Complex, Complex)
- uid: System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Multiply(Complex, Complex)
  nameWithType: Complex.op_Multiply(Complex, Complex)
  fullName: Complex.op_Multiply(Complex, Complex)
- uid: System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Subtraction(Complex, Complex)
  nameWithType: Complex.op_Subtraction(Complex, Complex)
  fullName: Complex.op_Subtraction(Complex, Complex)
- uid: System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_UnaryNegation(Complex)
  nameWithType: Complex.op_UnaryNegation(Complex)
  fullName: Complex.op_UnaryNegation(Complex)
- uid: System.Numerics.Complex.Phase
  parent: System.Numerics.Complex
  isExternal: false
  name: Phase
  nameWithType: Complex.Phase
  fullName: Complex.Phase
- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  parent: System.Numerics.Complex
  isExternal: false
  name: Pow(Complex, Double)
  nameWithType: Complex.Pow(Complex, Double)
  fullName: Complex.Pow(Complex, Double)
- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Pow(Complex, Complex)
  nameWithType: Complex.Pow(Complex, Complex)
  fullName: Complex.Pow(Complex, Complex)
- uid: System.Numerics.Complex.Real
  parent: System.Numerics.Complex
  isExternal: false
  name: Real
  nameWithType: Complex.Real
  fullName: Complex.Real
- uid: System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Reciprocal(Complex)
  nameWithType: Complex.Reciprocal(Complex)
  fullName: Complex.Reciprocal(Complex)
- uid: System.Numerics.Complex.Sin(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Sin(Complex)
  nameWithType: Complex.Sin(Complex)
  fullName: Complex.Sin(Complex)
- uid: System.Numerics.Complex.Sinh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Sinh(Complex)
  nameWithType: Complex.Sinh(Complex)
  fullName: Complex.Sinh(Complex)
- uid: System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Sqrt(Complex)
  nameWithType: Complex.Sqrt(Complex)
  fullName: Complex.Sqrt(Complex)
- uid: System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Subtract(Complex, Complex)
  nameWithType: Complex.Subtract(Complex, Complex)
  fullName: Complex.Subtract(Complex, Complex)
- uid: System.Numerics.Complex.Tan(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Tan(Complex)
  nameWithType: Complex.Tan(Complex)
  fullName: Complex.Tan(Complex)
- uid: System.Numerics.Complex.Tanh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Tanh(Complex)
  nameWithType: Complex.Tanh(Complex)
  fullName: Complex.Tanh(Complex)
- uid: System.Numerics.Complex.ToString
  parent: System.Numerics.Complex
  isExternal: false
  name: ToString()
  nameWithType: Complex.ToString()
  fullName: Complex.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Numerics.Complex.ToString(System.IFormatProvider)
  parent: System.Numerics.Complex
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: Complex.ToString(IFormatProvider)
  fullName: Complex.ToString(IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Numerics.Complex.ToString(System.String)
  parent: System.Numerics.Complex
  isExternal: false
  name: ToString(String)
  nameWithType: Complex.ToString(String)
  fullName: Complex.ToString(String)
- uid: System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.Complex
  isExternal: false
  name: ToString(String, IFormatProvider)
  nameWithType: Complex.ToString(String, IFormatProvider)
  fullName: Complex.ToString(String, IFormatProvider)
- uid: System.Numerics.Complex.Zero
  parent: System.Numerics.Complex
  isExternal: false
  name: Zero
  nameWithType: Complex.Zero
  fullName: Complex.Zero
- uid: System.Numerics.Complex.#ctor*
  parent: System.Numerics.Complex
  isExternal: false
  name: Complex
  nameWithType: Complex.Complex
  fullName: Complex.Complex
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Abs*
  parent: System.Numerics.Complex
  isExternal: false
  name: Abs
  nameWithType: Complex.Abs
  fullName: Complex.Abs
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Acos*
  parent: System.Numerics.Complex
  isExternal: false
  name: Acos
  nameWithType: Complex.Acos
  fullName: Complex.Acos
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Add*
  parent: System.Numerics.Complex
  isExternal: false
  name: Add
  nameWithType: Complex.Add
  fullName: Complex.Add
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Asin*
  parent: System.Numerics.Complex
  isExternal: false
  name: Asin
  nameWithType: Complex.Asin
  fullName: Complex.Asin
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Atan*
  parent: System.Numerics.Complex
  isExternal: false
  name: Atan
  nameWithType: Complex.Atan
  fullName: Complex.Atan
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Conjugate*
  parent: System.Numerics.Complex
  isExternal: false
  name: Conjugate
  nameWithType: Complex.Conjugate
  fullName: Complex.Conjugate
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Cos*
  parent: System.Numerics.Complex
  isExternal: false
  name: Cos
  nameWithType: Complex.Cos
  fullName: Complex.Cos
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Cosh*
  parent: System.Numerics.Complex
  isExternal: false
  name: Cosh
  nameWithType: Complex.Cosh
  fullName: Complex.Cosh
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Divide*
  parent: System.Numerics.Complex
  isExternal: false
  name: Divide
  nameWithType: Complex.Divide
  fullName: Complex.Divide
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Equals*
  parent: System.Numerics.Complex
  isExternal: false
  name: Equals
  nameWithType: Complex.Equals
  fullName: Complex.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Exp*
  parent: System.Numerics.Complex
  isExternal: false
  name: Exp
  nameWithType: Complex.Exp
  fullName: Complex.Exp
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.FromPolarCoordinates*
  parent: System.Numerics.Complex
  isExternal: false
  name: FromPolarCoordinates
  nameWithType: Complex.FromPolarCoordinates
  fullName: Complex.FromPolarCoordinates
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.GetHashCode*
  parent: System.Numerics.Complex
  isExternal: false
  name: GetHashCode
  nameWithType: Complex.GetHashCode
  fullName: Complex.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Imaginary*
  parent: System.Numerics.Complex
  isExternal: false
  name: Imaginary
  nameWithType: Complex.Imaginary
  fullName: Complex.Imaginary
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Log*
  parent: System.Numerics.Complex
  isExternal: false
  name: Log
  nameWithType: Complex.Log
  fullName: Complex.Log
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Log10*
  parent: System.Numerics.Complex
  isExternal: false
  name: Log10
  nameWithType: Complex.Log10
  fullName: Complex.Log10
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Magnitude*
  parent: System.Numerics.Complex
  isExternal: false
  name: Magnitude
  nameWithType: Complex.Magnitude
  fullName: Complex.Magnitude
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Multiply*
  parent: System.Numerics.Complex
  isExternal: false
  name: Multiply
  nameWithType: Complex.Multiply
  fullName: Complex.Multiply
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Negate*
  parent: System.Numerics.Complex
  isExternal: false
  name: Negate
  nameWithType: Complex.Negate
  fullName: Complex.Negate
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Addition*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Addition
  nameWithType: Complex.op_Addition
  fullName: Complex.op_Addition
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Division*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Division
  nameWithType: Complex.op_Division
  fullName: Complex.op_Division
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Equality*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Equality
  nameWithType: Complex.op_Equality
  fullName: Complex.op_Equality
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Explicit*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Explicit
  nameWithType: Complex.op_Explicit
  fullName: Complex.op_Explicit
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Implicit*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit
  nameWithType: Complex.op_Implicit
  fullName: Complex.op_Implicit
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Inequality*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Inequality
  nameWithType: Complex.op_Inequality
  fullName: Complex.op_Inequality
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Multiply*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Multiply
  nameWithType: Complex.op_Multiply
  fullName: Complex.op_Multiply
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_Subtraction*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Subtraction
  nameWithType: Complex.op_Subtraction
  fullName: Complex.op_Subtraction
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.op_UnaryNegation*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_UnaryNegation
  nameWithType: Complex.op_UnaryNegation
  fullName: Complex.op_UnaryNegation
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Phase*
  parent: System.Numerics.Complex
  isExternal: false
  name: Phase
  nameWithType: Complex.Phase
  fullName: Complex.Phase
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Pow*
  parent: System.Numerics.Complex
  isExternal: false
  name: Pow
  nameWithType: Complex.Pow
  fullName: Complex.Pow
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Real*
  parent: System.Numerics.Complex
  isExternal: false
  name: Real
  nameWithType: Complex.Real
  fullName: Complex.Real
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Reciprocal*
  parent: System.Numerics.Complex
  isExternal: false
  name: Reciprocal
  nameWithType: Complex.Reciprocal
  fullName: Complex.Reciprocal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Sin*
  parent: System.Numerics.Complex
  isExternal: false
  name: Sin
  nameWithType: Complex.Sin
  fullName: Complex.Sin
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Sinh*
  parent: System.Numerics.Complex
  isExternal: false
  name: Sinh
  nameWithType: Complex.Sinh
  fullName: Complex.Sinh
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Sqrt*
  parent: System.Numerics.Complex
  isExternal: false
  name: Sqrt
  nameWithType: Complex.Sqrt
  fullName: Complex.Sqrt
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Subtract*
  parent: System.Numerics.Complex
  isExternal: false
  name: Subtract
  nameWithType: Complex.Subtract
  fullName: Complex.Subtract
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Tan*
  parent: System.Numerics.Complex
  isExternal: false
  name: Tan
  nameWithType: Complex.Tan
  fullName: Complex.Tan
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.Tanh*
  parent: System.Numerics.Complex
  isExternal: false
  name: Tanh
  nameWithType: Complex.Tanh
  fullName: Complex.Tanh
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.Numerics.Complex.ToString*
  parent: System.Numerics.Complex
  isExternal: false
  name: ToString
  nameWithType: Complex.ToString
  fullName: Complex.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Complex.xml
- uid: System.IEquatable`1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
- uid: System.IEquatable{System.Numerics.Complex}
  parent: System
  isExternal: false
  name: IEquatable<Complex>
  nameWithType: IEquatable<Complex>
  fullName: System.IEquatable<System.Numerics.Complex>
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Numerics.Complex
    name: Complex
    nameWithType: Complex
    fullName: System.Numerics.Complex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
