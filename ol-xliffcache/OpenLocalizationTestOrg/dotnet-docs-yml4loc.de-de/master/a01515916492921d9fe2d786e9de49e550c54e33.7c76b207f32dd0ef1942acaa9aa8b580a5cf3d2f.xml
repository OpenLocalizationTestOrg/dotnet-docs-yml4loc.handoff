{"nodes":[{"content":"The <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> class contains the <xref href=\"System.DirectoryServices.SearchResult\"></xref> instances that the Active Directory hierarchy returned during a <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref> query.","nodes":[{"pos":[0,285],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResultCollection\"&gt;&lt;/xref&gt;</ph> class contains the <ph id=\"ph2\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> instances that the Active Directory hierarchy returned during a <ph id=\"ph3\">&lt;xref href=\"System.DirectoryServices.DirectorySearcher\"&gt;&lt;/xref&gt;</ph> query.","source":"The <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> class contains the <xref href=\"System.DirectoryServices.SearchResult\"></xref> instances that the Active Directory hierarchy returned during a <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref> query."}],"pos":[1590,1876],"yaml":true},{"content":"Due to implementation restrictions, the <xref:System.DirectoryServices.SearchResultCollection> class cannot release all of its unmanaged resources when it is garbage collected. To prevent a memory leak, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method when the <xref:System.DirectoryServices.SearchResultCollection> object is no longer needed.","nodes":[{"pos":[0,385],"content":"Due to implementation restrictions, the <xref:System.DirectoryServices.SearchResultCollection> class cannot release all of its unmanaged resources when it is garbage collected. To prevent a memory leak, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method when the <xref:System.DirectoryServices.SearchResultCollection> object is no longer needed.","nodes":[{"content":"Due to implementation restrictions, the <xref:System.DirectoryServices.SearchResultCollection> class cannot release all of its unmanaged resources when it is garbage collected. To prevent a memory leak, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method when the <xref:System.DirectoryServices.SearchResultCollection> object is no longer needed.","pos":[0,385],"nodes":[{"content":"Due to implementation restrictions, the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection&gt;</ph> class cannot release all of its unmanaged resources when it is garbage collected.","pos":[0,176],"source":"Due to implementation restrictions, the <xref:System.DirectoryServices.SearchResultCollection> class cannot release all of its unmanaged resources when it is garbage collected."},{"content":"To prevent a memory leak, you must call the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt;</ph> method when the <ph id=\"ph2\">&lt;xref:System.DirectoryServices.SearchResultCollection&gt;</ph> object is no longer needed.","pos":[177,385],"source":" To prevent a memory leak, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method when the <xref:System.DirectoryServices.SearchResultCollection> object is no longer needed."}]}]}],"pos":[1887,2273],"yaml":true,"extradata":"MT"},{"content":"Determines if a specified <xref href=\"System.DirectoryServices.SearchResult\"></xref> object is in this collection.","nodes":[{"pos":[0,114],"content":"Determines if a specified <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> object is in this collection.","source":"Determines if a specified <xref href=\"System.DirectoryServices.SearchResult\"></xref> object is in this collection."}],"pos":[4509,4624],"yaml":true},{"content":"The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to find.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> object to find.","source":"The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to find."}],"pos":[4818,4897],"yaml":true},{"content":"`true` if the specified property belongs to this collection; otherwise, `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if the specified property belongs to this collection; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the specified property belongs to this collection; otherwise, `false`."}],"pos":[4955,5038],"yaml":true},{"content":"Copies all <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection to the specific array, starting at the specified index in the target array.","nodes":[{"pos":[0,172],"content":"Copies all <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> objects in this collection to the specific array, starting at the specified index in the target array.","source":"Copies all <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection to the specific array, starting at the specified index in the target array."}],"pos":[6338,6511],"yaml":true},{"content":"The array of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects that receives the elements of this collection.","nodes":[{"pos":[0,126],"content":"The array of <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> objects that receives the elements of this collection.","source":"The array of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects that receives the elements of this collection."}],"pos":[6720,6847],"yaml":true},{"content":"The zero-based index in <code>results</code> where this method starts copying this collection.","nodes":[{"pos":[0,94],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">results</ph><ept id=\"p1\">&lt;/code&gt;</ept> where this method starts copying this collection.","source":"The zero-based index in <code>results</code> where this method starts copying this collection."}],"pos":[6907,7002],"yaml":true},{"content":"Gets the number of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection.","nodes":[{"pos":[0,105],"content":"Gets the number of <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> objects in this collection.","source":"Gets the number of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection."}],"pos":[8065,8171],"yaml":true},{"content":"The number of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection.","nodes":[{"pos":[0,100],"content":"The number of <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> objects in this collection.","source":"The number of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection."}],"pos":[8276,8377],"yaml":true},{"content":"Releases all resources that are used by the <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> object.","nodes":[{"pos":[0,120],"content":"Releases all resources that are used by the <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResultCollection\"&gt;&lt;/xref&gt;</ph> object.","source":"Releases all resources that are used by the <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> object."}],"pos":[9455,9576],"yaml":true},{"content":"The <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method, it allows the resources that are used by the <xref:System.DirectoryServices.SearchResultCollection> to be reallocated for other purposes. For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).  \n  \n The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, an application must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.","nodes":[{"pos":[0,397],"content":"The <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method, it allows the resources that are used by the <xref:System.DirectoryServices.SearchResultCollection> to be reallocated for other purposes. For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt;</ph> method, it allows the resources that are used by the <ph id=\"ph2\">&lt;xref:System.DirectoryServices.SearchResultCollection&gt;</ph> to be reallocated for other purposes.","pos":[0,215],"source":"The <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method, it allows the resources that are used by the <xref:System.DirectoryServices.SearchResultCollection> to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt;</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.","pos":[216,397],"source":" For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md)."}]},{"pos":[404,668],"content":"The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, an application must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.","nodes":[{"content":"The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, an application must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.","pos":[0,264],"nodes":[{"content":"The garbage collector does not release memory for a <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection&gt;</ph> object.","pos":[0,114],"source":"The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object."},{"content":"Therefore, an application must call the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt;</ph> method explicitly to prevent a memory leak.","pos":[115,264],"source":" Therefore, an application must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak."}]}]}],"pos":[9587,10260],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources that are used by the <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> object and optionally releases the managed resources.","nodes":[{"pos":[0,176],"content":"Releases the unmanaged resources that are used by the <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResultCollection\"&gt;&lt;/xref&gt;</ph> object and optionally releases the managed resources.","source":"Releases the unmanaged resources that are used by the <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> object and optionally releases the managed resources."}],"pos":[11475,11652],"yaml":true},{"content":"This method is called by the public <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> invokes the protected <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> with the `disposing` parameter set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources that are held by any managed objects that this <xref:System.DirectoryServices.SearchResultCollection> references.  \n  \n The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.  \n  \n This method invokes the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method of each object in the collection.  \n  \n For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose> and <xref:System.Object.Finalize%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).","nodes":[{"pos":[0,518],"content":"This method is called by the public <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> invokes the protected <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> with the `disposing` parameter set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,157],"source":"This method is called by the public <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt;</ph> invokes the protected <ph id=\"ph2\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt;</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[158,364],"source":" <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> invokes the protected <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt;</ph> with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`false`</ph>.","pos":[365,518],"source":" <xref:System.Object.Finalize%2A> invokes <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> with the `disposing` parameter set to `false`."}]},{"pos":[525,715],"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources that are held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.DirectoryServices.SearchResultCollection&gt;</ph> references.","source":"When the `disposing` parameter is `true`, this method releases all resources that are held by any managed objects that this <xref:System.DirectoryServices.SearchResultCollection> references."},{"pos":[722,975],"content":"The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.","nodes":[{"content":"The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.","pos":[0,253],"nodes":[{"content":"The garbage collector does not release memory for a <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection&gt;</ph> object.","pos":[0,114],"source":"The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object."},{"content":"Therefore, you must call the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt;</ph> method explicitly to prevent a memory leak.","pos":[115,253],"source":" Therefore, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak."}]}]},{"pos":[982,1112],"content":"This method invokes the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method of each object in the collection.","nodes":[{"content":"This method invokes the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose%2A&gt;</ph> method of each object in the collection.","pos":[0,130],"source":"This method invokes the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method of each object in the collection."}]},{"pos":[1119,1441],"content":"For more information about <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Overriding the Finalize Method<ept id=\"p2\">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.","source":"For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose> and <xref:System.Object.Finalize%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."}],"pos":[11663,13115],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[13269,13372],"yaml":true},{"content":"Overrides the <xref href=\"System.Object.Finalize\"></xref> method.","nodes":[{"pos":[0,65],"content":"Overrides the <ph id=\"ph1\">&lt;xref href=\"System.Object.Finalize\"&gt;&lt;/xref&gt;</ph> method.","source":"Overrides the <xref href=\"System.Object.Finalize\"></xref> method."}],"pos":[14458,14524],"yaml":true},{"content":"Returns an enumerator that you can use to iterate through this collection.","nodes":[{"pos":[0,74],"content":"Returns an enumerator that you can use to iterate through this collection.","nodes":[{"content":"Returns an enumerator that you can use to iterate through this collection.","pos":[0,74]}]}],"pos":[15711,15786],"yaml":true},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> object that you can use to iterate through this collection.","nodes":[{"pos":[0,114],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> object that you can use to iterate through this collection.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> object that you can use to iterate through this collection."}],"pos":[15958,16073],"yaml":true},{"content":"Gets the handle that is returned by the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method that performs the actual search. For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).","nodes":[{"pos":[0,488],"content":"Gets the handle that is returned by the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method that performs the actual search. For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).","nodes":[{"content":"Gets the handle that is returned by the <bpt id=\"p1\">[</bpt>IDirectorySearch::ExecuteSearch<ept id=\"p1\">](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp)</ept> method that performs the actual search.","pos":[0,218],"source":"Gets the handle that is returned by the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method that performs the actual search."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>IDirectorySearch::ExecuteSearch<ept id=\"p1\">](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp)</ept> topic in the MSDN Library at <bpt id=\"p2\">[</bpt>http://msdn.microsoft.com/library<ept id=\"p2\">](http://msdn.microsoft.com/library)</ept>.","pos":[219,488],"source":" For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."}]}],"pos":[17149,17638],"yaml":true},{"content":"The  <xref:System.DirectoryServices.DirectorySearcher> that created this collection calls the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method, which makes the query results available to the T:System.DirectoryServices.SearchResultCollection object. For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).  \n  \n Each time that a query is performed, a handle for the results of that query is associated with its  <xref:System.DirectoryServices.SearchResultCollection> object. This handle corresponds to the search handle in ADSI. This handle persists until you call the <xref:System.DirectoryServices.SearchResultCollection.Dispose> method on the <xref:System.DirectoryServices.SearchResultCollection> object, so you must call <xref:System.DirectoryServices.SearchResultCollection.Dispose> to prevent a memory leak. The garbage collector does not free memory for this particular object.","nodes":[{"pos":[0,615],"content":"The  <xref:System.DirectoryServices.DirectorySearcher> that created this collection calls the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method, which makes the query results available to the T:System.DirectoryServices.SearchResultCollection object. For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).","nodes":[{"content":"The  <ph id=\"ph1\">&lt;xref:System.DirectoryServices.DirectorySearcher&gt;</ph> that created this collection calls the <bpt id=\"p1\">[</bpt>IDirectorySearch::ExecuteSearch<ept id=\"p1\">](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp)</ept> method, which makes the query results available to the T:System.DirectoryServices.SearchResultCollection object.","pos":[0,345],"source":"The  <xref:System.DirectoryServices.DirectorySearcher> that created this collection calls the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method, which makes the query results available to the T:System.DirectoryServices.SearchResultCollection object."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>IDirectorySearch::ExecuteSearch<ept id=\"p1\">](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp)</ept> topic in the MSDN Library at <bpt id=\"p2\">[</bpt>http://msdn.microsoft.com/library<ept id=\"p2\">](http://msdn.microsoft.com/library)</ept>.","pos":[346,615],"source":" For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."}]},{"pos":[622,1195],"content":"Each time that a query is performed, a handle for the results of that query is associated with its  <xref:System.DirectoryServices.SearchResultCollection> object. This handle corresponds to the search handle in ADSI. This handle persists until you call the <xref:System.DirectoryServices.SearchResultCollection.Dispose> method on the <xref:System.DirectoryServices.SearchResultCollection> object, so you must call <xref:System.DirectoryServices.SearchResultCollection.Dispose> to prevent a memory leak. The garbage collector does not free memory for this particular object.","nodes":[{"content":"Each time that a query is performed, a handle for the results of that query is associated with its  <xref:System.DirectoryServices.SearchResultCollection> object. This handle corresponds to the search handle in ADSI. This handle persists until you call the <xref:System.DirectoryServices.SearchResultCollection.Dispose> method on the <xref:System.DirectoryServices.SearchResultCollection> object, so you must call <xref:System.DirectoryServices.SearchResultCollection.Dispose> to prevent a memory leak. The garbage collector does not free memory for this particular object.","pos":[0,573],"nodes":[{"content":"Each time that a query is performed, a handle for the results of that query is associated with its  <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection&gt;</ph> object.","pos":[0,162],"source":"Each time that a query is performed, a handle for the results of that query is associated with its  <xref:System.DirectoryServices.SearchResultCollection> object."},{"content":"This handle corresponds to the search handle in ADSI.","pos":[163,216]},{"content":"This handle persists until you call the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose&gt;</ph> method on the <ph id=\"ph2\">&lt;xref:System.DirectoryServices.SearchResultCollection&gt;</ph> object, so you must call <ph id=\"ph3\">&lt;xref:System.DirectoryServices.SearchResultCollection.Dispose&gt;</ph> to prevent a memory leak.","pos":[217,502],"source":" This handle persists until you call the <xref:System.DirectoryServices.SearchResultCollection.Dispose> method on the <xref:System.DirectoryServices.SearchResultCollection> object, so you must call <xref:System.DirectoryServices.SearchResultCollection.Dispose> to prevent a memory leak."},{"content":"The garbage collector does not free memory for this particular object.","pos":[503,573]}]}]}],"pos":[17649,18849],"yaml":true,"extradata":"MT"},{"content":"The ADS_SEARCH_HANDLE value that this collection uses.","nodes":[{"pos":[0,54],"content":"The ADS_SEARCH_HANDLE value that this collection uses.","nodes":[{"content":"The ADS_SEARCH_HANDLE value that this collection uses.","pos":[0,54]}]}],"pos":[18959,19014],"yaml":true},{"content":"Returns the index of the first occurrence of the specified <xref href=\"System.DirectoryServices.SearchResult\"></xref> object in this collection.","nodes":[{"pos":[0,144],"content":"Returns the index of the first occurrence of the specified <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> object in this collection.","source":"Returns the index of the first occurrence of the specified <xref href=\"System.DirectoryServices.SearchResult\"></xref> object in this collection."}],"pos":[20246,20391],"yaml":true},{"content":"The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to search for in this collection.","nodes":[{"pos":[0,103],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> object to search for in this collection.","source":"The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to search for in this collection."}],"pos":[20583,20687],"yaml":true},{"content":"The zero-based index of the first matching object. Returns -1 if no member of this collection is identical to the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object.","nodes":[{"pos":[0,180],"content":"The zero-based index of the first matching object. Returns -1 if no member of this collection is identical to the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object.","nodes":[{"content":"The zero-based index of the first matching object.","pos":[0,50]},{"content":"Returns -1 if no member of this collection is identical to the <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> object.","pos":[51,180],"source":" Returns -1 if no member of this collection is identical to the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object."}]}],"pos":[20743,20924],"yaml":true},{"content":"Gets the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object that is located at a specified index in this collection.","nodes":[{"pos":[0,131],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> object that is located at a specified index in this collection.","source":"Gets the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object that is located at a specified index in this collection."}],"pos":[22045,22177],"yaml":true},{"content":"In C#, this property is the indexer for the <xref:System.DirectoryServices.SearchResultCollection> class.  \n  \n In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of <xref:System.String>.","nodes":[{"pos":[0,105],"content":"In C#, this property is the indexer for the <xref:System.DirectoryServices.SearchResultCollection> class.","nodes":[{"content":"In C#, this property is the indexer for the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SearchResultCollection&gt;</ph> class.","pos":[0,105],"source":"In C#, this property is the indexer for the <xref:System.DirectoryServices.SearchResultCollection> class."}]},{"pos":[112,400],"content":"In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of <xref:System.String>.","nodes":[{"content":"In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of <xref:System.String>.","pos":[0,288],"nodes":[{"content":"In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own.","pos":[0,116]},{"content":"However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of <ph id=\"ph1\">&lt;xref:System.String&gt;</ph>.","pos":[117,288],"source":" However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of <xref:System.String>."}]}]}],"pos":[22188,22593],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to retrieve.","nodes":[{"pos":[0,106],"content":"The zero-based index of the <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> object to retrieve.","source":"The zero-based index of the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to retrieve."}],"pos":[22762,22869],"yaml":true},{"content":"The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object that is located at the specified index.","nodes":[{"pos":[0,109],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;&lt;/xref&gt;</ph> object that is located at the specified index.","source":"The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object that is located at the specified index."}],"pos":[22950,23060],"yaml":true},{"content":"Gets the <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref> properties that were specified before the search was executed.","nodes":[{"pos":[0,135],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.DirectorySearcher\"&gt;&lt;/xref&gt;</ph> properties that were specified before the search was executed.","source":"Gets the <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref> properties that were specified before the search was executed."}],"pos":[24187,24323],"yaml":true},{"content":"An array of type <xref href=\"System.String\"></xref> that contains the properties that were specified in the <xref href=\"System.DirectoryServices.DirectorySearcher.PropertiesToLoad\"></xref> property collection before the search was executed.","nodes":[{"pos":[0,240],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the properties that were specified in the <ph id=\"ph2\">&lt;xref href=\"System.DirectoryServices.DirectorySearcher.PropertiesToLoad\"&gt;&lt;/xref&gt;</ph> property collection before the search was executed.","source":"An array of type <xref href=\"System.String\"></xref> that contains the properties that were specified in the <xref href=\"System.DirectoryServices.DirectorySearcher.PropertiesToLoad\"></xref> property collection before the search was executed."}],"pos":[24447,24688],"yaml":true},{"content":"Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index.","nodes":[{"pos":[0,185],"content":"Copies the elements of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> to an <ph id=\"ph2\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph>, starting at a particular <ph id=\"ph3\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> index.","source":"Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index."}],"pos":[26031,26217],"yaml":true},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,227],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","pos":[0,158],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[159,227],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[26366,26594],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[26654,26722],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[26937,26967],"yaml":true},{"content":"<code>index</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."}],"pos":[27081,27119],"yaml":true},{"content":"<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","source":"<code>array</code> is multidimensional."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,255],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}],"pos":[27213,27477],"yaml":true},{"content":"The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.","nodes":[{"pos":[0,154],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."}],"pos":[27577,27732],"yaml":true},{"content":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe).","nodes":[{"pos":[0,128],"content":"Gets a value indicating whether access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).","source":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe)."}],"pos":[28907,29036],"yaml":true},{"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.  \n  \n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.  \n  \n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n [Visual Basic, C#]  \n  \n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \n  \n```csharp  \nICollection myCollection = new ICollection();  \n  lock(myCollection.SyncRoot) {  \n  foreach (Object item in myCollection) {  \n  // Insert your code here.  \n  }  \n }  \n```  \n  \n```vb  \nDim myCollection As New ICollection()  \n Dim item As Object  \n SyncLock myCollection.SyncRoot  \n  For Each item In myCollection  \n  ' Insert your code here.  \n  Next item  \n End SyncLock  \n```","nodes":[{"pos":[0,154],"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object, which can be used to synchronize access to the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[0,154],"source":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>."}]},{"pos":[161,362],"content":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.","nodes":[{"content":"Most collection classes in the <ph id=\"ph1\">&lt;xref:System.Collections?displayProperty=fullName&gt;</ph> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.","pos":[0,201],"source":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection."}]},{"pos":[369,767],"content":"Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]},{"pos":[774,792],"content":"[Visual Basic, C#]","nodes":[{"content":"[Visual Basic, C#]","pos":[0,18]}]},{"pos":[799,949],"content":"The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:","nodes":[{"content":"The following code example shows how to lock the collection using the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> during the entire enumeration:","pos":[0,150],"source":"The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:"}]}],"pos":[29047,30420],"yaml":true,"extradata":"MT"},{"content":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`.","nodes":[{"pos":[0,126],"content":"<ph id=\"ph1\">`true`</ph> if access to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe); otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`."}],"pos":[30561,30690],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.","nodes":[{"pos":[0,113],"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>."}],"pos":[31953,32067],"yaml":true},{"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.  \n  \n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.  \n  \n In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:  \n  \n```csharp  \nICollection MyCollection =...  \n lock(MyCollection.SyncRoot) {  \n  // Some operation on the collection, which is now thread safe.  \n }  \n```  \n  \n```vb  \nDim myCollection as New ICollection()  \n SyncLock myCollection.SyncRoot  \n  ' Some operation on the collection, which is now thread safe.  \n End SyncLock  \n```  \n  \n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n [Visual Basic, C#]  \n  \n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \n  \n```csharp  \nICollection myCollection = new ICollection();  \n lock(myCollection.SyncRoot) {  \n  foreach (Object item in myCollection) {  \n  // Insert your code here.  \n  }  \n }  \n```  \n  \n```vb  \nDim myCollection As New ICollection()  \n Dim item As Object  \n SyncLock myCollection.SyncRoot  \n  For Each item In myCollection  \n  ' Insert your code here.  \n  Next item  \n End SyncLock  \n```","nodes":[{"pos":[0,312],"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.","nodes":[{"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance.","pos":[0,128]},{"content":"Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's <ph id=\"ph1\">`SyncRoot`</ph> property.","pos":[129,312],"source":" Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property."}]},{"pos":[319,1048],"content":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","nodes":[{"content":"Most collection classes in the <ph id=\"ph1\">&lt;xref:System.Collections?displayProperty=fullName&gt;</ph> namespace also implement a <ph id=\"ph2\">`Synchronized`</ph> method, which provides a synchronized wrapper around the underlying collection.","pos":[0,203],"source":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection."},{"content":"However, derived classes can provide their own synchronized version of the collection using the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property.","pos":[204,359],"source":" However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> of the collection, not directly on the collection.","pos":[360,514],"source":" The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[515,596]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","pos":[597,729]}]},{"pos":[1055,1203],"content":"In the absence of a <ph id=\"ph1\">`Synchronized`</ph> method on a collection, the expected usage for <ph id=\"ph2\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> looks like this:","source":"In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:"},{"pos":[1541,1939],"content":"Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]},{"pos":[1946,1964],"content":"[Visual Basic, C#]","nodes":[{"content":"[Visual Basic, C#]","pos":[0,18]}]},{"pos":[1971,2121],"content":"The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:","nodes":[{"content":"The following code example shows how to lock the collection using the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> during the entire enumeration:","pos":[0,150],"source":"The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:"}]}],"pos":[32078,34638],"yaml":true,"extradata":"MT"},{"content":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.","nodes":[{"pos":[0,108],"content":"An object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>."}],"pos":[34774,34883],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.DirectoryServices.SearchResultCollection\n  commentId: T:System.DirectoryServices.SearchResultCollection\n  id: SearchResultCollection\n  children:\n  - System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)\n  - System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)\n  - System.DirectoryServices.SearchResultCollection.Count\n  - System.DirectoryServices.SearchResultCollection.Dispose\n  - System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)\n  - System.DirectoryServices.SearchResultCollection.Finalize\n  - System.DirectoryServices.SearchResultCollection.GetEnumerator\n  - System.DirectoryServices.SearchResultCollection.Handle\n  - System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)\n  - System.DirectoryServices.SearchResultCollection.Item(System.Int32)\n  - System.DirectoryServices.SearchResultCollection.PropertiesLoaded\n  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized\n  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot\n  langs:\n  - csharp\n  name: SearchResultCollection\n  nameWithType: SearchResultCollection\n  fullName: System.DirectoryServices.SearchResultCollection\n  type: Class\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: The <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> class contains the <xref href=\"System.DirectoryServices.SearchResult\"></xref> instances that the Active Directory hierarchy returned during a <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref> query.\n  remarks: Due to implementation restrictions, the <xref:System.DirectoryServices.SearchResultCollection> class cannot release all of its unmanaged resources when it is garbage collected. To prevent a memory leak, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method when the <xref:System.DirectoryServices.SearchResultCollection> object is no longer needed.\n  syntax:\n    content: 'public class SearchResultCollection : MarshalByRefObject, IDisposable, System.Collections.ICollection'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.Collections.ICollection\n  - System.IDisposable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)\n  commentId: M:System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)\n  id: Contains(System.DirectoryServices.SearchResult)\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Contains(SearchResult)\n  nameWithType: SearchResultCollection.Contains(SearchResult)\n  fullName: SearchResultCollection.Contains(SearchResult)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Determines if a specified <xref href=\"System.DirectoryServices.SearchResult\"></xref> object is in this collection.\n  syntax:\n    content: public bool Contains (System.DirectoryServices.SearchResult result);\n    parameters:\n    - id: result\n      type: System.DirectoryServices.SearchResult\n      description: The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to find.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified property belongs to this collection; otherwise, `false`.'\n  overload: System.DirectoryServices.SearchResultCollection.Contains*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)\n  commentId: M:System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)\n  id: CopyTo(System.DirectoryServices.SearchResult[],System.Int32)\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: CopyTo(SearchResult[], Int32)\n  nameWithType: SearchResultCollection.CopyTo(SearchResult[], Int32)\n  fullName: SearchResultCollection.CopyTo(SearchResult[], Int32)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Copies all <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection to the specific array, starting at the specified index in the target array.\n  syntax:\n    content: public void CopyTo (System.DirectoryServices.SearchResult[] results, int index);\n    parameters:\n    - id: results\n      type: System.DirectoryServices.SearchResult[]\n      description: The array of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects that receives the elements of this collection.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in <code>results</code> where this method starts copying this collection.\n  overload: System.DirectoryServices.SearchResultCollection.CopyTo*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.Count\n  commentId: P:System.DirectoryServices.SearchResultCollection.Count\n  id: Count\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: SearchResultCollection.Count\n  fullName: SearchResultCollection.Count\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the number of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of <xref href=\"System.DirectoryServices.SearchResult\"></xref> objects in this collection.\n  overload: System.DirectoryServices.SearchResultCollection.Count*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.Dispose\n  commentId: M:System.DirectoryServices.SearchResultCollection.Dispose\n  id: Dispose\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SearchResultCollection.Dispose()\n  fullName: SearchResultCollection.Dispose()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Releases all resources that are used by the <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> object.\n  remarks: \"The <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method, it allows the resources that are used by the <xref:System.DirectoryServices.SearchResultCollection> to be reallocated for other purposes. For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).  \\n  \\n The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, an application must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.DirectoryServices.SearchResultCollection.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)\n  commentId: M:System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SearchResultCollection.Dispose(Boolean)\n  fullName: SearchResultCollection.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Releases the unmanaged resources that are used by the <xref href=\"System.DirectoryServices.SearchResultCollection\"></xref> object and optionally releases the managed resources.\n  remarks: \"This method is called by the public <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> invokes the protected <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> with the `disposing` parameter set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources that are held by any managed objects that this <xref:System.DirectoryServices.SearchResultCollection> references.  \\n  \\n The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.  \\n  \\n This method invokes the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method of each object in the collection.  \\n  \\n For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose> and <xref:System.Object.Finalize%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.DirectoryServices.SearchResultCollection.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.Finalize\n  commentId: M:System.DirectoryServices.SearchResultCollection.Finalize\n  id: Finalize\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: SearchResultCollection.Finalize()\n  fullName: SearchResultCollection.Finalize()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Overrides the <xref href=\"System.Object.Finalize\"></xref> method.\n  syntax:\n    content: ~SearchResultCollection ();\n    parameters: []\n  overload: System.DirectoryServices.SearchResultCollection.Finalize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator\n  commentId: M:System.DirectoryServices.SearchResultCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: SearchResultCollection.GetEnumerator()\n  fullName: SearchResultCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Returns an enumerator that you can use to iterate through this collection.\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> object that you can use to iterate through this collection.\n  overload: System.DirectoryServices.SearchResultCollection.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.Handle\n  commentId: P:System.DirectoryServices.SearchResultCollection.Handle\n  id: Handle\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Handle\n  nameWithType: SearchResultCollection.Handle\n  fullName: SearchResultCollection.Handle\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the handle that is returned by the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method that performs the actual search. For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).\n  remarks: \"The  <xref:System.DirectoryServices.DirectorySearcher> that created this collection calls the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method, which makes the query results available to the T:System.DirectoryServices.SearchResultCollection object. For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).  \\n  \\n Each time that a query is performed, a handle for the results of that query is associated with its  <xref:System.DirectoryServices.SearchResultCollection> object. This handle corresponds to the search handle in ADSI. This handle persists until you call the <xref:System.DirectoryServices.SearchResultCollection.Dispose> method on the <xref:System.DirectoryServices.SearchResultCollection> object, so you must call <xref:System.DirectoryServices.SearchResultCollection.Dispose> to prevent a memory leak. The garbage collector does not free memory for this particular object.\"\n  syntax:\n    content: public IntPtr Handle { get; }\n    return:\n      type: System.IntPtr\n      description: The ADS_SEARCH_HANDLE value that this collection uses.\n  overload: System.DirectoryServices.SearchResultCollection.Handle*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)\n  commentId: M:System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)\n  id: IndexOf(System.DirectoryServices.SearchResult)\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: IndexOf(SearchResult)\n  nameWithType: SearchResultCollection.IndexOf(SearchResult)\n  fullName: SearchResultCollection.IndexOf(SearchResult)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Returns the index of the first occurrence of the specified <xref href=\"System.DirectoryServices.SearchResult\"></xref> object in this collection.\n  syntax:\n    content: public int IndexOf (System.DirectoryServices.SearchResult result);\n    parameters:\n    - id: result\n      type: System.DirectoryServices.SearchResult\n      description: The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to search for in this collection.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first matching object. Returns -1 if no member of this collection is identical to the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object.\n  overload: System.DirectoryServices.SearchResultCollection.IndexOf*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)\n  commentId: P:System.DirectoryServices.SearchResultCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: SearchResultCollection.Item(Int32)\n  fullName: SearchResultCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object that is located at a specified index in this collection.\n  remarks: \"In C#, this property is the indexer for the <xref:System.DirectoryServices.SearchResultCollection> class.  \\n  \\n In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of <xref:System.String>.\"\n  syntax:\n    content: public System.DirectoryServices.SearchResult this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the <xref href=\"System.DirectoryServices.SearchResult\"></xref> object to retrieve.\n    return:\n      type: System.DirectoryServices.SearchResult\n      description: The <xref href=\"System.DirectoryServices.SearchResult\"></xref> object that is located at the specified index.\n  overload: System.DirectoryServices.SearchResultCollection.Item*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded\n  commentId: P:System.DirectoryServices.SearchResultCollection.PropertiesLoaded\n  id: PropertiesLoaded\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: PropertiesLoaded\n  nameWithType: SearchResultCollection.PropertiesLoaded\n  fullName: SearchResultCollection.PropertiesLoaded\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref> properties that were specified before the search was executed.\n  syntax:\n    content: public string[] PropertiesLoaded { get; }\n    return:\n      type: System.String[]\n      description: An array of type <xref href=\"System.String\"></xref> that contains the properties that were specified in the <xref href=\"System.DirectoryServices.DirectorySearcher.PropertiesToLoad\"></xref> property collection before the search was executed.\n  overload: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: SearchResultCollection.ICollection.CopyTo(Array, Int32)\n  fullName: SearchResultCollection.ICollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.ICollection\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: ICollection.IsSynchronized\n  nameWithType: SearchResultCollection.ICollection.IsSynchronized\n  fullName: SearchResultCollection.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe).\n  remarks: \"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.  \\n  \\n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n [Visual Basic, C#]  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n```csharp  \\nICollection myCollection = new ICollection();  \\n  lock(myCollection.SyncRoot) {  \\n  foreach (Object item in myCollection) {  \\n  // Insert your code here.  \\n  }  \\n }  \\n```  \\n  \\n```vb  \\nDim myCollection As New ICollection()  \\n Dim item As Object  \\n SyncLock myCollection.SyncRoot  \\n  For Each item In myCollection  \\n  ' Insert your code here.  \\n  Next item  \\n End SyncLock  \\n```\"\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`.'\n  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.DirectoryServices.SearchResultCollection\n  langs:\n  - csharp\n  name: ICollection.SyncRoot\n  nameWithType: SearchResultCollection.ICollection.SyncRoot\n  fullName: SearchResultCollection.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.\n  remarks: \"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.  \\n  \\n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.  \\n  \\n In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:  \\n  \\n```csharp  \\nICollection MyCollection =...  \\n lock(MyCollection.SyncRoot) {  \\n  // Some operation on the collection, which is now thread safe.  \\n }  \\n```  \\n  \\n```vb  \\nDim myCollection as New ICollection()  \\n SyncLock myCollection.SyncRoot  \\n  ' Some operation on the collection, which is now thread safe.  \\n End SyncLock  \\n```  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n [Visual Basic, C#]  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n```csharp  \\nICollection myCollection = new ICollection();  \\n lock(myCollection.SyncRoot) {  \\n  foreach (Object item in myCollection) {  \\n  // Insert your code here.  \\n  }  \\n }  \\n```  \\n  \\n```vb  \\nDim myCollection As New ICollection()  \\n Dim item As Object  \\n SyncLock myCollection.SyncRoot  \\n  For Each item In myCollection  \\n  ' Insert your code here.  \\n  Next item  \\n End SyncLock  \\n```\"\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.\n  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\nreferences:\n- uid: System.MarshalByRefObject\n  parent: System\n  isExternal: false\n  name: MarshalByRefObject\n  nameWithType: MarshalByRefObject\n  fullName: System.MarshalByRefObject\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Contains(SearchResult)\n  nameWithType: SearchResultCollection.Contains(SearchResult)\n  fullName: SearchResultCollection.Contains(SearchResult)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.DirectoryServices.SearchResult\n  parent: System.DirectoryServices\n  isExternal: false\n  name: SearchResult\n  nameWithType: SearchResult\n  fullName: System.DirectoryServices.SearchResult\n- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: CopyTo(SearchResult[], Int32)\n  nameWithType: SearchResultCollection.CopyTo(SearchResult[], Int32)\n  fullName: SearchResultCollection.CopyTo(SearchResult[], Int32)\n- uid: System.DirectoryServices.SearchResult[]\n  parent: System.DirectoryServices\n  isExternal: false\n  name: SearchResult[]\n  nameWithType: SearchResult[]\n  fullName: System.DirectoryServices.SearchResult[]\n  spec.csharp:\n  - uid: System.DirectoryServices.SearchResult\n    name: SearchResult\n    nameWithType: SearchResult\n    fullName: System.DirectoryServices.SearchResult\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.DirectoryServices.SearchResultCollection.Count\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Count\n  nameWithType: SearchResultCollection.Count\n  fullName: SearchResultCollection.Count\n- uid: System.DirectoryServices.SearchResultCollection.Dispose\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Dispose()\n  nameWithType: SearchResultCollection.Dispose()\n  fullName: SearchResultCollection.Dispose()\n- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SearchResultCollection.Dispose(Boolean)\n  fullName: SearchResultCollection.Dispose(Boolean)\n- uid: System.DirectoryServices.SearchResultCollection.Finalize\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Finalize()\n  nameWithType: SearchResultCollection.Finalize()\n  fullName: SearchResultCollection.Finalize()\n- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: SearchResultCollection.GetEnumerator()\n  fullName: SearchResultCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.DirectoryServices.SearchResultCollection.Handle\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Handle\n  nameWithType: SearchResultCollection.Handle\n  fullName: SearchResultCollection.Handle\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: IndexOf(SearchResult)\n  nameWithType: SearchResultCollection.IndexOf(SearchResult)\n  fullName: SearchResultCollection.IndexOf(SearchResult)\n- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: SearchResultCollection.Item(Int32)\n  fullName: SearchResultCollection.Item(Int32)\n- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: PropertiesLoaded\n  nameWithType: SearchResultCollection.PropertiesLoaded\n  fullName: SearchResultCollection.PropertiesLoaded\n- uid: System.String\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: SearchResultCollection.ICollection.CopyTo(Array, Int32)\n  fullName: SearchResultCollection.ICollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: SearchResultCollection.ICollection.IsSynchronized\n  fullName: SearchResultCollection.ICollection.IsSynchronized\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: SearchResultCollection.ICollection.SyncRoot\n  fullName: SearchResultCollection.ICollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.DirectoryServices.SearchResultCollection.Contains*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Contains\n  nameWithType: SearchResultCollection.Contains\n  fullName: SearchResultCollection.Contains\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.DirectoryServices.SearchResultCollection.CopyTo*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: SearchResultCollection.CopyTo\n  fullName: SearchResultCollection.CopyTo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.DirectoryServices.SearchResultCollection.Count*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Count\n  nameWithType: SearchResultCollection.Count\n  fullName: SearchResultCollection.Count\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.DirectoryServices.SearchResultCollection.Dispose*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Dispose\n  nameWithType: SearchResultCollection.Dispose\n  fullName: SearchResultCollection.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.DirectoryServices.SearchResultCollection.Finalize*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Finalize\n  nameWithType: SearchResultCollection.Finalize\n  fullName: SearchResultCollection.Finalize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: SearchResultCollection.GetEnumerator\n  fullName: SearchResultCollection.GetEnumerator\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.DirectoryServices.SearchResultCollection.Handle*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Handle\n  nameWithType: SearchResultCollection.Handle\n  fullName: SearchResultCollection.Handle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.DirectoryServices.SearchResultCollection.IndexOf*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: IndexOf\n  nameWithType: SearchResultCollection.IndexOf\n  fullName: SearchResultCollection.IndexOf\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.DirectoryServices.SearchResultCollection.Item*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: Item\n  nameWithType: SearchResultCollection.Item\n  fullName: SearchResultCollection.Item\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: PropertiesLoaded\n  nameWithType: SearchResultCollection.PropertiesLoaded\n  fullName: SearchResultCollection.PropertiesLoaded\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo\n  fullName: SearchResultCollection.System.Collections.ICollection.CopyTo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized\n  fullName: SearchResultCollection.System.Collections.ICollection.IsSynchronized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.DirectoryServices.SearchResultCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot\n  fullName: SearchResultCollection.System.Collections.ICollection.SyncRoot\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SearchResultCollection.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  fullName: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}