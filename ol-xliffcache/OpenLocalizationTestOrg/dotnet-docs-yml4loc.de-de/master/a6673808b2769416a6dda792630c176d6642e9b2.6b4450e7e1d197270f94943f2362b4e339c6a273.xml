{"nodes":[{"content":"The <xref href=\"System.Timers\"></xref> namespace provides the <xref href=\"System.Timers.Timer\"></xref> component, which allows you to raise an event on a specified interval.","nodes":[{"pos":[0,173],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Timers\"&gt;&lt;/xref&gt;</ph> namespace provides the <ph id=\"ph2\">&lt;xref href=\"System.Timers.Timer\"&gt;&lt;/xref&gt;</ph> component, which allows you to raise an event on a specified interval.","source":"The <xref href=\"System.Timers\"></xref> namespace provides the <xref href=\"System.Timers.Timer\"></xref> component, which allows you to raise an event on a specified interval."}],"pos":[358,532],"yaml":true},{"content":"The <xref:System.Timers.Timer> component is a server-based timer, which allows you to specify a recurring interval at which the <xref:System.Timers.Timer.Elapsed> event is raised in your application. You can then handle this event to provide regular processing. For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week. You could create a service that uses a <xref:System.Timers.Timer> to periodically check the server and ensure that the system is up and running. If the system is not responding, the service could attempt to restart the server or notify an administrator.  \n  \n The server-based <xref:System.Timers.Timer> is designed for use with worker threads in a multithreaded environment. Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.","nodes":[{"pos":[0,620],"content":"The <xref:System.Timers.Timer> component is a server-based timer, which allows you to specify a recurring interval at which the <xref:System.Timers.Timer.Elapsed> event is raised in your application. You can then handle this event to provide regular processing. For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week. You could create a service that uses a <xref:System.Timers.Timer> to periodically check the server and ensure that the system is up and running. If the system is not responding, the service could attempt to restart the server or notify an administrator.","nodes":[{"content":"The <xref:System.Timers.Timer> component is a server-based timer, which allows you to specify a recurring interval at which the <xref:System.Timers.Timer.Elapsed> event is raised in your application. You can then handle this event to provide regular processing. For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week. You could create a service that uses a <xref:System.Timers.Timer> to periodically check the server and ensure that the system is up and running. If the system is not responding, the service could attempt to restart the server or notify an administrator.","pos":[0,620],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> component is a server-based timer, which allows you to specify a recurring interval at which the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised in your application.","pos":[0,199],"source":"The <xref:System.Timers.Timer> component is a server-based timer, which allows you to specify a recurring interval at which the <xref:System.Timers.Timer.Elapsed> event is raised in your application."},{"content":"You can then handle this event to provide regular processing.","pos":[200,261]},{"content":"For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.","pos":[262,366]},{"content":"You could create a service that uses a <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> to periodically check the server and ensure that the system is up and running.","pos":[367,511],"source":" You could create a service that uses a <xref:System.Timers.Timer> to periodically check the server and ensure that the system is up and running."},{"content":"If the system is not responding, the service could attempt to restart the server or notify an administrator.","pos":[512,620]}]}]},{"pos":[627,919],"content":"The server-based <xref:System.Timers.Timer> is designed for use with worker threads in a multithreaded environment. Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.","nodes":[{"content":"The server-based <xref:System.Timers.Timer> is designed for use with worker threads in a multithreaded environment. Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.","pos":[0,292],"nodes":[{"content":"The server-based <ph id=\"ph1\">&lt;xref:System.Timers.Timer&gt;</ph> is designed for use with worker threads in a multithreaded environment.","pos":[0,115],"source":"The server-based <xref:System.Timers.Timer> is designed for use with worker threads in a multithreaded environment."},{"content":"Server timers can move among threads to handle the raised <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, resulting in more accuracy than Windows timers in raising the event on time.","pos":[116,292],"source":" Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time."}]}]}],"pos":[543,1467],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Timers\n  id: System.Timers\n  children:\n  - System.Timers.ElapsedEventArgs\n  - System.Timers.ElapsedEventHandler\n  - System.Timers.Timer\n  - System.Timers.TimersDescriptionAttribute\n  langs:\n  - csharp\n  name: System.Timers\n  nameWithType: System.Timers\n  fullName: System.Timers\n  type: Namespace\n  summary: The <xref href=\"System.Timers\"></xref> namespace provides the <xref href=\"System.Timers.Timer\"></xref> component, which allows you to raise an event on a specified interval.\n  remarks: \"The <xref:System.Timers.Timer> component is a server-based timer, which allows you to specify a recurring interval at which the <xref:System.Timers.Timer.Elapsed> event is raised in your application. You can then handle this event to provide regular processing. For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week. You could create a service that uses a <xref:System.Timers.Timer> to periodically check the server and ensure that the system is up and running. If the system is not responding, the service could attempt to restart the server or notify an administrator.  \\n  \\n The server-based <xref:System.Timers.Timer> is designed for use with worker threads in a multithreaded environment. Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/ns-System.Timers.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Timers.ElapsedEventArgs\n  parent: System.Timers\n  isExternal: false\n  name: ElapsedEventArgs\n  nameWithType: ElapsedEventArgs\n  fullName: System.Timers.ElapsedEventArgs\n- uid: System.Timers.ElapsedEventHandler\n  parent: System.Timers\n  isExternal: false\n  name: ElapsedEventHandler\n  nameWithType: ElapsedEventHandler\n  fullName: System.Timers.ElapsedEventHandler\n- uid: System.Timers.Timer\n  parent: System.Timers\n  isExternal: false\n  name: Timer\n  nameWithType: Timer\n  fullName: System.Timers.Timer\n- uid: System.Timers.TimersDescriptionAttribute\n  parent: System.Timers\n  isExternal: false\n  name: TimersDescriptionAttribute\n  nameWithType: TimersDescriptionAttribute\n  fullName: System.Timers.TimersDescriptionAttribute\n"}