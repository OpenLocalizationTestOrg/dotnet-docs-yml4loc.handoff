<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">296b932865bc6febece44f25983855741de6ac00</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.PresentationSource.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4dfc826883c319197d6f545e31f8af78cf3564e4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0af11ae5e854855347e68e16c8c6c8121b97a043</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides an abstract base for classes that present content from another technology as part of an interoperation scenario.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In addition, this class provides static methods for working with these sources, as well as the basic visual-layer presentation architecture.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides initialization for base class values when called by the constructor of a derived class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Adds a <ph id="ph1">&lt;xref href="System.Windows.PresentationSource"&gt;&lt;/xref&gt;</ph> derived class instance to the list of known presentation sources.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be called by derived classes to indicate that they need to be tracked.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Adds a handler for the <ph id="ph1">`SourceChanged`</ph> event to the provided element.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Despite what the syntax block for this event states, there is no legitimate <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> attached property usage.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not attempt to add handlers in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>, and handlers in code should only be placed on objects that serve as hosts for presentation (<ph id="ph2">&lt;xref:System.Windows.PresentationSource&gt;</ph> ) content.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such handlers should only be attached during object initialization, and should be explicitly removed in a Dispose method or equivalent object cleanup.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even though this is a routed event, there are special restrictions placed on this event that differ from normal routed event behavior, due to the relatively small number of elements in a typical application scenario that would concern themselves with handling this event.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot use the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> <ph id="ph3">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph> methods to add handlers.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use <ph id="ph1">&lt;xref:System.Windows.PresentationSource.AddSourceChangedHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_cshrp](~/includes/tlasharptla-cshrp-md.md)]</ph> <ph id="ph2">`+=`</ph> and <ph id="ph3">`-=`</ph> event handler syntaxes, and related language specific handler syntaxes, are not supported, because the event itself is not exposed as public.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the <ph id="ph1">&lt;xref:System.Windows.PresentationSource&gt;</ph> utility methods for adding and removing the handlers directly are supported.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Class handlers are not allowed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifically, you cannot call <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> against this event in a class constructor because although an identifier field exists for SourceChanged, the identifier is not public.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>All registered handlers will receive the SourceChanged event even if one of the handlers attempts to mark the arguments as handled.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The element to add the handler to.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The hander implementation to add.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Sets the list of listeners for the <ph id="ph1">&lt;xref href="System.Windows.PresentationSource.ContentRendered"&gt;&lt;/xref&gt;</ph> event to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the visual target for the visuals being presented in the source.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return of this property relies on an implementation of <ph id="ph1">&lt;xref:System.Windows.PresentationSource.GetCompositionTargetCore%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A visual target (instance of a <ph id="ph1">&lt;xref href="System.Windows.Media.CompositionTarget"&gt;&lt;/xref&gt;</ph> derived class).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Occurs when content is rendered and ready for user interaction.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns a list of sources.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned list supports an enumerator over a read-only, thread-safe copy of the list of sources as added with <ph id="ph1">&lt;xref:System.Windows.PresentationSource.AddSource%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator skips any dead weak references in the list.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A list of weak references.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns the source in which a provided <ph id="ph1">&lt;xref href="System.Windows.DependencyObject"&gt;&lt;/xref&gt;</ph> is presented.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DependencyObject"&gt;&lt;/xref&gt;</ph> to find the source for.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.PresentationSource"&gt;&lt;/xref&gt;</ph> in which the dependency object is being presented.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Returns the source in which a provided <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> is presented.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> to find the source for.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.PresentationSource"&gt;&lt;/xref&gt;</ph> in which the visual is being presented, or <ph id="ph2">`null`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">visual</ph><ept id="p1">&lt;/code&gt;</ept> is disposed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;visual&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, returns a visual target for the given source.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&lt;xref href="System.Windows.Media.CompositionTarget"&gt;&lt;/xref&gt;</ph> that is target for rendering the visual.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets a value that declares whether the object is disposed.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the object is disposed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Removes a <ph id="ph1">&lt;xref href="System.Windows.PresentationSource"&gt;&lt;/xref&gt;</ph> derived class instance from the list of known presentation sources.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Removes a handler for the <ph id="ph1">`SourceChanged`</ph> event from the provided element.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even though this is a routed event, there are special restrictions placed on this event that differ from normal routed event behavior, due to the relatively small number of elements in a typical application scenario that would concern themselves with handling this event.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot use the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> <ph id="ph3">&lt;xref:System.Windows.UIElement.RemoveHandler%2A&gt;</ph> methods to remove handlers.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use <ph id="ph1">&lt;xref:System.Windows.PresentationSource.RemoveSourceChangedHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_cshrp](~/includes/tlasharptla-cshrp-md.md)]</ph> <ph id="ph2">`+=`</ph> and <ph id="ph3">`-=`</ph> event handler syntaxes, and other language specific handler syntaxes, are not supported, because the event itself is not exposed as public.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the <ph id="ph1">&lt;xref:System.Windows.PresentationSource&gt;</ph> utility methods for adding and removing the handlers directly are supported.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The element to remove the handler from.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The handler implementation to remove.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Provides notification that the root <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> has changed.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived classes should call this method to indicate that their root <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> has changed.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method causes two object lifetime events to be raised on the specified root visuals, if and only if those root visuals are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived classes.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The old root visual will raise the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> event, and will process its tree of elements downward, broadcasting this event to each child element.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new root visual will raise the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event, and will process its tree of elements downward, broadcasting this event to each child element.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The old root <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The new root <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets or sets the root visual being presented in the source.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The root visual.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>