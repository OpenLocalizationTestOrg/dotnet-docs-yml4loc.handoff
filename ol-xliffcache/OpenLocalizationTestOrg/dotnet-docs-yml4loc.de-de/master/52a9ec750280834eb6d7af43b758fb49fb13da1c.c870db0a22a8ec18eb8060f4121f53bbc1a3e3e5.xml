{"nodes":[{"content":"Implements `IDictionary` using a singly linked list. Recommended for collections that typically include fewer than 10 items.","nodes":[{"pos":[0,124],"content":"Implements `IDictionary` using a singly linked list. Recommended for collections that typically include fewer than 10 items.","nodes":[{"content":"Implements <ph id=\"ph1\">`IDictionary`</ph> using a singly linked list.","pos":[0,52],"source":"Implements `IDictionary` using a singly linked list."},{"content":"Recommended for collections that typically include fewer than 10 items.","pos":[53,124]}]}],"pos":[1615,1740],"yaml":true},{"content":"This is a simple implementation of <xref:System.Collections.IDictionary> using a singly linked list. It is smaller and faster than a <xref:System.Collections.Hashtable> if the number of elements is 10 or less. This should not be used if performance is important for large numbers of elements.  \n  \n Items in a <xref:System.Collections.Specialized.ListDictionary> are not in any guaranteed order; code should not depend on the current order. The <xref:System.Collections.Specialized.ListDictionary> is implemented for fast keyed retrieval; the actual internal order of items is implementation-dependent and could change in future versions of the product.  \n  \n Members, such as <xref:System.Collections.Specialized.ListDictionary.Item%2A>, <xref:System.Collections.Specialized.ListDictionary.Add%2A>, <xref:System.Collections.Specialized.ListDictionary.Remove%2A>, and <xref:System.Collections.Specialized.ListDictionary.Contains%2A> are O(`n`) operations, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.  \n  \n A key cannot be `null`, but a value can.  \n  \n The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref:System.Collections.Specialized.ListDictionary> is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>. For example:  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#3)]\n [!code-csharp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#3)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#3)]  \n  \n The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.","nodes":[{"pos":[0,292],"content":"This is a simple implementation of <xref:System.Collections.IDictionary> using a singly linked list. It is smaller and faster than a <xref:System.Collections.Hashtable> if the number of elements is 10 or less. This should not be used if performance is important for large numbers of elements.","nodes":[{"content":"This is a simple implementation of <xref:System.Collections.IDictionary> using a singly linked list. It is smaller and faster than a <xref:System.Collections.Hashtable> if the number of elements is 10 or less. This should not be used if performance is important for large numbers of elements.","pos":[0,292],"nodes":[{"content":"This is a simple implementation of <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> using a singly linked list.","pos":[0,100],"source":"This is a simple implementation of <xref:System.Collections.IDictionary> using a singly linked list."},{"content":"It is smaller and faster than a <ph id=\"ph1\">&lt;xref:System.Collections.Hashtable&gt;</ph> if the number of elements is 10 or less.","pos":[101,209],"source":" It is smaller and faster than a <xref:System.Collections.Hashtable> if the number of elements is 10 or less."},{"content":"This should not be used if performance is important for large numbers of elements.","pos":[210,292]}]}]},{"pos":[299,653],"content":"Items in a <xref:System.Collections.Specialized.ListDictionary> are not in any guaranteed order; code should not depend on the current order. The <xref:System.Collections.Specialized.ListDictionary> is implemented for fast keyed retrieval; the actual internal order of items is implementation-dependent and could change in future versions of the product.","nodes":[{"content":"Items in a <xref:System.Collections.Specialized.ListDictionary> are not in any guaranteed order; code should not depend on the current order. The <xref:System.Collections.Specialized.ListDictionary> is implemented for fast keyed retrieval; the actual internal order of items is implementation-dependent and could change in future versions of the product.","pos":[0,354],"nodes":[{"content":"Items in a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> are not in any guaranteed order; code should not depend on the current order.","pos":[0,141],"source":"Items in a <xref:System.Collections.Specialized.ListDictionary> are not in any guaranteed order; code should not depend on the current order."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> is implemented for fast keyed retrieval; the actual internal order of items is implementation-dependent and could change in future versions of the product.","pos":[142,354],"source":" The <xref:System.Collections.Specialized.ListDictionary> is implemented for fast keyed retrieval; the actual internal order of items is implementation-dependent and could change in future versions of the product."}]}]},{"pos":[660,1031],"content":"Members, such as <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary.Item%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary.Add%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.ListDictionary.Remove%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Collections.Specialized.ListDictionary.Contains%2A&gt;</ph> are O(<ph id=\"ph5\">`n`</ph>) operations, where <ph id=\"ph6\">`n`</ph> is <ph id=\"ph7\">&lt;xref:System.Collections.Specialized.ListDictionary.Count%2A&gt;</ph>.","source":"Members, such as <xref:System.Collections.Specialized.ListDictionary.Item%2A>, <xref:System.Collections.Specialized.ListDictionary.Add%2A>, <xref:System.Collections.Specialized.ListDictionary.Remove%2A>, and <xref:System.Collections.Specialized.ListDictionary.Contains%2A> are O(`n`) operations, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>."},{"pos":[1038,1078],"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can.","source":"A key cannot be `null`, but a value can."},{"pos":[1085,1476],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref:System.Collections.Specialized.ListDictionary> is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>. For example:","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.","pos":[0,136],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection."},{"content":"Since each element of the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> is a key/value pair, the element type is not the type of the key or the type of the value.","pos":[137,306],"source":" Since each element of the <xref:System.Collections.Specialized.ListDictionary> is a key/value pair, the element type is not the type of the key or the type of the value."},{"content":"Instead, the element type is <ph id=\"ph1\">&lt;xref:System.Collections.DictionaryEntry&gt;</ph>.","pos":[307,378],"source":" Instead, the element type is <xref:System.Collections.DictionaryEntry>."},{"content":"For example:","pos":[379,391]}]},{"pos":[1483,2015],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Collections.Specialized.ListDictionary2#3<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Collections.Specialized.ListDictionary2#3<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#3)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Collections.Specialized.ListDictionary2#3<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#3)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#3)]\n [!code-csharp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#3)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#3)]"},{"pos":[2022,2145],"content":"The <ph id=\"ph1\">`foreach`</ph> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.","source":"The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection."}],"pos":[1751,3913],"yaml":true,"extradata":"MT"},{"content":"Creates an empty <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> using the default comparer.","nodes":[{"pos":[0,111],"content":"Creates an empty <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph> using the default comparer.","source":"Creates an empty <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> using the default comparer."}],"pos":[6682,6794],"yaml":true},{"content":"The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n This constructor is an O(1) operation.","nodes":[{"pos":[0,244],"content":"The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.","nodes":[{"content":"The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.","pos":[0,244],"nodes":[{"content":"The comparer determines whether two keys are equal.","pos":[0,51]},{"content":"Every key in a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> must be unique.","pos":[52,135],"source":" Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique."},{"content":"The default comparer is the key's implementation of <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","pos":[136,244],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."}]}]},{"pos":[251,289],"content":"This constructor is an O(1) operation.","nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]}],"pos":[6805,7099],"yaml":true,"extradata":"MT"},{"content":"Creates an empty <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> using the specified comparer.","nodes":[{"pos":[0,113],"content":"Creates an empty <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph> using the specified comparer.","source":"Creates an empty <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> using the specified comparer."}],"pos":[9369,9483],"yaml":true},{"content":"The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n The custom comparer enables such scenarios as doing lookups with case-insensitive strings.  \n  \n This constructor is an O(1) operation.","nodes":[{"pos":[0,244],"content":"The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.","nodes":[{"content":"The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.","pos":[0,244],"nodes":[{"content":"The comparer determines whether two keys are equal.","pos":[0,51]},{"content":"Every key in a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> must be unique.","pos":[52,135],"source":" Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique."},{"content":"The default comparer is the key's implementation of <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","pos":[136,244],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."}]}]},{"pos":[251,341],"content":"The custom comparer enables such scenarios as doing lookups with case-insensitive strings.","nodes":[{"content":"The custom comparer enables such scenarios as doing lookups with case-insensitive strings.","pos":[0,90]}]},{"pos":[348,386],"content":"This constructor is an O(1) operation.","nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]}],"pos":[9494,9887],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IComparer\"></xref> to use to determine whether two keys are equal.  \n  \n -or-  \n  \n `null` to use the default comparer, which is each key's implementation of <xref href=\"System.Object.Equals(System.Object)\"></xref>.","nodes":[{"pos":[0,101],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IComparer\"&gt;&lt;/xref&gt;</ph> to use to determine whether two keys are equal.","source":"The <xref href=\"System.Collections.IComparer\"></xref> to use to determine whether two keys are equal."},{"pos":[108,112],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[119,250],"content":"<ph id=\"ph1\">`null`</ph> to use the default comparer, which is each key's implementation of <ph id=\"ph2\">&lt;xref href=\"System.Object.Equals(System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"`null` to use the default comparer, which is each key's implementation of <xref href=\"System.Object.Equals(System.Object)\"></xref>."}],"pos":[10068,10329],"yaml":true},{"content":"Adds an entry with the specified key and value into the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,123],"content":"Adds an entry with the specified key and value into the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Adds an entry with the specified key and value into the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[11781,11905],"yaml":true},{"content":"An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, String objects are better than StringBuilder objects for use as keys.  \n  \n You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.","nodes":[{"pos":[0,199],"content":"An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, String objects are better than StringBuilder objects for use as keys.","nodes":[{"content":"An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, String objects are better than StringBuilder objects for use as keys.","pos":[0,199],"nodes":[{"content":"An object that has no correlation between its state and its hash code value should typically not be used as the key.","pos":[0,116]},{"content":"For example, String objects are better than StringBuilder objects for use as keys.","pos":[117,199]}]}]},{"pos":[206,819],"content":"You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph>; for example, <ph id=\"ph3\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>.","pos":[0,280],"source":"You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection[\"myNonexistentKey\"] = myValue`."},{"content":"However, if the specified key already exists in the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph>, setting the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary.Item%2A&gt;</ph> property overwrites the old value.","pos":[281,494],"source":" However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary.Add%2A&gt;</ph> method does not modify existing elements.","pos":[495,613],"source":" In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements."}]},{"pos":[826,937],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.ListDictionary.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>."}],"pos":[11916,12862],"yaml":true,"extradata":"MT"},{"content":"The key of the entry to add.","nodes":[{"pos":[0,28],"content":"The key of the entry to add.","nodes":[{"content":"The key of the entry to add.","pos":[0,28]}]}],"pos":[13786,13815],"yaml":true},{"content":"The value of the entry to add. The value can be `null`.","nodes":[{"pos":[0,55],"content":"The value of the entry to add. The value can be `null`.","nodes":[{"content":"The value of the entry to add.","pos":[0,30]},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[31,55],"source":" The value can be `null`."}]}],"pos":[13876,13932],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[14111,14139],"yaml":true},{"content":"An entry with the same key already exists in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,116],"content":"An entry with the same key already exists in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"An entry with the same key already exists in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[14233,14350],"yaml":true},{"content":"Removes all entries from the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,96],"content":"Removes all entries from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Removes all entries from the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[15603,15700],"yaml":true},{"content":"<xref:System.Collections.Specialized.ListDictionary.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,160],"content":"<xref:System.Collections.Specialized.ListDictionary.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.","pos":[0,160],"source":"<xref:System.Collections.Specialized.ListDictionary.Count%2A> is set to zero, and references to other objects from elements of the collection are also released."}]},{"pos":[167,200],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[15711,15916],"yaml":true,"extradata":"MT"},{"content":"Determines whether the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> contains a specific key.","nodes":[{"pos":[0,114],"content":"Determines whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph> contains a specific key.","source":"Determines whether the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> contains a specific key."}],"pos":[18178,18293],"yaml":true},{"content":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,111],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.ListDictionary.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>."},{"pos":[118,553],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`key`</ph> to determine whether <ph id=\"ph4\">`item`</ph> exists.","pos":[0,207],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[208,435],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[18304,18862],"yaml":true,"extradata":"MT"},{"content":"The key to locate in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,92],"content":"The key to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"The key to locate in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[19761,19854],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> contains an entry with the specified key; otherwise, `false`.","nodes":[{"pos":[0,142],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph> contains an entry with the specified key; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> contains an entry with the specified key; otherwise, `false`."}],"pos":[19912,20057],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[20241,20269],"yaml":true},{"content":"Copies the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> entries to a one-dimensional <xref href=\"System.Array\"></xref> instance at the specified index.","nodes":[{"pos":[0,173],"content":"Copies the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph> entries to a one-dimensional <ph id=\"ph2\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> instance at the specified index.","source":"Copies the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> entries to a one-dimensional <xref href=\"System.Array\"></xref> instance at the specified index."}],"pos":[21645,21819],"yaml":true},{"content":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Specialized.ListDictionary>.  \n  \n To copy only the keys in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Keys.CopyTo`.  \n  \n To copy only the values in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Values.CopyTo`.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.","nodes":[{"pos":[0,167],"content":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Specialized.ListDictionary>.","nodes":[{"content":"The elements are copied to the <ph id=\"ph1\">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph>.","pos":[0,167],"source":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Specialized.ListDictionary>."}]},{"pos":[174,290],"content":"To copy only the keys in the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph>, use <ph id=\"ph2\">`ListDictionary.Keys.CopyTo`</ph>.","source":"To copy only the keys in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Keys.CopyTo`."},{"pos":[297,417],"content":"To copy only the values in the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph>, use <ph id=\"ph2\">`ListDictionary.Values.CopyTo`</ph>.","source":"To copy only the values in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Values.CopyTo`."},{"pos":[424,535],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.ListDictionary.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>."}],"pos":[21830,22374],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the <xref href=\"System.Collections.DictionaryEntry\"></xref> objects copied from <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,297],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the <xref href=\"System.Collections.DictionaryEntry\"></xref> objects copied from <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.DictionaryEntry\"&gt;&lt;/xref&gt;</ph> objects copied from <ph id=\"ph3\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","pos":[0,228],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the <xref href=\"System.Collections.DictionaryEntry\"></xref> objects copied from <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[229,297],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[23274,23572],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[23632,23700],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[23882,23912],"yaml":true},{"content":"<code>index</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."}],"pos":[24026,24064],"yaml":true},{"content":"<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","source":"<code>array</code> is multidimensional."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,270],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in the source <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}],"pos":[24158,24437],"yaml":true},{"content":"The type of the source <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.","nodes":[{"pos":[0,169],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the source <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."}],"pos":[24537,24707],"yaml":true},{"content":"Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,119],"content":"Gets the number of key/value pairs contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[25956,26076],"yaml":true},{"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,59],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[26087,26147],"yaml":true,"extradata":"MT"},{"content":"The number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,114],"content":"The number of key/value pairs contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"The number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[27036,27151],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,166],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionaryEnumerator\"&gt;&lt;/xref&gt;</ph> that iterates through the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[28534,28701],"yaml":true},{"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,205],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[212,332],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[339,819],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,480],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[182,262],"source":"  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[263,480],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[826,1147],"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,196],"source":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[197,321],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1154,1889],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[360,510],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[511,735],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1896,2131],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2138,2529],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,391],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[156,261]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[263,391]}]}]},{"pos":[2536,2569],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[28712,31298],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,140],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionaryEnumerator\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[32274,32415],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> has a fixed size.","nodes":[{"pos":[0,120],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"Gets a value indicating whether the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> has a fixed size."}],"pos":[33790,33911],"yaml":true},{"content":"<xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.  \n  \n A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,248],"content":"<xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> implements the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A&gt;</ph> property because it is required by the <ph id=\"ph3\">&lt;xref:System.Collections.IDictionary?displayProperty=fullName&gt;</ph> interface.","pos":[0,248],"source":"<xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface."}]},{"pos":[255,422],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","pos":[0,167]}]},{"pos":[429,699],"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","nodes":[{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[0,270]}]},{"pos":[706,765],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[33922,34696],"yaml":true,"extradata":"MT"},{"content":"This property always returns `false`.","nodes":[{"pos":[0,37],"content":"This property always returns <ph id=\"ph1\">`false`</ph>.","source":"This property always returns `false`."}],"pos":[34810,34848],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> is read-only.","nodes":[{"pos":[0,116],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"Gets a value indicating whether the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> is read-only."}],"pos":[36215,36332],"yaml":true},{"content":"<xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.  \n  \n A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,247],"content":"<xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> implements the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A&gt;</ph> property because it is required by the <ph id=\"ph3\">&lt;xref:System.Collections.IDictionary?displayProperty=fullName&gt;</ph> interface.","pos":[0,247],"source":"<xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface."}]},{"pos":[254,383],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]}]},{"pos":[390,608],"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","nodes":[{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[0,218]}]},{"pos":[615,674],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[36343,37026],"yaml":true,"extradata":"MT"},{"content":"This property always returns `false`.","nodes":[{"pos":[0,37],"content":"This property always returns <ph id=\"ph1\">`false`</ph>.","source":"This property always returns `false`."}],"pos":[37139,37177],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> is synchronized (thread safe).","nodes":[{"pos":[0,133],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).","source":"Gets a value indicating whether the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> is synchronized (thread safe)."}],"pos":[38567,38701],"yaml":true},{"content":"<xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.  \n  \n Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"pos":[0,251],"content":"<xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> implements the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A&gt;</ph> property because it is required by the <ph id=\"ph3\">&lt;xref:System.Collections.ICollection?displayProperty=fullName&gt;</ph> interface.","pos":[0,251],"source":"<xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface."}]},{"pos":[258,453],"content":"Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property.","nodes":[{"content":"Derived classes can provide a synchronized version of the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> using the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A&gt;</ph> property.","pos":[0,195],"source":"Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property."}]},{"pos":[460,858],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]}],"pos":[38712,39577],"yaml":true,"extradata":"MT"},{"content":"This property always returns `false`.","nodes":[{"pos":[0,37],"content":"This property always returns <ph id=\"ph1\">`false`</ph>.","source":"This property always returns `false`."}],"pos":[40488,40526],"yaml":true},{"content":"Gets or sets the value associated with the specified key.","nodes":[{"pos":[0,57],"content":"Gets or sets the value associated with the specified key.","nodes":[{"content":"Gets or sets the value associated with the specified key.","pos":[0,57]}]}],"pos":[41929,41987],"yaml":true},{"content":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \n  \n You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.  \n  \n A key cannot be `null`, but a value can. To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Specialized.ListDictionary.Contains%2A> method to determine if the key exists in the list.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.ListDictionary.Item%2A> as a default property, which provides the same indexing functionality.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.","nodes":[{"pos":[0,133],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[key]`</ph>.","source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`."},{"pos":[140,753],"content":"You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph>; for example, <ph id=\"ph3\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>.","pos":[0,280],"source":"You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection[\"myNonexistentKey\"] = myValue`."},{"content":"However, if the specified key already exists in the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph>, setting the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary.Item%2A&gt;</ph> property overwrites the old value.","pos":[281,494],"source":" However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary.Add%2A&gt;</ph> method does not modify existing elements.","pos":[495,613],"source":" In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements."}]},{"pos":[760,1088],"content":"A key cannot be `null`, but a value can. To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Specialized.ListDictionary.Contains%2A> method to determine if the key exists in the list.","nodes":[{"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can.","pos":[0,40],"source":"A key cannot be `null`, but a value can."},{"content":"To distinguish between <ph id=\"ph1\">`null`</ph> that is returned because the specified key is not found and <ph id=\"ph2\">`null`</ph> that is returned because the value of the specified key is <ph id=\"ph3\">`null`</ph>, use the <ph id=\"ph4\">&lt;xref:System.Collections.Specialized.ListDictionary.Contains%2A&gt;</ph> method to determine if the key exists in the list.","pos":[41,328],"source":" To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Specialized.ListDictionary.Contains%2A> method to determine if the key exists in the list."}]},{"pos":[1095,1406],"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.ListDictionary.Item%2A> as a default property, which provides the same indexing functionality.","nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.ListDictionary.Item%2A> as a default property, which provides the same indexing functionality.","pos":[0,311],"nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary.Item%2A&gt;</ph> property.","pos":[0,155],"source":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property."},{"content":"Visual Basic implements <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.","pos":[156,311],"source":" Visual Basic implements <xref:System.Collections.Specialized.ListDictionary.Item%2A> as a default property, which provides the same indexing functionality."}]}]},{"pos":[1413,1524],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.ListDictionary.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>."}],"pos":[41998,43535],"yaml":true,"extradata":"MT"},{"content":"The key whose value to get or set.","nodes":[{"pos":[0,34],"content":"The key whose value to get or set.","nodes":[{"content":"The key whose value to get or set.","pos":[0,34]}]}],"pos":[44462,44497],"yaml":true},{"content":"The value associated with the specified key. If the specified key is not found, attempting to get it returns `null`, and attempting to set it creates a new entry using the specified key.","nodes":[{"pos":[0,186],"content":"The value associated with the specified key. If the specified key is not found, attempting to get it returns `null`, and attempting to set it creates a new entry using the specified key.","nodes":[{"content":"The value associated with the specified key.","pos":[0,44]},{"content":"If the specified key is not found, attempting to get it returns <ph id=\"ph1\">`null`</ph>, and attempting to set it creates a new entry using the specified key.","pos":[45,186],"source":" If the specified key is not found, attempting to get it returns `null`, and attempting to set it creates a new entry using the specified key."}]}],"pos":[44554,44741],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[44921,44949],"yaml":true},{"content":"Gets an <xref href=\"System.Collections.ICollection\"></xref> containing the keys in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,154],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> containing the keys in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an <xref href=\"System.Collections.ICollection\"></xref> containing the keys in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[46192,46347],"yaml":true},{"content":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Values%2A> method.  \n  \n The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.ListDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,266],"content":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Values%2A> method.","nodes":[{"content":"The order of the values in the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> is unspecified, but it is the same order as the associated values in the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph> returned by the <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.ListDictionary.Values%2A&gt;</ph> method.","pos":[0,266],"source":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Values%2A> method."}]},{"pos":[273,640],"content":"The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.ListDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.","nodes":[{"content":"The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.ListDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.","pos":[0,367],"nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> is not a static copy; instead, the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph> refers back to the keys in the original <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph>.","pos":[0,217],"source":"The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.ListDictionary>."},{"content":"Therefore, changes to the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> continue to be reflected in the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[218,367],"source":" Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>."}]}]},{"pos":[647,706],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[46358,47071],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> containing the keys in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,149],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> containing the keys in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.ICollection\"></xref> containing the keys in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[48004,48154],"yaml":true},{"content":"Removes the entry with the specified key from the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,117],"content":"Removes the entry with the specified key from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the entry with the specified key from the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[49557,49675],"yaml":true},{"content":"If the <xref:System.Collections.Specialized.ListDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.ListDictionary> remains unchanged. No exception is thrown.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.","nodes":[{"pos":[0,211],"content":"If the <xref:System.Collections.Specialized.ListDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.ListDictionary> remains unchanged. No exception is thrown.","nodes":[{"content":"If the <xref:System.Collections.Specialized.ListDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.ListDictionary> remains unchanged. No exception is thrown.","pos":[0,211],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> does not contain an element with the specified key, the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> remains unchanged.","pos":[0,187],"source":"If the <xref:System.Collections.Specialized.ListDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.ListDictionary> remains unchanged."},{"content":"No exception is thrown.","pos":[188,211]}]}]},{"pos":[218,329],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.ListDictionary.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>."}],"pos":[49686,50020],"yaml":true,"extradata":"MT"},{"content":"The key of the entry to remove.","nodes":[{"pos":[0,31],"content":"The key of the entry to remove.","nodes":[{"content":"The key of the entry to remove.","pos":[0,31]}]}],"pos":[50933,50965],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[51147,51175],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,128],"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[52442,52571],"yaml":true},{"content":"Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> of the <xref:System.Collections.Specialized.ListDictionary>, not directly on the <xref:System.Collections.Specialized.ListDictionary>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.ListDictionary> object.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"pos":[0,712],"content":"Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> of the <xref:System.Collections.Specialized.ListDictionary>, not directly on the <xref:System.Collections.Specialized.ListDictionary>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.ListDictionary> object.","nodes":[{"content":"Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> of the <xref:System.Collections.Specialized.ListDictionary>, not directly on the <xref:System.Collections.Specialized.ListDictionary>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.ListDictionary> object.","pos":[0,712],"nodes":[{"content":"Derived classes can provide their own synchronized version of the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> using the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A&gt;</ph> property.","pos":[0,203],"source":"Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A&gt;</ph> of the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph>, not directly on the <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph>.","pos":[204,457],"source":" The synchronizing code must perform operations on the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> of the <xref:System.Collections.Specialized.ListDictionary>, not directly on the <xref:System.Collections.Specialized.ListDictionary>."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[458,539]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> object.","pos":[540,712],"source":" Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.ListDictionary> object."}]}]},{"pos":[719,1117],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]}],"pos":[52582,53704],"yaml":true,"extradata":"MT"},{"content":"An object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,123],"content":"An object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[54610,54734],"yaml":true},{"content":"Gets an <xref href=\"System.Collections.ICollection\"></xref> containing the values in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,156],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> containing the values in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an <xref href=\"System.Collections.ICollection\"></xref> containing the values in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[56074,56231],"yaml":true},{"content":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Keys%2A> method.  \n  \n The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.ListDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,262],"content":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Keys%2A> method.","nodes":[{"content":"The order of the values in the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> is unspecified, but it is the same order as the associated keys in the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph> returned by the <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.ListDictionary.Keys%2A&gt;</ph> method.","pos":[0,262],"source":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Keys%2A> method."}]},{"pos":[269,638],"content":"The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.ListDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.","nodes":[{"content":"The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.ListDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.","pos":[0,369],"nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> is not a static copy; instead, the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph> refers back to the values in the original <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph>.","pos":[0,219],"source":"The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.ListDictionary>."},{"content":"Therefore, changes to the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.ListDictionary&gt;</ph> continue to be reflected in the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[220,369],"source":" Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>."}]}]},{"pos":[645,704],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[56242,56953],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> containing the values in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,151],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> containing the values in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.ICollection\"></xref> containing the values in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[57888,58040],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.IEnumerator\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,156],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> that iterates through the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an <xref href=\"System.Collections.IEnumerator\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[59567,59724],"yaml":true},{"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,205],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[212,332],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[339,833],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,494],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, calling <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.","pos":[181,276],"source":" At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[277,494],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[840,1161],"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,196],"source":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[197,321],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1168,1918],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, calling <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.","pos":[360,525],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[526,750],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1925,2578],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.","pos":[0,653],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[73,376],"source":" If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.","pos":[377,653],"source":" If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated."}]}]},{"pos":[2585,3059],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,474],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[155,292]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[293,474]}]}]},{"pos":[3066,3099],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[59735,62851],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.","nodes":[{"pos":[0,130],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.ListDictionary\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>."}],"pos":[63812,63943],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Specialized.ListDictionary\n  commentId: T:System.Collections.Specialized.ListDictionary\n  id: ListDictionary\n  children:\n  - System.Collections.Specialized.ListDictionary.#ctor\n  - System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)\n  - System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)\n  - System.Collections.Specialized.ListDictionary.Clear\n  - System.Collections.Specialized.ListDictionary.Contains(System.Object)\n  - System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)\n  - System.Collections.Specialized.ListDictionary.Count\n  - System.Collections.Specialized.ListDictionary.GetEnumerator\n  - System.Collections.Specialized.ListDictionary.IsFixedSize\n  - System.Collections.Specialized.ListDictionary.IsReadOnly\n  - System.Collections.Specialized.ListDictionary.IsSynchronized\n  - System.Collections.Specialized.ListDictionary.Item(System.Object)\n  - System.Collections.Specialized.ListDictionary.Keys\n  - System.Collections.Specialized.ListDictionary.Remove(System.Object)\n  - System.Collections.Specialized.ListDictionary.SyncRoot\n  - System.Collections.Specialized.ListDictionary.Values\n  - System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: ListDictionary\n  nameWithType: ListDictionary\n  fullName: System.Collections.Specialized.ListDictionary\n  type: Class\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Implements `IDictionary` using a singly linked list. Recommended for collections that typically include fewer than 10 items.\n  remarks: \"This is a simple implementation of <xref:System.Collections.IDictionary> using a singly linked list. It is smaller and faster than a <xref:System.Collections.Hashtable> if the number of elements is 10 or less. This should not be used if performance is important for large numbers of elements.  \\n  \\n Items in a <xref:System.Collections.Specialized.ListDictionary> are not in any guaranteed order; code should not depend on the current order. The <xref:System.Collections.Specialized.ListDictionary> is implemented for fast keyed retrieval; the actual internal order of items is implementation-dependent and could change in future versions of the product.  \\n  \\n Members, such as <xref:System.Collections.Specialized.ListDictionary.Item%2A>, <xref:System.Collections.Specialized.ListDictionary.Add%2A>, <xref:System.Collections.Specialized.ListDictionary.Remove%2A>, and <xref:System.Collections.Specialized.ListDictionary.Contains%2A> are O(`n`) operations, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.  \\n  \\n A key cannot be `null`, but a value can.  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref:System.Collections.Specialized.ListDictionary> is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>. For example:  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#3)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#3)]\\n [!code-vb[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#3)]  \\n  \\n The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.\"\n  example:\n  - \"The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/listdictionary.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/listdictionary.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/listdictionary.vb#1)]\"\n  syntax:\n    content: 'public class ListDictionary : System.Collections.IDictionary'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IDictionary\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.#ctor\n  commentId: M:System.Collections.Specialized.ListDictionary.#ctor\n  id: '#ctor'\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: ListDictionary()\n  nameWithType: ListDictionary.ListDictionary()\n  fullName: ListDictionary.ListDictionary()\n  type: Constructor\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Creates an empty <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> using the default comparer.\n  remarks: \"The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n This constructor is an O(1) operation.\"\n  example:\n  - \"The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/listdictionary.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/listdictionary.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/listdictionary.vb#1)]\"\n  syntax:\n    content: public ListDictionary ();\n    parameters: []\n  overload: System.Collections.Specialized.ListDictionary.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)\n  commentId: M:System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)\n  id: '#ctor(System.Collections.IComparer)'\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: ListDictionary(IComparer)\n  nameWithType: ListDictionary.ListDictionary(IComparer)\n  fullName: ListDictionary.ListDictionary(IComparer)\n  type: Constructor\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Creates an empty <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> using the specified comparer.\n  remarks: \"The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The custom comparer enables such scenarios as doing lookups with case-insensitive strings.  \\n  \\n This constructor is an O(1) operation.\"\n  syntax:\n    content: public ListDictionary (System.Collections.IComparer comparer);\n    parameters:\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref href=\\\"System.Collections.IComparer\\\"></xref> to use to determine whether two keys are equal.  \\n  \\n -or-  \\n  \\n `null` to use the default comparer, which is each key's implementation of <xref href=\\\"System.Object.Equals(System.Object)\\\"></xref>.\"\n  overload: System.Collections.Specialized.ListDictionary.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)\n  commentId: M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)\n  id: Add(System.Object,System.Object)\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: Add(Object, Object)\n  nameWithType: ListDictionary.Add(Object, Object)\n  fullName: ListDictionary.Add(Object, Object)\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Adds an entry with the specified key and value into the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  remarks: \"An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, String objects are better than StringBuilder objects for use as keys.  \\n  \\n You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.\"\n  example:\n  - \"The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]\"\n  syntax:\n    content: public void Add (object key, object value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the entry to add.\n    - id: value\n      type: System.Object\n      description: The value of the entry to add. The value can be `null`.\n  overload: System.Collections.Specialized.ListDictionary.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An entry with the same key already exists in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.Clear\n  commentId: M:System.Collections.Specialized.ListDictionary.Clear\n  id: Clear\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ListDictionary.Clear()\n  fullName: ListDictionary.Clear()\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Removes all entries from the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  remarks: \"<xref:System.Collections.Specialized.ListDictionary.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Collections.Specialized.ListDictionary.Clear*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.Contains(System.Object)\n  commentId: M:System.Collections.Specialized.ListDictionary.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: Contains(Object)\n  nameWithType: ListDictionary.Contains(Object)\n  fullName: ListDictionary.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Determines whether the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> contains a specific key.\n  remarks: \"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example searches for an element in a <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/CPP/listdictionary_contains.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/CS/listdictionary_contains.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/VB/listdictionary_contains.vb#1)]\"\n  syntax:\n    content: public bool Contains (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key to locate in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> contains an entry with the specified key; otherwise, `false`.'\n  overload: System.Collections.Specialized.ListDictionary.Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: CopyTo(Array, Int32)\n  nameWithType: ListDictionary.CopyTo(Array, Int32)\n  fullName: ListDictionary.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Copies the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> entries to a one-dimensional <xref href=\"System.Array\"></xref> instance at the specified index.\n  remarks: \"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n To copy only the keys in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Keys.CopyTo`.  \\n  \\n To copy only the values in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Values.CopyTo`.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.\"\n  example:\n  - \"The following code example copies the elements of a <xref:System.Collections.Specialized.ListDictionary> to an array.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/CPP/listdictionary_copyto.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/CS/listdictionary_copyto.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/VB/listdictionary_copyto.vb#1)]\"\n  syntax:\n    content: public void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the <xref href=\"System.Collections.DictionaryEntry\"></xref> objects copied from <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.Collections.Specialized.ListDictionary.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.Specialized.ListDictionary\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.Count\n  commentId: P:System.Collections.Specialized.ListDictionary.Count\n  id: Count\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ListDictionary.Count\n  fullName: ListDictionary.Count\n  type: Property\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  remarks: Retrieving the value of this property is an O(1) operation.\n  example:\n  - \"The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  overload: System.Collections.Specialized.ListDictionary.Count*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.GetEnumerator\n  commentId: M:System.Collections.Specialized.ListDictionary.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ListDictionary.GetEnumerator()\n  fullName: ListDictionary.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Returns an <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  remarks: \"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]\"\n  syntax:\n    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> for the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  overload: System.Collections.Specialized.ListDictionary.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.IsFixedSize\n  commentId: P:System.Collections.Specialized.ListDictionary.IsFixedSize\n  id: IsFixedSize\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: IsFixedSize\n  nameWithType: ListDictionary.IsFixedSize\n  fullName: ListDictionary.IsFixedSize\n  type: Property\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> has a fixed size.\n  remarks: \"<xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.  \\n  \\n A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public bool IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns `false`.\n  overload: System.Collections.Specialized.ListDictionary.IsFixedSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.IsReadOnly\n  commentId: P:System.Collections.Specialized.ListDictionary.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: ListDictionary.IsReadOnly\n  fullName: ListDictionary.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> is read-only.\n  remarks: \"<xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.  \\n  \\n A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns `false`.\n  overload: System.Collections.Specialized.ListDictionary.IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.IsSynchronized\n  commentId: P:System.Collections.Specialized.ListDictionary.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: ListDictionary.IsSynchronized\n  fullName: ListDictionary.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref> is synchronized (thread safe).\n  remarks: \"<xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.  \\n  \\n Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#2)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#2)]\\n [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#2)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns `false`.\n  overload: System.Collections.Specialized.ListDictionary.IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.Item(System.Object)\n  commentId: P:System.Collections.Specialized.ListDictionary.Item(System.Object)\n  id: Item(System.Object)\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: Item(Object)\n  nameWithType: ListDictionary.Item(Object)\n  fullName: ListDictionary.Item(Object)\n  type: Property\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Gets or sets the value associated with the specified key.\n  remarks: \"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \\n  \\n You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.  \\n  \\n A key cannot be `null`, but a value can. To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Specialized.ListDictionary.Contains%2A> method to determine if the key exists in the list.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.ListDictionary.Item%2A> as a default property, which provides the same indexing functionality.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.\"\n  example:\n  - \"The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]\"\n  syntax:\n    content: public object this[object key] { get; set; }\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key whose value to get or set.\n    return:\n      type: System.Object\n      description: The value associated with the specified key. If the specified key is not found, attempting to get it returns `null`, and attempting to set it creates a new entry using the specified key.\n  overload: System.Collections.Specialized.ListDictionary.Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.Keys\n  commentId: P:System.Collections.Specialized.ListDictionary.Keys\n  id: Keys\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: ListDictionary.Keys\n  fullName: ListDictionary.Keys\n  type: Property\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Gets an <xref href=\"System.Collections.ICollection\"></xref> containing the keys in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  remarks: \"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Values%2A> method.  \\n  \\n The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.ListDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]\"\n  syntax:\n    content: public System.Collections.ICollection Keys { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> containing the keys in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  overload: System.Collections.Specialized.ListDictionary.Keys*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.Remove(System.Object)\n  commentId: M:System.Collections.Specialized.ListDictionary.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: Remove(Object)\n  nameWithType: ListDictionary.Remove(Object)\n  fullName: ListDictionary.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Removes the entry with the specified key from the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  remarks: \"If the <xref:System.Collections.Specialized.ListDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.ListDictionary> remains unchanged. No exception is thrown.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.\"\n  example:\n  - \"The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]\"\n  syntax:\n    content: public void Remove (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the entry to remove.\n  overload: System.Collections.Specialized.ListDictionary.Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.SyncRoot\n  commentId: P:System.Collections.Specialized.ListDictionary.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: ListDictionary.SyncRoot\n  fullName: ListDictionary.SyncRoot\n  type: Property\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  remarks: \"Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> of the <xref:System.Collections.Specialized.ListDictionary>, not directly on the <xref:System.Collections.Specialized.ListDictionary>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.ListDictionary> object.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#2)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#2)]\\n [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#2)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  overload: System.Collections.Specialized.ListDictionary.SyncRoot*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.Values\n  commentId: P:System.Collections.Specialized.ListDictionary.Values\n  id: Values\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: Values\n  nameWithType: ListDictionary.Values\n  fullName: ListDictionary.Values\n  type: Property\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Gets an <xref href=\"System.Collections.ICollection\"></xref> containing the values in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  remarks: \"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Keys%2A> method.  \\n  \\n The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.ListDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]\"\n  syntax:\n    content: public System.Collections.ICollection Values { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> containing the values in the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  overload: System.Collections.Specialized.ListDictionary.Values*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Specialized.ListDictionary\n  langs:\n  - csharp\n  name: IEnumerable.GetEnumerator()\n  nameWithType: ListDictionary.IEnumerable.GetEnumerator()\n  fullName: ListDictionary.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Returns an <xref href=\"System.Collections.IEnumerator\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  remarks: \"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \\n  \\n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]\\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Collections.Specialized.ListDictionary\"></xref>.\n  overload: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.Collections.Specialized.ListDictionary.#ctor\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: ListDictionary()\n  nameWithType: ListDictionary.ListDictionary()\n  fullName: ListDictionary.ListDictionary()\n- uid: System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: ListDictionary(IComparer)\n  nameWithType: ListDictionary.ListDictionary(IComparer)\n  fullName: ListDictionary.ListDictionary(IComparer)\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  nameWithType: IComparer\n  fullName: System.Collections.IComparer\n- uid: System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Add(Object, Object)\n  nameWithType: ListDictionary.Add(Object, Object)\n  fullName: ListDictionary.Add(Object, Object)\n- uid: System.Collections.Specialized.ListDictionary.Clear\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Clear()\n  nameWithType: ListDictionary.Clear()\n  fullName: ListDictionary.Clear()\n- uid: System.Collections.Specialized.ListDictionary.Contains(System.Object)\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Contains(Object)\n  nameWithType: ListDictionary.Contains(Object)\n  fullName: ListDictionary.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: CopyTo(Array, Int32)\n  nameWithType: ListDictionary.CopyTo(Array, Int32)\n  fullName: ListDictionary.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Specialized.ListDictionary.Count\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Count\n  nameWithType: ListDictionary.Count\n  fullName: ListDictionary.Count\n- uid: System.Collections.Specialized.ListDictionary.GetEnumerator\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ListDictionary.GetEnumerator()\n  fullName: ListDictionary.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.Collections.Specialized.ListDictionary.IsFixedSize\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: ListDictionary.IsFixedSize\n  fullName: ListDictionary.IsFixedSize\n- uid: System.Collections.Specialized.ListDictionary.IsReadOnly\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ListDictionary.IsReadOnly\n  fullName: ListDictionary.IsReadOnly\n- uid: System.Collections.Specialized.ListDictionary.IsSynchronized\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: ListDictionary.IsSynchronized\n  fullName: ListDictionary.IsSynchronized\n- uid: System.Collections.Specialized.ListDictionary.Item(System.Object)\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Item(Object)\n  nameWithType: ListDictionary.Item(Object)\n  fullName: ListDictionary.Item(Object)\n- uid: System.Collections.Specialized.ListDictionary.Keys\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Keys\n  nameWithType: ListDictionary.Keys\n  fullName: ListDictionary.Keys\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.Specialized.ListDictionary.Remove(System.Object)\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Remove(Object)\n  nameWithType: ListDictionary.Remove(Object)\n  fullName: ListDictionary.Remove(Object)\n- uid: System.Collections.Specialized.ListDictionary.SyncRoot\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: SyncRoot\n  nameWithType: ListDictionary.SyncRoot\n  fullName: ListDictionary.SyncRoot\n- uid: System.Collections.Specialized.ListDictionary.Values\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Values\n  nameWithType: ListDictionary.Values\n  fullName: ListDictionary.Values\n- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: ListDictionary.IEnumerable.GetEnumerator()\n  fullName: ListDictionary.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Specialized.ListDictionary.#ctor*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: ListDictionary\n  nameWithType: ListDictionary.ListDictionary\n  fullName: ListDictionary.ListDictionary\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.Add*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Add\n  nameWithType: ListDictionary.Add\n  fullName: ListDictionary.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.Clear*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Clear\n  nameWithType: ListDictionary.Clear\n  fullName: ListDictionary.Clear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.Contains*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Contains\n  nameWithType: ListDictionary.Contains\n  fullName: ListDictionary.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.CopyTo*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: CopyTo\n  nameWithType: ListDictionary.CopyTo\n  fullName: ListDictionary.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.Count*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Count\n  nameWithType: ListDictionary.Count\n  fullName: ListDictionary.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.GetEnumerator*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ListDictionary.GetEnumerator\n  fullName: ListDictionary.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.IsFixedSize*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: ListDictionary.IsFixedSize\n  fullName: ListDictionary.IsFixedSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.IsReadOnly*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ListDictionary.IsReadOnly\n  fullName: ListDictionary.IsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.IsSynchronized*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: ListDictionary.IsSynchronized\n  fullName: ListDictionary.IsSynchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.Item*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Item\n  nameWithType: ListDictionary.Item\n  fullName: ListDictionary.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.Keys*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Keys\n  nameWithType: ListDictionary.Keys\n  fullName: ListDictionary.Keys\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.Remove*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Remove\n  nameWithType: ListDictionary.Remove\n  fullName: ListDictionary.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.SyncRoot*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: SyncRoot\n  nameWithType: ListDictionary.SyncRoot\n  fullName: ListDictionary.SyncRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.Values*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: Values\n  nameWithType: ListDictionary.Values\n  fullName: ListDictionary.Values\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Collections.Specialized.ListDictionary\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: ListDictionary.System.Collections.IEnumerable.GetEnumerator\n  fullName: ListDictionary.System.Collections.IEnumerable.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/ListDictionary.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n"}