### YamlMime:ManagedReference
items:
- uid: System.Threading.LockRecursionPolicy
  commentId: T:System.Threading.LockRecursionPolicy
  id: LockRecursionPolicy
  children:
  - System.Threading.LockRecursionPolicy.NoRecursion
  - System.Threading.LockRecursionPolicy.SupportsRecursion
  langs:
  - csharp
  name: LockRecursionPolicy
  nameWithType: LockRecursionPolicy
  fullName: System.Threading.LockRecursionPolicy
  type: Enum
  assemblies:
  - System.Threading
  - System.Core
  - netstandard
  namespace: System.Threading
  summary: Specifies whether a lock can be entered multiple times by the same thread.
  remarks: "The default recursion policy depends on the type of lock. For the default policy and the precise behavior of lock recursion for any given lock type, see the documentation for the type. For example, the <xref:System.Threading.ReaderWriterLockSlim> class does not allow a thread to enter the lock in write mode if it already entered the lock in read mode, regardless of the lock policy setting, in order to reduce the chance of deadlocks.  \n  \n Currently only one lock uses this enumeration:  \n  \n-   <xref:System.Threading.ReaderWriterLockSlim>. For more information, see the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property."
  example:
  - "The following example shows two exception scenarios, one that depends on the <xref:System.Threading.LockRecursionPolicy> setting and one that does not.  \n  \n In the first scenario, the thread enters the lock in read mode and then tries to enter read mode recursively. If the <xref:System.Threading.ReaderWriterLockSlim> is created by using the default constructor, which sets recursion policy to NoRecursion, an exception is thrown. If SupportsRecursion is used to create the <xref:System.Threading.ReaderWriterLockSlim>, no exception is thrown.  \n  \n In the second scenario, the thread enters the lock in read mode and then tries to enter the lock in write mode. <xref:System.Threading.LockRecursionException> is thrown regardless of the lock recursion policy.  \n  \n [!code-csharp[System.Threading.LockRecursionPolicy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/example1.cs#1)]\n [!code-vb[System.Threading.LockRecursionPolicy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/source.vb#1)]"
  syntax:
    content: public enum LockRecursionPolicy
  inheritance:
  - System.Object
  - System.ValueType
  - System.Enum
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LockRecursionPolicy.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.LockRecursionPolicy.NoRecursion
  commentId: F:System.Threading.LockRecursionPolicy.NoRecursion
  id: NoRecursion
  parent: System.Threading.LockRecursionPolicy
  langs:
  - csharp
  name: NoRecursion
  nameWithType: LockRecursionPolicy.NoRecursion
  fullName: LockRecursionPolicy.NoRecursion
  type: Field
  assemblies:
  - System.Threading
  - System.Core
  - netstandard
  namespace: System.Threading
  summary: If a thread tries to enter a lock recursively, an exception is thrown. Some classes may allow certain recursions when this setting is in effect.
  syntax:
    content: NoRecursion
    return:
      type: System.Threading.LockRecursionPolicy
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LockRecursionPolicy.xml
- uid: System.Threading.LockRecursionPolicy.SupportsRecursion
  commentId: F:System.Threading.LockRecursionPolicy.SupportsRecursion
  id: SupportsRecursion
  parent: System.Threading.LockRecursionPolicy
  langs:
  - csharp
  name: SupportsRecursion
  nameWithType: LockRecursionPolicy.SupportsRecursion
  fullName: LockRecursionPolicy.SupportsRecursion
  type: Field
  assemblies:
  - System.Threading
  - System.Core
  - netstandard
  namespace: System.Threading
  summary: A thread can enter a lock recursively. Some classes may restrict this capability.
  syntax:
    content: SupportsRecursion
    return:
      type: System.Threading.LockRecursionPolicy
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LockRecursionPolicy.xml
references:
- uid: System.Enum
  parent: System
  isExternal: false
  name: Enum
  nameWithType: Enum
  fullName: System.Enum
- uid: System.Threading.LockRecursionPolicy.NoRecursion
  parent: System.Threading.LockRecursionPolicy
  isExternal: false
  name: NoRecursion
  nameWithType: LockRecursionPolicy.NoRecursion
  fullName: LockRecursionPolicy.NoRecursion
- uid: System.Threading.LockRecursionPolicy
  parent: System.Threading
  isExternal: false
  name: LockRecursionPolicy
  nameWithType: LockRecursionPolicy
  fullName: System.Threading.LockRecursionPolicy
- uid: System.Threading.LockRecursionPolicy.SupportsRecursion
  parent: System.Threading.LockRecursionPolicy
  isExternal: false
  name: SupportsRecursion
  nameWithType: LockRecursionPolicy.SupportsRecursion
  fullName: LockRecursionPolicy.SupportsRecursion
