### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.Partitioner`1
  commentId: T:System.Collections.Concurrent.Partitioner`1
  id: Partitioner`1
  children:
  - System.Collections.Concurrent.Partitioner`1.#ctor
  - System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  - System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  - System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  langs:
  - csharp
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  type: Class
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Represents a particular manner of splitting a data source into multiple partitions.
  remarks: For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  example:
  - "The following example shows how to implement a partitioner that returns a single element at a time:  \n  \n [!code-csharp[System.Collections.Concurrent.Partitioner#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.partitioner/cs/partitioner.cs#1)]\n [!code-vb[System.Collections.Concurrent.Partitioner#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.partitioner/vb/partitioner.vb#1)]"
  syntax:
    content: public abstract class Partitioner<TSource>
    typeParameters:
    - id: TSource
      description: Type of the elements in the collection.
  inheritance:
  - System.Object
  derivedClasses:
  - System.Collections.Concurrent.OrderablePartitioner`1
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.Partitioner`1.#ctor
  commentId: M:System.Collections.Concurrent.Partitioner`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  name: Partitioner<TSource>()
  nameWithType: Partitioner<TSource>.Partitioner<TSource>()
  fullName: Partitioner<TSource>.Partitioner<TSource>()
  type: Constructor
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Creates a new partitioner instance.
  syntax:
    content: protected Partitioner ();
    parameters: []
  overload: System.Collections.Concurrent.Partitioner`1.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  commentId: M:System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  id: GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  name: GetDynamicPartitions()
  nameWithType: Partitioner<TSource>.GetDynamicPartitions()
  fullName: Partitioner<TSource>.GetDynamicPartitions()
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Creates an object that can partition the underlying collection into a variable number of partitions.
  remarks: "The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName>interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.  \n  \n The <xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An object that can create partitions over the underlying data source.
  overload: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Dynamic partitioning is not supported by the base class. You must implement it in a derived class.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  commentId: M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  id: GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  name: GetPartitions(Int32)
  nameWithType: Partitioner<TSource>.GetPartitions(Int32)
  fullName: Partitioner<TSource>.GetPartitions(Int32)
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Partitions the underlying collection into the given number of partitions.
  remarks: A class that implements this method is expected to return exactly the number of partitions that are specified in `partitionCount`. If a partition contains no elements, then return an empty enumerator rather than null (Nothing in Visual Basic). For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  syntax:
    content: public abstract System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions (int partitionCount);
    parameters:
    - id: partitionCount
      type: System.Int32
      description: The number of partitions to create.
    return:
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}
      description: A list containing <code>partitionCount</code> enumerators.
  overload: System.Collections.Concurrent.Partitioner`1.GetPartitions*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  commentId: P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  id: SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  name: SupportsDynamicPartitions
  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions
  fullName: Partitioner<TSource>.SupportsDynamicPartitions
  type: Property
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Gets whether additional partitions can be created dynamically.
  remarks: If a derived class does not override and implement <xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A>, <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> should return false. The value of <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> should not vary over the lifetime of this instance. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  syntax:
    content: public virtual bool SupportsDynamicPartitions { get; }
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Concurrent.Partitioner`1"></xref> can create partitions dynamically as they are requested; false if the <xref href="System.Collections.Concurrent.Partitioner`1"></xref> can only allocate partitions statically.
  overload: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.Concurrent.Partitioner`1.#ctor
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: Partitioner<TSource>()
  nameWithType: Partitioner<TSource>.Partitioner<TSource>()
  fullName: Partitioner<TSource>.Partitioner<TSource>()
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetDynamicPartitions()
  nameWithType: Partitioner<TSource>.GetDynamicPartitions()
  fullName: Partitioner<TSource>.GetDynamicPartitions()
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetPartitions(Int32)
  nameWithType: Partitioner<TSource>.GetPartitions(Int32)
  fullName: Partitioner<TSource>.GetPartitions(Int32)
- uid: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
- uid: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<IEnumerator<TSource>>
  nameWithType: IList<IEnumerator<TSource>>
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: SupportsDynamicPartitions
  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions
  fullName: Partitioner<TSource>.SupportsDynamicPartitions
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.Partitioner`1.#ctor*
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>.Partitioner<TSource>
  fullName: Partitioner<TSource>.Partitioner<TSource>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions*
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetDynamicPartitions
  nameWithType: Partitioner<TSource>.GetDynamicPartitions
  fullName: Partitioner<TSource>.GetDynamicPartitions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions*
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetPartitions
  nameWithType: Partitioner<TSource>.GetPartitions
  fullName: Partitioner<TSource>.GetPartitions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: SupportsDynamicPartitions
  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions
  fullName: Partitioner<TSource>.SupportsDynamicPartitions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  parent: System.Linq.ParallelEnumerable
  isExternal: false
  name: AsParallel<TSource>(Partitioner<TSource>)
  nameWithType: ParallelEnumerable.AsParallel<TSource>(Partitioner<TSource>)
  fullName: ParallelEnumerable.AsParallel<TSource>(Partitioner<TSource>)
