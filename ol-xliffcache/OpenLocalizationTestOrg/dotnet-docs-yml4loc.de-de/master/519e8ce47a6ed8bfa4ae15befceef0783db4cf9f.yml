### YamlMime:ManagedReference
items:
- uid: System.Text.RegularExpressions.GroupCollection
  commentId: T:System.Text.RegularExpressions.GroupCollection
  id: GroupCollection
  children:
  - System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)
  - System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)
  - System.Text.RegularExpressions.GroupCollection.Count
  - System.Text.RegularExpressions.GroupCollection.GetEnumerator
  - System.Text.RegularExpressions.GroupCollection.IsReadOnly
  - System.Text.RegularExpressions.GroupCollection.IsSynchronized
  - System.Text.RegularExpressions.GroupCollection.Item(System.Int32)
  - System.Text.RegularExpressions.GroupCollection.Item(System.String)
  - System.Text.RegularExpressions.GroupCollection.SyncRoot
  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear
  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator
  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized
  - System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot
  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear
  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize
  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)
  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)
  langs:
  - csharp
  name: GroupCollection
  nameWithType: GroupCollection
  fullName: System.Text.RegularExpressions.GroupCollection
  type: Class
  assemblies:
  - System.Text.RegularExpressions
  - System
  - netstandard
  namespace: System.Text.RegularExpressions
  summary: Returns the set of captured groups in a single match.
  remarks: "The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match. The collection is immutable (read-only) and has no public constructor. A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property.  \n  \n The collection contains one or more <xref:System.Text.RegularExpressions.Group?displayProperty=fullName> objects. If the match is successful, the first element in the collection contains the <xref:System.Text.RegularExpressions.Group> object that corresponds to the entire match. Each subsequent element represents a captured group, if the regular expression includes capturing groups. Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups. If the match is unsuccessful, the collection contains a single <xref:System.Text.RegularExpressions.Group?displayProperty=fullName> object whose <xref:System.Text.RegularExpressions.Group.Success%2A> property is `false` and whose <xref:System.Text.RegularExpressions.Capture.Value%2A> property equals <xref:System.String.Empty?displayProperty=fullName>. For more information, see the \"Grouping Constructs and Regular Expression Objects\" section in the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.  \n  \n To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`…`Next` in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method. In addition, you can access individual numbered captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property (the indexer in C#), and you can access individual named captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property. Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName> methods, respectively. Both are instance methods and require that you instantiate a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression to be matched."
  example:
  - "The following example uses a regular expression with capturing groups to extract information about trademarks and registered trademarks used in text. The regular expression pattern is `\\b(\\w+?)([\\u00AE\\u2122])`, which is interpreted as shown in the following table.  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`\\b`|Look for a word boundary.|  \n|`(\\w+?)`|Look for one or more word characters. Together, these form the trademarked name. (Note that this regular expression assumes that a trademark consists of a single word.) This is the first capturing group.|  \n|`([\\u00AE\\u2122])`|Look for either the ® or the ™ character. This is the second capturing group.|  \n  \n For each match, the <xref:System.Text.RegularExpressions.GroupCollection> contains three <xref:System.Text.RegularExpressions.Group> objects. The first object contains the string that matches the entire regular expression. The second object, which represents the first captured group, contains the product name. The third object, which represents the second captured group, contains the trademark or registered trademark symbol.  \n  \n [!code-csharp[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/cs/Example1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/vb/Example1.vb#1)]"
  syntax:
    content: 'public class GroupCollection : System.Collections.ICollection'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: CopyTo(Array, Int32)
  nameWithType: GroupCollection.CopyTo(Array, Int32)
  fullName: GroupCollection.CopyTo(Array, Int32)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Copies all the elements of the collection to the given array beginning at the given index.
  remarks: "Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.  \n  \n> [!WARNING]\n>  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName> method instead."
  example:
  - "The following example extracts each word from a sentence and captures it in a capturing group, The <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> method is then used to copy the elements in each match's <xref:System.Text.RegularExpressions.GroupCollection> object to an array that contains the capturing groups from all matches. The individual captured words are then displayed to the console.  \n  \n [!code-csharp[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/cs/copyto1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/vb/copyto1.vb#1)]  \n  \n The regular expression is defined as follows:  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`\\b`|Match a word boundary.|  \n|`(\\S+?)`|Match one or more non-white space characters. Assign them to the first capturing group.|  \n|`\\b`|Match a word boundary.|"
  syntax:
    content: public void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: The array the collection is to be copied into.
    - id: arrayIndex
      type: System.Int32
      description: The position in the destination array where the copying is to begin.
  overload: System.Text.RegularExpressions.GroupCollection.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code>arrayIndex</code> is outside the bounds of <code>array</code>.  \n  \n -or-  \n  \n <code>arrayIndex</code> plus <xref href=\"System.Text.RegularExpressions.GroupCollection.Count\"></xref> is outside the bounds of <code>array</code>."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)
  commentId: M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)
  id: CopyTo(System.Text.RegularExpressions.Group[],System.Int32)
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: CopyTo(Group[], Int32)
  nameWithType: GroupCollection.CopyTo(Group[], Int32)
  fullName: GroupCollection.CopyTo(Group[], Int32)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: public void CopyTo (System.Text.RegularExpressions.Group[] array, int arrayIndex);
    parameters:
    - id: array
      type: System.Text.RegularExpressions.Group[]
      description: ''
    - id: arrayIndex
      type: System.Int32
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.CopyTo*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.Count
  commentId: P:System.Text.RegularExpressions.GroupCollection.Count
  id: Count
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: Count
  nameWithType: GroupCollection.Count
  fullName: GroupCollection.Count
  type: Property
  assemblies:
  - System.Text.RegularExpressions
  - System
  - netstandard
  namespace: System.Text.RegularExpressions
  summary: Returns the number of groups in the collection.
  remarks: The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member. If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of groups in the collection.
  overload: System.Text.RegularExpressions.GroupCollection.Count*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.GroupCollection.GetEnumerator
  commentId: M:System.Text.RegularExpressions.GroupCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: GroupCollection.GetEnumerator()
  fullName: GroupCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  - System
  - netstandard
  namespace: System.Text.RegularExpressions
  summary: Provides an enumerator that iterates through the collection.
  remarks: Instead of calling the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next` in Visual Basic) that is provided by your programming language.
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An enumerator that contains all <xref href="System.Text.RegularExpressions.Group"></xref> objects in the <xref href="System.Text.RegularExpressions.GroupCollection"></xref>.
  overload: System.Text.RegularExpressions.GroupCollection.GetEnumerator*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.GroupCollection.IsReadOnly
  commentId: P:System.Text.RegularExpressions.GroupCollection.IsReadOnly
  id: IsReadOnly
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: GroupCollection.IsReadOnly
  fullName: GroupCollection.IsReadOnly
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Gets a value that indicates whether the collection is read-only.
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` in all cases.'
  overload: System.Text.RegularExpressions.GroupCollection.IsReadOnly*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.GroupCollection.IsSynchronized
  commentId: P:System.Text.RegularExpressions.GroupCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: GroupCollection.IsSynchronized
  fullName: GroupCollection.IsSynchronized
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Gets a value that indicates whether access to the <xref href="System.Text.RegularExpressions.GroupCollection"></xref> is synchronized (thread-safe).
  remarks: >-
    > [!WARNING]

    >  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName> property instead.
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`false` in all cases.'
  overload: System.Text.RegularExpressions.GroupCollection.IsSynchronized*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.GroupCollection.Item(System.Int32)
  commentId: P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: GroupCollection.Item(Int32)
  fullName: GroupCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Text.RegularExpressions
  - System
  - netstandard
  namespace: System.Text.RegularExpressions
  summary: Enables access to a member of the collection by integer index.
  remarks: "The <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is the index (in C#) or the default property (in Visual Basic) of the <xref:System.Text.RegularExpressions.GroupCollection> class. It allows you to enumerate the members of the collection by using a `foreach` statement in C# or a `For Each` statement in Visual Basic.  \n  \n You can also use this property to retrieve individual captured groups by their index number. You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> method. You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=fullName> method.  \n  \n You can determine the number of items in the collection by retrieving the value of the <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> property. Valid values for the `groupnum` parameter range from 0 to one less than the number of items in the collection.  \n  \n The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property always has at least one member. If the regular expression engine cannot find any matches in a particular input string, the single <xref:System.Text.RegularExpressions.Group> object in the collection has its <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property set to `false` and its `Group.Value` property set to <xref:System.String.Empty?displayProperty=fullName>.  \n  \n If `groupnum` is not the index of a member of the collection, or if `groupnum` is the index of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=fullName>."
  example:
  - "The following example defines a regular expression that consists of two numbered groups. The first group captures one or more consecutive digits. The second group matches a single character. Because the regular expression engine looks for zero or one occurrence of the first group, it does not always find a match even if the regular expression match is successful. The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression. The example defines a regular expression pattern `(\\d+)*(\\w)\\2`, which is interpreted as shown in the following table.  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`(\\d+)*`|Match one or more occurrence of a decimal digit. This is the first capturing group. Match this pattern either zero or one time.|  \n|`(\\w)`|This is the second capturing group.|  \n|`\\k`|Match the string captured by the second capturing group.|  \n  \n [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item3.cs#2)]\n [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item3.vb#2)]"
  syntax:
    content: public System.Text.RegularExpressions.Group this[int groupnum] { get; }
    parameters:
    - id: groupnum
      type: System.Int32
      description: The zero-based index of the collection member to be retrieved.
    return:
      type: System.Text.RegularExpressions.Group
      description: The member of the collection specified by <code>groupnum</code>.
  overload: System.Text.RegularExpressions.GroupCollection.Item*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.GroupCollection.Item(System.String)
  commentId: P:System.Text.RegularExpressions.GroupCollection.Item(System.String)
  id: Item(System.String)
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: GroupCollection.Item(String)
  fullName: GroupCollection.Item(String)
  type: Property
  assemblies:
  - System.Text.RegularExpressions
  - System
  - netstandard
  namespace: System.Text.RegularExpressions
  summary: Enables access to a member of the collection by string index.
  remarks: "`groupName` can be either the name of a capturing group that is defined by the `(?<`*name*`>)` element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct. For more information about groups in regular expressions, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).  \n  \n You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName> method. You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=fullName> method. Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string.  \n  \n If `groupname` is not the name of a capturing group in the collection, or if `groupname` is the name of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=fullName>."
  example:
  - "The following example defines a regular expression that consists of two named groups. The first group, `numbers`, captures one or more consecutive digits. The second group, `letter`, matches a single character. Because the regular expression engine looks for zero or one occurrence of the pattern defined by the `numbers` group, the `numbers` group is not always present even if a match is successful. The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression. The example defines a regular expression pattern `(?<numbers>\\d+)*(?<letter>\\w)\\k<letter>`, which is interpreted as shown in the following table.  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`(?<numbers>\\d+)*`|Match one or more occurrence of a decimal digit. Name this the `numbers` capturing group. Match this pattern either zero or one time.|  \n|`(?<letter>\\w)`|Match a single word character. Name this the `letter` capturing group.|  \n|`\\k<letter>`|Match the string captured by the `letter` capturing group.|  \n  \n [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item2.cs#1)]\n [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item2.vb#1)]"
  syntax:
    content: public System.Text.RegularExpressions.Group this[string groupname] { get; }
    parameters:
    - id: groupname
      type: System.String
      description: The name of a capturing group.
    return:
      type: System.Text.RegularExpressions.Group
      description: The member of the collection specified by <code>groupname</code>.
  overload: System.Text.RegularExpressions.GroupCollection.Item*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.GroupCollection.SyncRoot
  commentId: P:System.Text.RegularExpressions.GroupCollection.SyncRoot
  id: SyncRoot
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: SyncRoot
  nameWithType: GroupCollection.SyncRoot
  fullName: GroupCollection.SyncRoot
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Text.RegularExpressions.GroupCollection"></xref>.
  remarks: >-
    > [!WARNING]

    >  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName> property instead.
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: A copy of the <xref href="System.Text.RegularExpressions.Match"></xref> object to synchronize.
  overload: System.Text.RegularExpressions.GroupCollection.SyncRoot*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection<System#Text#RegularExpressions#Group>#Add(System.Text.RegularExpressions.Group)
  id: System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: ICollection<Group>.Add(Group)
  nameWithType: GroupCollection.ICollection<Group>.Add(Group)
  fullName: GroupCollection.ICollection<Group>.Add(Group)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: void ICollection<Group>.Add (System.Text.RegularExpressions.Group item);
    parameters:
    - id: item
      type: System.Text.RegularExpressions.Group
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection<System#Text#RegularExpressions#Group>#Clear
  id: System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: ICollection<Group>.Clear()
  nameWithType: GroupCollection.ICollection<Group>.Clear()
  fullName: GroupCollection.ICollection<Group>.Clear()
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: void ICollection<Group>.Clear ();
    parameters: []
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection<System#Text#RegularExpressions#Group>#Contains(System.Text.RegularExpressions.Group)
  id: System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: ICollection<Group>.Contains(Group)
  nameWithType: GroupCollection.ICollection<Group>.Contains(Group)
  fullName: GroupCollection.ICollection<Group>.Contains(Group)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: bool ICollection<Group>.Contains (System.Text.RegularExpressions.Group item);
    parameters:
    - id: item
      type: System.Text.RegularExpressions.Group
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection<System#Text#RegularExpressions#Group>#Remove(System.Text.RegularExpressions.Group)
  id: System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: ICollection<Group>.Remove(Group)
  nameWithType: GroupCollection.ICollection<Group>.Remove(Group)
  fullName: GroupCollection.ICollection<Group>.Remove(Group)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: bool ICollection<Group>.Remove (System.Text.RegularExpressions.Group item);
    parameters:
    - id: item
      type: System.Text.RegularExpressions.Group
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable<System#Text#RegularExpressions#Group>#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IEnumerable<Group>.GetEnumerator()
  nameWithType: GroupCollection.IEnumerable<Group>.GetEnumerator()
  fullName: GroupCollection.IEnumerable<Group>.GetEnumerator()
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: System.Collections.Generic.IEnumerator<System.Text.RegularExpressions.Group> IEnumerable<Group>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Text.RegularExpressions.Group}
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList<System#Text#RegularExpressions#Group>#IndexOf(System.Text.RegularExpressions.Group)
  id: System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList<Group>.IndexOf(Group)
  nameWithType: GroupCollection.IList<Group>.IndexOf(Group)
  fullName: GroupCollection.IList<Group>.IndexOf(Group)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: int IList<Group>.IndexOf (System.Text.RegularExpressions.Group item);
    parameters:
    - id: item
      type: System.Text.RegularExpressions.Group
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList<System#Text#RegularExpressions#Group>#Insert(System.Int32,System.Text.RegularExpressions.Group)
  id: System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList<Group>.Insert(Int32, Group)
  nameWithType: GroupCollection.IList<Group>.Insert(Int32, Group)
  fullName: GroupCollection.IList<Group>.Insert(Int32, Group)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: void IList<Group>.Insert (int index, System.Text.RegularExpressions.Group item);
    parameters:
    - id: index
      type: System.Int32
      description: ''
    - id: item
      type: System.Text.RegularExpressions.Group
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)
  commentId: P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList<System#Text#RegularExpressions#Group>#Item(System.Int32)
  id: System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList<Group>.Item(Int32)
  nameWithType: GroupCollection.IList<Group>.Item(Int32)
  fullName: GroupCollection.IList<Group>.Item(Int32)
  type: Property
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: System.Text.RegularExpressions.Group System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: ''
    return:
      type: System.Text.RegularExpressions.Group
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList<System#Text#RegularExpressions#Group>#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList<Group>.RemoveAt(Int32)
  nameWithType: GroupCollection.IList<Group>.RemoveAt(Int32)
  fullName: GroupCollection.IList<Group>.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: void IList<Group>.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: GroupCollection.ICollection.CopyTo(Array, Int32)
  fullName: GroupCollection.ICollection.CopyTo(Array, Int32)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: void ICollection.CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: ''
    - id: arrayIndex
      type: System.Int32
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: GroupCollection.ICollection.IsSynchronized
  fullName: GroupCollection.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot
  commentId: P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: GroupCollection.ICollection.SyncRoot
  fullName: GroupCollection.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList.Add(Object)
  nameWithType: GroupCollection.IList.Add(Object)
  fullName: GroupCollection.IList.Add(Object)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList.Clear()
  nameWithType: GroupCollection.IList.Clear()
  fullName: GroupCollection.IList.Clear()
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: void IList.Clear ();
    parameters: []
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList.Contains(Object)
  nameWithType: GroupCollection.IList.Contains(Object)
  fullName: GroupCollection.IList.Contains(Object)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList.IndexOf(Object)
  nameWithType: GroupCollection.IList.IndexOf(Object)
  fullName: GroupCollection.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList.Insert(Int32, Object)
  nameWithType: GroupCollection.IList.Insert(Int32, Object)
  fullName: GroupCollection.IList.Insert(Int32, Object)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: ''
    - id: value
      type: System.Object
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize
  commentId: P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList.IsFixedSize
  nameWithType: GroupCollection.IList.IsFixedSize
  fullName: GroupCollection.IList.IsFixedSize
  type: Property
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList.Item(Int32)
  nameWithType: GroupCollection.IList.Item(Int32)
  fullName: GroupCollection.IList.Item(Int32)
  type: Property
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: ''
    return:
      type: System.Object
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList.Remove(Object)
  nameWithType: GroupCollection.IList.Remove(Object)
  fullName: GroupCollection.IList.Remove(Object)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: System.Text.RegularExpressions.GroupCollection
  langs:
  - csharp
  name: IList.RemoveAt(Int32)
  nameWithType: GroupCollection.IList.RemoveAt(Int32)
  fullName: GroupCollection.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: ''
  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IndexOutOfRangeException
  parent: System
  isExternal: false
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: CopyTo(Array, Int32)
  nameWithType: GroupCollection.CopyTo(Array, Int32)
  fullName: GroupCollection.CopyTo(Array, Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: CopyTo(Group[], Int32)
  nameWithType: GroupCollection.CopyTo(Group[], Int32)
  fullName: GroupCollection.CopyTo(Group[], Int32)
- uid: System.Text.RegularExpressions.Group
  name: Group
  nameWithType: Group
  fullName: System.Text.RegularExpressions.Group
- uid: System.Text.RegularExpressions.Group[]
  parent: System.Text.RegularExpressions
  isExternal: false
  name: Group[]
  nameWithType: Group[]
  fullName: System.Text.RegularExpressions.Group[]
  spec.csharp:
  - uid: System.Text.RegularExpressions.Group
    name: Group
    nameWithType: Group
    fullName: System.Text.RegularExpressions.Group
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Text.RegularExpressions.GroupCollection.Count
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: Count
  nameWithType: GroupCollection.Count
  fullName: GroupCollection.Count
- uid: System.Text.RegularExpressions.GroupCollection.GetEnumerator
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: GroupCollection.GetEnumerator()
  fullName: GroupCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Text.RegularExpressions.GroupCollection.IsReadOnly
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: GroupCollection.IsReadOnly
  fullName: GroupCollection.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.RegularExpressions.GroupCollection.IsSynchronized
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: GroupCollection.IsSynchronized
  fullName: GroupCollection.IsSynchronized
- uid: System.Text.RegularExpressions.GroupCollection.Item(System.Int32)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: GroupCollection.Item(Int32)
  fullName: GroupCollection.Item(Int32)
- uid: System.Text.RegularExpressions.GroupCollection.Item(System.String)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: Item(String)
  nameWithType: GroupCollection.Item(String)
  fullName: GroupCollection.Item(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.RegularExpressions.GroupCollection.SyncRoot
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: SyncRoot
  nameWithType: GroupCollection.SyncRoot
  fullName: GroupCollection.SyncRoot
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: ICollection<Group>.Add(Group)
  nameWithType: GroupCollection.ICollection<Group>.Add(Group)
  fullName: GroupCollection.ICollection<Group>.Add(Group)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: ICollection<Group>.Clear()
  nameWithType: GroupCollection.ICollection<Group>.Clear()
  fullName: GroupCollection.ICollection<Group>.Clear()
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: ICollection<Group>.Contains(Group)
  nameWithType: GroupCollection.ICollection<Group>.Contains(Group)
  fullName: GroupCollection.ICollection<Group>.Contains(Group)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: ICollection<Group>.Remove(Group)
  nameWithType: GroupCollection.ICollection<Group>.Remove(Group)
  fullName: GroupCollection.ICollection<Group>.Remove(Group)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IEnumerable<Group>.GetEnumerator()
  nameWithType: GroupCollection.IEnumerable<Group>.GetEnumerator()
  fullName: GroupCollection.IEnumerable<Group>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.IEnumerator{System.Text.RegularExpressions.Group}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<Group>
  nameWithType: IEnumerator<Group>
  fullName: System.Collections.Generic.IEnumerator<System.Text.RegularExpressions.Group>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Text.RegularExpressions.Group
    name: Group
    nameWithType: Group
    fullName: System.Text.RegularExpressions.Group
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList<Group>.IndexOf(Group)
  nameWithType: GroupCollection.IList<Group>.IndexOf(Group)
  fullName: GroupCollection.IList<Group>.IndexOf(Group)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList<Group>.Insert(Int32, Group)
  nameWithType: GroupCollection.IList<Group>.Insert(Int32, Group)
  fullName: GroupCollection.IList<Group>.Insert(Int32, Group)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList<Group>.Item(Int32)
  nameWithType: GroupCollection.IList<Group>.Item(Int32)
  fullName: GroupCollection.IList<Group>.Item(Int32)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList<Group>.RemoveAt(Int32)
  nameWithType: GroupCollection.IList<Group>.RemoveAt(Int32)
  fullName: GroupCollection.IList<Group>.RemoveAt(Int32)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: GroupCollection.ICollection.CopyTo(Array, Int32)
  fullName: GroupCollection.ICollection.CopyTo(Array, Int32)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: GroupCollection.ICollection.IsSynchronized
  fullName: GroupCollection.ICollection.IsSynchronized
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: GroupCollection.ICollection.SyncRoot
  fullName: GroupCollection.ICollection.SyncRoot
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList.Add(Object)
  nameWithType: GroupCollection.IList.Add(Object)
  fullName: GroupCollection.IList.Add(Object)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList.Clear()
  nameWithType: GroupCollection.IList.Clear()
  fullName: GroupCollection.IList.Clear()
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList.Contains(Object)
  nameWithType: GroupCollection.IList.Contains(Object)
  fullName: GroupCollection.IList.Contains(Object)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList.IndexOf(Object)
  nameWithType: GroupCollection.IList.IndexOf(Object)
  fullName: GroupCollection.IList.IndexOf(Object)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList.Insert(Int32, Object)
  nameWithType: GroupCollection.IList.Insert(Int32, Object)
  fullName: GroupCollection.IList.Insert(Int32, Object)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList.IsFixedSize
  nameWithType: GroupCollection.IList.IsFixedSize
  fullName: GroupCollection.IList.IsFixedSize
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList.Item(Int32)
  nameWithType: GroupCollection.IList.Item(Int32)
  fullName: GroupCollection.IList.Item(Int32)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList.Remove(Object)
  nameWithType: GroupCollection.IList.Remove(Object)
  fullName: GroupCollection.IList.Remove(Object)
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IList.RemoveAt(Int32)
  nameWithType: GroupCollection.IList.RemoveAt(Int32)
  fullName: GroupCollection.IList.RemoveAt(Int32)
- uid: System.Text.RegularExpressions.GroupCollection.CopyTo*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: CopyTo
  nameWithType: GroupCollection.CopyTo
  fullName: GroupCollection.CopyTo
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.Count*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: Count
  nameWithType: GroupCollection.Count
  fullName: GroupCollection.Count
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.GetEnumerator*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: GroupCollection.GetEnumerator
  fullName: GroupCollection.GetEnumerator
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.IsReadOnly*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: GroupCollection.IsReadOnly
  fullName: GroupCollection.IsReadOnly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.IsSynchronized*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: GroupCollection.IsSynchronized
  fullName: GroupCollection.IsSynchronized
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.Item*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: Item
  nameWithType: GroupCollection.Item
  fullName: GroupCollection.Item
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.SyncRoot*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: SyncRoot
  nameWithType: GroupCollection.SyncRoot
  fullName: GroupCollection.SyncRoot
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Add
  nameWithType: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Add
  fullName: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Add
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Clear
  nameWithType: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Clear
  fullName: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Clear
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Contains
  nameWithType: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Contains
  fullName: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Contains
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Remove
  nameWithType: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Remove
  fullName: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Remove
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>.GetEnumerator
  nameWithType: GroupCollection.System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>.GetEnumerator
  fullName: GroupCollection.System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>.GetEnumerator
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.IndexOf
  nameWithType: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.IndexOf
  fullName: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.IndexOf
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Insert
  nameWithType: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Insert
  fullName: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Insert
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Item
  nameWithType: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Item
  fullName: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Item
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.RemoveAt
  nameWithType: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.RemoveAt
  fullName: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.RemoveAt
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: GroupCollection.System.Collections.ICollection.CopyTo
  fullName: GroupCollection.System.Collections.ICollection.CopyTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: GroupCollection.System.Collections.ICollection.IsSynchronized
  fullName: GroupCollection.System.Collections.ICollection.IsSynchronized
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: GroupCollection.System.Collections.ICollection.SyncRoot
  fullName: GroupCollection.System.Collections.ICollection.SyncRoot
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: GroupCollection.System.Collections.IList.Add
  fullName: GroupCollection.System.Collections.IList.Add
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.IList.Clear
  nameWithType: GroupCollection.System.Collections.IList.Clear
  fullName: GroupCollection.System.Collections.IList.Clear
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: GroupCollection.System.Collections.IList.Contains
  fullName: GroupCollection.System.Collections.IList.Contains
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: GroupCollection.System.Collections.IList.IndexOf
  fullName: GroupCollection.System.Collections.IList.IndexOf
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: GroupCollection.System.Collections.IList.Insert
  fullName: GroupCollection.System.Collections.IList.Insert
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: GroupCollection.System.Collections.IList.IsFixedSize
  fullName: GroupCollection.System.Collections.IList.IsFixedSize
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: GroupCollection.System.Collections.IList.Item
  fullName: GroupCollection.System.Collections.IList.Item
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: GroupCollection.System.Collections.IList.Remove
  fullName: GroupCollection.System.Collections.IList.Remove
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt*
  parent: System.Text.RegularExpressions.GroupCollection
  isExternal: false
  name: System.Collections.IList.RemoveAt
  nameWithType: GroupCollection.System.Collections.IList.RemoveAt
  fullName: GroupCollection.System.Collections.IList.RemoveAt
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: Enumerable.Cast<TResult>(IEnumerable)
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: Enumerable.OfType<TResult>(IEnumerable)
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  isExternal: false
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: ParallelEnumerable.AsParallel(IEnumerable)
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: Queryable.AsQueryable(IEnumerable)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
