{"nodes":[{"content":"Specifies that an object can be initialized by using a non-default constructor syntax, and that a property of the specified name supplies construction information.  This information is primarily for XAML serialization.","nodes":[{"pos":[0,218],"content":"Specifies that an object can be initialized by using a non-default constructor syntax, and that a property of the specified name supplies construction information.  This information is primarily for XAML serialization.","nodes":[{"content":"Specifies that an object can be initialized by using a non-default constructor syntax, and that a property of the specified name supplies construction information.  This information is primarily for XAML serialization.","pos":[0,218],"nodes":[{"content":"Specifies that an object can be initialized by using a non-default constructor syntax, and that a property of the specified name supplies construction information.","pos":[0,163]},{"content":"This information is primarily for XAML serialization.","pos":[165,218]}]}]}],"pos":[606,825],"yaml":true},{"content":"This attribute specifies that the associated property can be initialized by a constructor parameter and should be ignored for XAML serialization if the constructor is used to construct the instance. This provides better round trip representations for parameterized constructor syntax rather than default constructor instantiation plus specific attributes.  \n  \n A framework can potentially support preserving markup extension usages and reconstituting them rather than relying on `ProvideValue` output in the object tree for serialization. In this case, the <xref:System.Windows.Markup.ConstructorArgumentAttribute> information is useful during serialization for producing an accurate representation of the typical markup extension usage. For more information about markup extensions, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).  \n  \n In order to be valid for a <xref:System.Windows.Markup.ConstructorArgumentAttribute> attribution, a type's public non-default constructor must support exactly one parameter. The name of the parameter must correspond to a read/write property. The property must be otherwise serializable. You use this attribute to create the correspondence between the name of the parameter in the constructor, and the property. Specifically, you apply this attribute to the property-level definition of the connecting read/write property.  \n  \n Consumers of <xref:System.Windows.Markup.ConstructorArgumentAttribute> may throw in cases where <xref:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName%2A> does not resolve to type backing, or when applied to a type that does not have the appropriate construction arguments and arity.  \n  \n In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ConstructorArgumentAttribute> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  \n  \n## WPF Usage Notes  \n For more information about markup extensions and WPF, see [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).","nodes":[{"pos":[0,355],"content":"This attribute specifies that the associated property can be initialized by a constructor parameter and should be ignored for XAML serialization if the constructor is used to construct the instance. This provides better round trip representations for parameterized constructor syntax rather than default constructor instantiation plus specific attributes.","nodes":[{"content":"This attribute specifies that the associated property can be initialized by a constructor parameter and should be ignored for XAML serialization if the constructor is used to construct the instance. This provides better round trip representations for parameterized constructor syntax rather than default constructor instantiation plus specific attributes.","pos":[0,355],"nodes":[{"content":"This attribute specifies that the associated property can be initialized by a constructor parameter and should be ignored for XAML serialization if the constructor is used to construct the instance.","pos":[0,198]},{"content":"This provides better round trip representations for parameterized constructor syntax rather than default constructor instantiation plus specific attributes.","pos":[199,355]}]}]},{"pos":[362,898],"content":"A framework can potentially support preserving markup extension usages and reconstituting them rather than relying on `ProvideValue` output in the object tree for serialization. In this case, the <xref:System.Windows.Markup.ConstructorArgumentAttribute> information is useful during serialization for producing an accurate representation of the typical markup extension usage. For more information about markup extensions, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).","nodes":[{"content":"A framework can potentially support preserving markup extension usages and reconstituting them rather than relying on <ph id=\"ph1\">`ProvideValue`</ph> output in the object tree for serialization.","pos":[0,177],"source":"A framework can potentially support preserving markup extension usages and reconstituting them rather than relying on `ProvideValue` output in the object tree for serialization."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.Windows.Markup.ConstructorArgumentAttribute&gt;</ph> information is useful during serialization for producing an accurate representation of the typical markup extension usage.","pos":[178,376],"source":" In this case, the <xref:System.Windows.Markup.ConstructorArgumentAttribute> information is useful during serialization for producing an accurate representation of the typical markup extension usage."},{"content":"For more information about markup extensions, see <bpt id=\"p1\">[</bpt>Markup Extensions for XAML Overview<ept id=\"p1\">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>.","pos":[377,536],"source":" For more information about markup extensions, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)."}]},{"pos":[905,1426],"content":"In order to be valid for a <xref:System.Windows.Markup.ConstructorArgumentAttribute> attribution, a type's public non-default constructor must support exactly one parameter. The name of the parameter must correspond to a read/write property. The property must be otherwise serializable. You use this attribute to create the correspondence between the name of the parameter in the constructor, and the property. Specifically, you apply this attribute to the property-level definition of the connecting read/write property.","nodes":[{"content":"In order to be valid for a <xref:System.Windows.Markup.ConstructorArgumentAttribute> attribution, a type's public non-default constructor must support exactly one parameter. The name of the parameter must correspond to a read/write property. The property must be otherwise serializable. You use this attribute to create the correspondence between the name of the parameter in the constructor, and the property. Specifically, you apply this attribute to the property-level definition of the connecting read/write property.","pos":[0,521],"nodes":[{"content":"In order to be valid for a <ph id=\"ph1\">&lt;xref:System.Windows.Markup.ConstructorArgumentAttribute&gt;</ph> attribution, a type's public non-default constructor must support exactly one parameter.","pos":[0,173],"source":"In order to be valid for a <xref:System.Windows.Markup.ConstructorArgumentAttribute> attribution, a type's public non-default constructor must support exactly one parameter."},{"content":"The name of the parameter must correspond to a read/write property.","pos":[174,241]},{"content":"The property must be otherwise serializable.","pos":[242,286]},{"content":"You use this attribute to create the correspondence between the name of the parameter in the constructor, and the property.","pos":[287,410]},{"content":"Specifically, you apply this attribute to the property-level definition of the connecting read/write property.","pos":[411,521]}]}]},{"pos":[1433,1731],"content":"Consumers of <xref:System.Windows.Markup.ConstructorArgumentAttribute> may throw in cases where <xref:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName%2A> does not resolve to type backing, or when applied to a type that does not have the appropriate construction arguments and arity.","nodes":[{"content":"Consumers of <ph id=\"ph1\">&lt;xref:System.Windows.Markup.ConstructorArgumentAttribute&gt;</ph> may throw in cases where <ph id=\"ph2\">&lt;xref:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName%2A&gt;</ph> does not resolve to type backing, or when applied to a type that does not have the appropriate construction arguments and arity.","pos":[0,298],"source":"Consumers of <xref:System.Windows.Markup.ConstructorArgumentAttribute> may throw in cases where <xref:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName%2A> does not resolve to type backing, or when applied to a type that does not have the appropriate construction arguments and arity."}]},{"pos":[1738,2134],"content":"In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ConstructorArgumentAttribute> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).","nodes":[{"content":"In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.","pos":[0,104]},{"content":"In <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Markup.ConstructorArgumentAttribute&gt;</ph> is in the System.Xaml assembly.","pos":[105,254],"source":" In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ConstructorArgumentAttribute> is in the System.Xaml assembly."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Types Migrated from WPF to System.Xaml<ept id=\"p1\">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.","pos":[255,396],"source":" For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)."}]},{"pos":[2143,2158],"content":"WPF Usage Notes","linkify":"WPF Usage Notes","nodes":[{"content":"WPF Usage Notes","pos":[0,15]}]},{"pos":[2162,2318],"content":"For more information about markup extensions and WPF, see <bpt id=\"p1\">[</bpt>Markup Extensions and WPF XAML<ept id=\"p1\">](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept>.","source":"For more information about markup extensions and WPF, see [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)."}],"pos":[836,3168],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Markup.ConstructorArgumentAttribute\"></xref> class.","nodes":[{"pos":[0,112],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Markup.ConstructorArgumentAttribute\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.ConstructorArgumentAttribute\"></xref> class."}],"pos":[8213,8326],"yaml":true},{"content":"The name of the constructor that will initialize the associated property.","nodes":[{"pos":[0,73],"content":"The name of the constructor that will initialize the associated property.","nodes":[{"content":"The name of the constructor that will initialize the associated property.","pos":[0,73]}]}],"pos":[8492,8566],"yaml":true},{"content":"Gets the name parameter of the constructor that will initialize the associated property.","nodes":[{"pos":[0,88],"content":"Gets the name parameter of the constructor that will initialize the associated property.","nodes":[{"content":"Gets the name parameter of the constructor that will initialize the associated property.","pos":[0,88]}]}],"pos":[9635,9724],"yaml":true},{"content":"The name of the constructor. Assuming CLR backing, this corresponds to the <xref href=\"System.Reflection.ParameterInfo.Name\"></xref> of the relevant constructor parameter.","nodes":[{"pos":[0,171],"content":"The name of the constructor. Assuming CLR backing, this corresponds to the <xref href=\"System.Reflection.ParameterInfo.Name\"></xref> of the relevant constructor parameter.","nodes":[{"content":"The name of the constructor.","pos":[0,28]},{"content":"Assuming CLR backing, this corresponds to the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ParameterInfo.Name\"&gt;&lt;/xref&gt;</ph> of the relevant constructor parameter.","pos":[29,171],"source":" Assuming CLR backing, this corresponds to the <xref href=\"System.Reflection.ParameterInfo.Name\"></xref> of the relevant constructor parameter."}]}],"pos":[9840,10012],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Markup.ConstructorArgumentAttribute\n  commentId: T:System.Windows.Markup.ConstructorArgumentAttribute\n  id: ConstructorArgumentAttribute\n  children:\n  - System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)\n  - System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName\n  langs:\n  - csharp\n  name: ConstructorArgumentAttribute\n  nameWithType: ConstructorArgumentAttribute\n  fullName: System.Windows.Markup.ConstructorArgumentAttribute\n  type: Class\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Specifies that an object can be initialized by using a non-default constructor syntax, and that a property of the specified name supplies construction information.  This information is primarily for XAML serialization.\n  remarks: \"This attribute specifies that the associated property can be initialized by a constructor parameter and should be ignored for XAML serialization if the constructor is used to construct the instance. This provides better round trip representations for parameterized constructor syntax rather than default constructor instantiation plus specific attributes.  \\n  \\n A framework can potentially support preserving markup extension usages and reconstituting them rather than relying on `ProvideValue` output in the object tree for serialization. In this case, the <xref:System.Windows.Markup.ConstructorArgumentAttribute> information is useful during serialization for producing an accurate representation of the typical markup extension usage. For more information about markup extensions, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).  \\n  \\n In order to be valid for a <xref:System.Windows.Markup.ConstructorArgumentAttribute> attribution, a type's public non-default constructor must support exactly one parameter. The name of the parameter must correspond to a read/write property. The property must be otherwise serializable. You use this attribute to create the correspondence between the name of the parameter in the constructor, and the property. Specifically, you apply this attribute to the property-level definition of the connecting read/write property.  \\n  \\n Consumers of <xref:System.Windows.Markup.ConstructorArgumentAttribute> may throw in cases where <xref:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName%2A> does not resolve to type backing, or when applied to a type that does not have the appropriate construction arguments and arity.  \\n  \\n In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ConstructorArgumentAttribute> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  \\n  \\n## WPF Usage Notes  \\n For more information about markup extensions and WPF, see [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Property, AllowMultiple=false, Inherited=false)]\n\n      public sealed class ConstructorArgumentAttribute : Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetHashCode\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.AttributeUsageAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ConstructorArgumentAttribute.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)\n  commentId: M:System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Windows.Markup.ConstructorArgumentAttribute\n  langs:\n  - csharp\n  name: ConstructorArgumentAttribute(String)\n  nameWithType: ConstructorArgumentAttribute.ConstructorArgumentAttribute(String)\n  fullName: ConstructorArgumentAttribute.ConstructorArgumentAttribute(String)\n  type: Constructor\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.ConstructorArgumentAttribute\"></xref> class.\n  syntax:\n    content: public ConstructorArgumentAttribute (string argumentName);\n    parameters:\n    - id: argumentName\n      type: System.String\n      description: The name of the constructor that will initialize the associated property.\n  overload: System.Windows.Markup.ConstructorArgumentAttribute.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ConstructorArgumentAttribute.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName\n  commentId: P:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName\n  id: ArgumentName\n  parent: System.Windows.Markup.ConstructorArgumentAttribute\n  langs:\n  - csharp\n  name: ArgumentName\n  nameWithType: ConstructorArgumentAttribute.ArgumentName\n  fullName: ConstructorArgumentAttribute.ArgumentName\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Gets the name parameter of the constructor that will initialize the associated property.\n  syntax:\n    content: public string ArgumentName { get; }\n    return:\n      type: System.String\n      description: The name of the constructor. Assuming CLR backing, this corresponds to the <xref href=\"System.Reflection.ParameterInfo.Name\"></xref> of the relevant constructor parameter.\n  overload: System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ConstructorArgumentAttribute.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\nreferences:\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)\n  parent: System.Windows.Markup.ConstructorArgumentAttribute\n  isExternal: false\n  name: ConstructorArgumentAttribute(String)\n  nameWithType: ConstructorArgumentAttribute.ConstructorArgumentAttribute(String)\n  fullName: ConstructorArgumentAttribute.ConstructorArgumentAttribute(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName\n  parent: System.Windows.Markup.ConstructorArgumentAttribute\n  isExternal: false\n  name: ArgumentName\n  nameWithType: ConstructorArgumentAttribute.ArgumentName\n  fullName: ConstructorArgumentAttribute.ArgumentName\n- uid: System.Windows.Markup.ConstructorArgumentAttribute.#ctor*\n  parent: System.Windows.Markup.ConstructorArgumentAttribute\n  isExternal: false\n  name: ConstructorArgumentAttribute\n  nameWithType: ConstructorArgumentAttribute.ConstructorArgumentAttribute\n  fullName: ConstructorArgumentAttribute.ConstructorArgumentAttribute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ConstructorArgumentAttribute.xml\n- uid: System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName*\n  parent: System.Windows.Markup.ConstructorArgumentAttribute\n  isExternal: false\n  name: ArgumentName\n  nameWithType: ConstructorArgumentAttribute.ArgumentName\n  fullName: ConstructorArgumentAttribute.ArgumentName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ConstructorArgumentAttribute.xml\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Attribute.Equals(Object)\n  fullName: Attribute.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Attribute.GetHashCode()\n  fullName: Attribute.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n"}