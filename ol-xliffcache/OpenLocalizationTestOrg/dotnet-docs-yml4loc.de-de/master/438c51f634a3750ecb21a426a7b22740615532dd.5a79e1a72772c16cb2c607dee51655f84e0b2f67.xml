{"nodes":[{"content":"Provides data for the <xref href=\"System.Web.UI.WebControls.FormView.ItemUpdated\"></xref> event.","nodes":[{"pos":[0,96],"content":"Provides data for the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.FormView.ItemUpdated\"&gt;&lt;/xref&gt;</ph> event.","source":"Provides data for the <xref href=\"System.Web.UI.WebControls.FormView.ItemUpdated\"></xref> event."}],"pos":[1010,1107],"yaml":true},{"content":"The <xref:System.Web.UI.WebControls.FormView> control raises the <xref:System.Web.UI.WebControls.FormView.ItemUpdated> event when an Update button (a button with its `CommandName` property set to \"Update\") within the control is clicked, but after the <xref:System.Web.UI.WebControls.FormView> control updates the record. This allows you to provide an event-handling method that performs a custom routine, such as checking the results of an update operation, whenever this event occurs.  \n  \n A <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred. To determine the number of records affected by the update operation, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> property. Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property to determine whether any exceptions occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property. If you need to access the original key field values for the updated record, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property. The original non-key field values can be accessed by using the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> property. Updated values (which include updated key field values, if you allow the user to edit key fields) are accessed using the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property.  \n  \n By default, the <xref:System.Web.UI.WebControls.FormView> control returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property after an update operation. When handling an exception that occurred during the update operation, you can keep the <xref:System.Web.UI.WebControls.FormView> control in edit mode by setting the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> property to `true`.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  \n  \n For a list of initial property values for an instance of the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> class, see the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A> constructor.","nodes":[{"pos":[0,485],"content":"The <xref:System.Web.UI.WebControls.FormView> control raises the <xref:System.Web.UI.WebControls.FormView.ItemUpdated> event when an Update button (a button with its `CommandName` property set to \"Update\") within the control is clicked, but after the <xref:System.Web.UI.WebControls.FormView> control updates the record. This allows you to provide an event-handling method that performs a custom routine, such as checking the results of an update operation, whenever this event occurs.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormView&gt;</ph> control raises the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.FormView.ItemUpdated&gt;</ph> event when an Update button (a button with its <ph id=\"ph3\">`CommandName`</ph> property set to \"Update\") within the control is clicked, but after the <ph id=\"ph4\">&lt;xref:System.Web.UI.WebControls.FormView&gt;</ph> control updates the record.","pos":[0,320],"source":"The <xref:System.Web.UI.WebControls.FormView> control raises the <xref:System.Web.UI.WebControls.FormView.ItemUpdated> event when an Update button (a button with its `CommandName` property set to \"Update\") within the control is clicked, but after the <xref:System.Web.UI.WebControls.FormView> control updates the record."},{"content":"This allows you to provide an event-handling method that performs a custom routine, such as checking the results of an update operation, whenever this event occurs.","pos":[321,485]}]},{"pos":[492,1693],"content":"A <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred. To determine the number of records affected by the update operation, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> property. Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property to determine whether any exceptions occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property. If you need to access the original key field values for the updated record, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property. The original non-key field values can be accessed by using the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> property. Updated values (which include updated key field values, if you allow the user to edit key fields) are accessed using the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property.","nodes":[{"content":"A <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred. To determine the number of records affected by the update operation, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> property. Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property to determine whether any exceptions occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property. If you need to access the original key field values for the updated record, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property. The original non-key field values can be accessed by using the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> property. Updated values (which include updated key field values, if you allow the user to edit key fields) are accessed using the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property.","pos":[0,1201],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs&gt;</ph> object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred.","pos":[0,212],"source":"A <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred."},{"content":"To determine the number of records affected by the update operation, use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A&gt;</ph> property.","pos":[213,373],"source":" To determine the number of records affected by the update operation, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> property."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A&gt;</ph> property to determine whether any exceptions occurred.","pos":[374,507],"source":" Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property to determine whether any exceptions occurred."},{"content":"You can also indicate whether the exception was handled in the event-handling method by setting the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A&gt;</ph> property.","pos":[508,695],"source":" You can also indicate whether the exception was handled in the event-handling method by setting the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property."},{"content":"If you need to access the original key field values for the updated record, use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A&gt;</ph> property.","pos":[696,855],"source":" If you need to access the original key field values for the updated record, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property."},{"content":"The original non-key field values can be accessed by using the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A&gt;</ph> property.","pos":[856,999],"source":" The original non-key field values can be accessed by using the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> property."},{"content":"Updated values (which include updated key field values, if you allow the user to edit key fields) are accessed using the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A&gt;</ph> property.","pos":[1000,1201],"source":" Updated values (which include updated key field values, if you allow the user to edit key fields) are accessed using the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property."}]}]},{"pos":[1700,2156],"content":"By default, the <xref:System.Web.UI.WebControls.FormView> control returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property after an update operation. When handling an exception that occurred during the update operation, you can keep the <xref:System.Web.UI.WebControls.FormView> control in edit mode by setting the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> property to `true`.","nodes":[{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormView&gt;</ph> control returns to the mode specified by the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.FormView.DefaultMode%2A&gt;</ph> property after an update operation.","pos":[0,195],"source":"By default, the <xref:System.Web.UI.WebControls.FormView> control returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property after an update operation."},{"content":"When handling an exception that occurred during the update operation, you can keep the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormView&gt;</ph> control in edit mode by setting the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A&gt;</ph> property to <ph id=\"ph3\">`true`</ph>.","pos":[196,456],"source":" When handling an exception that occurred during the update operation, you can keep the <xref:System.Web.UI.WebControls.FormView> control in edit mode by setting the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> property to `true`."}]},{"pos":[2163,2305],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."},{"pos":[2312,2527],"content":"For a list of initial property values for an instance of the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> class, see the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A> constructor.","nodes":[{"content":"For a list of initial property values for an instance of the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs&gt;</ph> class, see the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A&gt;</ph> constructor.","pos":[0,215],"source":"For a list of initial property values for an instance of the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> class, see the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A> constructor."}]}],"pos":[1118,3658],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.FormViewUpdatedEventArgs\"></xref> class.","nodes":[{"pos":[0,112],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.FormViewUpdatedEventArgs\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.FormViewUpdatedEventArgs\"></xref> class."}],"pos":[5996,6109],"yaml":true},{"content":"Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> class.  \n  \n The following table shows initial property values for an instance of the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> class.  \n  \n|Property|Initial Value|  \n|--------------|-------------------|  \n|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>|The value of the `affectedRows` parameter.|  \n|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>|The <xref:System.Exception?displayProperty=fullName> object contained in the `e` parameter.|  \n|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>|Initialized to `false`.|  \n|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>|Initialized to `false`.|  \n  \n> [!NOTE]\n>  This constructor is used primarily by control developers when raising events.","nodes":[{"pos":[0,121],"content":"Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> class.","nodes":[{"content":"Use this constructor to initialize a new instance of the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs&gt;</ph> class.","pos":[0,121],"source":"Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> class."}]},{"pos":[128,265],"content":"The following table shows initial property values for an instance of the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> class.","nodes":[{"content":"The following table shows initial property values for an instance of the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs&gt;</ph> class.","pos":[0,137],"source":"The following table shows initial property values for an instance of the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> class."}]},{"pos":[272,280],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[281,294],"content":"Initial Value","nodes":[{"content":"Initial Value","pos":[0,13]}]},{"pos":[338,411],"content":"<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>","nodes":[]},{"pos":[412,454],"content":"The value of the <ph id=\"ph1\">`affectedRows`</ph> parameter.","source":"The value of the `affectedRows` parameter."},{"pos":[459,529],"content":"<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>","nodes":[]},{"pos":[530,621],"content":"The <ph id=\"ph1\">&lt;xref:System.Exception?displayProperty=fullName&gt;</ph> object contained in the <ph id=\"ph2\">`e`</ph> parameter.","source":"The <xref:System.Exception?displayProperty=fullName> object contained in the `e` parameter."},{"pos":[626,703],"content":"<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>","nodes":[]},{"pos":[704,727],"content":"Initialized to <ph id=\"ph1\">`false`</ph>.","source":"Initialized to `false`."},{"pos":[732,807],"content":"<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>","nodes":[]},{"pos":[808,831],"content":"Initialized to <ph id=\"ph1\">`false`</ph>.","source":"Initialized to `false`."},{"pos":[840,928],"content":"[!NOTE]\n This constructor is used primarily by control developers when raising events.","leadings":["","> "],"nodes":[{"content":"This constructor is used primarily by control developers when raising events.","pos":[9,86]}]}],"pos":[6120,7063],"yaml":true,"extradata":"MT"},{"content":"The number of rows affected by the update operation.","nodes":[{"pos":[0,52],"content":"The number of rows affected by the update operation.","nodes":[{"content":"The number of rows affected by the update operation.","pos":[0,52]}]}],"pos":[7234,7287],"yaml":true},{"content":"An <xref href=\"System.Exception\"></xref> that represents the exception raised when the update operation was performed. If no exception is raised, use `null` for this parameter.","nodes":[{"pos":[0,176],"content":"An <xref href=\"System.Exception\"></xref> that represents the exception raised when the update operation was performed. If no exception is raised, use `null` for this parameter.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> that represents the exception raised when the update operation was performed.","pos":[0,118],"source":"An <xref href=\"System.Exception\"></xref> that represents the exception raised when the update operation was performed."},{"content":"If no exception is raised, use <ph id=\"ph1\">`null`</ph> for this parameter.","pos":[119,176],"source":" If no exception is raised, use `null` for this parameter."}]}],"pos":[7347,7524],"yaml":true},{"content":"Gets the number of rows affected by the update operation.","nodes":[{"pos":[0,57],"content":"Gets the number of rows affected by the update operation.","nodes":[{"content":"Gets the number of rows affected by the update operation.","pos":[0,57]}]}],"pos":[8613,8671],"yaml":true},{"content":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> property to determine the number of records affected by the update operation. This property is commonly used to verify that the correct number of records was updated in the following situations:  \n  \n-   Verify that only a single record was updated. Sometimes an improperly written update statement can update multiple records.  \n  \n-   Verify that a record was updated when an error occurs during the update operation that does not raise an exception.  \n  \n-   Verify that a record was updated when a data source control that supports conflict detection (optimistic concurrency checking), such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, has its <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property set to the `ConflictOptions.CompareAllValues` enumeration value. Under this setting, a record that has been modified by another user concurrently might not be updated.","nodes":[{"pos":[0,276],"content":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> property to determine the number of records affected by the update operation. This property is commonly used to verify that the correct number of records was updated in the following situations:","nodes":[{"content":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> property to determine the number of records affected by the update operation. This property is commonly used to verify that the correct number of records was updated in the following situations:","pos":[0,276],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A&gt;</ph> property to determine the number of records affected by the update operation.","pos":[0,159],"source":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> property to determine the number of records affected by the update operation."},{"content":"This property is commonly used to verify that the correct number of records was updated in the following situations:","pos":[160,276]}]}]},{"pos":[286,409],"content":"Verify that only a single record was updated. Sometimes an improperly written update statement can update multiple records.","nodes":[{"content":"Verify that only a single record was updated. Sometimes an improperly written update statement can update multiple records.","pos":[0,123],"nodes":[{"content":"Verify that only a single record was updated.","pos":[0,45]},{"content":"Sometimes an improperly written update statement can update multiple records.","pos":[46,123]}]}]},{"pos":[419,534],"content":"Verify that a record was updated when an error occurs during the update operation that does not raise an exception.","nodes":[{"content":"Verify that a record was updated when an error occurs during the update operation that does not raise an exception.","pos":[0,115]}]},{"pos":[544,1047],"content":"Verify that a record was updated when a data source control that supports conflict detection (optimistic concurrency checking), such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, has its <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property set to the `ConflictOptions.CompareAllValues` enumeration value. Under this setting, a record that has been modified by another user concurrently might not be updated.","nodes":[{"content":"Verify that a record was updated when a data source control that supports conflict detection (optimistic concurrency checking), such as the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.SqlDataSource&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt;</ph> controls, has its <ph id=\"ph3\">&lt;xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A&gt;</ph> property set to the <ph id=\"ph4\">`ConflictOptions.CompareAllValues`</ph> enumeration value.","pos":[0,400],"source":"Verify that a record was updated when a data source control that supports conflict detection (optimistic concurrency checking), such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, has its <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property set to the `ConflictOptions.CompareAllValues` enumeration value."},{"content":"Under this setting, a record that has been modified by another user concurrently might not be updated.","pos":[401,503]}]}],"pos":[8682,9738],"yaml":true,"extradata":"MT"},{"content":"The number of rows affected by the update operation.","nodes":[{"pos":[0,52],"content":"The number of rows affected by the update operation.","nodes":[{"content":"The number of rows affected by the update operation.","pos":[0,52]}]}],"pos":[10432,10485],"yaml":true},{"content":"Gets the exception (if any) that was raised during the update operation.","nodes":[{"pos":[0,72],"content":"Gets the exception (if any) that was raised during the update operation.","nodes":[{"content":"Gets the exception (if any) that was raised during the update operation.","pos":[0,72]}]}],"pos":[11563,11636],"yaml":true},{"content":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property to determine the exception (if any) that was raised during the update operation. If no exceptions were raised, this property returns `null`.  \n  \n> [!NOTE]\n>  If an exception was raised and you decide to handle the exception in the event handler, be sure to set the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property to `true`; otherwise, the exception is thrown again by the <xref:System.Web.UI.WebControls.FormView> control.","nodes":[{"pos":[0,228],"content":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property to determine the exception (if any) that was raised during the update operation. If no exceptions were raised, this property returns `null`.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A&gt;</ph> property to determine the exception (if any) that was raised during the update operation.","pos":[0,168],"source":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property to determine the exception (if any) that was raised during the update operation."},{"content":"If no exceptions were raised, this property returns <ph id=\"ph1\">`null`</ph>.","pos":[169,228],"source":" If no exceptions were raised, this property returns `null`."}]},{"pos":[236,550],"content":"[!NOTE]\n If an exception was raised and you decide to handle the exception in the event handler, be sure to set the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property to `true`; otherwise, the exception is thrown again by the <xref:System.Web.UI.WebControls.FormView> control.","leadings":["","> "],"nodes":[{"content":"If an exception was raised and you decide to handle the exception in the event handler, be sure to set the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>; otherwise, the exception is thrown again by the <ph id=\"ph3\">&lt;xref:System.Web.UI.WebControls.FormView&gt;</ph> control.","pos":[9,312],"source":" If an exception was raised and you decide to handle the exception in the event handler, be sure to set the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property to `true`; otherwise, the exception is thrown again by the <xref:System.Web.UI.WebControls.FormView> control."}]}],"pos":[11647,12203],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Exception\"></xref> object that represents the exception that was raised during the update operation.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> object that represents the exception that was raised during the update operation.","source":"An <xref href=\"System.Exception\"></xref> object that represents the exception that was raised during the update operation."}],"pos":[12935,13058],"yaml":true},{"content":"Gets or sets a value indicating whether an exception that was raised during the update operation was handled in the event handler.","nodes":[{"pos":[0,130],"content":"Gets or sets a value indicating whether an exception that was raised during the update operation was handled in the event handler.","nodes":[{"content":"Gets or sets a value indicating whether an exception that was raised during the update operation was handled in the event handler.","pos":[0,130]}]}],"pos":[14175,14306],"yaml":true},{"content":"When an exception is raised during the update operation, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property to indicate whether the exception was handled in the event handler. When this property is set to `true`, the exception is considered handled and is not thrown again by the <xref:System.Web.UI.WebControls.FormView> control. If this property is set to `false`, the exception is thrown again. To determine which exception was raised, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property.","nodes":[{"pos":[0,571],"content":"When an exception is raised during the update operation, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property to indicate whether the exception was handled in the event handler. When this property is set to `true`, the exception is considered handled and is not thrown again by the <xref:System.Web.UI.WebControls.FormView> control. If this property is set to `false`, the exception is thrown again. To determine which exception was raised, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property.","nodes":[{"content":"When an exception is raised during the update operation, use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A&gt;</ph> property to indicate whether the exception was handled in the event handler.","pos":[0,219],"source":"When an exception is raised during the update operation, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property to indicate whether the exception was handled in the event handler."},{"content":"When this property is set to <ph id=\"ph1\">`true`</ph>, the exception is considered handled and is not thrown again by the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.FormView&gt;</ph> control.","pos":[220,374],"source":" When this property is set to `true`, the exception is considered handled and is not thrown again by the <xref:System.Web.UI.WebControls.FormView> control."},{"content":"If this property is set to <ph id=\"ph1\">`false`</ph>, the exception is thrown again.","pos":[375,441],"source":" If this property is set to `false`, the exception is thrown again."},{"content":"To determine which exception was raised, use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A&gt;</ph> property.","pos":[442,571],"source":" To determine which exception was raised, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property."}]}],"pos":[14317,14889],"yaml":true,"extradata":"MT"},{"content":"`true` if the exception was handled in the event handler; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,101],"content":"`true` if the exception was handled in the event handler; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the exception was handled in the event handler; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,77],"source":"`true` if the exception was handled in the event handler; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[78,101],"source":" The default is `false`."}]}],"pos":[15627,15731],"yaml":true},{"content":"Gets or sets a value indicating whether the <xref href=\"System.Web.UI.WebControls.FormView\"></xref> control should remain in edit mode after an update operation.","nodes":[{"pos":[0,161],"content":"Gets or sets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.FormView\"&gt;&lt;/xref&gt;</ph> control should remain in edit mode after an update operation.","source":"Gets or sets a value indicating whether the <xref href=\"System.Web.UI.WebControls.FormView\"></xref> control should remain in edit mode after an update operation."}],"pos":[16843,17005],"yaml":true},{"content":"By default, the <xref:System.Web.UI.WebControls.FormView> control returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property after an update operation. Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> property to specify whether the <xref:System.Web.UI.WebControls.FormView> control should remain in edit mode. To keep the <xref:System.Web.UI.WebControls.FormView> control in edit mode, set this property to `true`.  \n  \n> [!NOTE]\n>  This property should be used only when a situation occurs (such as an exception being raised) that requires the control to behave differently than it normally would. If the <xref:System.Web.UI.WebControls.FormView> control needs to remain in edit mode by default, set the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property instead.","nodes":[{"pos":[0,494],"content":"By default, the <xref:System.Web.UI.WebControls.FormView> control returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property after an update operation. Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> property to specify whether the <xref:System.Web.UI.WebControls.FormView> control should remain in edit mode. To keep the <xref:System.Web.UI.WebControls.FormView> control in edit mode, set this property to `true`.","nodes":[{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormView&gt;</ph> control returns to the mode specified by the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.FormView.DefaultMode%2A&gt;</ph> property after an update operation.","pos":[0,195],"source":"By default, the <xref:System.Web.UI.WebControls.FormView> control returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property after an update operation."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A&gt;</ph> property to specify whether the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.FormView&gt;</ph> control should remain in edit mode.","pos":[196,389],"source":" Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> property to specify whether the <xref:System.Web.UI.WebControls.FormView> control should remain in edit mode."},{"content":"To keep the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormView&gt;</ph> control in edit mode, set this property to <ph id=\"ph2\">`true`</ph>.","pos":[390,494],"source":" To keep the <xref:System.Web.UI.WebControls.FormView> control in edit mode, set this property to `true`."}]},{"pos":[502,859],"content":"[!NOTE]\n This property should be used only when a situation occurs (such as an exception being raised) that requires the control to behave differently than it normally would. If the <xref:System.Web.UI.WebControls.FormView> control needs to remain in edit mode by default, set the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property instead.","leadings":["","> "],"nodes":[{"content":" This property should be used only when a situation occurs (such as an exception being raised) that requires the control to behave differently than it normally would. If the <xref:System.Web.UI.WebControls.FormView> control needs to remain in edit mode by default, set the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property instead.","pos":[8,355],"nodes":[{"content":"This property should be used only when a situation occurs (such as an exception being raised) that requires the control to behave differently than it normally would.","pos":[1,166]},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormView&gt;</ph> control needs to remain in edit mode by default, set the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.FormView.DefaultMode%2A&gt;</ph> property instead.","pos":[167,347],"source":" If the <xref:System.Web.UI.WebControls.FormView> control needs to remain in edit mode by default, set the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property instead."}]}]}],"pos":[17016,17881],"yaml":true,"extradata":"MT"},{"content":"`true` to remain in edit mode after an update operation; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,100],"content":"`true` to remain in edit mode after an update operation; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> to remain in edit mode after an update operation; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,76],"source":"`true` to remain in edit mode after an update operation; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[77,100],"source":" The default is `false`."}]}],"pos":[18649,18752],"yaml":true},{"content":"Gets a dictionary that contains the original key field name/value pairs for the updated record.","nodes":[{"pos":[0,95],"content":"Gets a dictionary that contains the original key field name/value pairs for the updated record.","nodes":[{"content":"Gets a dictionary that contains the original key field name/value pairs for the updated record.","pos":[0,95]}]}],"pos":[19802,19898],"yaml":true},{"content":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property contains the original values of the key fields listed in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property of a <xref:System.Web.UI.WebControls.FormView> control. Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property to access the values of the key field for an updated record. For example, you can use these values to keep a log of updated records.  \n  \n> [!NOTE]\n>  If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.  \n  \n The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.  \n  \n> [!NOTE]\n>  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.","nodes":[{"pos":[0,478],"content":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property contains the original values of the key fields listed in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property of a <xref:System.Web.UI.WebControls.FormView> control. Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property to access the values of the key field for an updated record. For example, you can use these values to keep a log of updated records.","nodes":[{"content":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property contains the original values of the key fields listed in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property of a <xref:System.Web.UI.WebControls.FormView> control. Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property to access the values of the key field for an updated record. For example, you can use these values to keep a log of updated records.","pos":[0,478],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A&gt;</ph> property contains the original values of the key fields listed in the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A&gt;</ph> property of a <ph id=\"ph3\">&lt;xref:System.Web.UI.WebControls.FormView&gt;</ph> control.","pos":[0,262],"source":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property contains the original values of the key fields listed in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property of a <xref:System.Web.UI.WebControls.FormView> control."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A&gt;</ph> property to access the values of the key field for an updated record.","pos":[263,406],"source":" Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property to access the values of the key field for an updated record."},{"content":"For example, you can use these values to keep a log of updated records.","pos":[407,478]}]}]},{"pos":[486,793],"content":"[!NOTE]\n If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.","leadings":["","> "],"nodes":[{"content":" If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.","pos":[8,305],"nodes":[{"content":"If you allow the user to update the values of the key fields, the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A&gt;</ph> property contains the original key field values.","pos":[1,180],"source":" If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values."},{"content":"The updated values are stored in the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A&gt;</ph> property.","pos":[181,297],"source":" The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property."}]}]},{"pos":[800,1576],"content":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.","nodes":[{"content":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.","pos":[0,776],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A&gt;</ph> property returns an <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.OrderedDictionary&gt;</ph> object that implements the <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName&gt;</ph> interface.","pos":[0,265],"source":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.OrderedDictionary&gt;</ph> object contains <ph id=\"ph2\">&lt;xref:System.Collections.DictionaryEntry?displayProperty=fullName&gt;</ph> objects that represent the fields of the updated record.","pos":[266,465],"source":" The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record."},{"content":"To access the field names, use the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.OrderedDictionary.Keys%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.OrderedDictionary&gt;</ph> object.","pos":[466,644],"source":" To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object."},{"content":"Similarly, you can access the field values by using the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.OrderedDictionary.Values%2A&gt;</ph> property.","pos":[645,776],"source":" Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property."}]}]},{"pos":[1584,1894],"content":"[!NOTE]\n As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.","leadings":["","> "],"nodes":[{"content":" As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.","pos":[8,308],"nodes":[{"content":"As a shortcut, you can also use the indexer of the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.OrderedDictionary&gt;</ph> object to access the field values directly.","pos":[1,151],"source":" As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly."},{"content":"Data source controls that rely on the field order (such as <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.AccessDataSource&gt;</ph>) can access field values only by index.","pos":[152,300],"source":" Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index."}]}]}],"pos":[19909,21814],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the original key field name/value pairs for the updated record.","nodes":[{"pos":[0,167],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;&lt;/xref&gt;</ph> that contains a dictionary of the original key field name/value pairs for the updated record.","source":"An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the original key field name/value pairs for the updated record."}],"pos":[22599,22767],"yaml":true},{"content":"Gets a dictionary that contains the new field name/value pairs for the updated record.","nodes":[{"pos":[0,86],"content":"Gets a dictionary that contains the new field name/value pairs for the updated record.","nodes":[{"content":"Gets a dictionary that contains the new field name/value pairs for the updated record.","pos":[0,86]}]}],"pos":[23837,23924],"yaml":true},{"content":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property to access the new field values for the updated record. For example, you can use these values to keep a log of updated records.  \n  \n> [!NOTE]\n>  If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.  \n  \n The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.  \n  \n> [!NOTE]\n>  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.","nodes":[{"pos":[0,214],"content":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property to access the new field values for the updated record. For example, you can use these values to keep a log of updated records.","nodes":[{"content":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property to access the new field values for the updated record. For example, you can use these values to keep a log of updated records.","pos":[0,214],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A&gt;</ph> property to access the new field values for the updated record.","pos":[0,142],"source":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property to access the new field values for the updated record."},{"content":"For example, you can use these values to keep a log of updated records.","pos":[143,214]}]}]},{"pos":[222,529],"content":"[!NOTE]\n If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.","leadings":["","> "],"nodes":[{"content":" If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.","pos":[8,305],"nodes":[{"content":"If you allow the user to update the values of the key fields, the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A&gt;</ph> property contains the original key field values.","pos":[1,180],"source":" If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values."},{"content":"The updated values are stored in the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A&gt;</ph> property.","pos":[181,297],"source":" The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property."}]}]},{"pos":[536,1317],"content":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.","nodes":[{"content":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.","pos":[0,781],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A&gt;</ph> property returns an <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.OrderedDictionary&gt;</ph> object that implements the <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName&gt;</ph> interface.","pos":[0,270],"source":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.OrderedDictionary&gt;</ph> object contains <ph id=\"ph2\">&lt;xref:System.Collections.DictionaryEntry?displayProperty=fullName&gt;</ph> objects that represent the fields of the updated record.","pos":[271,470],"source":" The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record."},{"content":"To access the field names, use the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.OrderedDictionary.Keys%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.OrderedDictionary&gt;</ph> object.","pos":[471,649],"source":" To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object."},{"content":"Similarly, you can access the field values by using the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.OrderedDictionary.Values%2A&gt;</ph> property.","pos":[650,781],"source":" Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property."}]}]},{"pos":[1325,1635],"content":"[!NOTE]\n As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.","leadings":["","> "],"nodes":[{"content":" As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.","pos":[8,308],"nodes":[{"content":"As a shortcut, you can also use the indexer of the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.OrderedDictionary&gt;</ph> object to access the field values directly.","pos":[1,151],"source":" As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly."},{"content":"Data source controls that rely on the field order (such as <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.AccessDataSource&gt;</ph>) can access field values only by index.","pos":[152,300],"source":" Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index."}]}]}],"pos":[23935,25581],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the new field name/value pairs for the updated record.","nodes":[{"pos":[0,158],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;&lt;/xref&gt;</ph> that contains a dictionary of the new field name/value pairs for the updated record.","source":"An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the new field name/value pairs for the updated record."}],"pos":[26406,26565],"yaml":true},{"content":"Gets a dictionary that contains the original non-key field name/value pairs for the updated record.","nodes":[{"pos":[0,99],"content":"Gets a dictionary that contains the original non-key field name/value pairs for the updated record.","nodes":[{"content":"Gets a dictionary that contains the original non-key field name/value pairs for the updated record.","pos":[0,99]}]}],"pos":[27640,27740],"yaml":true},{"content":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> property to access the original non-key field values for the updated record. For example, you can use these values to keep a log of updated records. A data source control that supports conflict detection (optimistic concurrency checking), such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, with its <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property set to the `ConflictOptions.CompareAllValues` also compares these original values against the record in the database before an update operation is performed. If a record has been modified by another user concurrently, the record is not updated.  \n  \n> [!NOTE]\n>  The <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> property does not contain key fields. If you allow the user to update the values of the key fields, the original key field values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.  \n  \n The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.  \n  \n> [!NOTE]\n>  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.","nodes":[{"pos":[0,771],"content":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> property to access the original non-key field values for the updated record. For example, you can use these values to keep a log of updated records. A data source control that supports conflict detection (optimistic concurrency checking), such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, with its <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property set to the `ConflictOptions.CompareAllValues` also compares these original values against the record in the database before an update operation is performed. If a record has been modified by another user concurrently, the record is not updated.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A&gt;</ph> property to access the original non-key field values for the updated record.","pos":[0,155],"source":"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> property to access the original non-key field values for the updated record."},{"content":"For example, you can use these values to keep a log of updated records.","pos":[156,227]},{"content":"A data source control that supports conflict detection (optimistic concurrency checking), such as the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.SqlDataSource&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt;</ph> controls, with its <ph id=\"ph3\">&lt;xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A&gt;</ph> property set to the <ph id=\"ph4\">`ConflictOptions.CompareAllValues`</ph> also compares these original values against the record in the database before an update operation is performed.","pos":[228,684],"source":" A data source control that supports conflict detection (optimistic concurrency checking), such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, with its <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property set to the `ConflictOptions.CompareAllValues` also compares these original values against the record in the database before an update operation is performed."},{"content":"If a record has been modified by another user concurrently, the record is not updated.","pos":[685,771]}]},{"pos":[779,1203],"content":"[!NOTE]\n The <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> property does not contain key fields. If you allow the user to update the values of the key fields, the original key field values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> property does not contain key fields. If you allow the user to update the values of the key fields, the original key field values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.","pos":[8,422],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A&gt;</ph> property does not contain key fields.","pos":[1,112],"source":" The <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> property does not contain key fields."},{"content":"If you allow the user to update the values of the key fields, the original key field values are stored in the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A&gt;</ph> property.","pos":[113,297],"source":" If you allow the user to update the values of the key fields, the original key field values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property."},{"content":"The updated values are stored in the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A&gt;</ph> property.","pos":[298,414],"source":" The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property."}]}]},{"pos":[1210,1991],"content":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.","nodes":[{"content":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.","pos":[0,781],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A&gt;</ph> property returns an <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.OrderedDictionary&gt;</ph> object that implements the <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName&gt;</ph> interface.","pos":[0,270],"source":"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.OrderedDictionary&gt;</ph> object contains <ph id=\"ph2\">&lt;xref:System.Collections.DictionaryEntry?displayProperty=fullName&gt;</ph> objects that represent the fields of the updated record.","pos":[271,470],"source":" The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record."},{"content":"To access the field names, use the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.OrderedDictionary.Keys%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.OrderedDictionary&gt;</ph> object.","pos":[471,649],"source":" To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object."},{"content":"Similarly, you can access the field values by using the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.OrderedDictionary.Values%2A&gt;</ph> property.","pos":[650,781],"source":" Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property."}]}]},{"pos":[1999,2309],"content":"[!NOTE]\n As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.","leadings":["","> "],"nodes":[{"content":" As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.","pos":[8,308],"nodes":[{"content":"As a shortcut, you can also use the indexer of the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.OrderedDictionary&gt;</ph> object to access the field values directly.","pos":[1,151],"source":" As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly."},{"content":"Data source controls that rely on the field order (such as <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.AccessDataSource&gt;</ph>) can access field values only by index.","pos":[152,300],"source":" Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index."}]}]}],"pos":[27751,30071],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the original field name/value pairs for the updated record.","nodes":[{"pos":[0,163],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;&lt;/xref&gt;</ph> that contains a dictionary of the original field name/value pairs for the updated record.","source":"An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the original field name/value pairs for the updated record."}],"pos":[30881,31045],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  commentId: T:System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  id: FormViewUpdatedEventArgs\n  children:\n  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)\n  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows\n  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception\n  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled\n  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode\n  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys\n  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues\n  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues\n  langs:\n  - csharp\n  name: FormViewUpdatedEventArgs\n  nameWithType: FormViewUpdatedEventArgs\n  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  type: Class\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Provides data for the <xref href=\"System.Web.UI.WebControls.FormView.ItemUpdated\"></xref> event.\n  remarks: \"The <xref:System.Web.UI.WebControls.FormView> control raises the <xref:System.Web.UI.WebControls.FormView.ItemUpdated> event when an Update button (a button with its `CommandName` property set to \\\"Update\\\") within the control is clicked, but after the <xref:System.Web.UI.WebControls.FormView> control updates the record. This allows you to provide an event-handling method that performs a custom routine, such as checking the results of an update operation, whenever this event occurs.  \\n  \\n A <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred. To determine the number of records affected by the update operation, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> property. Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property to determine whether any exceptions occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property. If you need to access the original key field values for the updated record, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property. The original non-key field values can be accessed by using the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> property. Updated values (which include updated key field values, if you allow the user to edit key fields) are accessed using the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property.  \\n  \\n By default, the <xref:System.Web.UI.WebControls.FormView> control returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property after an update operation. When handling an exception that occurred during the update operation, you can keep the <xref:System.Web.UI.WebControls.FormView> control in edit mode by setting the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> property to `true`.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  \\n  \\n For a list of initial property values for an instance of the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> class, see the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A> constructor.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> object passed to the event-handling method for the <xref:System.Web.UI.WebControls.FormView.ItemUpdated> event to determine whether an exception occurred during an update operation.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  -->\"\n  syntax:\n    content: 'public class FormViewUpdatedEventArgs : EventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)\n  commentId: M:System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)\n  id: '#ctor(System.Int32,System.Exception)'\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  langs:\n  - csharp\n  name: FormViewUpdatedEventArgs(Int32, Exception)\n  nameWithType: FormViewUpdatedEventArgs.FormViewUpdatedEventArgs(Int32, Exception)\n  fullName: FormViewUpdatedEventArgs.FormViewUpdatedEventArgs(Int32, Exception)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.FormViewUpdatedEventArgs\"></xref> class.\n  remarks: \"Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> class.  \\n  \\n The following table shows initial property values for an instance of the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> class.  \\n  \\n|Property|Initial Value|  \\n|--------------|-------------------|  \\n|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>|The value of the `affectedRows` parameter.|  \\n|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>|The <xref:System.Exception?displayProperty=fullName> object contained in the `e` parameter.|  \\n|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>|Initialized to `false`.|  \\n|<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>|Initialized to `false`.|  \\n  \\n> [!NOTE]\\n>  This constructor is used primarily by control developers when raising events.\"\n  syntax:\n    content: public FormViewUpdatedEventArgs (int affectedRows, Exception e);\n    parameters:\n    - id: affectedRows\n      type: System.Int32\n      description: The number of rows affected by the update operation.\n    - id: e\n      type: System.Exception\n      description: An <xref href=\"System.Exception\"></xref> that represents the exception raised when the update operation was performed. If no exception is raised, use `null` for this parameter.\n  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows\n  commentId: P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows\n  id: AffectedRows\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  langs:\n  - csharp\n  name: AffectedRows\n  nameWithType: FormViewUpdatedEventArgs.AffectedRows\n  fullName: FormViewUpdatedEventArgs.AffectedRows\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets the number of rows affected by the update operation.\n  remarks: \"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> property to determine the number of records affected by the update operation. This property is commonly used to verify that the correct number of records was updated in the following situations:  \\n  \\n-   Verify that only a single record was updated. Sometimes an improperly written update statement can update multiple records.  \\n  \\n-   Verify that a record was updated when an error occurs during the update operation that does not raise an exception.  \\n  \\n-   Verify that a record was updated when a data source control that supports conflict detection (optimistic concurrency checking), such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, has its <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property set to the `ConflictOptions.CompareAllValues` enumeration value. Under this setting, a record that has been modified by another user concurrently might not be updated.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> property to verify that a record was updated.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  -->\"\n  syntax:\n    content: public int AffectedRows { get; }\n    return:\n      type: System.Int32\n      description: The number of rows affected by the update operation.\n  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception\n  commentId: P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception\n  id: Exception\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  langs:\n  - csharp\n  name: Exception\n  nameWithType: FormViewUpdatedEventArgs.Exception\n  fullName: FormViewUpdatedEventArgs.Exception\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets the exception (if any) that was raised during the update operation.\n  remarks: \"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property to determine the exception (if any) that was raised during the update operation. If no exceptions were raised, this property returns `null`.  \\n  \\n> [!NOTE]\\n>  If an exception was raised and you decide to handle the exception in the event handler, be sure to set the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property to `true`; otherwise, the exception is thrown again by the <xref:System.Web.UI.WebControls.FormView> control.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property to determine whether an exception occurred during an update operation.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  -->\"\n  syntax:\n    content: public Exception Exception { get; }\n    return:\n      type: System.Exception\n      description: An <xref href=\"System.Exception\"></xref> object that represents the exception that was raised during the update operation.\n  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled\n  commentId: P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled\n  id: ExceptionHandled\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  langs:\n  - csharp\n  name: ExceptionHandled\n  nameWithType: FormViewUpdatedEventArgs.ExceptionHandled\n  fullName: FormViewUpdatedEventArgs.ExceptionHandled\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a value indicating whether an exception that was raised during the update operation was handled in the event handler.\n  remarks: When an exception is raised during the update operation, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property to indicate whether the exception was handled in the event handler. When this property is set to `true`, the exception is considered handled and is not thrown again by the <xref:System.Web.UI.WebControls.FormView> control. If this property is set to `false`, the exception is thrown again. To determine which exception was raised, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property to indicate that the exception was handled in the event handler.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  -->\"\n  syntax:\n    content: public bool ExceptionHandled { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the exception was handled in the event handler; otherwise, `false`. The default is `false`.'\n  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode\n  commentId: P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode\n  id: KeepInEditMode\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  langs:\n  - csharp\n  name: KeepInEditMode\n  nameWithType: FormViewUpdatedEventArgs.KeepInEditMode\n  fullName: FormViewUpdatedEventArgs.KeepInEditMode\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a value indicating whether the <xref href=\"System.Web.UI.WebControls.FormView\"></xref> control should remain in edit mode after an update operation.\n  remarks: \"By default, the <xref:System.Web.UI.WebControls.FormView> control returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property after an update operation. Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> property to specify whether the <xref:System.Web.UI.WebControls.FormView> control should remain in edit mode. To keep the <xref:System.Web.UI.WebControls.FormView> control in edit mode, set this property to `true`.  \\n  \\n> [!NOTE]\\n>  This property should be used only when a situation occurs (such as an exception being raised) that requires the control to behave differently than it normally would. If the <xref:System.Web.UI.WebControls.FormView> control needs to remain in edit mode by default, set the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property instead.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> property to keep a <xref:System.Web.UI.WebControls.FormView> control in edit mode when an exception occurs.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  -->\"\n  syntax:\n    content: public bool KeepInEditMode { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` to remain in edit mode after an update operation; otherwise, `false`. The default is `false`.'\n  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys\n  commentId: P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys\n  id: Keys\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: FormViewUpdatedEventArgs.Keys\n  fullName: FormViewUpdatedEventArgs.Keys\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets a dictionary that contains the original key field name/value pairs for the updated record.\n  remarks: \"The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property contains the original values of the key fields listed in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property of a <xref:System.Web.UI.WebControls.FormView> control. Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property to access the values of the key field for an updated record. For example, you can use these values to keep a log of updated records.  \\n  \\n> [!NOTE]\\n>  If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.  \\n  \\n The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.  \\n  \\n> [!NOTE]\\n>  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property to access the values of the key field for an updated record.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  -->\"\n  syntax:\n    content: public System.Collections.Specialized.IOrderedDictionary Keys { get; }\n    return:\n      type: System.Collections.Specialized.IOrderedDictionary\n      description: An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the original key field name/value pairs for the updated record.\n  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues\n  commentId: P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues\n  id: NewValues\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  langs:\n  - csharp\n  name: NewValues\n  nameWithType: FormViewUpdatedEventArgs.NewValues\n  fullName: FormViewUpdatedEventArgs.NewValues\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets a dictionary that contains the new field name/value pairs for the updated record.\n  remarks: \"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property to access the new field values for the updated record. For example, you can use these values to keep a log of updated records.  \\n  \\n> [!NOTE]\\n>  If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.  \\n  \\n The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.  \\n  \\n> [!NOTE]\\n>  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property to access the new values entered by the user for the non-key fields of the updated record.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  -->\"\n  syntax:\n    content: public System.Collections.Specialized.IOrderedDictionary NewValues { get; }\n    return:\n      type: System.Collections.Specialized.IOrderedDictionary\n      description: An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the new field name/value pairs for the updated record.\n  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues\n  commentId: P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues\n  id: OldValues\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  langs:\n  - csharp\n  name: OldValues\n  nameWithType: FormViewUpdatedEventArgs.OldValues\n  fullName: FormViewUpdatedEventArgs.OldValues\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets a dictionary that contains the original non-key field name/value pairs for the updated record.\n  remarks: \"Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> property to access the original non-key field values for the updated record. For example, you can use these values to keep a log of updated records. A data source control that supports conflict detection (optimistic concurrency checking), such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, with its <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property set to the `ConflictOptions.CompareAllValues` also compares these original values against the record in the database before an update operation is performed. If a record has been modified by another user concurrently, the record is not updated.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> property does not contain key fields. If you allow the user to update the values of the key fields, the original key field values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.  \\n  \\n The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.  \\n  \\n> [!NOTE]\\n>  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> property to access the original values of the non-key fields for the updated record.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  -->\"\n  syntax:\n    content: public System.Collections.Specialized.IOrderedDictionary OldValues { get; }\n    return:\n      type: System.Collections.Specialized.IOrderedDictionary\n      description: An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the original field name/value pairs for the updated record.\n  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\nreferences:\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: FormViewUpdatedEventArgs(Int32, Exception)\n  nameWithType: FormViewUpdatedEventArgs.FormViewUpdatedEventArgs(Int32, Exception)\n  fullName: FormViewUpdatedEventArgs.FormViewUpdatedEventArgs(Int32, Exception)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: AffectedRows\n  nameWithType: FormViewUpdatedEventArgs.AffectedRows\n  fullName: FormViewUpdatedEventArgs.AffectedRows\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: Exception\n  nameWithType: FormViewUpdatedEventArgs.Exception\n  fullName: FormViewUpdatedEventArgs.Exception\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: ExceptionHandled\n  nameWithType: FormViewUpdatedEventArgs.ExceptionHandled\n  fullName: FormViewUpdatedEventArgs.ExceptionHandled\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: KeepInEditMode\n  nameWithType: FormViewUpdatedEventArgs.KeepInEditMode\n  fullName: FormViewUpdatedEventArgs.KeepInEditMode\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: Keys\n  nameWithType: FormViewUpdatedEventArgs.Keys\n  fullName: FormViewUpdatedEventArgs.Keys\n- uid: System.Collections.Specialized.IOrderedDictionary\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: IOrderedDictionary\n  nameWithType: IOrderedDictionary\n  fullName: System.Collections.Specialized.IOrderedDictionary\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: NewValues\n  nameWithType: FormViewUpdatedEventArgs.NewValues\n  fullName: FormViewUpdatedEventArgs.NewValues\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: OldValues\n  nameWithType: FormViewUpdatedEventArgs.OldValues\n  fullName: FormViewUpdatedEventArgs.OldValues\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor*\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: FormViewUpdatedEventArgs\n  nameWithType: FormViewUpdatedEventArgs.FormViewUpdatedEventArgs\n  fullName: FormViewUpdatedEventArgs.FormViewUpdatedEventArgs\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows*\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: AffectedRows\n  nameWithType: FormViewUpdatedEventArgs.AffectedRows\n  fullName: FormViewUpdatedEventArgs.AffectedRows\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception*\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: Exception\n  nameWithType: FormViewUpdatedEventArgs.Exception\n  fullName: FormViewUpdatedEventArgs.Exception\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled*\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: ExceptionHandled\n  nameWithType: FormViewUpdatedEventArgs.ExceptionHandled\n  fullName: FormViewUpdatedEventArgs.ExceptionHandled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode*\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: KeepInEditMode\n  nameWithType: FormViewUpdatedEventArgs.KeepInEditMode\n  fullName: FormViewUpdatedEventArgs.KeepInEditMode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys*\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: Keys\n  nameWithType: FormViewUpdatedEventArgs.Keys\n  fullName: FormViewUpdatedEventArgs.Keys\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues*\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: NewValues\n  nameWithType: FormViewUpdatedEventArgs.NewValues\n  fullName: FormViewUpdatedEventArgs.NewValues\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues*\n  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs\n  isExternal: false\n  name: OldValues\n  nameWithType: FormViewUpdatedEventArgs.OldValues\n  fullName: FormViewUpdatedEventArgs.OldValues\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewUpdatedEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n"}