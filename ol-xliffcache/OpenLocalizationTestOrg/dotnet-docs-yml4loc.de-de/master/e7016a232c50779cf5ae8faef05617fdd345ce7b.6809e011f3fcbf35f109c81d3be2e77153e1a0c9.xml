{"nodes":[{"content":"Represents a UTF-16 encoding of Unicode characters.","nodes":[{"pos":[0,51],"content":"Represents a UTF-16 encoding of Unicode characters.","nodes":[{"content":"Represents a UTF-16 encoding of Unicode characters.","pos":[0,51]}]}],"pos":[1951,2003],"yaml":true},{"content":"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  \n  \n The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script. A Unicode Transformation Format (UTF) is a way to encode that code point. The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:  \n  \n-   UTF-8, which represents each code point as a sequence of one to four bytes.  \n  \n-   UTF-16, which represents each code point as a sequence of one to two 16-bit integers.  \n  \n-   UTF-32, which represents each code point as a 32-bit integer.  \n  \n For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).  \n  \n The <xref:System.Text.UnicodeEncoding> class represents a UTF-16 encoding. The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first). For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):  \n  \n-   Big endian byte order: 00 00 00 41  \n  \n-   Little endian byte order: 41 00 00 00  \n  \n It is generally more efficient to store Unicode characters using the native byte order of a particular platform. For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers. The <xref:System.Text.UnicodeEncoding> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order). You can determine the \"endianness\" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=fullName> method.  \n  \n Optionally, the <xref:System.Text.UnicodeEncoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.  \n  \n If the <xref:System.Text.UnicodeEncoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method; otherwise, the method returns an empty array. Note that, even if a <xref:System.Text.UnicodeEncoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UnicodeEncoding> class do not do this automatically.  \n  \n To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UnicodeEncoding> object by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`. With error detection, a method that detects an invalid sequence of characters or bytes throws a <xref:System.ArgumentException>. Without error detection, no exception is thrown, and the invalid sequence is generally ignored.  \n  \n You can instantiate a <xref:System.Text.UnicodeEncoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection. The following table lists the <xref:System.Text.UnicodeEncoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.  \n  \n|Member|Endianness|BOM|Error detection|  \n|------------|----------------|---------|---------------------|  \n|<xref:System.Text.Encoding.BigEndianUnicode%2A>|Big-endian|Yes|No (Replacement fallback)|  \n|<xref:System.Text.Encoding.Unicode%2A?displayProperty=fullName>|Little-endian|Yes|No (Replacement fallback)|  \n|<xref:System.Text.UnicodeEncoding.%23ctor?displayProperty=fullName>|Little-endian|Yes|No (Replacement fallback)|  \n|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>|Configurable|Configurable|No (Replacement fallback)|  \n|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName>|Configurable|Configurable|Configurable|  \n  \n The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method performs the actual encoding.  \n  \n Likewise, the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UnicodeEncoding.GetChars%2A> and <xref:System.Text.UnicodeEncoding.GetString%2A> methods perform the actual decoding.  \n  \n For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> and <xref:System.Text.UnicodeEncoding.GetDecoder%2A> properties, respectively.","nodes":[{"pos":[0,195],"content":"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.","nodes":[{"content":"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.","pos":[0,195],"nodes":[{"content":"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.","pos":[0,93]},{"content":"Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.","pos":[94,195]}]}]},{"pos":[202,515],"content":"The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script. A Unicode Transformation Format (UTF) is a way to encode that code point. The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:","nodes":[{"content":"The <bpt id=\"p1\">[</bpt>Unicode Standard<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> assigns a code point (a number) to each character in every supported script.","pos":[0,145],"source":"The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script."},{"content":"A Unicode Transformation Format (UTF) is a way to encode that code point.","pos":[146,219]},{"content":"The <bpt id=\"p1\">[</bpt>Unicode Standard<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> uses the following UTFs:","pos":[220,313],"source":" The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:"}]},{"pos":[525,600],"content":"UTF-8, which represents each code point as a sequence of one to four bytes.","nodes":[{"content":"UTF-8, which represents each code point as a sequence of one to four bytes.","pos":[0,75]}]},{"pos":[610,695],"content":"UTF-16, which represents each code point as a sequence of one to two 16-bit integers.","nodes":[{"content":"UTF-16, which represents each code point as a sequence of one to two 16-bit integers.","pos":[0,85]}]},{"pos":[705,766],"content":"UTF-32, which represents each code point as a 32-bit integer.","nodes":[{"content":"UTF-32, which represents each code point as a 32-bit integer.","pos":[0,61]}]},{"pos":[773,959],"content":"For more information about the UTFs and other encodings supported by <ph id=\"ph1\">&lt;xref:System.Text&gt;</ph>, see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept>.","source":"For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)."},{"pos":[966,1282],"content":"The <xref:System.Text.UnicodeEncoding> class represents a UTF-16 encoding. The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first). For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):","nodes":[{"content":"The <xref:System.Text.UnicodeEncoding> class represents a UTF-16 encoding. The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first). For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):","pos":[0,316],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class represents a UTF-16 encoding.","pos":[0,74],"source":"The <xref:System.Text.UnicodeEncoding> class represents a UTF-16 encoding."},{"content":"The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first).","pos":[75,213]},{"content":"For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):","pos":[214,316]}]}]},{"pos":[1292,1326],"content":"Big endian byte order: 00 00 00 41","nodes":[{"content":"Big endian byte order: 00 00 00 41","pos":[0,34]}]},{"pos":[1336,1373],"content":"Little endian byte order: 41 00 00 00","nodes":[{"content":"Little endian byte order: 41 00 00 00","pos":[0,37]}]},{"pos":[1380,1910],"content":"It is generally more efficient to store Unicode characters using the native byte order of a particular platform. For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers. The <xref:System.Text.UnicodeEncoding> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order). You can determine the \"endianness\" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=fullName> method.","nodes":[{"content":"It is generally more efficient to store Unicode characters using the native byte order of a particular platform. For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers. The <xref:System.Text.UnicodeEncoding> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order). You can determine the \"endianness\" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=fullName> method.","pos":[0,530],"nodes":[{"content":"It is generally more efficient to store Unicode characters using the native byte order of a particular platform.","pos":[0,112]},{"content":"For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.","pos":[113,227]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order).","pos":[228,376],"source":" The <xref:System.Text.UnicodeEncoding> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order)."},{"content":"You can determine the \"endianness\" of a particular architecture by calling the <ph id=\"ph1\">&lt;xref:System.BitConverter.IsLittleEndian?displayProperty=fullName&gt;</ph> method.","pos":[377,530],"source":" You can determine the \"endianness\" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=fullName> method."}]}]},{"pos":[1917,2252],"content":"Optionally, the <xref:System.Text.UnicodeEncoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.","nodes":[{"content":"Optionally, the <xref:System.Text.UnicodeEncoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.","pos":[0,335],"nodes":[{"content":"Optionally, the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.","pos":[0,201],"source":"Optionally, the <xref:System.Text.UnicodeEncoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process."},{"content":"If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.","pos":[202,335]}]}]},{"pos":[2259,2758],"content":"If the <xref:System.Text.UnicodeEncoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method; otherwise, the method returns an empty array. Note that, even if a <xref:System.Text.UnicodeEncoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UnicodeEncoding> class do not do this automatically.","nodes":[{"content":"If the <xref:System.Text.UnicodeEncoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method; otherwise, the method returns an empty array. Note that, even if a <xref:System.Text.UnicodeEncoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UnicodeEncoding> class do not do this automatically.","pos":[0,499],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> instance is configured to provide a BOM, you can retrieve it by calling the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method; otherwise, the method returns an empty array.","pos":[0,221],"source":"If the <xref:System.Text.UnicodeEncoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method; otherwise, the method returns an empty array."},{"content":"Note that, even if a <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class do not do this automatically.","pos":[222,499],"source":" Note that, even if a <xref:System.Text.UnicodeEncoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UnicodeEncoding> class do not do this automatically."}]}]},{"pos":[2765,3308],"content":"To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UnicodeEncoding> object by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`. With error detection, a method that detects an invalid sequence of characters or bytes throws a <xref:System.ArgumentException>. Without error detection, no exception is thrown, and the invalid sequence is generally ignored.","nodes":[{"content":"To enable error detection and to make the class instance more secure, you should instantiate a <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object by calling the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructor and setting its <ph id=\"ph3\">`throwOnInvalidBytes`</ph> argument to <ph id=\"ph4\">`true`</ph>.","pos":[0,318],"source":"To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UnicodeEncoding> object by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`."},{"content":"With error detection, a method that detects an invalid sequence of characters or bytes throws a <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[319,447],"source":" With error detection, a method that detects an invalid sequence of characters or bytes throws a <xref:System.ArgumentException>."},{"content":"Without error detection, no exception is thrown, and the invalid sequence is generally ignored.","pos":[448,543]}]},{"pos":[3315,3756],"content":"You can instantiate a <xref:System.Text.UnicodeEncoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection. The following table lists the <xref:System.Text.UnicodeEncoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.","nodes":[{"content":"You can instantiate a <xref:System.Text.UnicodeEncoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection. The following table lists the <xref:System.Text.UnicodeEncoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.","pos":[0,441],"nodes":[{"content":"You can instantiate a <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.","pos":[0,259],"source":"You can instantiate a <xref:System.Text.UnicodeEncoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection."},{"content":"The following table lists the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> constructors and the <ph id=\"ph2\">&lt;xref:System.Text.Encoding&gt;</ph> properties that return a <ph id=\"ph3\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object.","pos":[260,441],"source":" The following table lists the <xref:System.Text.UnicodeEncoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object."}]}]},{"pos":[3763,3769],"content":"Member","nodes":[{"content":"Member","pos":[0,6]}]},{"pos":[3770,3780],"content":"Endianness","nodes":[{"content":"Endianness","pos":[0,10]}]},{"pos":[3781,3784],"content":"BOM","nodes":[{"content":"BOM","pos":[0,3]}]},{"pos":[3785,3800],"content":"Error detection","nodes":[{"content":"Error detection","pos":[0,15]}]},{"pos":[3871,3918],"content":"<xref:System.Text.Encoding.BigEndianUnicode%2A>","nodes":[]},{"pos":[3919,3929],"content":"Big-endian","nodes":[{"content":"Big-endian","pos":[0,10]}]},{"pos":[3930,3933],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3934,3959],"content":"No (Replacement fallback)","nodes":[{"content":"No (Replacement fallback)","pos":[0,25]}]},{"pos":[3964,4027],"content":"<xref:System.Text.Encoding.Unicode%2A?displayProperty=fullName>","nodes":[]},{"pos":[4028,4041],"content":"Little-endian","nodes":[{"content":"Little-endian","pos":[0,13]}]},{"pos":[4042,4045],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4046,4071],"content":"No (Replacement fallback)","nodes":[{"content":"No (Replacement fallback)","pos":[0,25]}]},{"pos":[4076,4143],"content":"<xref:System.Text.UnicodeEncoding.%23ctor?displayProperty=fullName>","nodes":[]},{"pos":[4144,4157],"content":"Little-endian","nodes":[{"content":"Little-endian","pos":[0,13]}]},{"pos":[4158,4161],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4162,4187],"content":"No (Replacement fallback)","nodes":[{"content":"No (Replacement fallback)","pos":[0,25]}]},{"pos":[4192,4271],"content":"<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>","nodes":[]},{"pos":[4272,4284],"content":"Configurable","nodes":[{"content":"Configurable","pos":[0,12]}]},{"pos":[4285,4297],"content":"Configurable","nodes":[{"content":"Configurable","pos":[0,12]}]},{"pos":[4298,4323],"content":"No (Replacement fallback)","nodes":[{"content":"No (Replacement fallback)","pos":[0,25]}]},{"pos":[4328,4449],"content":"<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName>","nodes":[]},{"pos":[4450,4462],"content":"Configurable","nodes":[{"content":"Configurable","pos":[0,12]}]},{"pos":[4463,4475],"content":"Configurable","nodes":[{"content":"Configurable","pos":[0,12]}]},{"pos":[4476,4488],"content":"Configurable","nodes":[{"content":"Configurable","pos":[0,12]}]},{"pos":[4496,4723],"content":"The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method performs the actual encoding.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method performs the actual encoding.","pos":[0,227],"source":"The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method performs the actual encoding."}]},{"pos":[4730,5016],"content":"Likewise, the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UnicodeEncoding.GetChars%2A> and <xref:System.Text.UnicodeEncoding.GetString%2A> methods perform the actual decoding.","nodes":[{"content":"Likewise, the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Text.UnicodeEncoding.GetString%2A&gt;</ph> methods perform the actual decoding.","pos":[0,286],"source":"Likewise, the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UnicodeEncoding.GetChars%2A> and <xref:System.Text.UnicodeEncoding.GetString%2A> methods perform the actual decoding."}]},{"pos":[5023,5369],"content":"For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> and <xref:System.Text.UnicodeEncoding.GetDecoder%2A> properties, respectively.","nodes":[{"content":"For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> properties, respectively.","pos":[0,346],"source":"For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> and <xref:System.Text.UnicodeEncoding.GetDecoder%2A> properties, respectively."}]}],"pos":[2014,7428],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\"></xref> class.","nodes":[{"pos":[0,89],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.UnicodeEncoding\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\"></xref> class."}],"pos":[13054,13144],"yaml":true},{"content":"This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.  \n  \n> [!NOTE]\n>  For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.","nodes":[{"pos":[0,182],"content":"This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.","nodes":[{"content":"This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.","pos":[0,182]}]},{"pos":[190,438],"content":"[!NOTE]\n For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.","leadings":["","> "],"nodes":[{"content":"For security reasons, you should enable error detection by calling the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructor and setting its <ph id=\"ph2\">`throwOnInvalidBytes`</ph> argument to <ph id=\"ph3\">`true`</ph>.","pos":[9,246],"source":" For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`."}]}],"pos":[13155,13599],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\"></xref> class. Parameters specify whether to use the big endian byte order and whether the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\"></xref> method returns a Unicode byte order mark.","nodes":[{"pos":[0,268],"content":"Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\"></xref> class. Parameters specify whether to use the big endian byte order and whether the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\"></xref> method returns a Unicode byte order mark.","nodes":[{"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.UnicodeEncoding\"&gt;&lt;/xref&gt;</ph> class.","pos":[0,89],"source":"Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\"></xref> class."},{"content":"Parameters specify whether to use the big endian byte order and whether the <ph id=\"ph1\">&lt;xref href=\"System.Text.UnicodeEncoding.GetPreamble\"&gt;&lt;/xref&gt;</ph> method returns a Unicode byte order mark.","pos":[90,268],"source":" Parameters specify whether to use the big endian byte order and whether the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\"></xref> method returns a Unicode byte order mark."}]}],"pos":[15972,16241],"yaml":true},{"content":"This constructor creates an instance that does not throw an exception when an invalid encoding is detected.  \n  \n> [!NOTE]\n>  For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.  \n  \n The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method. If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.  If `false`, it returns a zero-length byte array. However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.","nodes":[{"pos":[0,107],"content":"This constructor creates an instance that does not throw an exception when an invalid encoding is detected.","nodes":[{"content":"This constructor creates an instance that does not throw an exception when an invalid encoding is detected.","pos":[0,107]}]},{"pos":[115,363],"content":"[!NOTE]\n For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.","leadings":["","> "],"nodes":[{"content":"For security reasons, you should enable error detection by calling the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructor and setting its <ph id=\"ph2\">`throwOnInvalidBytes`</ph> argument to <ph id=\"ph3\">`true`</ph>.","pos":[9,246],"source":" For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`."}]},{"pos":[370,954],"content":"The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method. If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.  If `false`, it returns a zero-length byte array. However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.","nodes":[{"content":"The <ph id=\"ph1\">`byteOrderMark`</ph> parameter controls the operation of the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method.","pos":[0,117],"source":"The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method."},{"content":"If <ph id=\"ph1\">`true`</ph>, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.","pos":[118,223],"source":" If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format."},{"content":"If <ph id=\"ph1\">`false`</ph>, it returns a zero-length byte array.","pos":[225,273],"source":"  If `false`, it returns a zero-length byte array."},{"content":"However, setting <ph id=\"ph1\">`byteOrderMark`</ph> to <ph id=\"ph2\">`true`</ph> does not cause the <ph id=\"ph3\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method to prefix the BOM at the beginning of the byte array, nor does it cause the <ph id=\"ph4\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method to include the number of bytes in the BOM in the byte count.","pos":[274,584],"source":" However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count."}]}],"pos":[16252,17214],"yaml":true,"extradata":"MT"},{"content":"`true` to use the big endian byte order (most significant byte first), or `false` to use the little endian byte order (least significant byte first).","nodes":[{"pos":[0,149],"content":"<ph id=\"ph1\">`true`</ph> to use the big endian byte order (most significant byte first), or <ph id=\"ph2\">`false`</ph> to use the little endian byte order (least significant byte first).","source":"`true` to use the big endian byte order (most significant byte first), or `false` to use the little endian byte order (least significant byte first)."}],"pos":[18153,18305],"yaml":true},{"content":"`true` to specify that the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\"></xref> method returns a Unicode byte order mark; otherwise, `false`.","nodes":[{"pos":[0,149],"content":"<ph id=\"ph1\">`true`</ph> to specify that the <ph id=\"ph2\">&lt;xref href=\"System.Text.UnicodeEncoding.GetPreamble\"&gt;&lt;/xref&gt;</ph> method returns a Unicode byte order mark; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` to specify that the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\"></xref> method returns a Unicode byte order mark; otherwise, `false`."}],"pos":[18375,18527],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\"></xref> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.","nodes":[{"pos":[0,268],"content":"Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\"></xref> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.","nodes":[{"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.UnicodeEncoding\"&gt;&lt;/xref&gt;</ph> class.","pos":[0,89],"source":"Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\"></xref> class."},{"content":"Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.","pos":[90,268]}]}],"pos":[20251,20520],"yaml":true},{"content":"The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method. If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.  If `false`, it returns a zero-length byte array. However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.  \n  \n If the `throwOnInvalidBytes` parameter is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=fullName>. Otherwise, the method does not throw an exception, and the invalid sequence is ignored.  \n  \n> [!NOTE]\n>  For security reasons, your applications are recommended to use this constructor to create an instance of the <xref:System.Text.UnicodeEncoding> class and turn on error detection by setting `throwOnInvalidBytes` to `true`.","nodes":[{"pos":[0,584],"content":"The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method. If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.  If `false`, it returns a zero-length byte array. However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.","nodes":[{"content":"The <ph id=\"ph1\">`byteOrderMark`</ph> parameter controls the operation of the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method.","pos":[0,117],"source":"The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method."},{"content":"If <ph id=\"ph1\">`true`</ph>, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.","pos":[118,223],"source":" If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format."},{"content":"If <ph id=\"ph1\">`false`</ph>, it returns a zero-length byte array.","pos":[225,273],"source":"  If `false`, it returns a zero-length byte array."},{"content":"However, setting <ph id=\"ph1\">`byteOrderMark`</ph> to <ph id=\"ph2\">`true`</ph> does not cause the <ph id=\"ph3\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method to prefix the BOM at the beginning of the byte array, nor does it cause the <ph id=\"ph4\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method to include the number of bytes in the BOM in the byte count.","pos":[274,584],"source":" However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count."}]},{"pos":[591,840],"content":"If the `throwOnInvalidBytes` parameter is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=fullName>. Otherwise, the method does not throw an exception, and the invalid sequence is ignored.","nodes":[{"content":"If the <ph id=\"ph1\">`throwOnInvalidBytes`</ph> parameter is <ph id=\"ph2\">`true`</ph>, a method that detects an invalid byte sequence throws <ph id=\"ph3\">&lt;xref:System.ArgumentException?displayProperty=fullName&gt;</ph>.","pos":[0,161],"source":"If the `throwOnInvalidBytes` parameter is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=fullName>."},{"content":"Otherwise, the method does not throw an exception, and the invalid sequence is ignored.","pos":[162,249]}]},{"pos":[848,1080],"content":"[!NOTE]\n For security reasons, your applications are recommended to use this constructor to create an instance of the <xref:System.Text.UnicodeEncoding> class and turn on error detection by setting `throwOnInvalidBytes` to `true`.","leadings":["","> "],"nodes":[{"content":"For security reasons, your applications are recommended to use this constructor to create an instance of the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class and turn on error detection by setting <ph id=\"ph2\">`throwOnInvalidBytes`</ph> to <ph id=\"ph3\">`true`</ph>.","pos":[9,230],"source":" For security reasons, your applications are recommended to use this constructor to create an instance of the <xref:System.Text.UnicodeEncoding> class and turn on error detection by setting `throwOnInvalidBytes` to `true`."}]}],"pos":[20531,21619],"yaml":true,"extradata":"MT"},{"content":"`true` to use the big endian byte order (most significant byte first); `false` to use the little endian byte order (least significant byte first).","nodes":[{"pos":[0,146],"content":"<ph id=\"ph1\">`true`</ph> to use the big endian byte order (most significant byte first); <ph id=\"ph2\">`false`</ph> to use the little endian byte order (least significant byte first).","source":"`true` to use the big endian byte order (most significant byte first); `false` to use the little endian byte order (least significant byte first)."}],"pos":[22502,22651],"yaml":true},{"content":"`true` to specify that the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\"></xref> method returns a Unicode byte order mark; otherwise, `false`.","nodes":[{"pos":[0,149],"content":"<ph id=\"ph1\">`true`</ph> to specify that the <ph id=\"ph2\">&lt;xref href=\"System.Text.UnicodeEncoding.GetPreamble\"&gt;&lt;/xref&gt;</ph> method returns a Unicode byte order mark; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` to specify that the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\"></xref> method returns a Unicode byte order mark; otherwise, `false`."}],"pos":[22721,22873],"yaml":true},{"content":"`true` to specify that an exception should be thrown when an invalid encoding is detected; otherwise, `false`.","nodes":[{"pos":[0,110],"content":"<ph id=\"ph1\">`true`</ph> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to specify that an exception should be thrown when an invalid encoding is detected; otherwise, `false`."}],"pos":[22949,23062],"yaml":true},{"content":"Represents the Unicode character size in bytes. This field is a constant.","nodes":[{"pos":[0,73],"content":"Represents the Unicode character size in bytes. This field is a constant.","nodes":[{"content":"Represents the Unicode character size in bytes. This field is a constant.","pos":[0,73],"nodes":[{"content":"Represents the Unicode character size in bytes.","pos":[0,47]},{"content":"This field is a constant.","pos":[48,73]}]}]}],"pos":[24547,24621],"yaml":true},{"content":"The value of this field is a 32-bit signed constant with a value of 2.","nodes":[{"pos":[0,70],"content":"The value of this field is a 32-bit signed constant with a value of 2.","nodes":[{"content":"The value of this field is a 32-bit signed constant with a value of 2.","pos":[0,70]}]}],"pos":[24632,24703],"yaml":true,"extradata":"MT"},{"content":"Determines whether the specified <xref href=\"System.Object\"></xref> is equal to the current <xref href=\"System.Text.UnicodeEncoding\"></xref> object.","nodes":[{"pos":[0,148],"content":"Determines whether the specified <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> is equal to the current <ph id=\"ph2\">&lt;xref href=\"System.Text.UnicodeEncoding\"&gt;&lt;/xref&gt;</ph> object.","source":"Determines whether the specified <xref href=\"System.Object\"></xref> is equal to the current <xref href=\"System.Text.UnicodeEncoding\"></xref> object."}],"pos":[26681,26830],"yaml":true},{"content":"Two <xref:System.Text.UnicodeEncoding> objects are considered equal if all of the following conditions are true:  \n  \n-   Both objects use the same byte order (little-endian or big-endian).  \n  \n-   Both objects provide the byte order mark, or both do not.  \n  \n-   Both objects use the same encoder fallback.  \n  \n-   Both objects use the same decoder fallback.","nodes":[{"pos":[0,112],"content":"Two <xref:System.Text.UnicodeEncoding> objects are considered equal if all of the following conditions are true:","nodes":[{"content":"Two <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> objects are considered equal if all of the following conditions are true:","pos":[0,112],"source":"Two <xref:System.Text.UnicodeEncoding> objects are considered equal if all of the following conditions are true:"}]},{"pos":[122,189],"content":"Both objects use the same byte order (little-endian or big-endian).","nodes":[{"content":"Both objects use the same byte order (little-endian or big-endian).","pos":[0,67]}]},{"pos":[199,256],"content":"Both objects provide the byte order mark, or both do not.","nodes":[{"content":"Both objects provide the byte order mark, or both do not.","pos":[0,57]}]},{"pos":[266,309],"content":"Both objects use the same encoder fallback.","nodes":[{"content":"Both objects use the same encoder fallback.","pos":[0,43]}]},{"pos":[319,362],"content":"Both objects use the same decoder fallback.","nodes":[{"content":"Both objects use the same decoder fallback.","pos":[0,43]}]}],"pos":[26841,27214],"yaml":true,"extradata":"MT"},{"content":"The object to compare with the current object.","nodes":[{"pos":[0,46],"content":"The object to compare with the current object.","nodes":[{"content":"The object to compare with the current object.","pos":[0,46]}]}],"pos":[28290,28337],"yaml":true},{"content":"`true` if <code>value</code> is an instance of <xref href=\"System.Text.UnicodeEncoding\"></xref> and is equal to the current object; otherwise, `false`.","nodes":[{"pos":[0,151],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an instance of <ph id=\"ph3\">&lt;xref href=\"System.Text.UnicodeEncoding\"&gt;&lt;/xref&gt;</ph> and is equal to the current object; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>value</code> is an instance of <xref href=\"System.Text.UnicodeEncoding\"></xref> and is equal to the current object; otherwise, `false`."}],"pos":[28395,28549],"yaml":true},{"content":"Calculates the number of bytes produced by encoding the characters in the specified string.","nodes":[{"pos":[0,91],"content":"Calculates the number of bytes produced by encoding the characters in the specified string.","nodes":[{"content":"Calculates the number of bytes produced by encoding the characters in the specified string.","pos":[0,91]}]}],"pos":[30129,30221],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n> [!NOTE]\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> method.","nodes":[{"pos":[0,499],"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,499],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.","pos":[0,194],"source":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method."},{"content":"To calculate the maximum array size, you call the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.","pos":[195,306],"source":" To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[307,499],"source":" The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[506,694],"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[0,188],"nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[0,104],"source":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>."},{"content":"Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[105,188]}]}]},{"pos":[702,1195],"content":"[!NOTE]\n To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> method.","leadings":["","> "],"nodes":[{"content":" To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> method.","pos":[8,491],"nodes":[{"content":"To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.","pos":[1,158]},{"content":"Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29&gt;</ph> method.","pos":[159,483],"source":" Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> method."}]}]}],"pos":[30232,31435],"yaml":true,"extradata":"MT"},{"content":"The string that contains the set of characters to encode.","nodes":[{"pos":[0,57],"content":"The string that contains the set of characters to encode.","nodes":[{"content":"The string that contains the set of characters to encode.","pos":[0,57]}]}],"pos":[32294,32352],"yaml":true},{"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"pos":[0,66],"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"content":"The number of bytes produced by encoding the specified characters.","pos":[0,66]}]}],"pos":[32408,32475],"yaml":true},{"content":"<code>s</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>s</code> is `null`."}],"pos":[32645,32671],"yaml":true},{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,100],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[32785,32886],"yaml":true},{"content":"Error detection is enabled, and <code>s</code> contains an invalid sequence of characters.","nodes":[{"pos":[0,90],"content":"Error detection is enabled, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">s</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an invalid sequence of characters.","source":"Error detection is enabled, and <code>s</code> contains an invalid sequence of characters."}],"pos":[32980,33071],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[33189,33486],"yaml":true},{"content":"Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.","nodes":[{"pos":[0,116],"content":"Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.","nodes":[{"content":"Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.","pos":[0,116]}]}],"pos":[35072,35189],"yaml":true},{"content":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n> [!NOTE]\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.","nodes":[{"pos":[0,501],"content":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,501],"nodes":[{"content":"To calculate the exact array size that <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> requires to store the resulting bytes, you call the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.","pos":[0,196],"source":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method."},{"content":"To calculate the maximum array size, you call the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.","pos":[197,308],"source":" To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[309,501],"source":" The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[508,696],"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[0,188],"nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[0,104],"source":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>."},{"content":"Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[105,188]}]}]},{"pos":[704,1178],"content":"[!NOTE]\n To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.","leadings":["","> "],"nodes":[{"content":" To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.","pos":[8,472],"nodes":[{"content":"To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.","pos":[1,158]},{"content":"Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.","pos":[159,464],"source":" Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method."}]}]}],"pos":[35200,36386],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first character to encode.","nodes":[{"pos":[0,43],"content":"A pointer to the first character to encode.","nodes":[{"content":"A pointer to the first character to encode.","pos":[0,43]}]}],"pos":[36689,36733],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[36793,36829],"yaml":true},{"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"pos":[0,66],"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"content":"The number of bytes produced by encoding the specified characters.","pos":[0,66]}]}],"pos":[36885,36952],"yaml":true},{"content":"<code>chars</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>chars</code> is `null`."}],"pos":[37122,37152],"yaml":true},{"content":"<code>count</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,155],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[37266,37428],"yaml":true},{"content":"Error detection is enabled and <code>chars</code> contains an invalid sequence of characters.","nodes":[{"pos":[0,93],"content":"Error detection is enabled and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an invalid sequence of characters.","source":"Error detection is enabled and <code>chars</code> contains an invalid sequence of characters."}],"pos":[37522,37616],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[37734,38031],"yaml":true},{"content":"Calculates the number of bytes produced by encoding a set of characters from the specified character array.","nodes":[{"pos":[0,107],"content":"Calculates the number of bytes produced by encoding a set of characters from the specified character array.","nodes":[{"content":"Calculates the number of bytes produced by encoding a set of characters from the specified character array.","pos":[0,107]}]}],"pos":[39528,39636],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n With error detection enabled, an invalid sequence causes this method to throw an <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.","nodes":[{"pos":[0,500],"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,500],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>.","pos":[0,195],"source":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, you call the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.","pos":[196,307],"source":" To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[308,500],"source":" The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[507,704],"content":"With error detection enabled, an invalid sequence causes this method to throw an <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"content":"With error detection enabled, an invalid sequence causes this method to throw an <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[0,197],"nodes":[{"content":"With error detection enabled, an invalid sequence causes this method to throw an <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[0,113],"source":"With error detection enabled, an invalid sequence causes this method to throw an <xref:System.ArgumentException>."},{"content":"Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[114,197]}]}]},{"pos":[711,1227],"content":"To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.","nodes":[{"content":"To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.","pos":[0,516],"nodes":[{"content":"To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.","pos":[0,157]},{"content":"Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method.","pos":[158,516],"source":" Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method."}]}]}],"pos":[39647,40881],"yaml":true,"extradata":"MT"},{"content":"The character array containing the set of characters to encode.","nodes":[{"pos":[0,63],"content":"The character array containing the set of characters to encode.","nodes":[{"content":"The character array containing the set of characters to encode.","pos":[0,63]}]}],"pos":[42630,42694],"yaml":true},{"content":"The index of the first character to encode.","nodes":[{"pos":[0,43],"content":"The index of the first character to encode.","nodes":[{"content":"The index of the first character to encode.","pos":[0,43]}]}],"pos":[42754,42798],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[42858,42894],"yaml":true},{"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"pos":[0,66],"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"content":"The number of bytes produced by encoding the specified characters.","pos":[0,66]}]}],"pos":[42950,43017],"yaml":true},{"content":"<code>chars</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."}],"pos":[43187,43229],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>."},{"pos":[176,180],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[187,287],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[43343,43641],"yaml":true},{"content":"Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.","nodes":[{"pos":[0,94],"content":"Error detection is enabled, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an invalid sequence of characters.","source":"Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters."}],"pos":[43735,43830],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[43948,44245],"yaml":true},{"content":"Encodes a set of characters from the specified character array into the specified byte array.","nodes":[{"pos":[0,93],"content":"Encodes a set of characters from the specified character array into the specified byte array.","nodes":[{"content":"Encodes a set of characters from the specified character array into the specified byte array.","pos":[0,93]}]}],"pos":[45999,46093],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.","nodes":[{"pos":[0,499],"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,499],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.","pos":[0,194],"source":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method."},{"content":"To calculate the maximum array size, you call the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.","pos":[195,306],"source":" To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[307,499],"source":" The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[506,694],"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[0,188],"nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[0,104],"source":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>."},{"content":"Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[105,188]}]}]},{"pos":[701,1143],"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","pos":[0,442],"nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks.","pos":[0,100]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[101,442],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[1151,1618],"content":"[!NOTE]\n To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.","leadings":["","> "],"nodes":[{"content":" To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.","pos":[8,465],"nodes":[{"content":"To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.","pos":[1,158]},{"content":"Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.","pos":[159,322]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method does not prepend a preamble to the beginning of a sequence of encoded bytes.","pos":[323,457],"source":" The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes."}]}]}],"pos":[46104,47732],"yaml":true,"extradata":"MT"},{"content":"The character array containing the set of characters to encode.","nodes":[{"pos":[0,63],"content":"The character array containing the set of characters to encode.","nodes":[{"content":"The character array containing the set of characters to encode.","pos":[0,63]}]}],"pos":[48821,48885],"yaml":true},{"content":"The index of the first character to encode.","nodes":[{"pos":[0,43],"content":"The index of the first character to encode.","nodes":[{"content":"The index of the first character to encode.","pos":[0,43]}]}],"pos":[48949,48993],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[49057,49093],"yaml":true},{"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"pos":[0,58],"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"content":"The byte array to contain the resulting sequence of bytes.","pos":[0,58]}]}],"pos":[49154,49213],"yaml":true},{"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"pos":[0,68],"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"content":"The index at which to start writing the resulting sequence of bytes.","pos":[0,68]}]}],"pos":[49277,49346],"yaml":true},{"content":"The actual number of bytes written into <code>bytes</code>.","nodes":[{"pos":[0,59],"content":"The actual number of bytes written into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of bytes written into <code>bytes</code>."}],"pos":[49402,49462],"yaml":true},{"content":"<code>chars</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[49628,49735],"yaml":true},{"content":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,211],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>."},{"pos":[218,222],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[229,295],"content":"<ph id=\"ph1\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>byteIndex</code> is not a valid index in <code>bytes</code>."}],"pos":[49849,50155],"yaml":true},{"content":"Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.  \n  \n -or-  \n  \n <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.","nodes":[{"pos":[0,94],"content":"Error detection is enabled, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an invalid sequence of characters.","source":"Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters."},{"pos":[101,105],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[112,248],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> does not have enough capacity from <ph id=\"ph2\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting bytes.","source":"<code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes."}],"pos":[50249,50504],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[50622,50919],"yaml":true},{"content":"Encodes a set of characters from the specified <xref href=\"System.String\"></xref> into the specified byte array.","nodes":[{"pos":[0,112],"content":"Encodes a set of characters from the specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> into the specified byte array.","source":"Encodes a set of characters from the specified <xref href=\"System.String\"></xref> into the specified byte array."}],"pos":[52673,52786],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.","nodes":[{"pos":[0,499],"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,499],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.","pos":[0,194],"source":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method."},{"content":"To calculate the maximum array size, you call the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.","pos":[195,306],"source":" To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[307,499],"source":" The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[506,694],"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[0,188],"nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[0,104],"source":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>."},{"content":"Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[105,188]}]}]},{"pos":[701,1143],"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","pos":[0,442],"nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks.","pos":[0,100]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[101,442],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[1151,1618],"content":"[!NOTE]\n To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.","leadings":["","> "],"nodes":[{"content":" To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.","pos":[8,465],"nodes":[{"content":"To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.","pos":[1,158]},{"content":"Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.","pos":[159,322]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method does not prepend a preamble to the beginning of a sequence of encoded bytes.","pos":[323,457],"source":" The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes."}]}]}],"pos":[52797,54425],"yaml":true,"extradata":"MT"},{"content":"The string containing the set of characters to encode.","nodes":[{"pos":[0,54],"content":"The string containing the set of characters to encode.","nodes":[{"content":"The string containing the set of characters to encode.","pos":[0,54]}]}],"pos":[55442,55497],"yaml":true},{"content":"The index of the first character to encode.","nodes":[{"pos":[0,43],"content":"The index of the first character to encode.","nodes":[{"content":"The index of the first character to encode.","pos":[0,43]}]}],"pos":[55561,55605],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[55669,55705],"yaml":true},{"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"pos":[0,58],"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"content":"The byte array to contain the resulting sequence of bytes.","pos":[0,58]}]}],"pos":[55766,55825],"yaml":true},{"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"pos":[0,68],"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"content":"The index at which to start writing the resulting sequence of bytes.","pos":[0,68]}]}],"pos":[55889,55958],"yaml":true},{"content":"The actual number of bytes written into <code>bytes</code>.","nodes":[{"pos":[0,59],"content":"The actual number of bytes written into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of bytes written into <code>bytes</code>."}],"pos":[56014,56074],"yaml":true},{"content":"<code>s</code> is `null`.  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>s</code> is `null`."},{"pos":[32,36],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[43,84],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[56240,56331],"yaml":true},{"content":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,211],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>."},{"pos":[218,222],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[229,295],"content":"<ph id=\"ph1\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>byteIndex</code> is not a valid index in <code>bytes</code>."}],"pos":[56445,56751],"yaml":true},{"content":"Error detection is enabled, and <code>s</code> contains an invalid sequence of characters.  \n  \n -or-  \n  \n <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.","nodes":[{"pos":[0,90],"content":"Error detection is enabled, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">s</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an invalid sequence of characters.","source":"Error detection is enabled, and <code>s</code> contains an invalid sequence of characters."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,244],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> does not have enough capacity from <ph id=\"ph2\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting bytes.","source":"<code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes."}],"pos":[56845,57096],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[57214,57511],"yaml":true},{"content":"Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.","nodes":[{"pos":[0,152],"content":"Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.","nodes":[{"content":"Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.","pos":[0,152]}]}],"pos":[59193,59346],"yaml":true},{"content":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.","nodes":[{"pos":[0,501],"content":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,501],"nodes":[{"content":"To calculate the exact array size that <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> requires to store the resulting bytes, you call the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.","pos":[0,196],"source":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method."},{"content":"To calculate the maximum array size, you call the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.","pos":[197,308],"source":" To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[309,501],"source":" The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[508,696],"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[0,188],"nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[0,104],"source":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>."},{"content":"Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[105,188]}]}]},{"pos":[703,1145],"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","pos":[0,442],"nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks.","pos":[0,100]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> object provided by the <ph id=\"ph3\">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> or the <ph id=\"ph4\">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[101,442],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[1153,1620],"content":"[!NOTE]\n To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.","leadings":["","> "],"nodes":[{"content":" To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.","pos":[8,465],"nodes":[{"content":"To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.","pos":[1,158]},{"content":"Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.","pos":[159,322]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method does not prepend a preamble to the beginning of a sequence of encoded bytes.","pos":[323,457],"source":" The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes."}]}]}],"pos":[59357,60987],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first character to encode.","nodes":[{"pos":[0,43],"content":"A pointer to the first character to encode.","nodes":[{"content":"A pointer to the first character to encode.","pos":[0,43]}]}],"pos":[61318,61362],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[61426,61462],"yaml":true},{"content":"A pointer to the location at which to start writing the resulting sequence of bytes.","nodes":[{"pos":[0,84],"content":"A pointer to the location at which to start writing the resulting sequence of bytes.","nodes":[{"content":"A pointer to the location at which to start writing the resulting sequence of bytes.","pos":[0,84]}]}],"pos":[61522,61607],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[61671,61709],"yaml":true},{"content":"The actual number of bytes written at the location indicated by the <code>bytes</code> parameter.","nodes":[{"pos":[0,97],"content":"The actual number of bytes written at the location indicated by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The actual number of bytes written at the location indicated by the <code>bytes</code> parameter."}],"pos":[61765,61863],"yaml":true},{"content":"<code>chars</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[62029,62136],"yaml":true},{"content":"<code>charCount</code> or <code>byteCount</code> is less than zero.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.","source":"<code>charCount</code> or <code>byteCount</code> is less than zero."}],"pos":[62250,62318],"yaml":true},{"content":"Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.  \n  \n -or-  \n  \n <code>byteCount</code> is less than the resulting number of bytes.","nodes":[{"pos":[0,94],"content":"Error detection is enabled, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an invalid sequence of characters.","source":"Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters."},{"pos":[101,105],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[112,178],"content":"<ph id=\"ph1\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than the resulting number of bytes.","source":"<code>byteCount</code> is less than the resulting number of bytes."}],"pos":[62412,62597],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[62715,63012],"yaml":true},{"content":"Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.","nodes":[{"pos":[0,116],"content":"Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.","nodes":[{"content":"Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.","pos":[0,116]}]}],"pos":[64443,64560],"yaml":true},{"content":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"pos":[0,514],"content":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,514],"nodes":[{"content":"To calculate the exact array size that <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> requires to store the resulting characters, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.","pos":[0,202],"source":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.","pos":[203,321],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[322,514],"source":" The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster."}]}]},{"pos":[521,709],"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[0,188],"nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[0,104],"source":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>."},{"content":"Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[105,188]}]}]}],"pos":[64571,65285],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first byte to decode.","nodes":[{"pos":[0,38],"content":"A pointer to the first byte to decode.","nodes":[{"content":"A pointer to the first byte to decode.","pos":[0,38]}]}],"pos":[65588,65627],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[65687,65718],"yaml":true},{"content":"The number of characters produced by decoding the specified sequence of bytes.","nodes":[{"pos":[0,78],"content":"The number of characters produced by decoding the specified sequence of bytes.","nodes":[{"content":"The number of characters produced by decoding the specified sequence of bytes.","pos":[0,78]}]}],"pos":[65774,65853],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[66023,66065],"yaml":true},{"content":"<code>count</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,155],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[66179,66341],"yaml":true},{"content":"Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.","nodes":[{"pos":[0,89],"content":"Error detection is enabled, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an invalid sequence of bytes.","source":"Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes."}],"pos":[66435,66525],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[66643,66940],"yaml":true},{"content":"Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","nodes":[{"pos":[0,107],"content":"Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","nodes":[{"content":"Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","pos":[0,107]}]}],"pos":[68437,68545],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"pos":[0,512],"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,512],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.","pos":[0,200],"source":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.","pos":[201,319],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[320,512],"source":" The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster."}]}]},{"pos":[519,707],"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[0,188],"nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[0,104],"source":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>."},{"content":"Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[105,188]}]}]}],"pos":[68556,69268],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[70325,70384],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[70444,70483],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[70543,70574],"yaml":true},{"content":"The number of characters produced by decoding the specified sequence of bytes.","nodes":[{"pos":[0,78],"content":"The number of characters produced by decoding the specified sequence of bytes.","nodes":[{"content":"The number of characters produced by decoding the specified sequence of bytes.","pos":[0,78]}]}],"pos":[70630,70709],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[70879,70921],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."},{"pos":[176,180],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[187,287],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[71035,71333],"yaml":true},{"content":"Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.","nodes":[{"pos":[0,89],"content":"Error detection is enabled, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an invalid sequence of bytes.","source":"Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes."}],"pos":[71427,71517],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[71635,71932],"yaml":true},{"content":"Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.","nodes":[{"pos":[0,152],"content":"Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.","nodes":[{"content":"Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.","pos":[0,152]}]}],"pos":[73614,73767],"yaml":true},{"content":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","nodes":[{"pos":[0,514],"content":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,514],"nodes":[{"content":"To calculate the exact array size that <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> requires to store the resulting characters, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.","pos":[0,202],"source":"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.","pos":[203,321],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[322,514],"source":" The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster."}]}]},{"pos":[521,709],"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[0,188],"nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[0,104],"source":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>."},{"content":"Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[105,188]}]}]},{"pos":[716,1036],"content":"If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.","nodes":[{"content":"If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.","pos":[0,320],"nodes":[{"content":"If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.","pos":[0,220]},{"content":"You can remove it by calling the <ph id=\"ph1\">&lt;xref:System.String.TrimStart%2A?displayProperty=fullName&gt;</ph> method.","pos":[221,320],"source":" You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method."}]}]},{"pos":[1043,1485],"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","pos":[0,442],"nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks.","pos":[0,100]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> object provided by the <ph id=\"ph3\">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> or the <ph id=\"ph4\">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[101,442],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively."}]}]}],"pos":[73778,75272],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first byte to decode.","nodes":[{"pos":[0,38],"content":"A pointer to the first byte to decode.","nodes":[{"content":"A pointer to the first byte to decode.","pos":[0,38]}]}],"pos":[75603,75642],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[75706,75737],"yaml":true},{"content":"A pointer to the location at which to start writing the resulting set of characters.","nodes":[{"pos":[0,84],"content":"A pointer to the location at which to start writing the resulting set of characters.","nodes":[{"content":"A pointer to the location at which to start writing the resulting set of characters.","pos":[0,84]}]}],"pos":[75797,75882],"yaml":true},{"content":"The maximum number of characters to write.","nodes":[{"pos":[0,42],"content":"The maximum number of characters to write.","nodes":[{"content":"The maximum number of characters to write.","pos":[0,42]}]}],"pos":[75946,75989],"yaml":true},{"content":"The actual number of characters written at the location indicated by the <code>chars</code> parameter.","nodes":[{"pos":[0,102],"content":"The actual number of characters written at the location indicated by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The actual number of characters written at the location indicated by the <code>chars</code> parameter."}],"pos":[76045,76148],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>chars</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."}],"pos":[76314,76421],"yaml":true},{"content":"<code>byteCount</code> or <code>charCount</code> is less than zero.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;byteCount&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.","source":"<code>byteCount</code> or <code>charCount</code> is less than zero."}],"pos":[76535,76603],"yaml":true},{"content":"Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.  \n  \n -or-  \n  \n <code>charCount</code> is less than the resulting number of characters.","nodes":[{"pos":[0,89],"content":"Error detection is enabled, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an invalid sequence of bytes.","source":"Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,178],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than the resulting number of characters.","source":"<code>charCount</code> is less than the resulting number of characters."}],"pos":[76697,76882],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[77000,77297],"yaml":true},{"content":"Decodes a sequence of bytes from the specified byte array into the specified character array.","nodes":[{"pos":[0,93],"content":"Decodes a sequence of bytes from the specified byte array into the specified character array.","nodes":[{"content":"Decodes a sequence of bytes from the specified byte array into the specified character array.","pos":[0,93]}]}],"pos":[78896,78990],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","nodes":[{"pos":[0,512],"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,512],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.","pos":[0,200],"source":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.","pos":[201,319],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[320,512],"source":" The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster."}]}]},{"pos":[519,707],"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[0,188],"nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[0,104],"source":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>."},{"content":"Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[105,188]}]}]},{"pos":[714,1034],"content":"If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.","nodes":[{"content":"If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.","pos":[0,320],"nodes":[{"content":"If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.","pos":[0,220]},{"content":"You can remove it by calling the <ph id=\"ph1\">&lt;xref:System.String.TrimStart%2A?displayProperty=fullName&gt;</ph> method.","pos":[221,320],"source":" You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method."}]}]},{"pos":[1041,1483],"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","pos":[0,442],"nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks.","pos":[0,100]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[101,442],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively."}]}]}],"pos":[79001,80493],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[81537,81596],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[81660,81699],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[81763,81794],"yaml":true},{"content":"The character array to contain the resulting set of characters.","nodes":[{"pos":[0,63],"content":"The character array to contain the resulting set of characters.","nodes":[{"content":"The character array to contain the resulting set of characters.","pos":[0,63]}]}],"pos":[81855,81919],"yaml":true},{"content":"The index at which to start writing the resulting set of characters.","nodes":[{"pos":[0,68],"content":"The index at which to start writing the resulting set of characters.","nodes":[{"content":"The index at which to start writing the resulting set of characters.","pos":[0,68]}]}],"pos":[81983,82052],"yaml":true},{"content":"The actual number of characters written into <code>chars</code>.","nodes":[{"pos":[0,64],"content":"The actual number of characters written into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of characters written into <code>chars</code>."}],"pos":[82108,82173],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>chars</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."}],"pos":[82339,82446],"yaml":true},{"content":"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n <code>charIndex</code> is not a valid index in <code>chars</code>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;charIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,211],"content":"<ph id=\"ph1\">&lt;code&gt;byteindex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>."},{"pos":[218,222],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[229,295],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>charIndex</code> is not a valid index in <code>chars</code>."}],"pos":[82560,82866],"yaml":true},{"content":"Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.  \n  \n -or-  \n  \n <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.","nodes":[{"pos":[0,89],"content":"Error detection is enabled, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an invalid sequence of bytes.","source":"Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,248],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> does not have enough capacity from <ph id=\"ph2\">&lt;code&gt;charIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting characters.","source":"<code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters."}],"pos":[82960,83215],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[83333,83630],"yaml":true},{"content":"Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.","nodes":[{"pos":[0,105],"content":"Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.","nodes":[{"content":"Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.","pos":[0,105]}]}],"pos":[85087,85193],"yaml":true},{"content":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UnicodeEncoding.GetChars%2A>. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  \n  \n If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.","nodes":[{"pos":[0,771],"content":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UnicodeEncoding.GetChars%2A>. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","nodes":[{"content":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UnicodeEncoding.GetChars%2A>. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[0,771],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName&gt;</ph> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>.","pos":[0,223],"source":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UnicodeEncoding.GetChars%2A>."},{"content":"However, a <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> maintains state information between calls so it can correctly decode byte sequences that span blocks.","pos":[224,363],"source":" However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.","pos":[364,510],"source":" The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation."},{"content":"Therefore, <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[511,771],"source":" Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream."}]}]},{"pos":[778,1115],"content":"If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.","nodes":[{"content":"If error detection is enabled, that is, the <ph id=\"ph1\">`throwOnInvalidBytes`</ph> parameter of the constructor is set to <ph id=\"ph2\">`true`</ph>, error detection is also enabled in the <ph id=\"ph3\">&lt;xref:System.Text.Decoder&gt;</ph> returned by this method.","pos":[0,203],"source":"If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method."},{"content":"If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.","pos":[204,337]}]}],"pos":[85204,86324],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Text.Decoder\"></xref> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.","nodes":[{"pos":[0,130],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder\"&gt;&lt;/xref&gt;</ph> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.","source":"A <xref href=\"System.Text.Decoder\"></xref> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters."}],"pos":[87115,87246],"yaml":true},{"content":"Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.","nodes":[{"pos":[0,106],"content":"Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.","nodes":[{"content":"Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.","pos":[0,106]}]}],"pos":[88755,88862],"yaml":true},{"content":"The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method of this class. However, a <xref:System.Text.Encoder> object maintains state information between calls so that it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  \n  \n If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> object returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.","nodes":[{"pos":[0,959],"content":"The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method of this class. However, a <xref:System.Text.Encoder> object maintains state information between calls so that it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","nodes":[{"content":"The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method of this class. However, a <xref:System.Text.Encoder> object maintains state information between calls so that it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[0,959],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName&gt;</ph> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method of this class.","pos":[0,243],"source":"The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method of this class."},{"content":"However, a <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> object maintains state information between calls so that it can correctly encode character sequences that span blocks.","pos":[244,400],"source":" However, a <xref:System.Text.Encoder> object maintains state information between calls so that it can correctly encode character sequences that span blocks."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.","pos":[401,564],"source":" The <xref:System.Text.Encoder> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation."},{"content":"For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.","pos":[565,698]},{"content":"Therefore, <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[699,959],"source":" Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream."}]}]},{"pos":[966,1310],"content":"If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> object returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.","nodes":[{"content":"If error detection is enabled, that is, the <ph id=\"ph1\">`throwOnInvalidBytes`</ph> parameter of the constructor is set to <ph id=\"ph2\">`true`</ph>, error detection is also enabled in the <ph id=\"ph3\">&lt;xref:System.Text.Encoder&gt;</ph> object returned by this method.","pos":[0,210],"source":"If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> object returned by this method."},{"content":"If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.","pos":[211,344]}]}],"pos":[88873,90188],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Text.Encoder\"></xref> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.","nodes":[{"pos":[0,137],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder\"&gt;&lt;/xref&gt;</ph> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.","source":"A <xref href=\"System.Text.Encoder\"></xref> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes."}],"pos":[91046,91184],"yaml":true},{"content":"Returns the hash code for the current instance.","nodes":[{"pos":[0,47],"content":"Returns the hash code for the current instance.","nodes":[{"content":"Returns the hash code for the current instance.","pos":[0,47]}]}],"pos":[92774,92822],"yaml":true},{"content":"The hash code for the current <xref href=\"System.Text.UnicodeEncoding\"></xref> object.","nodes":[{"pos":[0,86],"content":"The hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Text.UnicodeEncoding\"&gt;&lt;/xref&gt;</ph> object.","source":"The hash code for the current <xref href=\"System.Text.UnicodeEncoding\"></xref> object."}],"pos":[92956,93043],"yaml":true},{"content":"Calculates the maximum number of bytes produced by encoding the specified number of characters.","nodes":[{"pos":[0,95],"content":"Calculates the maximum number of bytes produced by encoding the specified number of characters.","nodes":[{"content":"Calculates the maximum number of bytes produced by encoding the specified number of characters.","pos":[0,95]}]}],"pos":[94640,94736],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> can return large values.  \n  \n In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>.  \n  \n <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetChars%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.","nodes":[{"pos":[0,507],"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,507],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>.","pos":[0,195],"source":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>.","pos":[196,314],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[315,507],"source":" The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[514,822],"content":"<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> can return large values.","nodes":[{"content":"<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> can return large values.","pos":[0,308],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> retrieves a worst-case number, including the worst case for the currently selected <ph id=\"ph2\">&lt;xref:System.Text.EncoderFallback&gt;</ph>.","pos":[0,172],"source":"<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>."},{"content":"If a fallback is chosen with a potentially large string, <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> can return large values.","pos":[173,308],"source":" If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> can return large values."}]}]},{"pos":[829,1237],"content":"In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>.","nodes":[{"content":"In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>.","pos":[0,408],"nodes":[{"content":"In most cases, this method retrieves reasonable numbers for small strings.","pos":[0,74]},{"content":"For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.","pos":[75,231]},{"content":"You might also want to consider a different approach using <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=fullName&gt;</ph>.","pos":[232,408],"source":" You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>."}]}]},{"pos":[1244,1538],"content":"<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetChars%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.","nodes":[{"content":"<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetChars%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.","pos":[0,294],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> has no relation to <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>.","pos":[0,120],"source":"<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetChars%2A>."},{"content":"If your application needs a similar function to use with <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>, it should use <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.","pos":[121,294],"source":" If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetChars%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>."}]}]},{"pos":[1546,1639],"content":"[!NOTE]\n `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\"> `GetMaxByteCount(N)`</ph> is not necessarily the same value as <ph id=\"ph2\">`N* GetMaxByteCount(1)`</ph>.","pos":[8,91],"source":" `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`."}]}],"pos":[94747,96398],"yaml":true,"extradata":"MT"},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[97388,97424],"yaml":true},{"content":"The maximum number of bytes produced by encoding the specified number of characters.","nodes":[{"pos":[0,84],"content":"The maximum number of bytes produced by encoding the specified number of characters.","nodes":[{"content":"The maximum number of bytes produced by encoding the specified number of characters.","pos":[0,84]}]}],"pos":[97480,97565],"yaml":true},{"content":"<code>charCount</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.","source":"<code>charCount</code> is less than zero."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,159],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[97750,97916],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[98034,98331],"yaml":true},{"content":"Calculates the maximum number of characters produced by decoding the specified number of bytes.","nodes":[{"pos":[0,95],"content":"Calculates the maximum number of characters produced by decoding the specified number of bytes.","nodes":[{"content":"Calculates the maximum number of characters produced by decoding the specified number of bytes.","pos":[0,95]}]}],"pos":[99858,99954],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves large values.  \n  \n In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.  \n  \n <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetBytes%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.","nodes":[{"pos":[0,512],"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,512],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.","pos":[0,200],"source":"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.","pos":[201,319],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[320,512],"source":" The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster."}]}]},{"pos":[519,826],"content":"<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves large values.","nodes":[{"content":"<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves large values.","pos":[0,307],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> retrieves a worst-case number, including the worst case for the currently selected <ph id=\"ph2\">&lt;xref:System.Text.DecoderFallback&gt;</ph>.","pos":[0,172],"source":"<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>."},{"content":"If a fallback is chosen with a potentially large string, <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> retrieves large values.","pos":[173,307],"source":" If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves large values."}]}]},{"pos":[833,1216],"content":"In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.","nodes":[{"content":"In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.","pos":[0,383],"nodes":[{"content":"In most cases, this method retrieves reasonable numbers for small strings.","pos":[0,74]},{"content":"For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.","pos":[75,231]},{"content":"You might also want to consider a different approach using <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>.","pos":[232,383],"source":" You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>."}]}]},{"pos":[1223,1517],"content":"<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetBytes%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.","nodes":[{"content":"<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetBytes%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.","pos":[0,294],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> has no relation to <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>.","pos":[0,120],"source":"<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetBytes%2A>."},{"content":"If your application needs a similar function to use with <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>, it should use <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>.","pos":[121,294],"source":" If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetBytes%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>."}]}]},{"pos":[1525,1618],"content":"[!NOTE]\n `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\"> `GetMaxCharCount(N)`</ph> is not necessarily the same value as <ph id=\"ph2\">`N* GetMaxCharCount(1)`</ph>.","pos":[8,91],"source":" `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`."}]}],"pos":[99965,101595],"yaml":true,"extradata":"MT"},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[102587,102618],"yaml":true},{"content":"The maximum number of characters produced by decoding the specified number of bytes.","nodes":[{"pos":[0,84],"content":"The maximum number of characters produced by decoding the specified number of bytes.","nodes":[{"content":"The maximum number of characters produced by decoding the specified number of bytes.","pos":[0,84]}]}],"pos":[102674,102759],"yaml":true},{"content":"<code>byteCount</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.","source":"<code>byteCount</code> is less than zero."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,159],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[102944,103110],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[103228,103525],"yaml":true},{"content":"Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.","nodes":[{"pos":[0,124],"content":"Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.","nodes":[{"content":"Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.","pos":[0,124]}]}],"pos":[104971,105096],"yaml":true},{"content":"The <xref:System.Text.UnicodeEncoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process. Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF. The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):  \n  \n-   Big endian byte order: FE FF  \n  \n-   Little endian byte order: FF FE  \n  \n You can instantiate a <xref:System.Text.UnicodeEncoding> object whose <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method returns a valid BOM in the following ways:  \n  \n-   By retrieving the <xref:System.Text.UnicodeEncoding> object returned by the <xref:System.Text.Encoding.Unicode%2A?displayProperty=fullName> or <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=fullName> property.  \n  \n-   By calling the parameterless <xref:System.Text.UnicodeEncoding.%23ctor> constructor to instantiate a <xref:System.Text.UnicodeEncoding> object.  \n  \n-   By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> or <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructors.  \n  \n We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns. Often user problems might be avoided if data is consistently and properly tagged.  \n  \n For standards that provide an encoding type, a BOM is somewhat redundant. However, it can be used to help a server send the correct encoding header. Alternatively, it can be used as a fallback in case the encoding is otherwise lost.  \n  \n There are some disadvantages to using a BOM. For example, knowing how to limit the database fields that use a BOM can be difficult. Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data. In spite of the few disadvantages, however, the use of a BOM is highly recommended.  \n  \n> [!CAUTION]\n>  To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble. Note that the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.","nodes":[{"pos":[0,413],"content":"The <xref:System.Text.UnicodeEncoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process. Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF. The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):","nodes":[{"content":"The <xref:System.Text.UnicodeEncoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process. Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF. The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):","pos":[0,413],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process.","pos":[0,174],"source":"The <xref:System.Text.UnicodeEncoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process."},{"content":"Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF.","pos":[175,336]},{"content":"The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):","pos":[337,413]}]}]},{"pos":[423,451],"content":"Big endian byte order: FE FF","nodes":[{"content":"Big endian byte order: FE FF","pos":[0,28]}]},{"pos":[461,492],"content":"Little endian byte order: FF FE","nodes":[{"content":"Little endian byte order: FF FE","pos":[0,31]}]},{"pos":[499,668],"content":"You can instantiate a <xref:System.Text.UnicodeEncoding> object whose <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method returns a valid BOM in the following ways:","nodes":[{"content":"You can instantiate a <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object whose <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method returns a valid BOM in the following ways:","pos":[0,169],"source":"You can instantiate a <xref:System.Text.UnicodeEncoding> object whose <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method returns a valid BOM in the following ways:"}]},{"pos":[678,903],"content":"By retrieving the <xref:System.Text.UnicodeEncoding> object returned by the <xref:System.Text.Encoding.Unicode%2A?displayProperty=fullName> or <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=fullName> property.","nodes":[{"content":"By retrieving the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object returned by the <ph id=\"ph2\">&lt;xref:System.Text.Encoding.Unicode%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,225],"source":"By retrieving the <xref:System.Text.UnicodeEncoding> object returned by the <xref:System.Text.Encoding.Unicode%2A?displayProperty=fullName> or <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=fullName> property."}]},{"pos":[913,1056],"content":"By calling the parameterless <xref:System.Text.UnicodeEncoding.%23ctor> constructor to instantiate a <xref:System.Text.UnicodeEncoding> object.","nodes":[{"content":"By calling the parameterless <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.%23ctor&gt;</ph> constructor to instantiate a <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object.","pos":[0,143],"source":"By calling the parameterless <xref:System.Text.UnicodeEncoding.%23ctor> constructor to instantiate a <xref:System.Text.UnicodeEncoding> object."}]},{"pos":[1066,1331],"content":"By supplying <ph id=\"ph1\">`true`</ph> as the value of the <ph id=\"ph2\">`byteOrderMark`</ph> argument to the <ph id=\"ph3\">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructors.","source":"By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> or <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructors."},{"pos":[1338,1713],"content":"We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns. Often user problems might be avoided if data is consistently and properly tagged.","nodes":[{"content":"We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns. Often user problems might be avoided if data is consistently and properly tagged.","pos":[0,375],"nodes":[{"content":"We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.","pos":[0,293]},{"content":"Often user problems might be avoided if data is consistently and properly tagged.","pos":[294,375]}]}]},{"pos":[1720,1952],"content":"For standards that provide an encoding type, a BOM is somewhat redundant. However, it can be used to help a server send the correct encoding header. Alternatively, it can be used as a fallback in case the encoding is otherwise lost.","nodes":[{"content":"For standards that provide an encoding type, a BOM is somewhat redundant. However, it can be used to help a server send the correct encoding header. Alternatively, it can be used as a fallback in case the encoding is otherwise lost.","pos":[0,232],"nodes":[{"content":"For standards that provide an encoding type, a BOM is somewhat redundant.","pos":[0,73]},{"content":"However, it can be used to help a server send the correct encoding header.","pos":[74,148]},{"content":"Alternatively, it can be used as a fallback in case the encoding is otherwise lost.","pos":[149,232]}]}]},{"pos":[1959,2333],"content":"There are some disadvantages to using a BOM. For example, knowing how to limit the database fields that use a BOM can be difficult. Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data. In spite of the few disadvantages, however, the use of a BOM is highly recommended.","nodes":[{"content":"There are some disadvantages to using a BOM. For example, knowing how to limit the database fields that use a BOM can be difficult. Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data. In spite of the few disadvantages, however, the use of a BOM is highly recommended.","pos":[0,374],"nodes":[{"content":"There are some disadvantages to using a BOM.","pos":[0,44]},{"content":"For example, knowing how to limit the database fields that use a BOM can be difficult.","pos":[45,131]},{"content":"Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.","pos":[132,290]},{"content":"In spite of the few disadvantages, however, the use of a BOM is highly recommended.","pos":[291,374]}]}]},{"pos":[2341,2708],"content":"[!CAUTION]\n To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble. Note that the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.","leadings":["","> "],"nodes":[{"content":" To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble. Note that the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.","pos":[11,365],"nodes":[{"content":"To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble.","pos":[1,133]},{"content":"Note that the <ph id=\"ph1\">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.","pos":[134,354],"source":" Note that the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility."}]}]}],"pos":[105107,107839],"yaml":true,"extradata":"MT"},{"content":"A byte array containing the Unicode byte order mark, if the <xref href=\"System.Text.UnicodeEncoding\"></xref> object is configured to supply one. Otherwise, this method returns a zero-length byte array.","nodes":[{"pos":[0,201],"content":"A byte array containing the Unicode byte order mark, if the <xref href=\"System.Text.UnicodeEncoding\"></xref> object is configured to supply one. Otherwise, this method returns a zero-length byte array.","nodes":[{"content":"A byte array containing the Unicode byte order mark, if the <ph id=\"ph1\">&lt;xref href=\"System.Text.UnicodeEncoding\"&gt;&lt;/xref&gt;</ph> object is configured to supply one.","pos":[0,144],"source":"A byte array containing the Unicode byte order mark, if the <xref href=\"System.Text.UnicodeEncoding\"></xref> object is configured to supply one."},{"content":"Otherwise, this method returns a zero-length byte array.","pos":[145,201]}]}],"pos":[109864,110066],"yaml":true},{"content":"Decodes a range of bytes from a byte array into a string.","nodes":[{"pos":[0,57],"content":"Decodes a range of bytes from a byte array into a string.","nodes":[{"content":"Decodes a range of bytes from a byte array into a string.","pos":[0,57]}]}],"pos":[111753,111811],"yaml":true},{"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","nodes":[{"pos":[0,188],"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[0,188],"nodes":[{"content":"With error detection, an invalid sequence causes this method to throw a <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[0,104],"source":"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>."},{"content":"Without error detection, invalid sequences are ignored, and no exception is thrown.","pos":[105,188]}]}]},{"pos":[195,515],"content":"If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.","nodes":[{"content":"If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.","pos":[0,320],"nodes":[{"content":"If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.","pos":[0,220]},{"content":"You can remove it by calling the <ph id=\"ph1\">&lt;xref:System.String.TrimStart%2A?displayProperty=fullName&gt;</ph> method.","pos":[221,320],"source":" You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method."}]}]},{"pos":[522,964],"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.","pos":[0,442],"nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks.","pos":[0,100]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> object provided by the <ph id=\"ph3\">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> or the <ph id=\"ph4\">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[101,442],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively."}]}]}],"pos":[111822,112793],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[114365,114424],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[114484,114523],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[114583,114614],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> object containing the results of decoding the specified sequence of bytes.","nodes":[{"pos":[0,111],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object containing the results of decoding the specified sequence of bytes.","source":"A <xref href=\"System.String\"></xref> object containing the results of decoding the specified sequence of bytes."}],"pos":[114671,114783],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[114950,114992],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."}],"pos":[115106,115282],"yaml":true},{"content":"Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.","nodes":[{"pos":[0,89],"content":"Error detection is enabled, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an invalid sequence of bytes.","source":"Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes."}],"pos":[115376,115466],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[115584,115881],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.UnicodeEncoding\n  commentId: T:System.Text.UnicodeEncoding\n  id: UnicodeEncoding\n  children:\n  - System.Text.UnicodeEncoding.#ctor\n  - System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)\n  - System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  - System.Text.UnicodeEncoding.CharSize\n  - System.Text.UnicodeEncoding.Equals(System.Object)\n  - System.Text.UnicodeEncoding.GetByteCount(System.String)\n  - System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)\n  - System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  - System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)\n  - System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.UnicodeEncoding.GetDecoder\n  - System.Text.UnicodeEncoding.GetEncoder\n  - System.Text.UnicodeEncoding.GetHashCode\n  - System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n  - System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n  - System.Text.UnicodeEncoding.GetPreamble\n  - System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: UnicodeEncoding\n  nameWithType: UnicodeEncoding\n  fullName: System.Text.UnicodeEncoding\n  type: Class\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Represents a UTF-16 encoding of Unicode characters.\n  remarks: \"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  \\n  \\n The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script. A Unicode Transformation Format (UTF) is a way to encode that code point. The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:  \\n  \\n-   UTF-8, which represents each code point as a sequence of one to four bytes.  \\n  \\n-   UTF-16, which represents each code point as a sequence of one to two 16-bit integers.  \\n  \\n-   UTF-32, which represents each code point as a 32-bit integer.  \\n  \\n For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).  \\n  \\n The <xref:System.Text.UnicodeEncoding> class represents a UTF-16 encoding. The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first). For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):  \\n  \\n-   Big endian byte order: 00 00 00 41  \\n  \\n-   Little endian byte order: 41 00 00 00  \\n  \\n It is generally more efficient to store Unicode characters using the native byte order of a particular platform. For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers. The <xref:System.Text.UnicodeEncoding> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order). You can determine the \\\"endianness\\\" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=fullName> method.  \\n  \\n Optionally, the <xref:System.Text.UnicodeEncoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.  \\n  \\n If the <xref:System.Text.UnicodeEncoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method; otherwise, the method returns an empty array. Note that, even if a <xref:System.Text.UnicodeEncoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UnicodeEncoding> class do not do this automatically.  \\n  \\n To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UnicodeEncoding> object by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`. With error detection, a method that detects an invalid sequence of characters or bytes throws a <xref:System.ArgumentException>. Without error detection, no exception is thrown, and the invalid sequence is generally ignored.  \\n  \\n You can instantiate a <xref:System.Text.UnicodeEncoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection. The following table lists the <xref:System.Text.UnicodeEncoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.  \\n  \\n|Member|Endianness|BOM|Error detection|  \\n|------------|----------------|---------|---------------------|  \\n|<xref:System.Text.Encoding.BigEndianUnicode%2A>|Big-endian|Yes|No (Replacement fallback)|  \\n|<xref:System.Text.Encoding.Unicode%2A?displayProperty=fullName>|Little-endian|Yes|No (Replacement fallback)|  \\n|<xref:System.Text.UnicodeEncoding.%23ctor?displayProperty=fullName>|Little-endian|Yes|No (Replacement fallback)|  \\n|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>|Configurable|Configurable|No (Replacement fallback)|  \\n|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName>|Configurable|Configurable|Configurable|  \\n  \\n The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method performs the actual encoding.  \\n  \\n Likewise, the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UnicodeEncoding.GetChars%2A> and <xref:System.Text.UnicodeEncoding.GetString%2A> methods perform the actual decoding.  \\n  \\n For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> and <xref:System.Text.UnicodeEncoding.GetDecoder%2A> properties, respectively.\"\n  example:\n  - \"The following example demonstrates how to encode a string of Unicode characters into a byte array by using a <xref:System.Text.UnicodeEncoding> object. The byte array is decoded into a string to demonstrate that there is no loss of data.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CPP/snippet.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/snippet.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/snippet.vb#1)]  \\n  \\n The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM). It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file. As you would expect, in neither case is the BOM included in the newly read string.  \\n  \\n [!code-csharp[System.Text.UnicodeEncoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/bom1.cs#2)]\\n [!code-vb[System.Text.UnicodeEncoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/bom1.vb#2)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class UnicodeEncoding : System.Text.Encoding\n  inheritance:\n  - System.Object\n  - System.Text.Encoding\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Text.Encoding.ASCII\n  - System.Text.Encoding.BigEndianUnicode\n  - System.Text.Encoding.BodyName\n  - System.Text.Encoding.Clone\n  - System.Text.Encoding.CodePage\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.DecoderFallback\n  - System.Text.Encoding.Default\n  - System.Text.Encoding.EncoderFallback\n  - System.Text.Encoding.EncodingName\n  - System.Text.Encoding.GetByteCount(System.Char[])\n  - System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.String)\n  - System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)\n  - System.Text.Encoding.GetCharCount(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncoding(System.String)\n  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncodings\n  - System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  - System.Text.Encoding.GetString(System.Byte[])\n  - System.Text.Encoding.HeaderName\n  - System.Text.Encoding.IsAlwaysNormalized\n  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  - System.Text.Encoding.IsBrowserDisplay\n  - System.Text.Encoding.IsBrowserSave\n  - System.Text.Encoding.IsMailNewsDisplay\n  - System.Text.Encoding.IsMailNewsSave\n  - System.Text.Encoding.IsReadOnly\n  - System.Text.Encoding.IsSingleByte\n  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  - System.Text.Encoding.Unicode\n  - System.Text.Encoding.UTF32\n  - System.Text.Encoding.UTF7\n  - System.Text.Encoding.UTF8\n  - System.Text.Encoding.WebName\n  - System.Text.Encoding.WindowsCodePage\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.#ctor\n  commentId: M:System.Text.UnicodeEncoding.#ctor\n  id: '#ctor'\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: UnicodeEncoding()\n  nameWithType: UnicodeEncoding.UnicodeEncoding()\n  fullName: UnicodeEncoding.UnicodeEncoding()\n  type: Constructor\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\"></xref> class.\n  remarks: \"This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.  \\n  \\n> [!NOTE]\\n>  For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.\"\n  example:\n  - \"The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance and display the name of the encoding.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CPP/ctor.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CS/ctor.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/VB/ctor.vb#1)]\"\n  syntax:\n    content: public UnicodeEncoding ();\n    parameters: []\n  overload: System.Text.UnicodeEncoding.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)\n  commentId: M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean)'\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: UnicodeEncoding(Boolean, Boolean)\n  nameWithType: UnicodeEncoding.UnicodeEncoding(Boolean, Boolean)\n  fullName: UnicodeEncoding.UnicodeEncoding(Boolean, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\"></xref> class. Parameters specify whether to use the big endian byte order and whether the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\"></xref> method returns a Unicode byte order mark.\n  remarks: \"This constructor creates an instance that does not throw an exception when an invalid encoding is detected.  \\n  \\n> [!NOTE]\\n>  For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.  \\n  \\n The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method. If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.  If `false`, it returns a zero-length byte array. However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.\"\n  example:\n  - \"The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance specifying whether to support little endian or big endian byte ordering and the Unicode byte order mark.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]\"\n  syntax:\n    content: public UnicodeEncoding (bool bigEndian, bool byteOrderMark);\n    parameters:\n    - id: bigEndian\n      type: System.Boolean\n      description: '`true` to use the big endian byte order (most significant byte first), or `false` to use the little endian byte order (least significant byte first).'\n    - id: byteOrderMark\n      type: System.Boolean\n      description: '`true` to specify that the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\"></xref> method returns a Unicode byte order mark; otherwise, `false`.'\n  overload: System.Text.UnicodeEncoding.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  commentId: M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: UnicodeEncoding(Boolean, Boolean, Boolean)\n  nameWithType: UnicodeEncoding.UnicodeEncoding(Boolean, Boolean, Boolean)\n  fullName: UnicodeEncoding.UnicodeEncoding(Boolean, Boolean, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\"></xref> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.\n  remarks: \"The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method. If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.  If `false`, it returns a zero-length byte array. However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.  \\n  \\n If the `throwOnInvalidBytes` parameter is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=fullName>. Otherwise, the method does not throw an exception, and the invalid sequence is ignored.  \\n  \\n> [!NOTE]\\n>  For security reasons, your applications are recommended to use this constructor to create an instance of the <xref:System.Text.UnicodeEncoding> class and turn on error detection by setting `throwOnInvalidBytes` to `true`.\"\n  example:\n  - \"The following example demonstrates the behavior of <xref:System.Text.UnicodeEncoding>, both with error detection enabled and without.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CPP/errordetection.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CS/errordetection.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/VB/errordetection.vb#1)]\"\n  syntax:\n    content: public UnicodeEncoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);\n    parameters:\n    - id: bigEndian\n      type: System.Boolean\n      description: '`true` to use the big endian byte order (most significant byte first); `false` to use the little endian byte order (least significant byte first).'\n    - id: byteOrderMark\n      type: System.Boolean\n      description: '`true` to specify that the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\"></xref> method returns a Unicode byte order mark; otherwise, `false`.'\n    - id: throwOnInvalidBytes\n      type: System.Boolean\n      description: '`true` to specify that an exception should be thrown when an invalid encoding is detected; otherwise, `false`.'\n  overload: System.Text.UnicodeEncoding.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.CharSize\n  commentId: F:System.Text.UnicodeEncoding.CharSize\n  id: CharSize\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: CharSize\n  nameWithType: UnicodeEncoding.CharSize\n  fullName: UnicodeEncoding.CharSize\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: Represents the Unicode character size in bytes. This field is a constant.\n  remarks: The value of this field is a 32-bit signed constant with a value of 2.\n  example:\n  - \"The following example demonstrates how to return the value of <xref:System.Text.UnicodeEncoding.CharSize> and display it.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CPP/charsize.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CS/charsize.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/VB/charsize.vb#1)]\"\n  syntax:\n    content: public const int CharSize = 2;\n    return:\n      type: System.Int32\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.Equals(System.Object)\n  commentId: M:System.Text.UnicodeEncoding.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: UnicodeEncoding.Equals(Object)\n  fullName: UnicodeEncoding.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Determines whether the specified <xref href=\"System.Object\"></xref> is equal to the current <xref href=\"System.Text.UnicodeEncoding\"></xref> object.\n  remarks: \"Two <xref:System.Text.UnicodeEncoding> objects are considered equal if all of the following conditions are true:  \\n  \\n-   Both objects use the same byte order (little-endian or big-endian).  \\n  \\n-   Both objects provide the byte order mark, or both do not.  \\n  \\n-   Both objects use the same encoder fallback.  \\n  \\n-   Both objects use the same decoder fallback.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.Equals%2A> method to test whether the current <xref:System.Text.UnicodeEncoding> object is equal to a different <xref:System.Text.UnicodeEncoding> object. Five <xref:System.Text.UnicodeEncoding> objects are created and compared, and the results of the comparisons are displayed.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]\"\n  syntax:\n    content: public override bool Equals (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to compare with the current object.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is an instance of <xref href=\"System.Text.UnicodeEncoding\"></xref> and is equal to the current object; otherwise, `false`.'\n  overload: System.Text.UnicodeEncoding.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetByteCount(System.String)\n  commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.String)\n  id: GetByteCount(System.String)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetByteCount(String)\n  nameWithType: UnicodeEncoding.GetByteCount(String)\n  fullName: UnicodeEncoding.GetByteCount(String)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of bytes produced by encoding the characters in the specified string.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \\n  \\n> [!NOTE]\\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> method.\"\n  example:\n  - \"The following example calls the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> and <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string. It also displays the actual number of bytes required to store a byte stream with a byte order mark.  \\n  \\n [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount1.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount1.vb#1)]\"\n  syntax:\n    content: public override int GetByteCount (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The string that contains the set of characters to encode.\n    return:\n      type: System.Int32\n      description: The number of bytes produced by encoding the specified characters.\n  overload: System.Text.UnicodeEncoding.GetByteCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>s</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The resulting number of bytes is greater than the maximum number that can be returned as an integer.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Error detection is enabled, and <code>s</code> contains an invalid sequence of characters.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)\n  id: GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetByteCount(Char*, Int32)\n  nameWithType: UnicodeEncoding.GetByteCount(Char*, Int32)\n  fullName: UnicodeEncoding.GetByteCount(Char*, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.\n  remarks: \"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \\n  \\n> [!NOTE]\\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public override int GetByteCount (char* chars, int count);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: A pointer to the first character to encode.\n    - id: count\n      type: System.Int32\n      description: The number of characters to encode.\n    return:\n      type: System.Int32\n      description: The number of bytes produced by encoding the specified characters.\n  overload: System.Text.UnicodeEncoding.GetByteCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an integer.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Error detection is enabled and <code>chars</code> contains an invalid sequence of characters.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetByteCount(Char[], Int32, Int32)\n  nameWithType: UnicodeEncoding.GetByteCount(Char[], Int32, Int32)\n  fullName: UnicodeEncoding.GetByteCount(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of bytes produced by encoding a set of characters from the specified character array.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n With error detection enabled, an invalid sequence causes this method to throw an <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \\n  \\n To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.\"\n  example:\n  - \"The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters. It then displays this information along with the total number of bytes needed if a byte order mark is added. It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters. The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Cyrillic characters. It then displays this information along with the total number of bytes needed if a byte order mark is added. It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.  \\n  \\n [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount2.cs#2)]\\n [!code-vb[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount2.vb#2)]\"\n  syntax:\n    content: public override int GetByteCount (char[] chars, int index, int count);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: The character array containing the set of characters to encode.\n    - id: index\n      type: System.Int32\n      description: The index of the first character to encode.\n    - id: count\n      type: System.Int32\n      description: The number of characters to encode.\n    return:\n      type: System.Int32\n      description: The number of bytes produced by encoding the specified characters.\n  overload: System.Text.UnicodeEncoding.GetByteCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an integer.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType: UnicodeEncoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: UnicodeEncoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Encodes a set of characters from the specified character array into the specified byte array.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \\n  \\n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.  \\n  \\n> [!NOTE]\\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]\"\n  syntax:\n    content: public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: The character array containing the set of characters to encode.\n    - id: charIndex\n      type: System.Int32\n      description: The index of the first character to encode.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array to contain the resulting sequence of bytes.\n    - id: byteIndex\n      type: System.Int32\n      description: The index at which to start writing the resulting sequence of bytes.\n    return:\n      type: System.Int32\n      description: The actual number of bytes written into <code>bytes</code>.\n  overload: System.Text.UnicodeEncoding.GetBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>chars</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>bytes</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \\n  \\n -or-  \\n  \\n <code>byteIndex</code> is not a valid index in <code>bytes</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.  \\n  \\n -or-  \\n  \\n <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType: UnicodeEncoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: UnicodeEncoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Encodes a set of characters from the specified <xref href=\"System.String\"></xref> into the specified byte array.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \\n  \\n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.  \\n  \\n> [!NOTE]\\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.\"\n  example:\n  - \"The following example demonstrates how to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]\"\n  syntax:\n    content: public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);\n    parameters:\n    - id: s\n      type: System.String\n      description: The string containing the set of characters to encode.\n    - id: charIndex\n      type: System.Int32\n      description: The index of the first character to encode.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array to contain the resulting sequence of bytes.\n    - id: byteIndex\n      type: System.Int32\n      description: The index at which to start writing the resulting sequence of bytes.\n    return:\n      type: System.Int32\n      description: The actual number of bytes written into <code>bytes</code>.\n  overload: System.Text.UnicodeEncoding.GetBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>s</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>bytes</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \\n  \\n -or-  \\n  \\n <code>byteIndex</code> is not a valid index in <code>bytes</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"Error detection is enabled, and <code>s</code> contains an invalid sequence of characters.  \\n  \\n -or-  \\n  \\n <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  nameWithType: UnicodeEncoding.GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: UnicodeEncoding.GetBytes(Char*, Int32, Byte*, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.\n  remarks: \"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \\n  \\n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.  \\n  \\n> [!NOTE]\\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: A pointer to the first character to encode.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: bytes\n      type: System.Byte*\n      description: A pointer to the location at which to start writing the resulting sequence of bytes.\n    - id: byteCount\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    return:\n      type: System.Int32\n      description: The actual number of bytes written at the location indicated by the <code>bytes</code> parameter.\n  overload: System.Text.UnicodeEncoding.GetBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>chars</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>bytes</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>charCount</code> or <code>byteCount</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.  \\n  \\n -or-  \\n  \\n <code>byteCount</code> is less than the resulting number of bytes.\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)\n  id: GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetCharCount(Byte*, Int32)\n  nameWithType: UnicodeEncoding.GetCharCount(Byte*, Int32)\n  fullName: UnicodeEncoding.GetCharCount(Byte*, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.\n  remarks: \"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.  \\n  \\n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public override int GetCharCount (byte* bytes, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: A pointer to the first byte to decode.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.Int32\n      description: The number of characters produced by decoding the specified sequence of bytes.\n  overload: System.Text.UnicodeEncoding.GetCharCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an integer.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetCharCount(Byte[], Int32, Int32)\n  nameWithType: UnicodeEncoding.GetCharCount(Byte[], Int32, Int32)\n  fullName: UnicodeEncoding.GetCharCount(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.  \\n  \\n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array using <xref:System.Text.UnicodeEncoding>.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]\"\n  syntax:\n    content: public override int GetCharCount (byte[] bytes, int index, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: index\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.Int32\n      description: The number of characters produced by decoding the specified sequence of bytes.\n  overload: System.Text.UnicodeEncoding.GetCharCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an integer.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  nameWithType: UnicodeEncoding.GetChars(Byte*, Int32, Char*, Int32)\n  fullName: UnicodeEncoding.GetChars(Byte*, Int32, Char*, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.\n  remarks: \"To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.  \\n  \\n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \\n  \\n If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.  \\n  \\n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: A pointer to the first byte to decode.\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    - id: chars\n      type: System.Char*\n      description: A pointer to the location at which to start writing the resulting set of characters.\n    - id: charCount\n      type: System.Int32\n      description: The maximum number of characters to write.\n    return:\n      type: System.Int32\n      description: The actual number of characters written at the location indicated by the <code>chars</code> parameter.\n  overload: System.Text.UnicodeEncoding.GetChars*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>bytes</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>chars</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>byteCount</code> or <code>charCount</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.  \\n  \\n -or-  \\n  \\n <code>charCount</code> is less than the resulting number of characters.\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType: UnicodeEncoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: UnicodeEncoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Decodes a sequence of bytes from the specified byte array into the specified character array.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.  \\n  \\n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \\n  \\n If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.  \\n  \\n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]\"\n  syntax:\n    content: public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: byteIndex\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    - id: chars\n      type: System.Char[]\n      description: The character array to contain the resulting set of characters.\n    - id: charIndex\n      type: System.Int32\n      description: The index at which to start writing the resulting set of characters.\n    return:\n      type: System.Int32\n      description: The actual number of characters written into <code>chars</code>.\n  overload: System.Text.UnicodeEncoding.GetChars*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>bytes</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>chars</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \\n  \\n -or-  \\n  \\n <code>charIndex</code> is not a valid index in <code>chars</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.  \\n  \\n -or-  \\n  \\n <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetDecoder\n  commentId: M:System.Text.UnicodeEncoding.GetDecoder\n  id: GetDecoder\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetDecoder()\n  nameWithType: UnicodeEncoding.GetDecoder()\n  fullName: UnicodeEncoding.GetDecoder()\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.\n  remarks: \"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UnicodeEncoding.GetChars%2A>. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  \\n  \\n If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.\"\n  example:\n  - \"The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]\"\n  syntax:\n    content: public override System.Text.Decoder GetDecoder ();\n    parameters: []\n    return:\n      type: System.Text.Decoder\n      description: A <xref href=\"System.Text.Decoder\"></xref> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.\n  overload: System.Text.UnicodeEncoding.GetDecoder*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetEncoder\n  commentId: M:System.Text.UnicodeEncoding.GetEncoder\n  id: GetEncoder\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetEncoder()\n  nameWithType: UnicodeEncoding.GetEncoder()\n  fullName: UnicodeEncoding.GetEncoder()\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.\n  remarks: \"The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method of this class. However, a <xref:System.Text.Encoder> object maintains state information between calls so that it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  \\n  \\n If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> object returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.\"\n  example:\n  - \"The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Text.Encoder GetEncoder ();\n    parameters: []\n    return:\n      type: System.Text.Encoder\n      description: A <xref href=\"System.Text.Encoder\"></xref> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.\n  overload: System.Text.UnicodeEncoding.GetEncoder*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetHashCode\n  commentId: M:System.Text.UnicodeEncoding.GetHashCode\n  id: GetHashCode\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: UnicodeEncoding.GetHashCode()\n  fullName: UnicodeEncoding.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Returns the hash code for the current instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code for the current <xref href=\"System.Text.UnicodeEncoding\"></xref> object.\n  overload: System.Text.UnicodeEncoding.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n  id: GetMaxByteCount(System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetMaxByteCount(Int32)\n  nameWithType: UnicodeEncoding.GetMaxByteCount(Int32)\n  fullName: UnicodeEncoding.GetMaxByteCount(Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the maximum number of bytes produced by encoding the specified number of characters.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>. The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> can return large values.  \\n  \\n In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>.  \\n  \\n <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetChars%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.  \\n  \\n> [!NOTE]\\n>  `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]\"\n  syntax:\n    content: public override int GetMaxByteCount (int charCount);\n    parameters:\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    return:\n      type: System.Int32\n      description: The maximum number of bytes produced by encoding the specified number of characters.\n  overload: System.Text.UnicodeEncoding.GetMaxByteCount*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charCount</code> is less than zero.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an integer.\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n  id: GetMaxCharCount(System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetMaxCharCount(Int32)\n  nameWithType: UnicodeEncoding.GetMaxCharCount(Int32)\n  fullName: UnicodeEncoding.GetMaxCharCount(Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the maximum number of characters produced by decoding the specified number of bytes.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>. The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.  \\n  \\n <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves large values.  \\n  \\n In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.  \\n  \\n <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetBytes%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.  \\n  \\n> [!NOTE]\\n>  `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]\"\n  syntax:\n    content: public override int GetMaxCharCount (int byteCount);\n    parameters:\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.Int32\n      description: The maximum number of characters produced by decoding the specified number of bytes.\n  overload: System.Text.UnicodeEncoding.GetMaxCharCount*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>byteCount</code> is less than zero.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an integer.\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetPreamble\n  commentId: M:System.Text.UnicodeEncoding.GetPreamble\n  id: GetPreamble\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetPreamble()\n  nameWithType: UnicodeEncoding.GetPreamble()\n  fullName: UnicodeEncoding.GetPreamble()\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.\n  remarks: \"The <xref:System.Text.UnicodeEncoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process. Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF. The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):  \\n  \\n-   Big endian byte order: FE FF  \\n  \\n-   Little endian byte order: FF FE  \\n  \\n You can instantiate a <xref:System.Text.UnicodeEncoding> object whose <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method returns a valid BOM in the following ways:  \\n  \\n-   By retrieving the <xref:System.Text.UnicodeEncoding> object returned by the <xref:System.Text.Encoding.Unicode%2A?displayProperty=fullName> or <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=fullName> property.  \\n  \\n-   By calling the parameterless <xref:System.Text.UnicodeEncoding.%23ctor> constructor to instantiate a <xref:System.Text.UnicodeEncoding> object.  \\n  \\n-   By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> or <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructors.  \\n  \\n We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns. Often user problems might be avoided if data is consistently and properly tagged.  \\n  \\n For standards that provide an encoding type, a BOM is somewhat redundant. However, it can be used to help a server send the correct encoding header. Alternatively, it can be used as a fallback in case the encoding is otherwise lost.  \\n  \\n There are some disadvantages to using a BOM. For example, knowing how to limit the database fields that use a BOM can be difficult. Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data. In spite of the few disadvantages, however, the use of a BOM is highly recommended.  \\n  \\n> [!CAUTION]\\n>  To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble. Note that the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to retrieve the Unicode byte order mark in big endian or little endian byte order for an instance of a <xref:System.Text.UnicodeEncoding>.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CS/getpreamble-.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/VB/getpreamble-.vb#1)]  \\n  \\n The following example instantiates two <xref:System.Text.UnicodeEncoding> objects, the first of which does not provide a BOM, and the second of which does. It then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to write the BOM to a file before writing a Unicode-encoded string. As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.  \\n  \\n [!code-csharp[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/cs/GetPreamble1.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/vb/GetPreamble1.vb#1)]  \\n  \\n You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode. Note that when the file is opened in an editor that supports UTF-16 encoding, the BOM is not displayed.\"\n  syntax:\n    content: public override byte[] GetPreamble ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: A byte array containing the Unicode byte order mark, if the <xref href=\"System.Text.UnicodeEncoding\"></xref> object is configured to supply one. Otherwise, this method returns a zero-length byte array.\n  overload: System.Text.UnicodeEncoding.GetPreamble*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  id: GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  name: GetString(Byte[], Int32, Int32)\n  nameWithType: UnicodeEncoding.GetString(Byte[], Int32, Int32)\n  fullName: UnicodeEncoding.GetString(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Decodes a range of bytes from a byte array into a string.\n  remarks: \"With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \\n  \\n If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.  \\n  \\n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.\"\n  example:\n  - \"The following example initializes an array by calling the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM). The example then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.Encoding.GetBytes%2A> method to store the encoded bytes to the array. The example then calls the <xref:System.Text.UnicodeEncoding.GetString%2A> method to decode the string.  \\n  \\n [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]\\n [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  \\n  \\n Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD. This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character \\\"?\\\". To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override string GetString (byte[] bytes, int index, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: index\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> object containing the results of decoding the specified sequence of bytes.\n  overload: System.Text.UnicodeEncoding.GetString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Text.EncoderFallbackException\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallbackException\n  nameWithType: EncoderFallbackException\n  fullName: System.Text.EncoderFallbackException\n- uid: System.Text.DecoderFallbackException\n  parent: System.Text\n  isExternal: false\n  name: DecoderFallbackException\n  nameWithType: DecoderFallbackException\n  fullName: System.Text.DecoderFallbackException\n- uid: System.Text.UnicodeEncoding.#ctor\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: UnicodeEncoding()\n  nameWithType: UnicodeEncoding.UnicodeEncoding()\n  fullName: UnicodeEncoding.UnicodeEncoding()\n- uid: System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: UnicodeEncoding(Boolean, Boolean)\n  nameWithType: UnicodeEncoding.UnicodeEncoding(Boolean, Boolean)\n  fullName: UnicodeEncoding.UnicodeEncoding(Boolean, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: UnicodeEncoding(Boolean, Boolean, Boolean)\n  nameWithType: UnicodeEncoding.UnicodeEncoding(Boolean, Boolean, Boolean)\n  fullName: UnicodeEncoding.UnicodeEncoding(Boolean, Boolean, Boolean)\n- uid: System.Text.UnicodeEncoding.CharSize\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: CharSize\n  nameWithType: UnicodeEncoding.CharSize\n  fullName: UnicodeEncoding.CharSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UnicodeEncoding.Equals(System.Object)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: UnicodeEncoding.Equals(Object)\n  fullName: UnicodeEncoding.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Text.UnicodeEncoding.GetByteCount(System.String)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetByteCount(String)\n  nameWithType: UnicodeEncoding.GetByteCount(String)\n  fullName: UnicodeEncoding.GetByteCount(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetByteCount(Char*, Int32)\n  nameWithType: UnicodeEncoding.GetByteCount(Char*, Int32)\n  fullName: UnicodeEncoding.GetByteCount(Char*, Int32)\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char*\n  parent: System\n  isExternal: false\n  name: Char*\n  nameWithType: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetByteCount(Char[], Int32, Int32)\n  nameWithType: UnicodeEncoding.GetByteCount(Char[], Int32, Int32)\n  fullName: UnicodeEncoding.GetByteCount(Char[], Int32, Int32)\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType: UnicodeEncoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: UnicodeEncoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType: UnicodeEncoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: UnicodeEncoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n- uid: System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  nameWithType: UnicodeEncoding.GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: UnicodeEncoding.GetBytes(Char*, Int32, Byte*, Int32)\n- uid: System.Byte*\n  parent: System\n  isExternal: false\n  name: Byte*\n  nameWithType: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetCharCount(Byte*, Int32)\n  nameWithType: UnicodeEncoding.GetCharCount(Byte*, Int32)\n  fullName: UnicodeEncoding.GetCharCount(Byte*, Int32)\n- uid: System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetCharCount(Byte[], Int32, Int32)\n  nameWithType: UnicodeEncoding.GetCharCount(Byte[], Int32, Int32)\n  fullName: UnicodeEncoding.GetCharCount(Byte[], Int32, Int32)\n- uid: System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  nameWithType: UnicodeEncoding.GetChars(Byte*, Int32, Char*, Int32)\n  fullName: UnicodeEncoding.GetChars(Byte*, Int32, Char*, Int32)\n- uid: System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType: UnicodeEncoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: UnicodeEncoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n- uid: System.Text.UnicodeEncoding.GetDecoder\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetDecoder()\n  nameWithType: UnicodeEncoding.GetDecoder()\n  fullName: UnicodeEncoding.GetDecoder()\n- uid: System.Text.Decoder\n  parent: System.Text\n  isExternal: false\n  name: Decoder\n  nameWithType: Decoder\n  fullName: System.Text.Decoder\n- uid: System.Text.UnicodeEncoding.GetEncoder\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetEncoder()\n  nameWithType: UnicodeEncoding.GetEncoder()\n  fullName: UnicodeEncoding.GetEncoder()\n- uid: System.Text.Encoder\n  parent: System.Text\n  isExternal: false\n  name: Encoder\n  nameWithType: Encoder\n  fullName: System.Text.Encoder\n- uid: System.Text.UnicodeEncoding.GetHashCode\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: UnicodeEncoding.GetHashCode()\n  fullName: UnicodeEncoding.GetHashCode()\n- uid: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetMaxByteCount(Int32)\n  nameWithType: UnicodeEncoding.GetMaxByteCount(Int32)\n  fullName: UnicodeEncoding.GetMaxByteCount(Int32)\n- uid: System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetMaxCharCount(Int32)\n  nameWithType: UnicodeEncoding.GetMaxCharCount(Int32)\n  fullName: UnicodeEncoding.GetMaxCharCount(Int32)\n- uid: System.Text.UnicodeEncoding.GetPreamble\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetPreamble()\n  nameWithType: UnicodeEncoding.GetPreamble()\n  fullName: UnicodeEncoding.GetPreamble()\n- uid: System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetString(Byte[], Int32, Int32)\n  nameWithType: UnicodeEncoding.GetString(Byte[], Int32, Int32)\n  fullName: UnicodeEncoding.GetString(Byte[], Int32, Int32)\n- uid: System.Text.UnicodeEncoding.#ctor*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: UnicodeEncoding\n  nameWithType: UnicodeEncoding.UnicodeEncoding\n  fullName: UnicodeEncoding.UnicodeEncoding\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Text.UnicodeEncoding.Equals*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: Equals\n  nameWithType: UnicodeEncoding.Equals\n  fullName: UnicodeEncoding.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Text.UnicodeEncoding.GetByteCount*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetByteCount\n  nameWithType: UnicodeEncoding.GetByteCount\n  fullName: UnicodeEncoding.GetByteCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Text.UnicodeEncoding.GetBytes*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetBytes\n  nameWithType: UnicodeEncoding.GetBytes\n  fullName: UnicodeEncoding.GetBytes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Text.UnicodeEncoding.GetCharCount*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetCharCount\n  nameWithType: UnicodeEncoding.GetCharCount\n  fullName: UnicodeEncoding.GetCharCount\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Text.UnicodeEncoding.GetChars*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetChars\n  nameWithType: UnicodeEncoding.GetChars\n  fullName: UnicodeEncoding.GetChars\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Text.UnicodeEncoding.GetDecoder*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetDecoder\n  nameWithType: UnicodeEncoding.GetDecoder\n  fullName: UnicodeEncoding.GetDecoder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Text.UnicodeEncoding.GetEncoder*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetEncoder\n  nameWithType: UnicodeEncoding.GetEncoder\n  fullName: UnicodeEncoding.GetEncoder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Text.UnicodeEncoding.GetHashCode*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetHashCode\n  nameWithType: UnicodeEncoding.GetHashCode\n  fullName: UnicodeEncoding.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Text.UnicodeEncoding.GetMaxByteCount*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetMaxByteCount\n  nameWithType: UnicodeEncoding.GetMaxByteCount\n  fullName: UnicodeEncoding.GetMaxByteCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Text.UnicodeEncoding.GetMaxCharCount*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetMaxCharCount\n  nameWithType: UnicodeEncoding.GetMaxCharCount\n  fullName: UnicodeEncoding.GetMaxCharCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Text.UnicodeEncoding.GetPreamble*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetPreamble\n  nameWithType: UnicodeEncoding.GetPreamble\n  fullName: UnicodeEncoding.GetPreamble\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Text.UnicodeEncoding.GetString*\n  parent: System.Text.UnicodeEncoding\n  isExternal: false\n  name: GetString\n  nameWithType: UnicodeEncoding.GetString\n  fullName: UnicodeEncoding.GetString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UnicodeEncoding.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Text.Encoding.ASCII\n  parent: System.Text.Encoding\n  isExternal: false\n  name: ASCII\n  nameWithType: Encoding.ASCII\n  fullName: Encoding.ASCII\n- uid: System.Text.Encoding.BigEndianUnicode\n  parent: System.Text.Encoding\n  isExternal: false\n  name: BigEndianUnicode\n  nameWithType: Encoding.BigEndianUnicode\n  fullName: Encoding.BigEndianUnicode\n- uid: System.Text.Encoding.BodyName\n  parent: System.Text.Encoding\n  isExternal: false\n  name: BodyName\n  nameWithType: Encoding.BodyName\n  fullName: Encoding.BodyName\n- uid: System.Text.Encoding.Clone\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Clone()\n  nameWithType: Encoding.Clone()\n  fullName: Encoding.Clone()\n- uid: System.Text.Encoding.CodePage\n  parent: System.Text.Encoding\n  isExternal: false\n  name: CodePage\n  nameWithType: Encoding.CodePage\n  fullName: Encoding.CodePage\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  fullName: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Convert(Encoding, Encoding, Byte[])\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])\n  fullName: Encoding.Convert(Encoding, Encoding, Byte[])\n- uid: System.Text.Encoding.DecoderFallback\n  parent: System.Text.Encoding\n  isExternal: false\n  name: DecoderFallback\n  nameWithType: Encoding.DecoderFallback\n  fullName: Encoding.DecoderFallback\n- uid: System.Text.Encoding.Default\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Default\n  nameWithType: Encoding.Default\n  fullName: Encoding.Default\n- uid: System.Text.Encoding.EncoderFallback\n  parent: System.Text.Encoding\n  isExternal: false\n  name: EncoderFallback\n  nameWithType: Encoding.EncoderFallback\n  fullName: Encoding.EncoderFallback\n- uid: System.Text.Encoding.EncodingName\n  parent: System.Text.Encoding\n  isExternal: false\n  name: EncodingName\n  nameWithType: Encoding.EncodingName\n  fullName: Encoding.EncodingName\n- uid: System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetByteCount(String, Int32, Int32)\n  nameWithType: Encoding.GetByteCount(String, Int32, Int32)\n  fullName: Encoding.GetByteCount(String, Int32, Int32)\n- uid: System.Text.Encoding.GetByteCount(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetByteCount(Char[])\n  nameWithType: Encoding.GetByteCount(Char[])\n  fullName: Encoding.GetByteCount(Char[])\n- uid: System.Text.Encoding.GetBytes(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetBytes(Char[])\n  nameWithType: Encoding.GetBytes(Char[])\n  fullName: Encoding.GetBytes(Char[])\n- uid: System.Text.Encoding.GetBytes(System.String)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetBytes(String)\n  nameWithType: Encoding.GetBytes(String)\n  fullName: Encoding.GetBytes(String)\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetBytes(Char[], Int32, Int32)\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)\n  fullName: Encoding.GetBytes(Char[], Int32, Int32)\n- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetBytes(String, Int32, Int32)\n  nameWithType: Encoding.GetBytes(String, Int32, Int32)\n  fullName: Encoding.GetBytes(String, Int32, Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetCharCount(Byte[])\n  nameWithType: Encoding.GetCharCount(Byte[])\n  fullName: Encoding.GetCharCount(Byte[])\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetChars(Byte[], Int32, Int32)\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)\n  fullName: Encoding.GetChars(Byte[], Int32, Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetChars(Byte[])\n  nameWithType: Encoding.GetChars(Byte[])\n  fullName: Encoding.GetChars(Byte[])\n- uid: System.Text.Encoding.GetEncoding(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncoding(Int32)\n  nameWithType: Encoding.GetEncoding(Int32)\n  fullName: Encoding.GetEncoding(Int32)\n- uid: System.Text.Encoding.GetEncoding(System.String)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncoding(String)\n  nameWithType: Encoding.GetEncoding(String)\n  fullName: Encoding.GetEncoding(String)\n- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  fullName: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)\n- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncoding(String, EncoderFallback, DecoderFallback)\n  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)\n  fullName: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)\n- uid: System.Text.Encoding.GetEncodings\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncodings()\n  nameWithType: Encoding.GetEncodings()\n  fullName: Encoding.GetEncodings()\n- uid: System.Text.Encoding.GetString(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetString(Byte[])\n  nameWithType: Encoding.GetString(Byte[])\n  fullName: Encoding.GetString(Byte[])\n- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetString(Byte*, Int32)\n  nameWithType: Encoding.GetString(Byte*, Int32)\n  fullName: Encoding.GetString(Byte*, Int32)\n- uid: System.Text.Encoding.HeaderName\n  parent: System.Text.Encoding\n  isExternal: false\n  name: HeaderName\n  nameWithType: Encoding.HeaderName\n  fullName: Encoding.HeaderName\n- uid: System.Text.Encoding.IsAlwaysNormalized\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsAlwaysNormalized()\n  nameWithType: Encoding.IsAlwaysNormalized()\n  fullName: Encoding.IsAlwaysNormalized()\n- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsAlwaysNormalized(NormalizationForm)\n  nameWithType: Encoding.IsAlwaysNormalized(NormalizationForm)\n  fullName: Encoding.IsAlwaysNormalized(NormalizationForm)\n- uid: System.Text.Encoding.IsBrowserDisplay\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsBrowserDisplay\n  nameWithType: Encoding.IsBrowserDisplay\n  fullName: Encoding.IsBrowserDisplay\n- uid: System.Text.Encoding.IsBrowserSave\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsBrowserSave\n  nameWithType: Encoding.IsBrowserSave\n  fullName: Encoding.IsBrowserSave\n- uid: System.Text.Encoding.IsMailNewsDisplay\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsMailNewsDisplay\n  nameWithType: Encoding.IsMailNewsDisplay\n  fullName: Encoding.IsMailNewsDisplay\n- uid: System.Text.Encoding.IsMailNewsSave\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsMailNewsSave\n  nameWithType: Encoding.IsMailNewsSave\n  fullName: Encoding.IsMailNewsSave\n- uid: System.Text.Encoding.IsReadOnly\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: Encoding.IsReadOnly\n  fullName: Encoding.IsReadOnly\n- uid: System.Text.Encoding.IsSingleByte\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsSingleByte\n  nameWithType: Encoding.IsSingleByte\n  fullName: Encoding.IsSingleByte\n- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: RegisterProvider(EncodingProvider)\n  nameWithType: Encoding.RegisterProvider(EncodingProvider)\n  fullName: Encoding.RegisterProvider(EncodingProvider)\n- uid: System.Text.Encoding.Unicode\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Unicode\n  nameWithType: Encoding.Unicode\n  fullName: Encoding.Unicode\n- uid: System.Text.Encoding.UTF32\n  parent: System.Text.Encoding\n  isExternal: false\n  name: UTF32\n  nameWithType: Encoding.UTF32\n  fullName: Encoding.UTF32\n- uid: System.Text.Encoding.UTF7\n  parent: System.Text.Encoding\n  isExternal: false\n  name: UTF7\n  nameWithType: Encoding.UTF7\n  fullName: Encoding.UTF7\n- uid: System.Text.Encoding.UTF8\n  parent: System.Text.Encoding\n  isExternal: false\n  name: UTF8\n  nameWithType: Encoding.UTF8\n  fullName: Encoding.UTF8\n- uid: System.Text.Encoding.WebName\n  parent: System.Text.Encoding\n  isExternal: false\n  name: WebName\n  nameWithType: Encoding.WebName\n  fullName: Encoding.WebName\n- uid: System.Text.Encoding.WindowsCodePage\n  parent: System.Text.Encoding\n  isExternal: false\n  name: WindowsCodePage\n  nameWithType: Encoding.WindowsCodePage\n  fullName: Encoding.WindowsCodePage\n"}