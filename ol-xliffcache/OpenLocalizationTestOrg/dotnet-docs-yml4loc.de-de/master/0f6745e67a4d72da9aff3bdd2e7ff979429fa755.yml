### YamlMime:ManagedReference
items:
- uid: System.Collections.IStructuralEquatable
  commentId: T:System.Collections.IStructuralEquatable
  id: IStructuralEquatable
  children:
  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  langs:
  - csharp
  name: IStructuralEquatable
  nameWithType: IStructuralEquatable
  fullName: System.Collections.IStructuralEquatable
  type: Interface
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  - FSharp.Core
  namespace: System.Collections
  summary: Defines methods to support the comparison of objects for structural equality.
  remarks: "Structural equality means that two objects are equal because they have equal values. It differs from reference equality, which indicates that two object references are equal because they reference the same physical object. The <xref:System.Collections.IStructuralEquatable> interface enables you to implement customized comparisons to check for the structural equality of collection objects. That is, you can create your own definition of structural equality and specify that this definition be used with a collection type that accepts the <xref:System.Collections.IStructuralEquatable> interface. The interface has two members: <xref:System.Collections.IStructuralEquatable.Equals%2A>, which tests for equality by using a specified <xref:System.Collections.IEqualityComparer> implementation, and <xref:System.Collections.IStructuralEquatable.GetHashCode%2A>, which returns identical hash codes for objects that are equal.  \n  \n> [!NOTE]\n>  The <xref:System.Collections.IStructuralEquatable> interface supports only custom comparisons for structural equality. The <xref:System.Collections.IStructuralComparable> interface supports custom structural comparisons for sorting and ordering.  \n  \n The .NET Framework also provides default equality comparers, which are returned by the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> and <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=fullName> properties. For more information, see the example.  \n  \n The generic tuple classes (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on) and the <xref:System.Array> class provide explicit implementations of the <xref:System.Collections.IStructuralEquatable> interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref:System.Collections.IStructuralEquatable> interface value and providing your <xref:System.Collections.IEqualityComparer> implementation as an argument to the <xref:System.Collections.IStructuralEquatable.Equals%2A> method, you can define a custom equality comparison for the array or collection."
  example:
  - "The default equality comparer, `EqualityComparer<Object>.Default.Equals`, considers two `NaN` values to be equal. However, in some cases, you may want the comparison of `NaN` values for equality to return `false`, which indicates that the values cannot be compared. The following example defines a `NanComparer` class that implements the <xref:System.Collections.IStructuralEquatable> interface. It compares two <xref:System.Double> or two <xref:System.Single> values by using the equality operator. It passes values of any other type to the default equality comparer.  \n  \n [!code-csharp[System.Collections.IStructuralEquatable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#1)]\n [!code-vb[System.Collections.IStructuralEquatable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#1)]  \n  \n The following example creates two identical 3-tuple objects whose components consist of three <xref:System.Double> values. The value of the second component is <xref:System.Double.NaN?displayProperty=fullName>. The example then calls the <xref:System.Tuple%603.Equals%2A?displayProperty=fullName> method, and it calls the <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=fullName> method three times. The first time, it passes the default equality comparer that is returned by the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> property. The second time, it passes the default equality comparer that is returned by the <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=fullName> property. The third time, it passes the custom `NanComparer` object. As the output from the example shows, the first three method calls return `true`, whereas the fourth call returns `false`.  \n  \n [!code-csharp[System.Collections.IStructuralEquatable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#2)]\n [!code-vb[System.Collections.IStructuralEquatable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#2)]"
  syntax:
    content: public interface IStructuralEquatable
  derivedClasses:
  - Microsoft.FSharp.Collections.FSharpList`1
  - Microsoft.FSharp.Core.FSharpChoice`2
  - Microsoft.FSharp.Core.FSharpChoice`3
  - Microsoft.FSharp.Core.FSharpChoice`4
  - Microsoft.FSharp.Core.FSharpChoice`5
  - Microsoft.FSharp.Core.FSharpChoice`6
  - Microsoft.FSharp.Core.FSharpChoice`7
  - Microsoft.FSharp.Core.FSharpOption`1
  - Microsoft.FSharp.Core.FSharpRef`1
  - Microsoft.FSharp.Core.MatchFailureException
  - System.Array
  - System.Tuple`1
  - System.Tuple`2
  - System.Tuple`3
  - System.Tuple`4
  - System.Tuple`5
  - System.Tuple`6
  - System.Tuple`7
  - System.Tuple`8
  - System.ValueTuple
  - System.ValueTuple`1
  - System.ValueTuple`2
  - System.ValueTuple`3
  - System.ValueTuple`4
  - System.ValueTuple`5
  - System.ValueTuple`6
  - System.ValueTuple`7
  - System.ValueTuple`8
  - System.Collections.Immutable.ImmutableArray`1
  implements: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralEquatable.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  id: Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  langs:
  - csharp
  name: Equals(Object, IEqualityComparer)
  nameWithType: IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: IStructuralEquatable.Equals(Object, IEqualityComparer)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  - FSharp.Core
  namespace: System.Collections
  summary: Determines whether an object is structurally equal to the current instance.
  remarks: The <xref:System.Collections.IStructuralEquatable.Equals%2A> method supports custom structural comparison of array and tuple objects. This method in turn calls the `comparer` object's <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> method to compare individual array elements or tuple components, starting with the first element or component. The individual calls to <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> end and the <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=fullName> method returns a value either when a method call returns `false` or after all array elements or tuple components have been compared.
  example:
  - "The default equality comparer, `EqualityComparer<Object>.Default.Equals`, considers two `NaN` values to be equal. However, in some cases, you may want the comparison of `NaN` values for equality to return `false`, which indicates that the values cannot be compared. The following example defines a `NanComparer` class that implements the <xref:System.Collections.IStructuralEquatable> interface. It compares two <xref:System.Double> or two <xref:System.Single> values by using the equality operator. It passes values of any other type to the default equality comparer.  \n  \n [!code-csharp[System.Collections.IStructuralEquatable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#1)]\n [!code-vb[System.Collections.IStructuralEquatable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#1)]  \n  \n The following example creates two identical 3-tuple objects whose components consist of three <xref:System.Double> values. The value of the second component is <xref:System.Double.NaN?displayProperty=fullName>. The example then calls the <xref:System.Tuple%603.Equals%2A?displayProperty=fullName> method, and it calls the <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=fullName> method three times. The first time, it passes the default equality comparer that is returned by the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> property. The second time, it passes the default equality comparer that is returned by the <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=fullName> property. The third time, it passes the custom `NanComparer` object. As the output from the example shows, the first three method calls return `true`, whereas the fourth call returns `false`.  \n  \n [!code-csharp[System.Collections.IStructuralEquatable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#2)]\n [!code-vb[System.Collections.IStructuralEquatable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#2)]"
  syntax:
    content: public bool Equals (object other, System.Collections.IEqualityComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: The object to compare with the current instance.
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object that determines whether the current instance and <code>other</code> are equal.
    return:
      type: System.Boolean
      description: '`true` if the two objects are equal; otherwise, `false`.'
  overload: System.Collections.IStructuralEquatable.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralEquatable.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  id: GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  langs:
  - csharp
  name: GetHashCode(IEqualityComparer)
  nameWithType: IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: IStructuralEquatable.GetHashCode(IEqualityComparer)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  - FSharp.Core
  namespace: System.Collections
  summary: Returns a hash code for the current instance.
  remarks: Implement this method to return customized hash codes for collection objects that correspond to the customized comparison for structural equality provided by the <xref:System.Collections.IStructuralEquatable.Equals%2A> method.
  syntax:
    content: public int GetHashCode (System.Collections.IEqualityComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object that computes the hash code of the current object.
    return:
      type: System.Int32
      description: The hash code for the current instance.
  overload: System.Collections.IStructuralEquatable.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralEquatable.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: Equals(Object, IEqualityComparer)
  nameWithType: IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: IStructuralEquatable.Equals(Object, IEqualityComparer)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: GetHashCode(IEqualityComparer)
  nameWithType: IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IStructuralEquatable.Equals*
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: Equals
  nameWithType: IStructuralEquatable.Equals
  fullName: IStructuralEquatable.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralEquatable.xml
- uid: System.Collections.IStructuralEquatable.GetHashCode*
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: GetHashCode
  nameWithType: IStructuralEquatable.GetHashCode
  fullName: IStructuralEquatable.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralEquatable.xml
