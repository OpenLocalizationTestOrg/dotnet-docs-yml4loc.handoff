{"nodes":[{"content":"Represents the method that will handle the <xref href=\"System.Windows.Input.AccessKeyManager.AccessKeyPressed\"></xref> attached event.","nodes":[{"pos":[0,134],"content":"Represents the method that will handle the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.AccessKeyManager.AccessKeyPressed\"&gt;&lt;/xref&gt;</ph> attached event.","source":"Represents the method that will handle the <xref href=\"System.Windows.Input.AccessKeyManager.AccessKeyPressed\"></xref> attached event."}],"pos":[454,589],"yaml":true},{"content":"Access keys in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are handled by a manager class that acts somewhat like a service for access keys, and forwards access key input to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system. Rather than handling access key pressed events specifically by attaching a handler for the <xref:System.Windows.Input.AccessKeyManager.AccessKeyPressed> attached event on a specific object, it is generally a better practice to associate the access key with a particular command through a command binding, and then handle the routed commands through the corresponding routed events. This technique provides a unified event system for user input regardless of what input mode initiated the input. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"pos":[0,879],"content":"Access keys in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are handled by a manager class that acts somewhat like a service for access keys, and forwards access key input to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system. Rather than handling access key pressed events specifically by attaching a handler for the <xref:System.Windows.Input.AccessKeyManager.AccessKeyPressed> attached event on a specific object, it is generally a better practice to associate the access key with a particular command through a command binding, and then handle the routed commands through the corresponding routed events. This technique provides a unified event system for user input regardless of what input mode initiated the input. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Access keys in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> are handled by a manager class that acts somewhat like a service for access keys, and forwards access key input to the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> input system.","pos":[0,291],"source":"Access keys in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are handled by a manager class that acts somewhat like a service for access keys, and forwards access key input to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system."},{"content":"Rather than handling access key pressed events specifically by attaching a handler for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.AccessKeyManager.AccessKeyPressed&gt;</ph> attached event on a specific object, it is generally a better practice to associate the access key with a particular command through a command binding, and then handle the routed commands through the corresponding routed events.","pos":[292,673],"source":" Rather than handling access key pressed events specifically by attaching a handler for the <xref:System.Windows.Input.AccessKeyManager.AccessKeyPressed> attached event on a specific object, it is generally a better practice to associate the access key with a particular command through a command binding, and then handle the routed commands through the corresponding routed events."},{"content":"This technique provides a unified event system for user input regardless of what input mode initiated the input.","pos":[674,786]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[787,879],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]}],"pos":[600,1480],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.AccessKeyPressedEventHandler\n  commentId: T:System.Windows.Input.AccessKeyPressedEventHandler\n  id: AccessKeyPressedEventHandler\n  langs:\n  - csharp\n  name: AccessKeyPressedEventHandler\n  nameWithType: AccessKeyPressedEventHandler\n  fullName: System.Windows.Input.AccessKeyPressedEventHandler\n  type: Delegate\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Represents the method that will handle the <xref href=\"System.Windows.Input.AccessKeyManager.AccessKeyPressed\"></xref> attached event.\n  remarks: Access keys in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are handled by a manager class that acts somewhat like a service for access keys, and forwards access key input to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system. Rather than handling access key pressed events specifically by attaching a handler for the <xref:System.Windows.Input.AccessKeyManager.AccessKeyPressed> attached event on a specific object, it is generally a better practice to associate the access key with a particular command through a command binding, and then handle the routed commands through the corresponding routed events. This technique provides a unified event system for user input regardless of what input mode initiated the input. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).\n  syntax:\n    content: public delegate void AccessKeyPressedEventHandler(object sender, AccessKeyPressedEventArgs e);\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/AccessKeyPressedEventHandler.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}