{"nodes":[{"content":"Exposes a stream around an anonymous pipe, which supports both synchronous and asynchronous read and write operations.","nodes":[{"pos":[0,118],"content":"Exposes a stream around an anonymous pipe, which supports both synchronous and asynchronous read and write operations.","nodes":[{"content":"Exposes a stream around an anonymous pipe, which supports both synchronous and asynchronous read and write operations.","pos":[0,118]}]}],"pos":[1614,1733],"yaml":true},{"content":"Anonymous pipes help provide safe and secure interprocess communication between child and parent processes. The <xref:System.IO.Pipes.AnonymousPipeServerStream> class enables a parent process to send or receive information from a child process.  \n  \n Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes. Anonymous pipes are always local; they cannot be used over a network. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.  \n  \n Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode.Message> read modes.  \n  \n The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A> method. The string is then passed as a parameter when creating the client process. From the client process, it is then passed to the <xref:System.IO.Pipes.AnonymousPipeClientStream> constructor as the `pipeHandleAsString` parameter.  \n  \n The <xref:System.IO.Pipes.AnonymousPipeServerStream> object must dispose the client handle using the <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method in order to be notified when the client exits.  \n  \n> [!NOTE]\n>  For [!INCLUDE[winxppro](~/includes/winxppro-md.md)] and [!INCLUDE[win2kserver](~/includes/win2kserver-md.md)], a maximum of 10 pipes can simultaneously connect over the network.","nodes":[{"pos":[0,244],"content":"Anonymous pipes help provide safe and secure interprocess communication between child and parent processes. The <xref:System.IO.Pipes.AnonymousPipeServerStream> class enables a parent process to send or receive information from a child process.","nodes":[{"content":"Anonymous pipes help provide safe and secure interprocess communication between child and parent processes. The <xref:System.IO.Pipes.AnonymousPipeServerStream> class enables a parent process to send or receive information from a child process.","pos":[0,244],"nodes":[{"content":"Anonymous pipes help provide safe and secure interprocess communication between child and parent processes.","pos":[0,107]},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> class enables a parent process to send or receive information from a child process.","pos":[108,244],"source":" The <xref:System.IO.Pipes.AnonymousPipeServerStream> class enables a parent process to send or receive information from a child process."}]}]},{"pos":[251,587],"content":"Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes. Anonymous pipes are always local; they cannot be used over a network. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.","nodes":[{"content":"Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes. Anonymous pipes are always local; they cannot be used over a network. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.","pos":[0,336],"nodes":[{"content":"Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes.","pos":[0,107]},{"content":"Anonymous pipes are always local; they cannot be used over a network.","pos":[108,177]},{"content":"A <ph id=\"ph1\">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id=\"ph2\">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.","pos":[178,336],"source":" A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way."}]}]},{"pos":[594,688],"content":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode.Message> read modes.","nodes":[{"content":"Anonymous pipes do not support <ph id=\"ph1\">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> read modes.","pos":[0,94],"source":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode.Message> read modes."}]},{"pos":[695,1118],"content":"The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A> method. The string is then passed as a parameter when creating the client process. From the client process, it is then passed to the <xref:System.IO.Pipes.AnonymousPipeClientStream> constructor as the `pipeHandleAsString` parameter.","nodes":[{"content":"The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A&gt;</ph> method.","pos":[0,198],"source":"The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A> method."},{"content":"The string is then passed as a parameter when creating the client process.","pos":[199,273]},{"content":"From the client process, it is then passed to the <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> constructor as the <ph id=\"ph2\">`pipeHandleAsString`</ph> parameter.","pos":[274,423],"source":" From the client process, it is then passed to the <xref:System.IO.Pipes.AnonymousPipeClientStream> constructor as the `pipeHandleAsString` parameter."}]},{"pos":[1125,1362],"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream> object must dispose the client handle using the <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method in order to be notified when the client exits.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object must dispose the client handle using the <ph id=\"ph2\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt;</ph> method in order to be notified when the client exits.","pos":[0,237],"source":"The <xref:System.IO.Pipes.AnonymousPipeServerStream> object must dispose the client handle using the <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method in order to be notified when the client exits."}]},{"pos":[1370,1558],"content":"[!NOTE]\n For [!INCLUDE[winxppro](~/includes/winxppro-md.md)] and [!INCLUDE[win2kserver](~/includes/win2kserver-md.md)], a maximum of 10 pipes can simultaneously connect over the network.","leadings":["","> "],"nodes":[{"content":"For <ph id=\"ph1\">[!INCLUDE[winxppro](~/includes/winxppro-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[win2kserver](~/includes/win2kserver-md.md)]</ph>, a maximum of 10 pipes can simultaneously connect over the network.","pos":[9,186],"source":" For [!INCLUDE[winxppro](~/includes/winxppro-md.md)] and [!INCLUDE[win2kserver](~/includes/win2kserver-md.md)], a maximum of 10 pipes can simultaneously connect over the network."}]}],"pos":[1744,3316],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class.","nodes":[{"pos":[0,103],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class."}],"pos":[9733,9837],"yaml":true},{"content":"For <xref:System.IO.Pipes.AnonymousPipeServerStream> constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection.Out>. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.  \n  \n This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability.None>.","nodes":[{"pos":[0,349],"content":"For <xref:System.IO.Pipes.AnonymousPipeServerStream> constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection.Out>. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.","nodes":[{"content":"For <xref:System.IO.Pipes.AnonymousPipeServerStream> constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection.Out>. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.","pos":[0,349],"nodes":[{"content":"For <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> constructors without a <ph id=\"ph2\">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> parameter, the default direction is <ph id=\"ph3\">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>.","pos":[0,190],"source":"For <xref:System.IO.Pipes.AnonymousPipeServerStream> constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection.Out>."},{"content":"A <ph id=\"ph1\">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id=\"ph2\">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.","pos":[191,349],"source":" A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way."}]}]},{"pos":[356,588],"content":"This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability.None>.","nodes":[{"content":"This constructor creates an <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object that has the default buffer size, no pipe security, and a <ph id=\"ph2\">&lt;xref:System.IO.HandleInheritability&gt;</ph> value of <ph id=\"ph3\">&lt;xref:System.IO.HandleInheritability.None&gt;</ph>.","pos":[0,232],"source":"This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability.None>."}]}],"pos":[9848,10441],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction.","nodes":[{"pos":[0,137],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;&lt;/xref&gt;</ph> class with the specified pipe direction.","source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction."}],"pos":[12031,12169],"yaml":true},{"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.  \n  \n This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability.None>.","nodes":[{"pos":[0,158],"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id=\"ph2\">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.","pos":[0,158],"source":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way."}]},{"pos":[165,397],"content":"This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability.None>.","nodes":[{"content":"This constructor creates an <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object that has the default buffer size, no pipe security, and a <ph id=\"ph2\">&lt;xref:System.IO.HandleInheritability&gt;</ph> value of <ph id=\"ph3\">&lt;xref:System.IO.HandleInheritability.None&gt;</ph>.","pos":[0,232],"source":"This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability.None>."}]}],"pos":[12180,12582],"yaml":true,"extradata":"MT"},{"content":"One of the enumeration values that determines the direction of the pipe.  \n  \n Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.","nodes":[{"pos":[0,72],"content":"One of the enumeration values that determines the direction of the pipe.","nodes":[{"content":"One of the enumeration values that determines the direction of the pipe.","pos":[0,72]}]},{"pos":[79,225],"content":"Anonymous pipes can only be in one direction, so <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">direction</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be set to <ph id=\"ph2\">&lt;xref href=\"System.IO.Pipes.PipeDirection.InOut\"&gt;&lt;/xref&gt;</ph>.","source":"Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>."}],"pos":[12778,13010],"yaml":true},{"content":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;direction&lt;/code&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.IO.Pipes.PipeDirection.InOut\"&gt;&lt;/xref&gt;</ph>.","source":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>."}],"pos":[13187,13278],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction and inheritability mode.","nodes":[{"pos":[0,161],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;&lt;/xref&gt;</ph> class with the specified pipe direction and inheritability mode.","source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction and inheritability mode."}],"pos":[14870,15032],"yaml":true},{"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.  \n  \n This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size and no pipe security.","nodes":[{"pos":[0,158],"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id=\"ph2\">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.","pos":[0,158],"source":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way."}]},{"pos":[165,303],"content":"This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size and no pipe security.","nodes":[{"content":"This constructor creates an <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object that has the default buffer size and no pipe security.","pos":[0,138],"source":"This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size and no pipe security."}]}],"pos":[15043,15351],"yaml":true,"extradata":"MT"},{"content":"One of the enumeration values that determines the direction of the pipe.  \n  \n Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.","nodes":[{"pos":[0,72],"content":"One of the enumeration values that determines the direction of the pipe.","nodes":[{"content":"One of the enumeration values that determines the direction of the pipe.","pos":[0,72]}]},{"pos":[79,225],"content":"Anonymous pipes can only be in one direction, so <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">direction</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be set to <ph id=\"ph2\">&lt;xref href=\"System.IO.Pipes.PipeDirection.InOut\"&gt;&lt;/xref&gt;</ph>.","source":"Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>."}],"pos":[16499,16731],"yaml":true},{"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>.","nodes":[{"pos":[0,259],"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>.","nodes":[{"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes.","pos":[0,112]},{"content":"Must be set to either <ph id=\"ph1\">&lt;xref href=\"System.IO.HandleInheritability.None\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.IO.HandleInheritability.Inheritable\"&gt;&lt;/xref&gt;</ph>.","pos":[113,259],"source":" Must be set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>."}]}],"pos":[16818,17078],"yaml":true},{"content":"<code>inheritability</code> is not set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>.","nodes":[{"pos":[0,173],"content":"<ph id=\"ph1\">&lt;code&gt;inheritability&lt;/code&gt;</ph> is not set to either <ph id=\"ph2\">&lt;xref href=\"System.IO.HandleInheritability.None\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.IO.HandleInheritability.Inheritable\"&gt;&lt;/xref&gt;</ph>.","source":"<code>inheritability</code> is not set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>."}],"pos":[17267,17441],"yaml":true},{"content":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;direction&lt;/code&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.IO.Pipes.PipeDirection.InOut\"&gt;&lt;/xref&gt;</ph>.","source":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>."}],"pos":[17543,17634],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class from the specified pipe handles.","nodes":[{"pos":[0,135],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;&lt;/xref&gt;</ph> class from the specified pipe handles.","source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class from the specified pipe handles."}],"pos":[19421,19557],"yaml":true},{"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.","nodes":[{"pos":[0,158],"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id=\"ph2\">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.","pos":[0,158],"source":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way."}]}],"pos":[19568,19727],"yaml":true,"extradata":"MT"},{"content":"One of the enumeration values that determines the direction of the pipe.  \n  \n Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.","nodes":[{"pos":[0,72],"content":"One of the enumeration values that determines the direction of the pipe.","nodes":[{"content":"One of the enumeration values that determines the direction of the pipe.","pos":[0,72]}]},{"pos":[79,225],"content":"Anonymous pipes can only be in one direction, so <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">direction</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be set to <ph id=\"ph2\">&lt;xref href=\"System.IO.Pipes.PipeDirection.InOut\"&gt;&lt;/xref&gt;</ph>.","source":"Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>."}],"pos":[20053,20285],"yaml":true},{"content":"A safe handle for the pipe that this <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object will encapsulate.","nodes":[{"pos":[0,124],"content":"A safe handle for the pipe that this <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;&lt;/xref&gt;</ph> object will encapsulate.","source":"A safe handle for the pipe that this <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object will encapsulate."}],"pos":[20390,20515],"yaml":true},{"content":"A safe handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object.","nodes":[{"pos":[0,92],"content":"A safe handle for the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;&lt;/xref&gt;</ph> object.","source":"A safe handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object."}],"pos":[20620,20713],"yaml":true},{"content":"<code>serverSafePipeHandle</code> or <code>clientSafePipeHandle</code> is an invalid handle.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">&lt;code&gt;serverSafePipeHandle&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;clientSafePipeHandle&lt;/code&gt;</ph> is an invalid handle.","source":"<code>serverSafePipeHandle</code> or <code>clientSafePipeHandle</code> is an invalid handle."}],"pos":[20882,20975],"yaml":true},{"content":"<code>serverSafePipeHandle</code> or <code>clientSafePipeHandle</code> is `null`.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;serverSafePipeHandle&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;clientSafePipeHandle&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>serverSafePipeHandle</code> or <code>clientSafePipeHandle</code> is `null`."}],"pos":[21077,21159],"yaml":true},{"content":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;direction&lt;/code&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.IO.Pipes.PipeDirection.InOut\"&gt;&lt;/xref&gt;</ph>.","source":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>."}],"pos":[21261,21352],"yaml":true},{"content":"An I/O error, such as a disk error, has occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,49],"content":"An I/O error, such as a disk error, has occurred.","nodes":[{"content":"An I/O error, such as a disk error, has occurred.","pos":[0,49]}]},{"pos":[56,60],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[67,94],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[21440,21541],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction, inheritability mode, and buffer size.","nodes":[{"pos":[0,175],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;&lt;/xref&gt;</ph> class with the specified pipe direction, inheritability mode, and buffer size.","source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction, inheritability mode, and buffer size."}],"pos":[23193,23369],"yaml":true},{"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.  \n  \n This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object without pipe security.","nodes":[{"pos":[0,158],"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id=\"ph2\">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.","pos":[0,158],"source":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way."}]},{"pos":[165,271],"content":"This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object without pipe security.","nodes":[{"content":"This constructor creates an <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object without pipe security.","pos":[0,106],"source":"This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object without pipe security."}]}],"pos":[23380,23656],"yaml":true,"extradata":"MT"},{"content":"One of the enumeration values that determines the direction of the pipe.  \n  \n Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.","nodes":[{"pos":[0,72],"content":"One of the enumeration values that determines the direction of the pipe.","nodes":[{"content":"One of the enumeration values that determines the direction of the pipe.","pos":[0,72]}]},{"pos":[79,225],"content":"Anonymous pipes can only be in one direction, so <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">direction</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be set to <ph id=\"ph2\">&lt;xref href=\"System.IO.Pipes.PipeDirection.InOut\"&gt;&lt;/xref&gt;</ph>.","source":"Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>."}],"pos":[23915,24147],"yaml":true},{"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>.","nodes":[{"pos":[0,259],"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>.","nodes":[{"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes.","pos":[0,112]},{"content":"Must be set to either <ph id=\"ph1\">&lt;xref href=\"System.IO.HandleInheritability.None\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.IO.HandleInheritability.Inheritable\"&gt;&lt;/xref&gt;</ph>.","pos":[113,259],"source":" Must be set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>."}]}],"pos":[24234,24494],"yaml":true},{"content":"The size of the buffer. This value must be greater than or equal to 0.","nodes":[{"pos":[0,70],"content":"The size of the buffer. This value must be greater than or equal to 0.","nodes":[{"content":"The size of the buffer. This value must be greater than or equal to 0.","pos":[0,70],"nodes":[{"content":"The size of the buffer.","pos":[0,23]},{"content":"This value must be greater than or equal to 0.","pos":[24,70]}]}]}],"pos":[24559,24630],"yaml":true},{"content":"<code>inheritability</code> is not set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>.  \n  \n -or-  \n  \n <code>bufferSize</code> is less than 0.","nodes":[{"pos":[0,173],"content":"<ph id=\"ph1\">&lt;code&gt;inheritability&lt;/code&gt;</ph> is not set to either <ph id=\"ph2\">&lt;xref href=\"System.IO.HandleInheritability.None\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.IO.HandleInheritability.Inheritable\"&gt;&lt;/xref&gt;</ph>.","source":"<code>inheritability</code> is not set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>."},{"pos":[180,184],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[191,230],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is less than 0.","source":"<code>bufferSize</code> is less than 0."}],"pos":[24819,25060],"yaml":true},{"content":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;direction&lt;/code&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.IO.Pipes.PipeDirection.InOut\"&gt;&lt;/xref&gt;</ph>.","source":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>."}],"pos":[25162,25253],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction, inheritability mode, buffer size, and pipe security.","nodes":[{"pos":[0,190],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;&lt;/xref&gt;</ph> class with the specified pipe direction, inheritability mode, buffer size, and pipe security.","source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction, inheritability mode, buffer size, and pipe security."}],"pos":[26998,27189],"yaml":true},{"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.","nodes":[{"pos":[0,158],"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id=\"ph2\">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.","pos":[0,158],"source":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way."}]}],"pos":[27200,27359],"yaml":true,"extradata":"MT"},{"content":"One of the enumeration values that determines the direction of the pipe.  \n  \n Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.","nodes":[{"pos":[0,72],"content":"One of the enumeration values that determines the direction of the pipe.","nodes":[{"content":"One of the enumeration values that determines the direction of the pipe.","pos":[0,72]}]},{"pos":[79,225],"content":"Anonymous pipes can only be in one direction, so <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">direction</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be set to <ph id=\"ph2\">&lt;xref href=\"System.IO.Pipes.PipeDirection.InOut\"&gt;&lt;/xref&gt;</ph>.","source":"Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>."}],"pos":[27661,27893],"yaml":true},{"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes.","nodes":[{"pos":[0,112],"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes.","nodes":[{"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes.","pos":[0,112]}]}],"pos":[27980,28093],"yaml":true},{"content":"The size of the buffer. This value must be greater than or equal to 0.","nodes":[{"pos":[0,70],"content":"The size of the buffer. This value must be greater than or equal to 0.","nodes":[{"content":"The size of the buffer. This value must be greater than or equal to 0.","pos":[0,70],"nodes":[{"content":"The size of the buffer.","pos":[0,23]},{"content":"This value must be greater than or equal to 0.","pos":[24,70]}]}]}],"pos":[28158,28229],"yaml":true},{"content":"An object that determines the access control and audit security for the pipe.","nodes":[{"pos":[0,77],"content":"An object that determines the access control and audit security for the pipe.","nodes":[{"content":"An object that determines the access control and audit security for the pipe.","pos":[0,77]}]}],"pos":[28312,28390],"yaml":true},{"content":"<code>inheritability</code> is not set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>.  \n  \n -or-  \n  \n <code>bufferSize</code> is less than 0.","nodes":[{"pos":[0,173],"content":"<ph id=\"ph1\">&lt;code&gt;inheritability&lt;/code&gt;</ph> is not set to either <ph id=\"ph2\">&lt;xref href=\"System.IO.HandleInheritability.None\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.IO.HandleInheritability.Inheritable\"&gt;&lt;/xref&gt;</ph>.","source":"<code>inheritability</code> is not set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>."},{"pos":[180,184],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[191,230],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is less than 0.","source":"<code>bufferSize</code> is less than 0."}],"pos":[28579,28820],"yaml":true},{"content":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;direction&lt;/code&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.IO.Pipes.PipeDirection.InOut\"&gt;&lt;/xref&gt;</ph>.","source":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>."}],"pos":[28922,29013],"yaml":true},{"content":"Gets the safe handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object that is currently connected to the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object.","nodes":[{"pos":[0,204],"content":"Gets the safe handle for the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;&lt;/xref&gt;</ph> object that is currently connected to the <ph id=\"ph2\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the safe handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object that is currently connected to the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object."}],"pos":[30197,30402],"yaml":true},{"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","nodes":[{"pos":[0,357],"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","nodes":[{"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","pos":[0,357],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt;</ph> method should be called after a client handle has been passed to a client process.","pos":[0,169],"source":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process."},{"content":"If this method is not called, the <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object will not receive notice when the client disposes of its <ph id=\"ph2\">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object.","pos":[170,357],"source":" If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object."}]}]}],"pos":[30413,30771],"yaml":true,"extradata":"MT"},{"content":"A handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object that is currently connected to the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object.","nodes":[{"pos":[0,192],"content":"A handle for the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;&lt;/xref&gt;</ph> object that is currently connected to the <ph id=\"ph2\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;&lt;/xref&gt;</ph> object.","source":"A handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object that is currently connected to the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object."}],"pos":[30960,31153],"yaml":true},{"content":"Closes the local copy of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle.","nodes":[{"pos":[0,108],"content":"Closes the local copy of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;&lt;/xref&gt;</ph> object's handle.","source":"Closes the local copy of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle."}],"pos":[33954,34063],"yaml":true},{"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after the client handle has been passed to the client. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","nodes":[{"pos":[0,353],"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after the client handle has been passed to the client. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","nodes":[{"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after the client handle has been passed to the client. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","pos":[0,353],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt;</ph> method should be called after the client handle has been passed to the client.","pos":[0,165],"source":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after the client handle has been passed to the client."},{"content":"If this method is not called, the <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object will not receive notice when the client disposes of its <ph id=\"ph2\">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object.","pos":[166,353],"source":" If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object."}]}]}],"pos":[34074,34428],"yaml":true,"extradata":"MT"},{"content":"Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> instance is reclaimed by garbage collection.","nodes":[{"pos":[0,185],"content":"Releases unmanaged resources and performs other cleanup operations before the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;&lt;/xref&gt;</ph> instance is reclaimed by garbage collection.","source":"Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> instance is reclaimed by garbage collection."}],"pos":[36761,36947],"yaml":true},{"content":"Gets the connected <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle as a string.","nodes":[{"pos":[0,110],"content":"Gets the connected <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;&lt;/xref&gt;</ph> object's handle as a string.","source":"Gets the connected <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle as a string."}],"pos":[38403,38514],"yaml":true},{"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","nodes":[{"pos":[0,357],"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","nodes":[{"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","pos":[0,357],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt;</ph> method should be called after a client handle has been passed to a client process.","pos":[0,169],"source":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process."},{"content":"If this method is not called, the <ph id=\"ph1\">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object will not receive notice when the client disposes of its <ph id=\"ph2\">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object.","pos":[170,357],"source":" If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object."}]}]}],"pos":[38525,38883],"yaml":true,"extradata":"MT"},{"content":"A string that represents the connected <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle.","nodes":[{"pos":[0,118],"content":"A string that represents the connected <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;&lt;/xref&gt;</ph> object's handle.","source":"A string that represents the connected <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle."}],"pos":[39929,40048],"yaml":true},{"content":"Sets the reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object. For anonymous pipes, transmission mode must be <xref href=\"System.IO.Pipes.PipeTransmissionMode.Byte\"></xref>.","nodes":[{"pos":[0,211],"content":"Sets the reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object. For anonymous pipes, transmission mode must be <xref href=\"System.IO.Pipes.PipeTransmissionMode.Byte\"></xref>.","nodes":[{"content":"Sets the reading mode for the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,100],"source":"Sets the reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object."},{"content":"For anonymous pipes, transmission mode must be <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.PipeTransmissionMode.Byte\"&gt;&lt;/xref&gt;</ph>.","pos":[101,211],"source":" For anonymous pipes, transmission mode must be <xref href=\"System.IO.Pipes.PipeTransmissionMode.Byte\"></xref>."}]}],"pos":[41392,41604],"yaml":true},{"content":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode.Message> read mode.","nodes":[{"pos":[0,93],"content":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode.Message> read mode.","nodes":[{"content":"Anonymous pipes do not support <ph id=\"ph1\">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> read mode.","pos":[0,93],"source":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode.Message> read mode."}]}],"pos":[41615,41709],"yaml":true,"extradata":"MT"},{"content":"The reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object.","nodes":[{"pos":[0,95],"content":"The reading mode for the <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;&lt;/xref&gt;</ph> object.","source":"The reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object."}],"pos":[42795,42891],"yaml":true},{"content":"The transmission mode is not valid. For anonymous pipes, only <xref href=\"System.IO.Pipes.PipeTransmissionMode.Byte\"></xref> is supported.","nodes":[{"pos":[0,138],"content":"The transmission mode is not valid. For anonymous pipes, only <xref href=\"System.IO.Pipes.PipeTransmissionMode.Byte\"></xref> is supported.","nodes":[{"content":"The transmission mode is not valid.","pos":[0,35]},{"content":"For anonymous pipes, only <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.PipeTransmissionMode.Byte\"&gt;&lt;/xref&gt;</ph> is supported.","pos":[36,138],"source":" For anonymous pipes, only <xref href=\"System.IO.Pipes.PipeTransmissionMode.Byte\"></xref> is supported."}]}],"pos":[43083,43222],"yaml":true},{"content":"The property is set to <xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\"></xref>, which is not supported for anonymous pipes.","nodes":[{"pos":[0,133],"content":"The property is set to <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\"&gt;&lt;/xref&gt;</ph>, which is not supported for anonymous pipes.","source":"The property is set to <xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\"></xref>, which is not supported for anonymous pipes."}],"pos":[43324,43458],"yaml":true},{"content":"The connection is broken or another I/O error occurs.","nodes":[{"pos":[0,53],"content":"The connection is broken or another I/O error occurs.","nodes":[{"content":"The connection is broken or another I/O error occurs.","pos":[0,53]}]}],"pos":[43546,43600],"yaml":true},{"content":"The pipe is closed.","nodes":[{"pos":[0,19],"content":"The pipe is closed.","nodes":[{"content":"The pipe is closed.","pos":[0,19]}]}],"pos":[43706,43726],"yaml":true},{"content":"Gets the pipe transmission mode that is supported by the current pipe.","nodes":[{"pos":[0,70],"content":"Gets the pipe transmission mode that is supported by the current pipe.","nodes":[{"content":"Gets the pipe transmission mode that is supported by the current pipe.","pos":[0,70]}]}],"pos":[45022,45093],"yaml":true},{"content":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode.Message> read mode.","nodes":[{"pos":[0,93],"content":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode.Message> read mode.","nodes":[{"content":"Anonymous pipes do not support <ph id=\"ph1\">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> read mode.","pos":[0,93],"source":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode.Message> read mode."}]}],"pos":[45104,45198],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> that is supported by the current pipe.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.Pipes.PipeTransmissionMode\"&gt;&lt;/xref&gt;</ph> that is supported by the current pipe.","source":"The <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> that is supported by the current pipe."}],"pos":[46305,46406],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.Pipes.AnonymousPipeServerStream\n  commentId: T:System.IO.Pipes.AnonymousPipeServerStream\n  id: AnonymousPipeServerStream\n  children:\n  - System.IO.Pipes.AnonymousPipeServerStream.#ctor\n  - System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)\n  - System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)\n  - System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)\n  - System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)\n  - System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)\n  - System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle\n  - System.IO.Pipes.AnonymousPipeServerStream.Dispose(System.Boolean)\n  - System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle\n  - System.IO.Pipes.AnonymousPipeServerStream.Finalize\n  - System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString\n  - System.IO.Pipes.AnonymousPipeServerStream.ReadMode\n  - System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream\n  nameWithType: AnonymousPipeServerStream\n  fullName: System.IO.Pipes.AnonymousPipeServerStream\n  type: Class\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  - netstandard\n  namespace: System.IO.Pipes\n  summary: Exposes a stream around an anonymous pipe, which supports both synchronous and asynchronous read and write operations.\n  remarks: \"Anonymous pipes help provide safe and secure interprocess communication between child and parent processes. The <xref:System.IO.Pipes.AnonymousPipeServerStream> class enables a parent process to send or receive information from a child process.  \\n  \\n Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes. Anonymous pipes are always local; they cannot be used over a network. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.  \\n  \\n Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode.Message> read modes.  \\n  \\n The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A> method. The string is then passed as a parameter when creating the client process. From the client process, it is then passed to the <xref:System.IO.Pipes.AnonymousPipeClientStream> constructor as the `pipeHandleAsString` parameter.  \\n  \\n The <xref:System.IO.Pipes.AnonymousPipeServerStream> object must dispose the client handle using the <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method in order to be notified when the client exits.  \\n  \\n> [!NOTE]\\n>  For [!INCLUDE[winxppro](~/includes/winxppro-md.md)] and [!INCLUDE[win2kserver](~/includes/win2kserver-md.md)], a maximum of 10 pipes can simultaneously connect over the network.\"\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process using anonymous pipes. This example creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object in a parent process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.Out>. It also creates an <xref:System.IO.Pipes.AnonymousPipeClientStream> object in a child process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.In>. The parent process then sends a user-supplied string to the child process. The string is displayed to the console.  \\n  \\n This example is for the server process, which uses the <xref:System.IO.Pipes.AnonymousPipeServerStream> class. For the entire code example, including the code for both the pipe client and server, see [How to: Use Anonymous Pipes for Local Interprocess Communication](~/docs/standard/io/how-to-use-anonymous-pipes-for-local-interprocess-communication.md).  \\n  \\n [!code-cpp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/cpp/program.cpp#01)]\\n [!code-csharp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/cs/Program.cs#01)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/vb/program.vb#01)]\"\n  syntax:\n    content: 'public sealed class AnonymousPipeServerStream : System.IO.Pipes.PipeStream'\n  inheritance:\n  - System.Object\n  - System.IO.Stream\n  - System.IO.Pipes.PipeStream\n  implements: []\n  inheritedMembers:\n  - System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Pipes.PipeStream.CanRead\n  - System.IO.Pipes.PipeStream.CanSeek\n  - System.IO.Pipes.PipeStream.CanWrite\n  - System.IO.Pipes.PipeStream.CheckPipePropertyOperations\n  - System.IO.Pipes.PipeStream.CheckReadOperations\n  - System.IO.Pipes.PipeStream.CheckWriteOperations\n  - System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)\n  - System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)\n  - System.IO.Pipes.PipeStream.Flush\n  - System.IO.Pipes.PipeStream.GetAccessControl\n  - System.IO.Pipes.PipeStream.InBufferSize\n  - System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)\n  - System.IO.Pipes.PipeStream.IsAsync\n  - System.IO.Pipes.PipeStream.IsConnected\n  - System.IO.Pipes.PipeStream.IsHandleExposed\n  - System.IO.Pipes.PipeStream.IsMessageComplete\n  - System.IO.Pipes.PipeStream.Length\n  - System.IO.Pipes.PipeStream.OutBufferSize\n  - System.IO.Pipes.PipeStream.Position\n  - System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Pipes.PipeStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Pipes.PipeStream.ReadByte\n  - System.IO.Pipes.PipeStream.SafePipeHandle\n  - System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)\n  - System.IO.Pipes.PipeStream.SetLength(System.Int64)\n  - System.IO.Pipes.PipeStream.WaitForPipeDrain\n  - System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Pipes.PipeStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Pipes.PipeStream.WriteByte(System.Byte)\n  - System.IO.Stream.CanTimeout\n  - System.IO.Stream.Close\n  - System.IO.Stream.CopyTo(System.IO.Stream)\n  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.CreateWaitHandle\n  - System.IO.Stream.Dispose\n  - System.IO.Stream.FlushAsync\n  - System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  - System.IO.Stream.Null\n  - System.IO.Stream.ObjectInvariant\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadTimeout\n  - System.IO.Stream.Synchronized(System.IO.Stream)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteTimeout\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.IO.Pipes.PipesAclExtensions.GetAccessControl(System.IO.Pipes.PipeStream)\n  - System.IO.Pipes.PipesAclExtensions.SetAccessControl(System.IO.Pipes.PipeStream,System.IO.Pipes.PipeSecurity)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor\n  commentId: M:System.IO.Pipes.AnonymousPipeServerStream.#ctor\n  id: '#ctor'\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream()\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream()\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream()\n  type: Constructor\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  - netstandard\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class.\n  remarks: \"For <xref:System.IO.Pipes.AnonymousPipeServerStream> constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection.Out>. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.  \\n  \\n This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability.None>.\"\n  syntax:\n    content: public AnonymousPipeServerStream ();\n    parameters: []\n  overload: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)\n  commentId: M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)\n  id: '#ctor(System.IO.Pipes.PipeDirection)'\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream(PipeDirection)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection)\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection)\n  type: Constructor\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  - netstandard\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction.\n  remarks: \"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.  \\n  \\n This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability.None>.\"\n  syntax:\n    content: public AnonymousPipeServerStream (System.IO.Pipes.PipeDirection direction);\n    parameters:\n    - id: direction\n      type: System.IO.Pipes.PipeDirection\n      description: \"One of the enumeration values that determines the direction of the pipe.  \\n  \\n Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\\\"System.IO.Pipes.PipeDirection.InOut\\\"></xref>.\"\n  overload: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)\n  commentId: M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)\n  id: '#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)'\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream(PipeDirection, HandleInheritability)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, HandleInheritability)\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, HandleInheritability)\n  type: Constructor\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  - netstandard\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction and inheritability mode.\n  remarks: \"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.  \\n  \\n This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size and no pipe security.\"\n  example:\n  - \"The following example demonstrates a method to send a string from a parent process to a child process using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeServerStream> object is created in a parent process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.Out>.  \\n  \\n [!code-cpp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/cpp/program.cpp#01)]\\n [!code-csharp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/cs/Program.cs#01)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/vb/program.vb#01)]\"\n  syntax:\n    content: public AnonymousPipeServerStream (System.IO.Pipes.PipeDirection direction, System.IO.HandleInheritability inheritability);\n    parameters:\n    - id: direction\n      type: System.IO.Pipes.PipeDirection\n      description: \"One of the enumeration values that determines the direction of the pipe.  \\n  \\n Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\\\"System.IO.Pipes.PipeDirection.InOut\\\"></xref>.\"\n    - id: inheritability\n      type: System.IO.HandleInheritability\n      description: One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>inheritability</code> is not set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)\n  commentId: M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)\n  id: '#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)'\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream(PipeDirection, SafePipeHandle, SafePipeHandle)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, SafePipeHandle, SafePipeHandle)\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, SafePipeHandle, SafePipeHandle)\n  type: Constructor\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  - netstandard\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class from the specified pipe handles.\n  remarks: A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.\n  syntax:\n    content: public AnonymousPipeServerStream (System.IO.Pipes.PipeDirection direction, Microsoft.Win32.SafeHandles.SafePipeHandle serverSafePipeHandle, Microsoft.Win32.SafeHandles.SafePipeHandle clientSafePipeHandle);\n    parameters:\n    - id: direction\n      type: System.IO.Pipes.PipeDirection\n      description: \"One of the enumeration values that determines the direction of the pipe.  \\n  \\n Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\\\"System.IO.Pipes.PipeDirection.InOut\\\"></xref>.\"\n    - id: serverSafePipeHandle\n      type: Microsoft.Win32.SafeHandles.SafePipeHandle\n      description: A safe handle for the pipe that this <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object will encapsulate.\n    - id: clientSafePipeHandle\n      type: Microsoft.Win32.SafeHandles.SafePipeHandle\n      description: A safe handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>serverSafePipeHandle</code> or <code>clientSafePipeHandle</code> is an invalid handle.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>serverSafePipeHandle</code> or <code>clientSafePipeHandle</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as a disk error, has occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)\n  commentId: M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)\n  id: '#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)'\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream(PipeDirection, HandleInheritability, Int32)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, HandleInheritability, Int32)\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, HandleInheritability, Int32)\n  type: Constructor\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  - netstandard\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction, inheritability mode, and buffer size.\n  remarks: \"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.  \\n  \\n This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object without pipe security.\"\n  syntax:\n    content: public AnonymousPipeServerStream (System.IO.Pipes.PipeDirection direction, System.IO.HandleInheritability inheritability, int bufferSize);\n    parameters:\n    - id: direction\n      type: System.IO.Pipes.PipeDirection\n      description: \"One of the enumeration values that determines the direction of the pipe.  \\n  \\n Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\\\"System.IO.Pipes.PipeDirection.InOut\\\"></xref>.\"\n    - id: inheritability\n      type: System.IO.HandleInheritability\n      description: One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <xref href=\"System.IO.HandleInheritability.None\"></xref> or <xref href=\"System.IO.HandleInheritability.Inheritable\"></xref>.\n    - id: bufferSize\n      type: System.Int32\n      description: The size of the buffer. This value must be greater than or equal to 0.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>inheritability</code> is not set to either <xref href=\\\"System.IO.HandleInheritability.None\\\"></xref> or <xref href=\\\"System.IO.HandleInheritability.Inheritable\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>bufferSize</code> is less than 0.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)\n  commentId: M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)\n  id: '#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)'\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream(PipeDirection, HandleInheritability, Int32, PipeSecurity)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, HandleInheritability, Int32, PipeSecurity)\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, HandleInheritability, Int32, PipeSecurity)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction, inheritability mode, buffer size, and pipe security.\n  remarks: A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.InOut> is not supported because anonymous pipes are defined to be one-way.\n  syntax:\n    content: public AnonymousPipeServerStream (System.IO.Pipes.PipeDirection direction, System.IO.HandleInheritability inheritability, int bufferSize, System.IO.Pipes.PipeSecurity pipeSecurity);\n    parameters:\n    - id: direction\n      type: System.IO.Pipes.PipeDirection\n      description: \"One of the enumeration values that determines the direction of the pipe.  \\n  \\n Anonymous pipes can only be in one direction, so <code>direction</code> cannot be set to <xref href=\\\"System.IO.Pipes.PipeDirection.InOut\\\"></xref>.\"\n    - id: inheritability\n      type: System.IO.HandleInheritability\n      description: One of the enumeration values that determines whether the underlying handle can be inherited by child processes.\n    - id: bufferSize\n      type: System.Int32\n      description: The size of the buffer. This value must be greater than or equal to 0.\n    - id: pipeSecurity\n      type: System.IO.Pipes.PipeSecurity\n      description: An object that determines the access control and audit security for the pipe.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>inheritability</code> is not set to either <xref href=\\\"System.IO.HandleInheritability.None\\\"></xref> or <xref href=\\\"System.IO.HandleInheritability.Inheritable\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>bufferSize</code> is less than 0.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle\n  commentId: P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle\n  id: ClientSafePipeHandle\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: ClientSafePipeHandle\n  nameWithType: AnonymousPipeServerStream.ClientSafePipeHandle\n  fullName: AnonymousPipeServerStream.ClientSafePipeHandle\n  type: Property\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  - netstandard\n  namespace: System.IO.Pipes\n  summary: Gets the safe handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object that is currently connected to the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object.\n  remarks: The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.\n  syntax:\n    content: public Microsoft.Win32.SafeHandles.SafePipeHandle ClientSafePipeHandle { get; }\n    return:\n      type: Microsoft.Win32.SafeHandles.SafePipeHandle\n      description: A handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object that is currently connected to the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Pipes.AnonymousPipeServerStream.Dispose(System.Boolean)\n  commentId: M:System.IO.Pipes.AnonymousPipeServerStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: AnonymousPipeServerStream.Dispose(Boolean)\n  fullName: AnonymousPipeServerStream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  - netstandard\n  namespace: System.IO.Pipes\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.IO.Pipes.AnonymousPipeServerStream.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n- uid: System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle\n  commentId: M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle\n  id: DisposeLocalCopyOfClientHandle\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: DisposeLocalCopyOfClientHandle()\n  nameWithType: AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle()\n  fullName: AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle()\n  type: Method\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  - netstandard\n  namespace: System.IO.Pipes\n  summary: Closes the local copy of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle.\n  remarks: The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after the client handle has been passed to the client. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeServerStream> object is created in a parent process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.Out>.  \\n  \\n [!code-cpp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/cpp/program.cpp#01)]\\n [!code-csharp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/cs/Program.cs#01)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/vb/program.vb#01)]\"\n  syntax:\n    content: public void DisposeLocalCopyOfClientHandle ();\n    parameters: []\n  overload: System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Pipes.AnonymousPipeServerStream.Finalize\n  commentId: M:System.IO.Pipes.AnonymousPipeServerStream.Finalize\n  id: Finalize\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: AnonymousPipeServerStream.Finalize()\n  fullName: AnonymousPipeServerStream.Finalize()\n  type: Method\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> instance is reclaimed by garbage collection.\n  syntax:\n    content: ~AnonymousPipeServerStream ();\n    parameters: []\n  overload: System.IO.Pipes.AnonymousPipeServerStream.Finalize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString\n  commentId: M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString\n  id: GetClientHandleAsString\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: GetClientHandleAsString()\n  nameWithType: AnonymousPipeServerStream.GetClientHandleAsString()\n  fullName: AnonymousPipeServerStream.GetClientHandleAsString()\n  type: Method\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  - netstandard\n  namespace: System.IO.Pipes\n  summary: Gets the connected <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle as a string.\n  remarks: The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeServerStream> object is created in a parent process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection.Out>.  \\n  \\n [!code-cpp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/cpp/program.cpp#01)]\\n [!code-csharp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/cs/Program.cs#01)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/vb/program.vb#01)]\"\n  syntax:\n    content: public string GetClientHandleAsString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that represents the connected <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Pipes.AnonymousPipeServerStream.ReadMode\n  commentId: P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode\n  id: ReadMode\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: ReadMode\n  nameWithType: AnonymousPipeServerStream.ReadMode\n  fullName: AnonymousPipeServerStream.ReadMode\n  type: Property\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  - netstandard\n  namespace: System.IO.Pipes\n  summary: Sets the reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object. For anonymous pipes, transmission mode must be <xref href=\"System.IO.Pipes.PipeTransmissionMode.Byte\"></xref>.\n  remarks: Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode.Message> read mode.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, the <xref:System.NotSupportedException> is caught when the <xref:System.IO.Pipes.AnonymousPipeServerStream.ReadMode%2A> property is set to <xref:System.IO.Pipes.PipeTransmissionMode.Message>.  \\n  \\n [!code-cpp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/cpp/program.cpp#01)]\\n [!code-csharp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/cs/Program.cs#01)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/vb/program.vb#01)]\"\n  syntax:\n    content: public override System.IO.Pipes.PipeTransmissionMode ReadMode { set; }\n    return:\n      type: System.IO.Pipes.PipeTransmissionMode\n      description: The reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.ReadMode*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The transmission mode is not valid. For anonymous pipes, only <xref href=\"System.IO.Pipes.PipeTransmissionMode.Byte\"></xref> is supported.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The property is set to <xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\"></xref>, which is not supported for anonymous pipes.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The connection is broken or another I/O error occurs.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The pipe is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode\n  commentId: P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode\n  id: TransmissionMode\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: TransmissionMode\n  nameWithType: AnonymousPipeServerStream.TransmissionMode\n  fullName: AnonymousPipeServerStream.TransmissionMode\n  type: Property\n  assemblies:\n  - System.IO.Pipes\n  - System.Core\n  - netstandard\n  namespace: System.IO.Pipes\n  summary: Gets the pipe transmission mode that is supported by the current pipe.\n  remarks: Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode.Message> read mode.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeServerStream> object is created in a parent process and the <xref:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode%2A> property is displayed to the console.  \\n  \\n [!code-cpp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/cpp/program.cpp#01)]\\n [!code-csharp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/cs/Program.cs#01)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Pipes.AnonymousPipeServerStream_Sample/vb/program.vb#01)]\"\n  syntax:\n    content: public override System.IO.Pipes.PipeTransmissionMode TransmissionMode { get; }\n    return:\n      type: System.IO.Pipes.PipeTransmissionMode\n      description: The <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> that is supported by the current pipe.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.IO.Pipes.PipeStream\n  parent: System.IO.Pipes\n  isExternal: false\n  name: PipeStream\n  nameWithType: PipeStream\n  fullName: System.IO.Pipes.PipeStream\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream()\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream()\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream()\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream(PipeDirection)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection)\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection)\n- uid: System.IO.Pipes.PipeDirection\n  parent: System.IO.Pipes\n  isExternal: false\n  name: PipeDirection\n  nameWithType: PipeDirection\n  fullName: System.IO.Pipes.PipeDirection\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream(PipeDirection, HandleInheritability)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, HandleInheritability)\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, HandleInheritability)\n- uid: System.IO.HandleInheritability\n  parent: System.IO\n  isExternal: false\n  name: HandleInheritability\n  nameWithType: HandleInheritability\n  fullName: System.IO.HandleInheritability\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream(PipeDirection, SafePipeHandle, SafePipeHandle)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, SafePipeHandle, SafePipeHandle)\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, SafePipeHandle, SafePipeHandle)\n- uid: Microsoft.Win32.SafeHandles.SafePipeHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafePipeHandle\n  nameWithType: SafePipeHandle\n  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream(PipeDirection, HandleInheritability, Int32)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, HandleInheritability, Int32)\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, HandleInheritability, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream(PipeDirection, HandleInheritability, Int32, PipeSecurity)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, HandleInheritability, Int32, PipeSecurity)\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection, HandleInheritability, Int32, PipeSecurity)\n- uid: System.IO.Pipes.PipeSecurity\n  parent: System.IO.Pipes\n  isExternal: false\n  name: PipeSecurity\n  nameWithType: PipeSecurity\n  fullName: System.IO.Pipes.PipeSecurity\n- uid: System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: ClientSafePipeHandle\n  nameWithType: AnonymousPipeServerStream.ClientSafePipeHandle\n  fullName: AnonymousPipeServerStream.ClientSafePipeHandle\n- uid: System.IO.Pipes.AnonymousPipeServerStream.Dispose(System.Boolean)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: AnonymousPipeServerStream.Dispose(Boolean)\n  fullName: AnonymousPipeServerStream.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: DisposeLocalCopyOfClientHandle()\n  nameWithType: AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle()\n  fullName: AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle()\n- uid: System.IO.Pipes.AnonymousPipeServerStream.Finalize\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: Finalize()\n  nameWithType: AnonymousPipeServerStream.Finalize()\n  fullName: AnonymousPipeServerStream.Finalize()\n- uid: System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: GetClientHandleAsString()\n  nameWithType: AnonymousPipeServerStream.GetClientHandleAsString()\n  fullName: AnonymousPipeServerStream.GetClientHandleAsString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.Pipes.AnonymousPipeServerStream.ReadMode\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: ReadMode\n  nameWithType: AnonymousPipeServerStream.ReadMode\n  fullName: AnonymousPipeServerStream.ReadMode\n- uid: System.IO.Pipes.PipeTransmissionMode\n  parent: System.IO.Pipes\n  isExternal: false\n  name: PipeTransmissionMode\n  nameWithType: PipeTransmissionMode\n  fullName: System.IO.Pipes.PipeTransmissionMode\n- uid: System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: TransmissionMode\n  nameWithType: AnonymousPipeServerStream.TransmissionMode\n  fullName: AnonymousPipeServerStream.TransmissionMode\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream\n  fullName: AnonymousPipeServerStream.AnonymousPipeServerStream\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n- uid: System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: ClientSafePipeHandle\n  nameWithType: AnonymousPipeServerStream.ClientSafePipeHandle\n  fullName: AnonymousPipeServerStream.ClientSafePipeHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n- uid: System.IO.Pipes.AnonymousPipeServerStream.Dispose*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: Dispose\n  nameWithType: AnonymousPipeServerStream.Dispose\n  fullName: AnonymousPipeServerStream.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n- uid: System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: DisposeLocalCopyOfClientHandle\n  nameWithType: AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle\n  fullName: AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n- uid: System.IO.Pipes.AnonymousPipeServerStream.Finalize*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: Finalize\n  nameWithType: AnonymousPipeServerStream.Finalize\n  fullName: AnonymousPipeServerStream.Finalize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n- uid: System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: GetClientHandleAsString\n  nameWithType: AnonymousPipeServerStream.GetClientHandleAsString\n  fullName: AnonymousPipeServerStream.GetClientHandleAsString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n- uid: System.IO.Pipes.AnonymousPipeServerStream.ReadMode*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: ReadMode\n  nameWithType: AnonymousPipeServerStream.ReadMode\n  fullName: AnonymousPipeServerStream.ReadMode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n- uid: System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: TransmissionMode\n  nameWithType: AnonymousPipeServerStream.TransmissionMode\n  fullName: AnonymousPipeServerStream.TransmissionMode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Pipes/AnonymousPipeServerStream.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: PipeStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: PipeStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: PipeStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: PipeStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.Pipes.PipeStream.CanRead\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: CanRead\n  nameWithType: PipeStream.CanRead\n  fullName: PipeStream.CanRead\n- uid: System.IO.Pipes.PipeStream.CanSeek\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: PipeStream.CanSeek\n  fullName: PipeStream.CanSeek\n- uid: System.IO.Stream.CanTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: Stream.CanTimeout\n  fullName: Stream.CanTimeout\n- uid: System.IO.Pipes.PipeStream.CanWrite\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: PipeStream.CanWrite\n  fullName: PipeStream.CanWrite\n- uid: System.IO.Stream.Close\n  parent: System.IO.Stream\n  isExternal: false\n  name: Close()\n  nameWithType: Stream.Close()\n  fullName: Stream.Close()\n- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream, Int32)\n  nameWithType: Stream.CopyTo(Stream, Int32)\n  fullName: Stream.CopyTo(Stream, Int32)\n- uid: System.IO.Stream.CopyTo(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream)\n  nameWithType: Stream.CopyTo(Stream)\n  fullName: Stream.CopyTo(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream)\n  nameWithType: Stream.CopyToAsync(Stream)\n  fullName: Stream.CopyToAsync(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32)\n  nameWithType: Stream.CopyToAsync(Stream, Int32)\n  fullName: Stream.CopyToAsync(Stream, Int32)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n- uid: System.IO.Stream.CreateWaitHandle\n  parent: System.IO.Stream\n  isExternal: false\n  name: CreateWaitHandle()\n  nameWithType: Stream.CreateWaitHandle()\n  fullName: Stream.CreateWaitHandle()\n- uid: System.IO.Stream.Dispose\n  parent: System.IO.Stream\n  isExternal: false\n  name: Dispose()\n  nameWithType: Stream.Dispose()\n  fullName: Stream.Dispose()\n- uid: System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: EndRead(IAsyncResult)\n  nameWithType: PipeStream.EndRead(IAsyncResult)\n  fullName: PipeStream.EndRead(IAsyncResult)\n- uid: System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: EndWrite(IAsyncResult)\n  nameWithType: PipeStream.EndWrite(IAsyncResult)\n  fullName: PipeStream.EndWrite(IAsyncResult)\n- uid: System.IO.Pipes.PipeStream.Flush\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: Flush()\n  nameWithType: PipeStream.Flush()\n  fullName: PipeStream.Flush()\n- uid: System.IO.Stream.FlushAsync\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync()\n  nameWithType: Stream.FlushAsync()\n  fullName: Stream.FlushAsync()\n- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync(CancellationToken)\n  nameWithType: Stream.FlushAsync(CancellationToken)\n  fullName: Stream.FlushAsync(CancellationToken)\n- uid: System.IO.Pipes.PipeStream.Length\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: Length\n  nameWithType: PipeStream.Length\n  fullName: PipeStream.Length\n- uid: System.IO.Stream.Null\n  parent: System.IO.Stream\n  isExternal: false\n  name: \"Null\"\n  nameWithType: Stream.Null\n  fullName: Stream.Null\n- uid: System.IO.Stream.ObjectInvariant\n  parent: System.IO.Stream\n  isExternal: false\n  name: ObjectInvariant()\n  nameWithType: Stream.ObjectInvariant()\n  fullName: Stream.ObjectInvariant()\n- uid: System.IO.Pipes.PipeStream.Position\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: Position\n  nameWithType: PipeStream.Position\n  fullName: PipeStream.Position\n- uid: System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: PipeStream.Read(Byte[], Int32, Int32)\n  fullName: PipeStream.Read(Byte[], Int32, Int32)\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32)\n- uid: System.IO.Pipes.PipeStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: PipeStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: PipeStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.IO.Pipes.PipeStream.ReadByte\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: ReadByte()\n  nameWithType: PipeStream.ReadByte()\n  fullName: PipeStream.ReadByte()\n- uid: System.IO.Stream.ReadTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: Stream.ReadTimeout\n  fullName: Stream.ReadTimeout\n- uid: System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: PipeStream.Seek(Int64, SeekOrigin)\n  fullName: PipeStream.Seek(Int64, SeekOrigin)\n- uid: System.IO.Pipes.PipeStream.SetLength(System.Int64)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: PipeStream.SetLength(Int64)\n  fullName: PipeStream.SetLength(Int64)\n- uid: System.IO.Stream.Synchronized(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Synchronized(Stream)\n  nameWithType: Stream.Synchronized(Stream)\n  fullName: Stream.Synchronized(Stream)\n- uid: System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: PipeStream.Write(Byte[], Int32, Int32)\n  fullName: PipeStream.Write(Byte[], Int32, Int32)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32)\n- uid: System.IO.Pipes.PipeStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: PipeStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: PipeStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.IO.Pipes.PipeStream.WriteByte(System.Byte)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: WriteByte(Byte)\n  nameWithType: PipeStream.WriteByte(Byte)\n  fullName: PipeStream.WriteByte(Byte)\n- uid: System.IO.Stream.WriteTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: Stream.WriteTimeout\n  fullName: Stream.WriteTimeout\n- uid: System.IO.Pipes.PipeStream.CheckPipePropertyOperations\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: CheckPipePropertyOperations()\n  nameWithType: PipeStream.CheckPipePropertyOperations()\n  fullName: PipeStream.CheckPipePropertyOperations()\n- uid: System.IO.Pipes.PipeStream.CheckReadOperations\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: CheckReadOperations()\n  nameWithType: PipeStream.CheckReadOperations()\n  fullName: PipeStream.CheckReadOperations()\n- uid: System.IO.Pipes.PipeStream.CheckWriteOperations\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: CheckWriteOperations()\n  nameWithType: PipeStream.CheckWriteOperations()\n  fullName: PipeStream.CheckWriteOperations()\n- uid: System.IO.Pipes.PipeStream.GetAccessControl\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: GetAccessControl()\n  nameWithType: PipeStream.GetAccessControl()\n  fullName: PipeStream.GetAccessControl()\n- uid: System.IO.Pipes.PipeStream.InBufferSize\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: InBufferSize\n  nameWithType: PipeStream.InBufferSize\n  fullName: PipeStream.InBufferSize\n- uid: System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: InitializeHandle(SafePipeHandle, Boolean, Boolean)\n  nameWithType: PipeStream.InitializeHandle(SafePipeHandle, Boolean, Boolean)\n  fullName: PipeStream.InitializeHandle(SafePipeHandle, Boolean, Boolean)\n- uid: System.IO.Pipes.PipeStream.IsAsync\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: IsAsync\n  nameWithType: PipeStream.IsAsync\n  fullName: PipeStream.IsAsync\n- uid: System.IO.Pipes.PipeStream.IsConnected\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: IsConnected\n  nameWithType: PipeStream.IsConnected\n  fullName: PipeStream.IsConnected\n- uid: System.IO.Pipes.PipeStream.IsHandleExposed\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: IsHandleExposed\n  nameWithType: PipeStream.IsHandleExposed\n  fullName: PipeStream.IsHandleExposed\n- uid: System.IO.Pipes.PipeStream.IsMessageComplete\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: IsMessageComplete\n  nameWithType: PipeStream.IsMessageComplete\n  fullName: PipeStream.IsMessageComplete\n- uid: System.IO.Pipes.PipeStream.OutBufferSize\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: OutBufferSize\n  nameWithType: PipeStream.OutBufferSize\n  fullName: PipeStream.OutBufferSize\n- uid: System.IO.Pipes.PipeStream.SafePipeHandle\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: SafePipeHandle\n  nameWithType: PipeStream.SafePipeHandle\n  fullName: PipeStream.SafePipeHandle\n- uid: System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: SetAccessControl(PipeSecurity)\n  nameWithType: PipeStream.SetAccessControl(PipeSecurity)\n  fullName: PipeStream.SetAccessControl(PipeSecurity)\n- uid: System.IO.Pipes.PipeStream.WaitForPipeDrain\n  parent: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: WaitForPipeDrain()\n  nameWithType: PipeStream.WaitForPipeDrain()\n  fullName: PipeStream.WaitForPipeDrain()\n- uid: System.IO.Pipes.PipesAclExtensions.GetAccessControl(System.IO.Pipes.PipeStream)\n  parent: System.IO.Pipes.PipesAclExtensions\n  isExternal: false\n  name: GetAccessControl(PipeStream)\n  nameWithType: PipesAclExtensions.GetAccessControl(PipeStream)\n  fullName: PipesAclExtensions.GetAccessControl(PipeStream)\n- uid: System.IO.Pipes.PipesAclExtensions.SetAccessControl(System.IO.Pipes.PipeStream,System.IO.Pipes.PipeSecurity)\n  parent: System.IO.Pipes.PipesAclExtensions\n  isExternal: false\n  name: SetAccessControl(PipeStream, PipeSecurity)\n  nameWithType: PipesAclExtensions.SetAccessControl(PipeStream, PipeSecurity)\n  fullName: PipesAclExtensions.SetAccessControl(PipeStream, PipeSecurity)\n"}