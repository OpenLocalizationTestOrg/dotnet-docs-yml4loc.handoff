<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44ca657fcc82ba1a110737f2c7692d3f5e3497dc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Workflow.Runtime.TimerEventSubscriptionCollection.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f970be344abbb1c0799c14a714b520417fdd74c9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d0c8cfdbf7b67df85ec7fcdac6c8582ef34e9b3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an ordered list of <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscription"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection&gt;</ph> represents the queue of <ph id="ph2">&lt;xref:System.Workflow.Runtime.TimerEventSubscription&gt;</ph> objects associated with a workflow instance and provides methods to manage this queue.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subscriptions are ordered in the queue based on their <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt%2A&gt;</ph> values; those with smaller <ph id="ph2">&lt;xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt%2A&gt;</ph> values are positioned before those with larger <ph id="ph3">&lt;xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt%2A&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the methods provided by this class to manage the collection of active timer event subscriptions exposed by <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.TimerCollectionProperty&gt;</ph> for each workflow instance.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.Add%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.Remove%2A&gt;</ph> to add or remove subscriptions from the timer queue.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whenever the first element in the timer queue changes, the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService&gt;</ph> is called to cancel the timer event that was previously at the beginning of the queue and schedule the new timer event.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Adds a <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscription"&gt;&lt;/xref&gt;</ph> to the timer queue.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Adds the <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscription&gt;</ph> to the timer queue.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subscriptions in the queue are positioned based on their <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt%2A?displayProperty=fullName&gt;</ph> values; those with smaller values are positioned in front of those with larger values.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the new subscription is added at the beginning of the queue, <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel%2A?displayProperty=fullName&gt;</ph> is called to cancel the timer event that was previously at the beginning of the queue and <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule%28System.Threading.WaitCallback%2CSystem.Guid%2CSystem.DateTime%2CSystem.Guid%29?displayProperty=fullName&gt;</ph> is called to schedule the new timer event.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.Add%2A&gt;</ph> locks the <ph id="ph2">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection&gt;</ph> before adding the new subscription and is, therefore, thread safe.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscription"&gt;&lt;/xref&gt;</ph> to add to the timer queue.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;item&lt;/code&gt;</ph> is a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Copies the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscriptionCollection"&gt;&lt;/xref&gt;</ph> elements to an existing one-dimensional <ph id="ph2">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph>, starting at the specified array index.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.CopyTo%2A&gt;</ph> is thread safe.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The one-dimensional <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from the <ph id="ph2">&lt;xref href="System.Workflow.Runtime.TimerEventSubscriptionCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The zero-based index in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> at which copying begins.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets the number of <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscription"&gt;&lt;/xref&gt;</ph> objects in the timer queue.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The number of <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscription"&gt;&lt;/xref&gt;</ph> objects in the queue.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscriptionCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Access to the <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection&gt;</ph> is synchronized; however, enumerating through a collection is intrinsically not a thread safe procedure.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can lock the <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection&gt;</ph> during the entire enumeration by using <ph id="ph2">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.SyncRoot%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IEnumerator"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">&lt;xref href="System.Workflow.Runtime.TimerEventSubscriptionCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the access to the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscriptionCollection"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Access to the <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection&gt;</ph> is synchronized; however, enumerating through a collection is intrinsically not a thread safe procedure.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.SyncRoot%2A&gt;</ph> returns an object, which can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Always returns <ph id="ph1">`true`</ph> indicating that access to the <ph id="ph2">&lt;xref href="System.Workflow.Runtime.TimerEventSubscriptionCollection"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscription"&gt;&lt;/xref&gt;</ph> at the beginning of the timer queue without removing it.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.Peek%2A&gt;</ph> is thread safe.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscription"&gt;&lt;/xref&gt;</ph> at the beginning of the timer queue or a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic) if the timer queue is empty.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Removes the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscription"&gt;&lt;/xref&gt;</ph> that has the specified subscription id from the timer queue.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Removes the <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscription&gt;</ph> with the specified subscription id from the timer queue.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subscriptions in the queue are positioned based on their <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt%2A?displayProperty=fullName&gt;</ph> values; those with smaller values are positioned in front of those with larger values.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the subscription removed was the subscription at the beginning of the queue, <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel%2A?displayProperty=fullName&gt;</ph> is called to cancel the timer event associated with this subscription and <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule%28System.Threading.WaitCallback%2CSystem.Guid%2CSystem.DateTime%2CSystem.Guid%29?displayProperty=fullName&gt;</ph> is called to schedule a timer event for the subscription that is now at the beginning of the queue.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.Remove%28System.Guid%29&gt;</ph> is thread safe.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Guid"&gt;&lt;/xref&gt;</ph> of the <ph id="ph2">&lt;xref href="System.Workflow.Runtime.TimerEventSubscription"&gt;&lt;/xref&gt;</ph> to remove.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Removes the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscription"&gt;&lt;/xref&gt;</ph> from the timer queue.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Removes the <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscription&gt;</ph> from the timer queue.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subscriptions in the queue are positioned based on their <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt%2A?displayProperty=fullName&gt;</ph> values; those with smaller values are positioned in front of those with larger values.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the subscription removed was the subscription at the beginning of the queue, <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel%2A?displayProperty=fullName&gt;</ph> is called to cancel the timer event associated with this subscription and <ph id="ph2">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule%28System.Threading.WaitCallback%2CSystem.Guid%2CSystem.DateTime%2CSystem.Guid%29?displayProperty=fullName&gt;</ph> is called to schedule a timer event for the subscription that is now at the beginning of the queue.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.Remove%28System.Guid%29&gt;</ph> is thread safe.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscription"&gt;&lt;/xref&gt;</ph> to remove from the timer queue.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;item&lt;/code&gt;</ph> is a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscriptionCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.SyncRoot%2A&gt;</ph> returns an object, which can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Access to the <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection&gt;</ph> is synchronized; however, enumerating through a collection is intrinsically not a thread safe procedure.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the <ph id="ph1">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection&gt;</ph> during the entire enumeration by using <ph id="ph2">&lt;xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.SyncRoot%2A&gt;</ph> or catch the exceptions resulting from changes made by other threads.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An object used to synchronize access to the <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscriptionCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Timer queue associated with a workflow instance.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This queue contains time ordered <ph id="ph1">&lt;xref href="System.Workflow.Runtime.TimerEventSubscription"&gt;&lt;/xref&gt;</ph> objects for a workflow.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>