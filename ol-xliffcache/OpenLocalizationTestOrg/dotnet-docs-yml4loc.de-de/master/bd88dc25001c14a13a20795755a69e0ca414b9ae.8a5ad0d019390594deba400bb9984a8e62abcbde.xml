{"nodes":[{"content":"Provides an interface that can extend a designer loader to support asynchronous loading of external components.","nodes":[{"pos":[0,111],"content":"Provides an interface that can extend a designer loader to support asynchronous loading of external components.","nodes":[{"content":"Provides an interface that can extend a designer loader to support asynchronous loading of external components.","pos":[0,111]}]}],"pos":[869,981],"yaml":true},{"content":"A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components. This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>. A designer loader does not have to implement this interface if it does not require support for asynchronous loading.  \n  \n Designer loading using a custom implementation of the <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> can occur in a variety of ways. Sometimes external components are involved in the loading process. To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed. The <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining. When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter. To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete. When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host.","nodes":[{"pos":[0,459],"content":"A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components. This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>. A designer loader does not have to implement this interface if it does not require support for asynchronous loading.","nodes":[{"content":"A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components. This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>. A designer loader does not have to implement this interface if it does not require support for asynchronous loading.","pos":[0,459],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;</ph> can implement this interface to manage designer loading that involves external components.","pos":[0,157],"source":"A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components."},{"content":"This interface also allows external components to initiate a reload of the design surface by calling <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A&gt;</ph>.","pos":[158,342],"source":" This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>."},{"content":"A designer loader does not have to implement this interface if it does not require support for asynchronous loading.","pos":[343,459]}]}]},{"pos":[466,1765],"content":"Designer loading using a custom implementation of the <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> can occur in a variety of ways. Sometimes external components are involved in the loading process. To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed. The <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining. When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter. To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete. When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host.","nodes":[{"content":"Designer loading using a custom implementation of the <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> can occur in a variety of ways. Sometimes external components are involved in the loading process. To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed. The <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining. When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter. To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete. When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host.","pos":[0,1299],"nodes":[{"content":"Designer loading using a custom implementation of the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService&gt;</ph> can occur in a variety of ways.","pos":[0,158],"source":"Designer loading using a custom implementation of the <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> can occur in a variety of ways."},{"content":"Sometimes external components are involved in the loading process.","pos":[159,225]},{"content":"To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed.","pos":[226,443]},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService&gt;</ph> typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining.","pos":[444,642],"source":" The <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining."},{"content":"When each portion of the load completes, <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A&gt;</ph> is called, and the service decrements the counter.","pos":[643,832],"source":" When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter."},{"content":"To set the number of dependent load processes, call <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A&gt;</ph> once for each load process that calls <ph id=\"ph2\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A&gt;</ph> when its loading is complete.","pos":[833,1144],"source":" To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete."},{"content":"When the final loading is complete, the service calls <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A&gt;</ph> on the loader host.","pos":[1145,1299],"source":" When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host."}]}]}],"pos":[992,2762],"yaml":true,"extradata":"MT"},{"content":"Registers an external component as part of the load process managed by this interface.","nodes":[{"pos":[0,86],"content":"Registers an external component as part of the load process managed by this interface.","nodes":[{"content":"Registers an external component as part of the load process managed by this interface.","pos":[0,86]}]}],"pos":[4303,4390],"yaml":true},{"content":"Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each external object participating in the load process. <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done.","nodes":[{"pos":[0,314],"content":"Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each external object participating in the load process. <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done.","nodes":[{"content":"Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each external object participating in the load process. <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done.","pos":[0,314],"nodes":[{"content":"Call <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A&gt;</ph> once for each external object participating in the load process.","pos":[0,163],"source":"Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each external object participating in the load process."},{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A&gt;</ph> is called when the work of the load process is done.","pos":[164,314],"source":" <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done."}]}]}],"pos":[4401,4716],"yaml":true,"extradata":"MT"},{"content":"Signals that a dependent load has finished.","nodes":[{"pos":[0,43],"content":"Signals that a dependent load has finished.","nodes":[{"content":"Signals that a dependent load has finished.","pos":[0,43]}]}],"pos":[6507,6551],"yaml":true},{"content":"This method is called to signal that a dependent loading operation has completed. Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> once for every process that was registered by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, which has already completed.  \n  \n If the dependent load succeeds, the caller sets the `successful` parameter to `true` and passes either an empty collection or `null` to the `errorCollection` parameter. If the dependent load encounters errors, the caller sets the `successful` parameter to `false` and passes a collection of exceptions that indicate the reason or reasons for failure to the `errorCollection` parameter.","nodes":[{"pos":[0,362],"content":"This method is called to signal that a dependent loading operation has completed. Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> once for every process that was registered by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, which has already completed.","nodes":[{"content":"This method is called to signal that a dependent loading operation has completed. Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> once for every process that was registered by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, which has already completed.","pos":[0,362],"nodes":[{"content":"This method is called to signal that a dependent loading operation has completed.","pos":[0,81]},{"content":"Call <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A&gt;</ph> once for every process that was registered by calling <ph id=\"ph2\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A&gt;</ph>, which has already completed.","pos":[82,362],"source":" Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> once for every process that was registered by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, which has already completed."}]}]},{"pos":[369,754],"content":"If the dependent load succeeds, the caller sets the `successful` parameter to `true` and passes either an empty collection or `null` to the `errorCollection` parameter. If the dependent load encounters errors, the caller sets the `successful` parameter to `false` and passes a collection of exceptions that indicate the reason or reasons for failure to the `errorCollection` parameter.","nodes":[{"content":"If the dependent load succeeds, the caller sets the <ph id=\"ph1\">`successful`</ph> parameter to <ph id=\"ph2\">`true`</ph> and passes either an empty collection or <ph id=\"ph3\">`null`</ph> to the <ph id=\"ph4\">`errorCollection`</ph> parameter.","pos":[0,168],"source":"If the dependent load succeeds, the caller sets the `successful` parameter to `true` and passes either an empty collection or `null` to the `errorCollection` parameter."},{"content":"If the dependent load encounters errors, the caller sets the <ph id=\"ph1\">`successful`</ph> parameter to <ph id=\"ph2\">`false`</ph> and passes a collection of exceptions that indicate the reason or reasons for failure to the <ph id=\"ph3\">`errorCollection`</ph> parameter.","pos":[169,385],"source":" If the dependent load encounters errors, the caller sets the `successful` parameter to `false` and passes a collection of exceptions that indicate the reason or reasons for failure to the `errorCollection` parameter."}]}],"pos":[6562,7321],"yaml":true,"extradata":"MT"},{"content":"`true` if the load of the designer is successful; `false` if errors prevented the load from finishing.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">`true`</ph> if the load of the designer is successful; <ph id=\"ph2\">`false`</ph> if errors prevented the load from finishing.","source":"`true` if the load of the designer is successful; `false` if errors prevented the load from finishing."}],"pos":[7528,7633],"yaml":true},{"content":"A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or `null`.","nodes":[{"pos":[0,127],"content":"A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or `null`.","nodes":[{"content":"A collection of errors that occurred during the load, if any.","pos":[0,61]},{"content":"If no errors occurred, pass either an empty collection or <ph id=\"ph1\">`null`</ph>.","pos":[62,127],"source":" If no errors occurred, pass either an empty collection or `null`."}]}],"pos":[7721,7849],"yaml":true},{"content":"Reloads the design document.","nodes":[{"pos":[0,28],"content":"Reloads the design document.","nodes":[{"content":"Reloads the design document.","pos":[0,28]}]}],"pos":[9277,9306],"yaml":true},{"content":"Any object can call this method to request that the loader reload the design document. If the loader supports reloading and complies with the reload, the designer loader can return `true`. Otherwise, it returns `false`, indicating that the reload will not occur. Callers cannot rely on the reload happening immediately; the designer loader can schedule this for some other time, or it can try to reload at once.  \n  \n The caller can display a message to the user if the designer cannot be reloaded.","nodes":[{"pos":[0,411],"content":"Any object can call this method to request that the loader reload the design document. If the loader supports reloading and complies with the reload, the designer loader can return `true`. Otherwise, it returns `false`, indicating that the reload will not occur. Callers cannot rely on the reload happening immediately; the designer loader can schedule this for some other time, or it can try to reload at once.","nodes":[{"content":"Any object can call this method to request that the loader reload the design document.","pos":[0,86]},{"content":"If the loader supports reloading and complies with the reload, the designer loader can return <ph id=\"ph1\">`true`</ph>.","pos":[87,188],"source":" If the loader supports reloading and complies with the reload, the designer loader can return `true`."},{"content":"Otherwise, it returns <ph id=\"ph1\">`false`</ph>, indicating that the reload will not occur.","pos":[189,262],"source":" Otherwise, it returns `false`, indicating that the reload will not occur."},{"content":"Callers cannot rely on the reload happening immediately; the designer loader can schedule this for some other time, or it can try to reload at once.","pos":[263,411]}]},{"pos":[418,498],"content":"The caller can display a message to the user if the designer cannot be reloaded.","nodes":[{"content":"The caller can display a message to the user if the designer cannot be reloaded.","pos":[0,80]}]}],"pos":[9317,9820],"yaml":true,"extradata":"MT"},{"content":"`true` if the reload request is accepted, or `false` if the loader does not allow the reload.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">`true`</ph> if the reload request is accepted, or <ph id=\"ph2\">`false`</ph> if the loader does not allow the reload.","source":"`true` if the reload request is accepted, or `false` if the loader does not allow the reload."}],"pos":[9943,10039],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  commentId: T:System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  id: IDesignerLoaderService\n  children:\n  - System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency\n  - System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)\n  - System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload\n  langs:\n  - csharp\n  name: IDesignerLoaderService\n  nameWithType: IDesignerLoaderService\n  fullName: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  type: Interface\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Provides an interface that can extend a designer loader to support asynchronous loading of external components.\n  remarks: \"A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components. This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>. A designer loader does not have to implement this interface if it does not require support for asynchronous loading.  \\n  \\n Designer loading using a custom implementation of the <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> can occur in a variety of ways. Sometimes external components are involved in the loading process. To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed. The <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining. When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter. To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete. When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host.\"\n  syntax:\n    content: public interface IDesignerLoaderService\n  derivedClasses:\n  - System.ComponentModel.Design.Serialization.BasicDesignerLoader\n  implements: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerLoaderService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency\n  commentId: M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency\n  id: AddLoadDependency\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  langs:\n  - csharp\n  name: AddLoadDependency()\n  nameWithType: IDesignerLoaderService.AddLoadDependency()\n  fullName: IDesignerLoaderService.AddLoadDependency()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Registers an external component as part of the load process managed by this interface.\n  remarks: Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each external object participating in the load process. <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done.\n  syntax:\n    content: public void AddLoadDependency ();\n    parameters: []\n  overload: System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerLoaderService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)\n  commentId: M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)\n  id: DependentLoadComplete(System.Boolean,System.Collections.ICollection)\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  langs:\n  - csharp\n  name: DependentLoadComplete(Boolean, ICollection)\n  nameWithType: IDesignerLoaderService.DependentLoadComplete(Boolean, ICollection)\n  fullName: IDesignerLoaderService.DependentLoadComplete(Boolean, ICollection)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Signals that a dependent load has finished.\n  remarks: \"This method is called to signal that a dependent loading operation has completed. Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> once for every process that was registered by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, which has already completed.  \\n  \\n If the dependent load succeeds, the caller sets the `successful` parameter to `true` and passes either an empty collection or `null` to the `errorCollection` parameter. If the dependent load encounters errors, the caller sets the `successful` parameter to `false` and passes a collection of exceptions that indicate the reason or reasons for failure to the `errorCollection` parameter.\"\n  syntax:\n    content: public void DependentLoadComplete (bool successful, System.Collections.ICollection errorCollection);\n    parameters:\n    - id: successful\n      type: System.Boolean\n      description: '`true` if the load of the designer is successful; `false` if errors prevented the load from finishing.'\n    - id: errorCollection\n      type: System.Collections.ICollection\n      description: A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or `null`.\n  overload: System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerLoaderService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload\n  commentId: M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload\n  id: Reload\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  langs:\n  - csharp\n  name: Reload()\n  nameWithType: IDesignerLoaderService.Reload()\n  fullName: IDesignerLoaderService.Reload()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Reloads the design document.\n  remarks: \"Any object can call this method to request that the loader reload the design document. If the loader supports reloading and complies with the reload, the designer loader can return `true`. Otherwise, it returns `false`, indicating that the reload will not occur. Callers cannot rely on the reload happening immediately; the designer loader can schedule this for some other time, or it can try to reload at once.  \\n  \\n The caller can display a message to the user if the designer cannot be reloaded.\"\n  syntax:\n    content: public bool Reload ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the reload request is accepted, or `false` if the loader does not allow the reload.'\n  overload: System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerLoaderService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  isExternal: false\n  name: AddLoadDependency()\n  nameWithType: IDesignerLoaderService.AddLoadDependency()\n  fullName: IDesignerLoaderService.AddLoadDependency()\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  isExternal: false\n  name: DependentLoadComplete(Boolean, ICollection)\n  nameWithType: IDesignerLoaderService.DependentLoadComplete(Boolean, ICollection)\n  fullName: IDesignerLoaderService.DependentLoadComplete(Boolean, ICollection)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  isExternal: false\n  name: Reload()\n  nameWithType: IDesignerLoaderService.Reload()\n  fullName: IDesignerLoaderService.Reload()\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency*\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  isExternal: false\n  name: AddLoadDependency\n  nameWithType: IDesignerLoaderService.AddLoadDependency\n  fullName: IDesignerLoaderService.AddLoadDependency\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerLoaderService.xml\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete*\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  isExternal: false\n  name: DependentLoadComplete\n  nameWithType: IDesignerLoaderService.DependentLoadComplete\n  fullName: IDesignerLoaderService.DependentLoadComplete\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerLoaderService.xml\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload*\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  isExternal: false\n  name: Reload\n  nameWithType: IDesignerLoaderService.Reload\n  fullName: IDesignerLoaderService.Reload\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerLoaderService.xml\n"}