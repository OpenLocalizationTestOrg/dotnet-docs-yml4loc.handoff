{"nodes":[{"content":"Provides a collection of routes for ASP.NET routing.","nodes":[{"pos":[0,52],"content":"Provides a collection of routes for ASP.NET routing.","nodes":[{"content":"Provides a collection of routes for ASP.NET routing.","pos":[0,52]}]}],"pos":[2480,2533],"yaml":true},{"content":"The <xref:System.Web.Routing.RouteCollection> class provides methods that enable you to manage a collection of objects that derive from the <xref:System.Web.Routing.RouteBase> class.  \n  \n Typically, you will use the `static`<xref:System.Web.Routing.RouteTable.Routes%2A> property of the <xref:System.Web.Routing.RouteTable> class to retrieve a <xref:System.Web.Routing.RouteCollection> object. The <xref:System.Web.Routing.RouteTable.Routes%2A> property stores all the routes for an ASP.NET application. ASP.NET routing iterates through the routes in the <xref:System.Web.Routing.RouteTable.Routes%2A> property to find the route that matches a URL.  \n  \n To construct a URL, you call the <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method and pass in a collection of values. The <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method finds the first route with parameters that match the values that you passed in, and returns a <xref:System.Web.Routing.VirtualPathData> object that contains information about the matching route. You retrieve the URL through the <xref:System.Web.Routing.VirtualPathData.VirtualPath%2A> property of the <xref:System.Web.Routing.VirtualPathData> object.  \n  \n You can add a route either with a name or without a name. Including a name enables you to distinguish between similar routes when URLs are constructed. If you do not specify a name, ASP.NET routing uses the first matching route in the collection to construct a URL.  \n  \n When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection. When you add a named route, you cannot use a name that already identifies a route in the collection.  \n  \n You use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.  \n  \n For more information about how to add a route to a route collection, see [ASP.NET Routing](http://msdn.microsoft.com/library/892441af-8f1d-483e-ab5f-b82c23576f5a).","nodes":[{"pos":[0,182],"content":"The <xref:System.Web.Routing.RouteCollection> class provides methods that enable you to manage a collection of objects that derive from the <xref:System.Web.Routing.RouteBase> class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection&gt;</ph> class provides methods that enable you to manage a collection of objects that derive from the <ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteBase&gt;</ph> class.","pos":[0,182],"source":"The <xref:System.Web.Routing.RouteCollection> class provides methods that enable you to manage a collection of objects that derive from the <xref:System.Web.Routing.RouteBase> class."}]},{"pos":[189,649],"content":"Typically, you will use the `static`<xref:System.Web.Routing.RouteTable.Routes%2A> property of the <xref:System.Web.Routing.RouteTable> class to retrieve a <xref:System.Web.Routing.RouteCollection> object. The <xref:System.Web.Routing.RouteTable.Routes%2A> property stores all the routes for an ASP.NET application. ASP.NET routing iterates through the routes in the <xref:System.Web.Routing.RouteTable.Routes%2A> property to find the route that matches a URL.","nodes":[{"content":"Typically, you will use the <ph id=\"ph1\">`static`</ph><ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteTable.Routes%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Web.Routing.RouteTable&gt;</ph> class to retrieve a <ph id=\"ph4\">&lt;xref:System.Web.Routing.RouteCollection&gt;</ph> object.","pos":[0,205],"source":"Typically, you will use the `static`<xref:System.Web.Routing.RouteTable.Routes%2A> property of the <xref:System.Web.Routing.RouteTable> class to retrieve a <xref:System.Web.Routing.RouteCollection> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteTable.Routes%2A&gt;</ph> property stores all the routes for an ASP.NET application.","pos":[206,315],"source":" The <xref:System.Web.Routing.RouteTable.Routes%2A> property stores all the routes for an ASP.NET application."},{"content":"ASP.NET routing iterates through the routes in the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteTable.Routes%2A&gt;</ph> property to find the route that matches a URL.","pos":[316,460],"source":" ASP.NET routing iterates through the routes in the <xref:System.Web.Routing.RouteTable.Routes%2A> property to find the route that matches a URL."}]},{"pos":[656,1213],"content":"To construct a URL, you call the <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method and pass in a collection of values. The <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method finds the first route with parameters that match the values that you passed in, and returns a <xref:System.Web.Routing.VirtualPathData> object that contains information about the matching route. You retrieve the URL through the <xref:System.Web.Routing.VirtualPathData.VirtualPath%2A> property of the <xref:System.Web.Routing.VirtualPathData> object.","nodes":[{"content":"To construct a URL, you call the <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method and pass in a collection of values. The <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method finds the first route with parameters that match the values that you passed in, and returns a <xref:System.Web.Routing.VirtualPathData> object that contains information about the matching route. You retrieve the URL through the <xref:System.Web.Routing.VirtualPathData.VirtualPath%2A> property of the <xref:System.Web.Routing.VirtualPathData> object.","pos":[0,557],"nodes":[{"content":"To construct a URL, you call the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A&gt;</ph> method and pass in a collection of values.","pos":[0,135],"source":"To construct a URL, you call the <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method and pass in a collection of values."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A&gt;</ph> method finds the first route with parameters that match the values that you passed in, and returns a <ph id=\"ph2\">&lt;xref:System.Web.Routing.VirtualPathData&gt;</ph> object that contains information about the matching route.","pos":[136,401],"source":" The <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method finds the first route with parameters that match the values that you passed in, and returns a <xref:System.Web.Routing.VirtualPathData> object that contains information about the matching route."},{"content":"You retrieve the URL through the <ph id=\"ph1\">&lt;xref:System.Web.Routing.VirtualPathData.VirtualPath%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Web.Routing.VirtualPathData&gt;</ph> object.","pos":[402,557],"source":" You retrieve the URL through the <xref:System.Web.Routing.VirtualPathData.VirtualPath%2A> property of the <xref:System.Web.Routing.VirtualPathData> object."}]}]},{"pos":[1220,1485],"content":"You can add a route either with a name or without a name. Including a name enables you to distinguish between similar routes when URLs are constructed. If you do not specify a name, ASP.NET routing uses the first matching route in the collection to construct a URL.","nodes":[{"content":"You can add a route either with a name or without a name. Including a name enables you to distinguish between similar routes when URLs are constructed. If you do not specify a name, ASP.NET routing uses the first matching route in the collection to construct a URL.","pos":[0,265],"nodes":[{"content":"You can add a route either with a name or without a name.","pos":[0,57]},{"content":"Including a name enables you to distinguish between similar routes when URLs are constructed.","pos":[58,151]},{"content":"If you do not specify a name, ASP.NET routing uses the first matching route in the collection to construct a URL.","pos":[152,265]}]}]},{"pos":[1492,1737],"content":"When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection. When you add a named route, you cannot use a name that already identifies a route in the collection.","nodes":[{"content":"When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection. When you add a named route, you cannot use a name that already identifies a route in the collection.","pos":[0,245],"nodes":[{"content":"When you add an unnamed route to the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection&gt;</ph> object, you cannot add a route that already is in the collection.","pos":[0,144],"source":"When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection."},{"content":"When you add a named route, you cannot use a name that already identifies a route in the collection.","pos":[145,245]}]}]},{"pos":[1744,1983],"content":"You use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"content":"You use the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteCollection.GetWriteLock%2A&gt;</ph> method to make sure that you interact with the collection without conflicts from other processes.","pos":[0,239],"source":"You use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes."}]},{"pos":[1990,2153],"content":"For more information about how to add a route to a route collection, see <bpt id=\"p1\">[</bpt>ASP.NET Routing<ept id=\"p1\">](http://msdn.microsoft.com/library/892441af-8f1d-483e-ab5f-b82c23576f5a)</ept>.","source":"For more information about how to add a route to a route collection, see [ASP.NET Routing](http://msdn.microsoft.com/library/892441af-8f1d-483e-ab5f-b82c23576f5a)."}],"pos":[2544,4712],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Web.Routing.RouteCollection\"></xref> class.","nodes":[{"pos":[0,96],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.Routing.RouteCollection\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Web.Routing.RouteCollection\"></xref> class."}],"pos":[35184,35281],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Web.Routing.RouteCollection\"></xref> class by using the specified virtual path provider.","nodes":[{"pos":[0,141],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.Routing.RouteCollection\"&gt;&lt;/xref&gt;</ph> class by using the specified virtual path provider.","source":"Initializes a new instance of the <xref href=\"System.Web.Routing.RouteCollection\"></xref> class by using the specified virtual path provider."}],"pos":[36531,36673],"yaml":true},{"content":"A provider for retrieving resources from a virtual file system.","nodes":[{"pos":[0,63],"content":"A provider for retrieving resources from a virtual file system.","nodes":[{"content":"A provider for retrieving resources from a virtual file system.","pos":[0,63]}]}],"pos":[36897,36961],"yaml":true},{"content":"Adds a route to the end of the <xref href=\"System.Web.Routing.RouteCollection\"></xref> object and assigns the specified name to the route.","nodes":[{"pos":[0,138],"content":"Adds a route to the end of the <ph id=\"ph1\">&lt;xref href=\"System.Web.Routing.RouteCollection\"&gt;&lt;/xref&gt;</ph> object and assigns the specified name to the route.","source":"Adds a route to the end of the <xref href=\"System.Web.Routing.RouteCollection\"></xref> object and assigns the specified name to the route."}],"pos":[38099,38238],"yaml":true},{"content":"The <xref:System.Web.Routing.RouteCollection.Add%2A> method enables you to define a name for a route when you add it to the route collection. By defining a name for the route, you can specify a particular route to use when you use routing to construct a URL. Specifying a particular route is important when more than one route matches the values that you pass to the <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method. If you do not specify a named route, ASP.NET routing will use the first route in the collection that matches the values. For more information, see [How to: Construct URLs from Routes](http://msdn.microsoft.com/library/1ffd4085-71f6-4822-be8f-f682ca638650).  \n  \n A name can be used only one time in the <xref:System.Web.Routing.RouteCollection> object.  \n  \n If you do not have to specify a name for the route, you can add the route by calling the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method.  \n  \n Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"pos":[0,691],"content":"The <xref:System.Web.Routing.RouteCollection.Add%2A> method enables you to define a name for a route when you add it to the route collection. By defining a name for the route, you can specify a particular route to use when you use routing to construct a URL. Specifying a particular route is important when more than one route matches the values that you pass to the <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method. If you do not specify a named route, ASP.NET routing will use the first route in the collection that matches the values. For more information, see [How to: Construct URLs from Routes](http://msdn.microsoft.com/library/1ffd4085-71f6-4822-be8f-f682ca638650).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.Add%2A&gt;</ph> method enables you to define a name for a route when you add it to the route collection.","pos":[0,141],"source":"The <xref:System.Web.Routing.RouteCollection.Add%2A> method enables you to define a name for a route when you add it to the route collection."},{"content":"By defining a name for the route, you can specify a particular route to use when you use routing to construct a URL.","pos":[142,258]},{"content":"Specifying a particular route is important when more than one route matches the values that you pass to the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A&gt;</ph> method.","pos":[259,434],"source":" Specifying a particular route is important when more than one route matches the values that you pass to the <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method."},{"content":"If you do not specify a named route, ASP.NET routing will use the first route in the collection that matches the values.","pos":[435,555]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Construct URLs from Routes<ept id=\"p1\">](http://msdn.microsoft.com/library/1ffd4085-71f6-4822-be8f-f682ca638650)</ept>.","pos":[556,691],"source":" For more information, see [How to: Construct URLs from Routes](http://msdn.microsoft.com/library/1ffd4085-71f6-4822-be8f-f682ca638650)."}]},{"pos":[698,787],"content":"A name can be used only one time in the <xref:System.Web.Routing.RouteCollection> object.","nodes":[{"content":"A name can be used only one time in the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection&gt;</ph> object.","pos":[0,89],"source":"A name can be used only one time in the <xref:System.Web.Routing.RouteCollection> object."}]},{"pos":[794,950],"content":"If you do not have to specify a name for the route, you can add the route by calling the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method.","nodes":[{"content":"If you do not have to specify a name for the route, you can add the route by calling the <ph id=\"ph1\">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> method.","pos":[0,156],"source":"If you do not have to specify a name for the route, you can add the route by calling the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method."}]},{"pos":[957,1192],"content":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteCollection.GetWriteLock%2A&gt;</ph> method to make sure that you interact with the collection without conflicts from other processes.","pos":[0,235],"source":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes."}]}],"pos":[38249,39450],"yaml":true,"extradata":"MT"},{"content":"The value that identifies the route. The value can be `null` or an empty string.","nodes":[{"pos":[0,80],"content":"The value that identifies the route. The value can be `null` or an empty string.","nodes":[{"content":"The value that identifies the route.","pos":[0,36]},{"content":"The value can be <ph id=\"ph1\">`null`</ph> or an empty string.","pos":[37,80],"source":" The value can be `null` or an empty string."}]}],"pos":[40130,40211],"yaml":true},{"content":"The route to add to the end of the collection.","nodes":[{"pos":[0,46],"content":"The route to add to the end of the collection.","nodes":[{"content":"The route to add to the end of the collection.","pos":[0,46]}]}],"pos":[40286,40333],"yaml":true},{"content":"<code>item</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;item&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>item</code> is `null`."}],"pos":[40501,40530],"yaml":true},{"content":"<code>name</code> is already used in the collection.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is already used in the collection.","source":"<code>name</code> is already used in the collection."}],"pos":[40624,40677],"yaml":true},{"content":"Gets or sets a value that indicates whether trailing slashes are added when virtual paths are normalized.","nodes":[{"pos":[0,105],"content":"Gets or sets a value that indicates whether trailing slashes are added when virtual paths are normalized.","nodes":[{"content":"Gets or sets a value that indicates whether trailing slashes are added when virtual paths are normalized.","pos":[0,105]}]}],"pos":[41653,41759],"yaml":true},{"content":"`true` if trailing slashes are added; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,81],"content":"`true` if trailing slashes are added; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if trailing slashes are added; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,57],"source":"`true` if trailing slashes are added; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[58,81],"source":" The default is `false`."}]}],"pos":[41886,41970],"yaml":true},{"content":"Removes all the elements from the <xref href=\"System.Web.Routing.RouteCollection\"></xref> object.","nodes":[{"pos":[0,97],"content":"Removes all the elements from the <ph id=\"ph1\">&lt;xref href=\"System.Web.Routing.RouteCollection\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes all the elements from the <xref href=\"System.Web.Routing.RouteCollection\"></xref> object."}],"pos":[42981,43079],"yaml":true},{"content":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"pos":[0,235],"content":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteCollection.GetWriteLock%2A&gt;</ph> method to make sure that you interact with the collection without conflicts from other processes.","pos":[0,235],"source":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes."}]}],"pos":[43090,43326],"yaml":true,"extradata":"MT"},{"content":"Provides an object for managing thread safety when you retrieve an object from the collection.","nodes":[{"pos":[0,94],"content":"Provides an object for managing thread safety when you retrieve an object from the collection.","nodes":[{"content":"Provides an object for managing thread safety when you retrieve an object from the collection.","pos":[0,94]}]}],"pos":[44415,44510],"yaml":true},{"content":"The <xref:System.Web.Routing.RouteCollection> object is available to multiple processes in the application. Therefore, if you have to retrieve a route when the application is running, use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method in order to guarantee thread safety. By obtaining a read lock on the route collection, you make sure that the collection will not be modified while you are trying to retrieve it.  \n  \n The <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method stops the thread from continuing until the lock can be acquired. If a write lock is in place, the thread waits until the update is completed and the write lock is released. The read lock on the route collection is released when the <xref:System.IDisposable> object that is returned by this method is disposed.  \n  \n If you do not use <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>, you might get an error while you are reading through the <xref:System.Web.Routing.RouteCollection> collection. For example, suppose you loop through the objects in the <xref:System.Web.Routing.RouteCollection> collection to read them, without calling <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>. While you are doing that, another thread from another request might call <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> and add a route to the collection. The first thread will then fail with an error.  \n  \n There are two scenarios in which you do not have to call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>:  \n  \n-   Public methods of the <xref:System.Web.Routing.RouteCollection> class such as <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> and <xref:System.Web.Routing.RouteCollection.GetRouteData%2A> call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> internally. Therefore, you do not have to explicitly call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> when you call a public method of the <xref:System.Web.Routing.RouteCollection> class to retrieve data from the collection.  \n  \n-   When the application is starting and is not yet processing requests, such as in the `Application_Start` event handler, only one thread is running. Because there are no other threads that might update the collection while you are reading it, you do not have to call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>.","nodes":[{"pos":[0,434],"content":"The <xref:System.Web.Routing.RouteCollection> object is available to multiple processes in the application. Therefore, if you have to retrieve a route when the application is running, use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method in order to guarantee thread safety. By obtaining a read lock on the route collection, you make sure that the collection will not be modified while you are trying to retrieve it.","nodes":[{"content":"The <xref:System.Web.Routing.RouteCollection> object is available to multiple processes in the application. Therefore, if you have to retrieve a route when the application is running, use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method in order to guarantee thread safety. By obtaining a read lock on the route collection, you make sure that the collection will not be modified while you are trying to retrieve it.","pos":[0,434],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection&gt;</ph> object is available to multiple processes in the application.","pos":[0,107],"source":"The <xref:System.Web.Routing.RouteCollection> object is available to multiple processes in the application."},{"content":"Therefore, if you have to retrieve a route when the application is running, use the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph> method in order to guarantee thread safety.","pos":[108,292],"source":" Therefore, if you have to retrieve a route when the application is running, use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method in order to guarantee thread safety."},{"content":"By obtaining a read lock on the route collection, you make sure that the collection will not be modified while you are trying to retrieve it.","pos":[293,434]}]}]},{"pos":[441,818],"content":"The <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method stops the thread from continuing until the lock can be acquired. If a write lock is in place, the thread waits until the update is completed and the write lock is released. The read lock on the route collection is released when the <xref:System.IDisposable> object that is returned by this method is disposed.","nodes":[{"content":"The <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method stops the thread from continuing until the lock can be acquired. If a write lock is in place, the thread waits until the update is completed and the write lock is released. The read lock on the route collection is released when the <xref:System.IDisposable> object that is returned by this method is disposed.","pos":[0,377],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph> method stops the thread from continuing until the lock can be acquired.","pos":[0,132],"source":"The <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method stops the thread from continuing until the lock can be acquired."},{"content":"If a write lock is in place, the thread waits until the update is completed and the write lock is released.","pos":[133,240]},{"content":"The read lock on the route collection is released when the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> object that is returned by this method is disposed.","pos":[241,377],"source":" The read lock on the route collection is released when the <xref:System.IDisposable> object that is returned by this method is disposed."}]}]},{"pos":[825,1422],"content":"If you do not use <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>, you might get an error while you are reading through the <xref:System.Web.Routing.RouteCollection> collection. For example, suppose you loop through the objects in the <xref:System.Web.Routing.RouteCollection> collection to read them, without calling <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>. While you are doing that, another thread from another request might call <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> and add a route to the collection. The first thread will then fail with an error.","nodes":[{"content":"If you do not use <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>, you might get an error while you are reading through the <xref:System.Web.Routing.RouteCollection> collection. For example, suppose you loop through the objects in the <xref:System.Web.Routing.RouteCollection> collection to read them, without calling <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>. While you are doing that, another thread from another request might call <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> and add a route to the collection. The first thread will then fail with an error.","pos":[0,597],"nodes":[{"content":"If you do not use <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph>, you might get an error while you are reading through the <ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteCollection&gt;</ph> collection.","pos":[0,186],"source":"If you do not use <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>, you might get an error while you are reading through the <xref:System.Web.Routing.RouteCollection> collection."},{"content":"For example, suppose you loop through the objects in the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection&gt;</ph> collection to read them, without calling <ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph>.","pos":[187,384],"source":" For example, suppose you loop through the objects in the <xref:System.Web.Routing.RouteCollection> collection to read them, without calling <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>."},{"content":"While you are doing that, another thread from another request might call <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetWriteLock%2A&gt;</ph> and add a route to the collection.","pos":[385,550],"source":" While you are doing that, another thread from another request might call <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> and add a route to the collection."},{"content":"The first thread will then fail with an error.","pos":[551,597]}]}]},{"pos":[1429,1543],"content":"There are two scenarios in which you do not have to call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>:","nodes":[{"content":"There are two scenarios in which you do not have to call <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph>:","pos":[0,114],"source":"There are two scenarios in which you do not have to call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>:"}]},{"pos":[1553,2052],"content":"Public methods of the <xref:System.Web.Routing.RouteCollection> class such as <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> and <xref:System.Web.Routing.RouteCollection.GetRouteData%2A> call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> internally. Therefore, you do not have to explicitly call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> when you call a public method of the <xref:System.Web.Routing.RouteCollection> class to retrieve data from the collection.","nodes":[{"content":"Public methods of the <xref:System.Web.Routing.RouteCollection> class such as <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> and <xref:System.Web.Routing.RouteCollection.GetRouteData%2A> call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> internally. Therefore, you do not have to explicitly call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> when you call a public method of the <xref:System.Web.Routing.RouteCollection> class to retrieve data from the collection.","pos":[0,499],"nodes":[{"content":"Public methods of the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection&gt;</ph> class such as <ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Web.Routing.RouteCollection.GetRouteData%2A&gt;</ph> call <ph id=\"ph4\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph> internally.","pos":[0,273],"source":"Public methods of the <xref:System.Web.Routing.RouteCollection> class such as <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> and <xref:System.Web.Routing.RouteCollection.GetRouteData%2A> call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> internally."},{"content":"Therefore, you do not have to explicitly call <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph> when you call a public method of the <ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteCollection&gt;</ph> class to retrieve data from the collection.","pos":[274,499],"source":" Therefore, you do not have to explicitly call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> when you call a public method of the <xref:System.Web.Routing.RouteCollection> class to retrieve data from the collection."}]}]},{"pos":[2062,2384],"content":"When the application is starting and is not yet processing requests, such as in the `Application_Start` event handler, only one thread is running. Because there are no other threads that might update the collection while you are reading it, you do not have to call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>.","nodes":[{"content":"When the application is starting and is not yet processing requests, such as in the <ph id=\"ph1\">`Application_Start`</ph> event handler, only one thread is running.","pos":[0,146],"source":"When the application is starting and is not yet processing requests, such as in the `Application_Start` event handler, only one thread is running."},{"content":"Because there are no other threads that might update the collection while you are reading it, you do not have to call <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph>.","pos":[147,322],"source":" Because there are no other threads that might update the collection while you are reading it, you do not have to call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>."}]}],"pos":[44521,46918],"yaml":true,"extradata":"MT"},{"content":"An object that manages thread safety.","nodes":[{"pos":[0,37],"content":"An object that manages thread safety.","nodes":[{"content":"An object that manages thread safety.","pos":[0,37]}]}],"pos":[47478,47516],"yaml":true},{"content":"Returns information about the route in the collection that matches the specified values.","nodes":[{"pos":[0,88],"content":"Returns information about the route in the collection that matches the specified values.","nodes":[{"content":"Returns information about the route in the collection that matches the specified values.","pos":[0,88]}]}],"pos":[48660,48749],"yaml":true},{"content":"An object that encapsulates information about the HTTP request.","nodes":[{"pos":[0,63],"content":"An object that encapsulates information about the HTTP request.","nodes":[{"content":"An object that encapsulates information about the HTTP request.","pos":[0,63]}]}],"pos":[48959,49023],"yaml":true},{"content":"An object that contains the values from the route definition.","nodes":[{"pos":[0,61],"content":"An object that contains the values from the route definition.","nodes":[{"content":"An object that contains the values from the route definition.","pos":[0,61]}]}],"pos":[49095,49157],"yaml":true},{"content":"<code>context</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;context&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>context</code> is `null`."}],"pos":[49334,49366],"yaml":true},{"content":"The <xref href=\"System.Web.HttpContextBase.Request\"></xref> property of the object in the <code>context</code> parameter is `null`.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Web.HttpContextBase.Request\"&gt;&lt;/xref&gt;</ph> property of the object in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">context</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph3\">`null`</ph>.","source":"The <xref href=\"System.Web.HttpContextBase.Request\"></xref> property of the object in the <code>context</code> parameter is `null`."}],"pos":[49460,49592],"yaml":true},{"content":"Returns information about the URL path that is associated with the route, given the specified context and parameter values.","nodes":[{"pos":[0,123],"content":"Returns information about the URL path that is associated with the route, given the specified context and parameter values.","nodes":[{"content":"Returns information about the URL path that is associated with the route, given the specified context and parameter values.","pos":[0,123]}]}],"pos":[50875,50999],"yaml":true},{"content":"An object that encapsulates information about the requested route.","nodes":[{"pos":[0,66],"content":"An object that encapsulates information about the requested route.","nodes":[{"content":"An object that encapsulates information about the requested route.","pos":[0,66]}]}],"pos":[51285,51352],"yaml":true},{"content":"An object that contains the parameters for a route.","nodes":[{"pos":[0,51],"content":"An object that contains the parameters for a route.","nodes":[{"content":"An object that contains the parameters for a route.","pos":[0,51]}]}],"pos":[51440,51492],"yaml":true},{"content":"An object that contains information about the URL path that is associated with the route.","nodes":[{"pos":[0,89],"content":"An object that contains information about the URL path that is associated with the route.","nodes":[{"content":"An object that contains information about the URL path that is associated with the route.","pos":[0,89]}]}],"pos":[51570,51660],"yaml":true},{"content":"Returns information about the URL path that is associated with the named route, given the specified context, route name, and parameter values.","nodes":[{"pos":[0,142],"content":"Returns information about the URL path that is associated with the named route, given the specified context, route name, and parameter values.","nodes":[{"content":"Returns information about the URL path that is associated with the named route, given the specified context, route name, and parameter values.","pos":[0,142]}]}],"pos":[53089,53232],"yaml":true},{"content":"An object that encapsulates information about the requested route.","nodes":[{"pos":[0,66],"content":"An object that encapsulates information about the requested route.","nodes":[{"content":"An object that encapsulates information about the requested route.","pos":[0,66]}]}],"pos":[53531,53598],"yaml":true},{"content":"The name of the route to use when information about the URL path is retrieved.","nodes":[{"pos":[0,78],"content":"The name of the route to use when information about the URL path is retrieved.","nodes":[{"content":"The name of the route to use when information about the URL path is retrieved.","pos":[0,78]}]}],"pos":[53658,53737],"yaml":true},{"content":"An object that contains the parameters for a route.","nodes":[{"pos":[0,51],"content":"An object that contains the parameters for a route.","nodes":[{"content":"An object that contains the parameters for a route.","pos":[0,51]}]}],"pos":[53825,53877],"yaml":true},{"content":"An object that contains information about the URL path that is associated with the route.","nodes":[{"pos":[0,89],"content":"An object that contains information about the URL path that is associated with the route.","nodes":[{"content":"An object that contains information about the URL path that is associated with the route.","pos":[0,89]}]}],"pos":[53955,54045],"yaml":true},{"content":"No route could be found that has the name specified in the <code>name</code> parameter.","nodes":[{"pos":[0,87],"content":"No route could be found that has the name specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"No route could be found that has the name specified in the <code>name</code> parameter."}],"pos":[54216,54304],"yaml":true},{"content":"Provides an object for managing thread safety when you add or remove elements in the collection.","nodes":[{"pos":[0,96],"content":"Provides an object for managing thread safety when you add or remove elements in the collection.","nodes":[{"content":"Provides an object for managing thread safety when you add or remove elements in the collection.","pos":[0,96]}]}],"pos":[55242,55339],"yaml":true},{"content":"The recommended approach for defining routes in an ASP.NET application is to add the routes to the <xref:System.Web.Routing.RouteTable.Routes%2A> property in an event handler for the `Application_Start` event in the Global.asax file. For more information, see <xref:System.Web.Routing.RouteCollection>.  \n  \n If you have to add a route when the application is running, you use the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to guarantee thread safety. The write lock on the route collection is released when the <xref:System.IDisposable> object that is returned by this method is disposed.","nodes":[{"pos":[0,302],"content":"The recommended approach for defining routes in an ASP.NET application is to add the routes to the <xref:System.Web.Routing.RouteTable.Routes%2A> property in an event handler for the `Application_Start` event in the Global.asax file. For more information, see <xref:System.Web.Routing.RouteCollection>.","nodes":[{"content":"The recommended approach for defining routes in an ASP.NET application is to add the routes to the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteTable.Routes%2A&gt;</ph> property in an event handler for the <ph id=\"ph2\">`Application_Start`</ph> event in the Global.asax file.","pos":[0,233],"source":"The recommended approach for defining routes in an ASP.NET application is to add the routes to the <xref:System.Web.Routing.RouteTable.Routes%2A> property in an event handler for the `Application_Start` event in the Global.asax file."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection&gt;</ph>.","pos":[234,302],"source":" For more information, see <xref:System.Web.Routing.RouteCollection>."}]},{"pos":[309,611],"content":"If you have to add a route when the application is running, you use the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to guarantee thread safety. The write lock on the route collection is released when the <xref:System.IDisposable> object that is returned by this method is disposed.","nodes":[{"content":"If you have to add a route when the application is running, you use the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to guarantee thread safety. The write lock on the route collection is released when the <xref:System.IDisposable> object that is returned by this method is disposed.","pos":[0,302],"nodes":[{"content":"If you have to add a route when the application is running, you use the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetWriteLock%2A&gt;</ph> method to guarantee thread safety.","pos":[0,164],"source":"If you have to add a route when the application is running, you use the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to guarantee thread safety."},{"content":"The write lock on the route collection is released when the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> object that is returned by this method is disposed.","pos":[165,302],"source":" The write lock on the route collection is released when the <xref:System.IDisposable> object that is returned by this method is disposed."}]}]}],"pos":[55350,55966],"yaml":true,"extradata":"MT"},{"content":"An object that manages thread safety.","nodes":[{"pos":[0,37],"content":"An object that manages thread safety.","nodes":[{"content":"An object that manages thread safety.","pos":[0,37]}]}],"pos":[56284,56322],"yaml":true},{"content":"Defines a URL pattern that should not be checked for matches against routes if a request URL meets the specified constraints.","nodes":[{"pos":[0,125],"content":"Defines a URL pattern that should not be checked for matches against routes if a request URL meets the specified constraints.","nodes":[{"content":"Defines a URL pattern that should not be checked for matches against routes if a request URL meets the specified constraints.","pos":[0,125]}]}],"pos":[57431,57557],"yaml":true},{"content":"This method creates a route that is mapped to the <xref:System.Web.Routing.StopRoutingHandler> route handler. After you call this method, requests that match the specified URL pattern will not be processed as route requests.  \n  \n ASP.NET routing automatically ignores requests when the URL matches a physical file, such as an image file. In some cases you might also want routing to ignore requests when there is no physical file. For example, the requests that ASP.NET automatically makes for .axd files should not be treated as route requests even though there is no physical file that corresponds to the .axd file-name extension.","nodes":[{"pos":[0,224],"content":"This method creates a route that is mapped to the <xref:System.Web.Routing.StopRoutingHandler> route handler. After you call this method, requests that match the specified URL pattern will not be processed as route requests.","nodes":[{"content":"This method creates a route that is mapped to the <xref:System.Web.Routing.StopRoutingHandler> route handler. After you call this method, requests that match the specified URL pattern will not be processed as route requests.","pos":[0,224],"nodes":[{"content":"This method creates a route that is mapped to the <ph id=\"ph1\">&lt;xref:System.Web.Routing.StopRoutingHandler&gt;</ph> route handler.","pos":[0,109],"source":"This method creates a route that is mapped to the <xref:System.Web.Routing.StopRoutingHandler> route handler."},{"content":"After you call this method, requests that match the specified URL pattern will not be processed as route requests.","pos":[110,224]}]}]},{"pos":[231,633],"content":"ASP.NET routing automatically ignores requests when the URL matches a physical file, such as an image file. In some cases you might also want routing to ignore requests when there is no physical file. For example, the requests that ASP.NET automatically makes for .axd files should not be treated as route requests even though there is no physical file that corresponds to the .axd file-name extension.","nodes":[{"content":"ASP.NET routing automatically ignores requests when the URL matches a physical file, such as an image file. In some cases you might also want routing to ignore requests when there is no physical file. For example, the requests that ASP.NET automatically makes for .axd files should not be treated as route requests even though there is no physical file that corresponds to the .axd file-name extension.","pos":[0,402],"nodes":[{"content":"ASP.NET routing automatically ignores requests when the URL matches a physical file, such as an image file.","pos":[0,107]},{"content":"In some cases you might also want routing to ignore requests when there is no physical file.","pos":[108,200]},{"content":"For example, the requests that ASP.NET automatically makes for .axd files should not be treated as route requests even though there is no physical file that corresponds to the .axd file-name extension.","pos":[201,402]}]}]}],"pos":[57568,58206],"yaml":true,"extradata":"MT"},{"content":"The URL pattern to be ignored.","nodes":[{"pos":[0,30],"content":"The URL pattern to be ignored.","nodes":[{"content":"The URL pattern to be ignored.","pos":[0,30]}]}],"pos":[59581,59612],"yaml":true},{"content":"Additional criteria that determine whether a request that matches the URL pattern will be ignored.","nodes":[{"pos":[0,98],"content":"Additional criteria that determine whether a request that matches the URL pattern will be ignored.","nodes":[{"content":"Additional criteria that determine whether a request that matches the URL pattern will be ignored.","pos":[0,98]}]}],"pos":[59679,59778],"yaml":true},{"content":"The <code>url</code> parameter is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">url</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>url</code> parameter is `null`."}],"pos":[59949,59991],"yaml":true},{"content":"Defines a URL pattern that should not be checked for matches against routes.","nodes":[{"pos":[0,76],"content":"Defines a URL pattern that should not be checked for matches against routes.","nodes":[{"content":"Defines a URL pattern that should not be checked for matches against routes.","pos":[0,76]}]}],"pos":[60956,61033],"yaml":true},{"content":"This method creates a route that is mapped to the <xref:System.Web.Routing.StopRoutingHandler> route handler. After you call this method, requests that match the specified URL pattern will not be processed as route requests.  \n  \n ASP.NET routing automatically ignores requests when the URL matches a physical file, such as an image file. In some cases you might also want routing to ignore requests when there is no physical file. For example, the requests that ASP.NET automatically makes for .axd files should not be treated as route requests even though there is no physical file that corresponds to the .axd file-name extension.","nodes":[{"pos":[0,224],"content":"This method creates a route that is mapped to the <xref:System.Web.Routing.StopRoutingHandler> route handler. After you call this method, requests that match the specified URL pattern will not be processed as route requests.","nodes":[{"content":"This method creates a route that is mapped to the <xref:System.Web.Routing.StopRoutingHandler> route handler. After you call this method, requests that match the specified URL pattern will not be processed as route requests.","pos":[0,224],"nodes":[{"content":"This method creates a route that is mapped to the <ph id=\"ph1\">&lt;xref:System.Web.Routing.StopRoutingHandler&gt;</ph> route handler.","pos":[0,109],"source":"This method creates a route that is mapped to the <xref:System.Web.Routing.StopRoutingHandler> route handler."},{"content":"After you call this method, requests that match the specified URL pattern will not be processed as route requests.","pos":[110,224]}]}]},{"pos":[231,633],"content":"ASP.NET routing automatically ignores requests when the URL matches a physical file, such as an image file. In some cases you might also want routing to ignore requests when there is no physical file. For example, the requests that ASP.NET automatically makes for .axd files should not be treated as route requests even though there is no physical file that corresponds to the .axd file-name extension.","nodes":[{"content":"ASP.NET routing automatically ignores requests when the URL matches a physical file, such as an image file. In some cases you might also want routing to ignore requests when there is no physical file. For example, the requests that ASP.NET automatically makes for .axd files should not be treated as route requests even though there is no physical file that corresponds to the .axd file-name extension.","pos":[0,402],"nodes":[{"content":"ASP.NET routing automatically ignores requests when the URL matches a physical file, such as an image file.","pos":[0,107]},{"content":"In some cases you might also want routing to ignore requests when there is no physical file.","pos":[108,200]},{"content":"For example, the requests that ASP.NET automatically makes for .axd files should not be treated as route requests even though there is no physical file that corresponds to the .axd file-name extension.","pos":[201,402]}]}]}],"pos":[61044,61682],"yaml":true,"extradata":"MT"},{"content":"The URL pattern to be ignored.","nodes":[{"pos":[0,30],"content":"The URL pattern to be ignored.","nodes":[{"content":"The URL pattern to be ignored.","pos":[0,30]}]}],"pos":[62191,62222],"yaml":true},{"content":"Inserts the specified route into the <xref href=\"System.Web.Routing.RouteCollection\"></xref> object at the specified index.","nodes":[{"pos":[0,123],"content":"Inserts the specified route into the <ph id=\"ph1\">&lt;xref href=\"System.Web.Routing.RouteCollection\"&gt;&lt;/xref&gt;</ph> object at the specified index.","source":"Inserts the specified route into the <xref href=\"System.Web.Routing.RouteCollection\"></xref> object at the specified index."}],"pos":[63397,63521],"yaml":true},{"content":"When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection.  \n  \n Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"pos":[0,144],"content":"When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection.","nodes":[{"content":"When you add an unnamed route to the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection&gt;</ph> object, you cannot add a route that already is in the collection.","pos":[0,144],"source":"When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection."}]},{"pos":[151,386],"content":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteCollection.GetWriteLock%2A&gt;</ph> method to make sure that you interact with the collection without conflicts from other processes.","pos":[0,235],"source":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes."}]}],"pos":[63532,63923],"yaml":true,"extradata":"MT"},{"content":"The zero-based index at which <code>item</code> is inserted.","nodes":[{"pos":[0,60],"content":"The zero-based index at which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> is inserted.","source":"The zero-based index at which <code>item</code> is inserted."}],"pos":[64105,64166],"yaml":true},{"content":"The route to insert.","nodes":[{"pos":[0,20],"content":"The route to insert.","nodes":[{"content":"The route to insert.","pos":[0,20]}]}],"pos":[64241,64262],"yaml":true},{"content":"<code>item</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;item&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>item</code> is `null`."}],"pos":[64437,64466],"yaml":true},{"content":"<code>item</code> is already in the collection.","nodes":[{"pos":[0,47],"content":"<ph id=\"ph1\">&lt;code&gt;item&lt;/code&gt;</ph> is already in the collection.","source":"<code>item</code> is already in the collection."}],"pos":[64560,64608],"yaml":true},{"content":"Gets the route in the collection that has the specified name.","nodes":[{"pos":[0,61],"content":"Gets the route in the collection that has the specified name.","nodes":[{"content":"Gets the route in the collection that has the specified name.","pos":[0,61]}]}],"pos":[65563,65625],"yaml":true},{"content":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"pos":[0,235],"content":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteCollection.GetWriteLock%2A&gt;</ph> method to make sure that you interact with the collection without conflicts from other processes.","pos":[0,235],"source":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes."}]}],"pos":[65636,65872],"yaml":true,"extradata":"MT"},{"content":"The value that identifies the route to get.","nodes":[{"pos":[0,43],"content":"The value that identifies the route to get.","nodes":[{"content":"The value that identifies the route to get.","pos":[0,43]}]}],"pos":[66034,66078],"yaml":true},{"content":"An object that has the specified name, or `null` if <code>name</code> is `null`, is an empty string, or does not match any route in the collection.","nodes":[{"pos":[0,147],"content":"An object that has the specified name, or <ph id=\"ph1\">`null`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>, is an empty string, or does not match any route in the collection.","source":"An object that has the specified name, or `null` if <code>name</code> is `null`, is an empty string, or does not match any route in the collection."}],"pos":[66150,66298],"yaml":true},{"content":"Gets or sets a value that indicates whether URLs are converted to lower case when virtual paths are normalized.","nodes":[{"pos":[0,111],"content":"Gets or sets a value that indicates whether URLs are converted to lower case when virtual paths are normalized.","nodes":[{"content":"Gets or sets a value that indicates whether URLs are converted to lower case when virtual paths are normalized.","pos":[0,111]}]}],"pos":[67308,67420],"yaml":true},{"content":"If a query string is included in the URL, that part of the URL is not converted to lower case.","nodes":[{"pos":[0,94],"content":"If a query string is included in the URL, that part of the URL is not converted to lower case.","nodes":[{"content":"If a query string is included in the URL, that part of the URL is not converted to lower case.","pos":[0,94]}]}],"pos":[67431,67526],"yaml":true,"extradata":"MT"},{"content":"`true` to convert URLs to lower case; otherwise `false`. The default is `false`.","nodes":[{"pos":[0,80],"content":"`true` to convert URLs to lower case; otherwise `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> to convert URLs to lower case; otherwise <ph id=\"ph2\">`false`</ph>.","pos":[0,56],"source":"`true` to convert URLs to lower case; otherwise `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[57,80],"source":" The default is `false`."}]}],"pos":[67647,67730],"yaml":true},{"content":"Provides a way to define routes for Web Forms applications.","nodes":[{"pos":[0,59],"content":"Provides a way to define routes for Web Forms applications.","nodes":[{"content":"Provides a way to define routes for Web Forms applications.","pos":[0,59]}]}],"pos":[68942,69002],"yaml":true},{"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","nodes":[{"pos":[0,267],"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","nodes":[{"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","pos":[0,267],"nodes":[{"content":"This method is provided for coding convenience.","pos":[0,47]},{"content":"It is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.Add%2A&gt;</ph> method and passing a <ph id=\"ph2\">&lt;xref:System.Web.Routing.Route&gt;</ph> object that is created by using the <ph id=\"ph3\">&lt;xref:System.Web.Routing.PageRouteHandler&gt;</ph> class.","pos":[48,267],"source":" It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class."}]}]}],"pos":[69013,69281],"yaml":true,"extradata":"MT"},{"content":"The name of the route.","nodes":[{"pos":[0,22],"content":"The name of the route.","nodes":[{"content":"The name of the route.","pos":[0,22]}]}],"pos":[70198,70221],"yaml":true},{"content":"The URL pattern for the route.","nodes":[{"pos":[0,30],"content":"The URL pattern for the route.","nodes":[{"content":"The URL pattern for the route.","pos":[0,30]}]}],"pos":[70285,70316],"yaml":true},{"content":"The physical URL for the route.","nodes":[{"pos":[0,31],"content":"The physical URL for the route.","nodes":[{"content":"The physical URL for the route.","pos":[0,31]}]}],"pos":[70384,70416],"yaml":true},{"content":"The route that is added to the route collection.","nodes":[{"pos":[0,48],"content":"The route that is added to the route collection.","nodes":[{"content":"The route that is added to the route collection.","pos":[0,48]}]}],"pos":[70484,70533],"yaml":true},{"content":"Provides a way to define routes for Web Forms applications.","nodes":[{"pos":[0,59],"content":"Provides a way to define routes for Web Forms applications.","nodes":[{"content":"Provides a way to define routes for Web Forms applications.","pos":[0,59]}]}],"pos":[71816,71876],"yaml":true},{"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","nodes":[{"pos":[0,267],"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","nodes":[{"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","pos":[0,267],"nodes":[{"content":"This method is provided for coding convenience.","pos":[0,47]},{"content":"It is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.Add%2A&gt;</ph> method and passing a <ph id=\"ph2\">&lt;xref:System.Web.Routing.Route&gt;</ph> object that is created by using the <ph id=\"ph3\">&lt;xref:System.Web.Routing.PageRouteHandler&gt;</ph> class.","pos":[48,267],"source":" It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class."}]}]}],"pos":[71887,72155],"yaml":true,"extradata":"MT"},{"content":"The name of the route.","nodes":[{"pos":[0,22],"content":"The name of the route.","nodes":[{"content":"The name of the route.","pos":[0,22]}]}],"pos":[72994,73017],"yaml":true},{"content":"The URL pattern for the route.","nodes":[{"pos":[0,30],"content":"The URL pattern for the route.","nodes":[{"content":"The URL pattern for the route.","pos":[0,30]}]}],"pos":[73081,73112],"yaml":true},{"content":"The physical URL for the route.","nodes":[{"pos":[0,31],"content":"The physical URL for the route.","nodes":[{"content":"The physical URL for the route.","pos":[0,31]}]}],"pos":[73180,73212],"yaml":true},{"content":"A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property.","nodes":[{"pos":[0,258],"content":"A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property.","nodes":[{"content":"A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked).","pos":[0,144]},{"content":"This parameter sets the <ph id=\"ph1\">&lt;xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"&gt;&lt;/xref&gt;</ph> property.","pos":[145,258],"source":" This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property."}]}],"pos":[73291,73550],"yaml":true},{"content":"The route that is added to the route collection.","nodes":[{"pos":[0,48],"content":"The route that is added to the route collection.","nodes":[{"content":"The route that is added to the route collection.","pos":[0,48]}]}],"pos":[73618,73667],"yaml":true},{"content":"Provides a way to define routes for Web Forms applications.","nodes":[{"pos":[0,59],"content":"Provides a way to define routes for Web Forms applications.","nodes":[{"content":"Provides a way to define routes for Web Forms applications.","pos":[0,59]}]}],"pos":[75136,75196],"yaml":true},{"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","nodes":[{"pos":[0,267],"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","nodes":[{"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","pos":[0,267],"nodes":[{"content":"This method is provided for coding convenience.","pos":[0,47]},{"content":"It is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.Add%2A&gt;</ph> method and passing a <ph id=\"ph2\">&lt;xref:System.Web.Routing.Route&gt;</ph> object that is created by using the <ph id=\"ph3\">&lt;xref:System.Web.Routing.PageRouteHandler&gt;</ph> class.","pos":[48,267],"source":" It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class."}]}]}],"pos":[75207,75475],"yaml":true,"extradata":"MT"},{"content":"The name of the route.","nodes":[{"pos":[0,22],"content":"The name of the route.","nodes":[{"content":"The name of the route.","pos":[0,22]}]}],"pos":[76364,76387],"yaml":true},{"content":"The URL pattern for the route.","nodes":[{"pos":[0,30],"content":"The URL pattern for the route.","nodes":[{"content":"The URL pattern for the route.","pos":[0,30]}]}],"pos":[76451,76482],"yaml":true},{"content":"The physical URL for the route.","nodes":[{"pos":[0,31],"content":"The physical URL for the route.","nodes":[{"content":"The physical URL for the route.","pos":[0,31]}]}],"pos":[76550,76582],"yaml":true},{"content":"A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property.","nodes":[{"pos":[0,258],"content":"A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property.","nodes":[{"content":"A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked).","pos":[0,144]},{"content":"This parameter sets the <ph id=\"ph1\">&lt;xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"&gt;&lt;/xref&gt;</ph> property.","pos":[145,258],"source":" This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property."}]}],"pos":[76661,76920],"yaml":true},{"content":"Default values for the route parameters.","nodes":[{"pos":[0,40],"content":"Default values for the route parameters.","nodes":[{"content":"Default values for the route parameters.","pos":[0,40]}]}],"pos":[77010,77051],"yaml":true},{"content":"The route that is added to the route collection.","nodes":[{"pos":[0,48],"content":"The route that is added to the route collection.","nodes":[{"content":"The route that is added to the route collection.","pos":[0,48]}]}],"pos":[77119,77168],"yaml":true},{"content":"Provides a way to define routes for Web Forms applications.","nodes":[{"pos":[0,59],"content":"Provides a way to define routes for Web Forms applications.","nodes":[{"content":"Provides a way to define routes for Web Forms applications.","pos":[0,59]}]}],"pos":[78823,78883],"yaml":true},{"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","nodes":[{"pos":[0,267],"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","nodes":[{"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","pos":[0,267],"nodes":[{"content":"This method is provided for coding convenience.","pos":[0,47]},{"content":"It is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.Add%2A&gt;</ph> method and passing a <ph id=\"ph2\">&lt;xref:System.Web.Routing.Route&gt;</ph> object that is created by using the <ph id=\"ph3\">&lt;xref:System.Web.Routing.PageRouteHandler&gt;</ph> class.","pos":[48,267],"source":" It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class."}]}]}],"pos":[78894,79162],"yaml":true,"extradata":"MT"},{"content":"The name of the route.","nodes":[{"pos":[0,22],"content":"The name of the route.","nodes":[{"content":"The name of the route.","pos":[0,22]}]}],"pos":[80104,80127],"yaml":true},{"content":"The URL pattern for the route.","nodes":[{"pos":[0,30],"content":"The URL pattern for the route.","nodes":[{"content":"The URL pattern for the route.","pos":[0,30]}]}],"pos":[80191,80222],"yaml":true},{"content":"The physical URL for the route.","nodes":[{"pos":[0,31],"content":"The physical URL for the route.","nodes":[{"content":"The physical URL for the route.","pos":[0,31]}]}],"pos":[80290,80322],"yaml":true},{"content":"A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property.","nodes":[{"pos":[0,258],"content":"A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property.","nodes":[{"content":"A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked).","pos":[0,144]},{"content":"This parameter sets the <ph id=\"ph1\">&lt;xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"&gt;&lt;/xref&gt;</ph> property.","pos":[145,258],"source":" This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property."}]}],"pos":[80401,80660],"yaml":true},{"content":"Default values for the route.","nodes":[{"pos":[0,29],"content":"Default values for the route.","nodes":[{"content":"Default values for the route.","pos":[0,29]}]}],"pos":[80750,80780],"yaml":true},{"content":"Constraints that a URL request must meet in order to be processed as this route.","nodes":[{"pos":[0,80],"content":"Constraints that a URL request must meet in order to be processed as this route.","nodes":[{"content":"Constraints that a URL request must meet in order to be processed as this route.","pos":[0,80]}]}],"pos":[80873,80954],"yaml":true},{"content":"The route that is added to the route collection.","nodes":[{"pos":[0,48],"content":"The route that is added to the route collection.","nodes":[{"content":"The route that is added to the route collection.","pos":[0,48]}]}],"pos":[81022,81071],"yaml":true},{"content":"Provides a way to define routes for Web Forms applications.","nodes":[{"pos":[0,59],"content":"Provides a way to define routes for Web Forms applications.","nodes":[{"content":"Provides a way to define routes for Web Forms applications.","pos":[0,59]}]}],"pos":[82912,82972],"yaml":true},{"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","nodes":[{"pos":[0,267],"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","nodes":[{"content":"This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.","pos":[0,267],"nodes":[{"content":"This method is provided for coding convenience.","pos":[0,47]},{"content":"It is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.Add%2A&gt;</ph> method and passing a <ph id=\"ph2\">&lt;xref:System.Web.Routing.Route&gt;</ph> object that is created by using the <ph id=\"ph3\">&lt;xref:System.Web.Routing.PageRouteHandler&gt;</ph> class.","pos":[48,267],"source":" It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class."}]}]}],"pos":[82983,83251],"yaml":true,"extradata":"MT"},{"content":"The name of the route.","nodes":[{"pos":[0,22],"content":"The name of the route.","nodes":[{"content":"The name of the route.","pos":[0,22]}]}],"pos":[84245,84268],"yaml":true},{"content":"The URL pattern for the route.","nodes":[{"pos":[0,30],"content":"The URL pattern for the route.","nodes":[{"content":"The URL pattern for the route.","pos":[0,30]}]}],"pos":[84332,84363],"yaml":true},{"content":"The physical URL for the route.","nodes":[{"pos":[0,31],"content":"The physical URL for the route.","nodes":[{"content":"The physical URL for the route.","pos":[0,31]}]}],"pos":[84431,84463],"yaml":true},{"content":"A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property.","nodes":[{"pos":[0,258],"content":"A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property.","nodes":[{"content":"A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked).","pos":[0,144]},{"content":"This parameter sets the <ph id=\"ph1\">&lt;xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"&gt;&lt;/xref&gt;</ph> property.","pos":[145,258],"source":" This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property."}]}],"pos":[84542,84801],"yaml":true},{"content":"Default values for the route parameters.","nodes":[{"pos":[0,40],"content":"Default values for the route parameters.","nodes":[{"content":"Default values for the route parameters.","pos":[0,40]}]}],"pos":[84891,84932],"yaml":true},{"content":"Constraints that a URL request must meet in order to be processed as this route.","nodes":[{"pos":[0,80],"content":"Constraints that a URL request must meet in order to be processed as this route.","nodes":[{"content":"Constraints that a URL request must meet in order to be processed as this route.","pos":[0,80]}]}],"pos":[85025,85106],"yaml":true},{"content":"Values that are associated with the route that are not used to determine whether a route matches a URL pattern.","nodes":[{"pos":[0,111],"content":"Values that are associated with the route that are not used to determine whether a route matches a URL pattern.","nodes":[{"content":"Values that are associated with the route that are not used to determine whether a route matches a URL pattern.","pos":[0,111]}]}],"pos":[85198,85310],"yaml":true},{"content":"The route that is added to the route collection.","nodes":[{"pos":[0,48],"content":"The route that is added to the route collection.","nodes":[{"content":"The route that is added to the route collection.","pos":[0,48]}]}],"pos":[85378,85427],"yaml":true},{"content":"The <code>routeUrl</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">routeUrl</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>routeUrl</code> parameter is `null`."}],"pos":[85604,85651],"yaml":true},{"content":"Removes the route from the <xref href=\"System.Web.Routing.RouteCollection\"></xref> object at the specified index.","nodes":[{"pos":[0,113],"content":"Removes the route from the <ph id=\"ph1\">&lt;xref href=\"System.Web.Routing.RouteCollection\"&gt;&lt;/xref&gt;</ph> object at the specified index.","source":"Removes the route from the <xref href=\"System.Web.Routing.RouteCollection\"></xref> object at the specified index."}],"pos":[86634,86748],"yaml":true},{"content":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"pos":[0,235],"content":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteCollection.GetWriteLock%2A&gt;</ph> method to make sure that you interact with the collection without conflicts from other processes.","pos":[0,235],"source":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes."}]}],"pos":[86759,86995],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the route to remove.","nodes":[{"pos":[0,44],"content":"The zero-based index of the route to remove.","nodes":[{"content":"The zero-based index of the route to remove.","pos":[0,44]}]}],"pos":[87142,87187],"yaml":true},{"content":"Gets or sets a value that indicates whether ASP.NET routing should handle URLs that match an existing file.","nodes":[{"pos":[0,107],"content":"Gets or sets a value that indicates whether ASP.NET routing should handle URLs that match an existing file.","nodes":[{"content":"Gets or sets a value that indicates whether ASP.NET routing should handle URLs that match an existing file.","pos":[0,107]}]}],"pos":[88233,88341],"yaml":true},{"content":"Although this value can be changed dynamically, any change made after a service has been activated will be ignored when using ASP.NET routing integration. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][ASP.NET Routing Integration](http://go.microsoft.com/fwlink/?LinkId=195235).","nodes":[{"pos":[0,281],"content":"Although this value can be changed dynamically, any change made after a service has been activated will be ignored when using ASP.NET routing integration. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][ASP.NET Routing Integration](http://go.microsoft.com/fwlink/?LinkId=195235).","nodes":[{"content":"Although this value can be changed dynamically, any change made after a service has been activated will be ignored when using ASP.NET routing integration.","pos":[0,154]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>ASP.NET Routing Integration<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=195235)</ept>.","pos":[155,281],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][ASP.NET Routing Integration](http://go.microsoft.com/fwlink/?LinkId=195235)."}]}],"pos":[88352,88634],"yaml":true,"extradata":"MT"},{"content":"`true` if ASP.NET routing handles all requests, even those that match an existing file; otherwise, `false`. The default value is `false`.","nodes":[{"pos":[0,137],"content":"`true` if ASP.NET routing handles all requests, even those that match an existing file; otherwise, `false`. The default value is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if ASP.NET routing handles all requests, even those that match an existing file; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,107],"source":"`true` if ASP.NET routing handles all requests, even those that match an existing file; otherwise, `false`."},{"content":"The default value is <ph id=\"ph1\">`false`</ph>.","pos":[108,137],"source":" The default value is `false`."}]}],"pos":[88760,88900],"yaml":true},{"content":"Replaces the route at the specified index.","nodes":[{"pos":[0,42],"content":"Replaces the route at the specified index.","nodes":[{"content":"Replaces the route at the specified index.","pos":[0,42]}]}],"pos":[90069,90112],"yaml":true},{"content":"When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection.  \n  \n Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"pos":[0,144],"content":"When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection.","nodes":[{"content":"When you add an unnamed route to the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection&gt;</ph> object, you cannot add a route that already is in the collection.","pos":[0,144],"source":"When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection."}]},{"pos":[151,386],"content":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.Routing.RouteCollection.GetReadLock%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Web.Routing.RouteCollection.GetWriteLock%2A&gt;</ph> method to make sure that you interact with the collection without conflicts from other processes.","pos":[0,235],"source":"Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes."}]}],"pos":[90123,90514],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the route to replace.","nodes":[{"pos":[0,45],"content":"The zero-based index of the route to replace.","nodes":[{"content":"The zero-based index of the route to replace.","pos":[0,45]}]}],"pos":[90693,90739],"yaml":true},{"content":"The route to add at the specified index.","nodes":[{"pos":[0,40],"content":"The route to add at the specified index.","nodes":[{"content":"The route to add at the specified index.","pos":[0,40]}]}],"pos":[90814,90855],"yaml":true},{"content":"<code>item</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;item&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>item</code> is `null`."}],"pos":[91027,91056],"yaml":true},{"content":"<code>item</code> is already in the collection.","nodes":[{"pos":[0,47],"content":"<ph id=\"ph1\">&lt;code&gt;item&lt;/code&gt;</ph> is already in the collection.","source":"<code>item</code> is already in the collection."}],"pos":[91150,91198],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Routing.RouteCollection\n  commentId: T:System.Web.Routing.RouteCollection\n  id: RouteCollection\n  children:\n  - System.Web.Routing.RouteCollection.#ctor\n  - System.Web.Routing.RouteCollection.#ctor(System.Web.Hosting.VirtualPathProvider)\n  - System.Web.Routing.RouteCollection.Add(System.String,System.Web.Routing.RouteBase)\n  - System.Web.Routing.RouteCollection.AppendTrailingSlash\n  - System.Web.Routing.RouteCollection.ClearItems\n  - System.Web.Routing.RouteCollection.GetReadLock\n  - System.Web.Routing.RouteCollection.GetRouteData(System.Web.HttpContextBase)\n  - System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)\n  - System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)\n  - System.Web.Routing.RouteCollection.GetWriteLock\n  - System.Web.Routing.RouteCollection.Ignore(System.String,System.Object)\n  - System.Web.Routing.RouteCollection.Ignore(System.String)\n  - System.Web.Routing.RouteCollection.InsertItem(System.Int32,System.Web.Routing.RouteBase)\n  - System.Web.Routing.RouteCollection.Item(System.String)\n  - System.Web.Routing.RouteCollection.LowercaseUrls\n  - System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String)\n  - System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean)\n  - System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary)\n  - System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)\n  - System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)\n  - System.Web.Routing.RouteCollection.RemoveItem(System.Int32)\n  - System.Web.Routing.RouteCollection.RouteExistingFiles\n  - System.Web.Routing.RouteCollection.SetItem(System.Int32,System.Web.Routing.RouteBase)\n  langs:\n  - csharp\n  name: RouteCollection\n  nameWithType: RouteCollection\n  fullName: System.Web.Routing.RouteCollection\n  type: Class\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Provides a collection of routes for ASP.NET routing.\n  remarks: \"The <xref:System.Web.Routing.RouteCollection> class provides methods that enable you to manage a collection of objects that derive from the <xref:System.Web.Routing.RouteBase> class.  \\n  \\n Typically, you will use the `static`<xref:System.Web.Routing.RouteTable.Routes%2A> property of the <xref:System.Web.Routing.RouteTable> class to retrieve a <xref:System.Web.Routing.RouteCollection> object. The <xref:System.Web.Routing.RouteTable.Routes%2A> property stores all the routes for an ASP.NET application. ASP.NET routing iterates through the routes in the <xref:System.Web.Routing.RouteTable.Routes%2A> property to find the route that matches a URL.  \\n  \\n To construct a URL, you call the <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method and pass in a collection of values. The <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method finds the first route with parameters that match the values that you passed in, and returns a <xref:System.Web.Routing.VirtualPathData> object that contains information about the matching route. You retrieve the URL through the <xref:System.Web.Routing.VirtualPathData.VirtualPath%2A> property of the <xref:System.Web.Routing.VirtualPathData> object.  \\n  \\n You can add a route either with a name or without a name. Including a name enables you to distinguish between similar routes when URLs are constructed. If you do not specify a name, ASP.NET routing uses the first matching route in the collection to construct a URL.  \\n  \\n When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection. When you add a named route, you cannot use a name that already identifies a route in the collection.  \\n  \\n You use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.  \\n  \\n For more information about how to add a route to a route collection, see [ASP.NET Routing](http://msdn.microsoft.com/library/892441af-8f1d-483e-ab5f-b82c23576f5a).\"\n  syntax:\n    content: 'public class RouteCollection : System.Collections.ObjectModel.Collection<System.Web.Routing.RouteBase>'\n  inheritance:\n  - System.Object\n  - System.Collections.ObjectModel.Collection`1\n  implements: []\n  inheritedMembers:\n  - System.Collections.ObjectModel.Collection`1.Add(`0)\n  - System.Collections.ObjectModel.Collection`1.Clear\n  - System.Collections.ObjectModel.Collection`1.Contains(`0)\n  - System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)\n  - System.Collections.ObjectModel.Collection`1.Count\n  - System.Collections.ObjectModel.Collection`1.GetEnumerator\n  - System.Collections.ObjectModel.Collection`1.IndexOf(`0)\n  - System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n  - System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)\n  - System.Collections.ObjectModel.Collection`1.Item(System.Int32)\n  - System.Collections.ObjectModel.Collection`1.Items\n  - System.Collections.ObjectModel.Collection`1.Remove(`0)\n  - System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)\n  - System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized\n  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  - System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.#ctor\n  commentId: M:System.Web.Routing.RouteCollection.#ctor\n  id: '#ctor'\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: RouteCollection()\n  nameWithType: RouteCollection.RouteCollection()\n  fullName: RouteCollection.RouteCollection()\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Initializes a new instance of the <xref href=\"System.Web.Routing.RouteCollection\"></xref> class.\n  syntax:\n    content: public RouteCollection ();\n    parameters: []\n  overload: System.Web.Routing.RouteCollection.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.#ctor(System.Web.Hosting.VirtualPathProvider)\n  commentId: M:System.Web.Routing.RouteCollection.#ctor(System.Web.Hosting.VirtualPathProvider)\n  id: '#ctor(System.Web.Hosting.VirtualPathProvider)'\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: RouteCollection(VirtualPathProvider)\n  nameWithType: RouteCollection.RouteCollection(VirtualPathProvider)\n  fullName: RouteCollection.RouteCollection(VirtualPathProvider)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Initializes a new instance of the <xref href=\"System.Web.Routing.RouteCollection\"></xref> class by using the specified virtual path provider.\n  syntax:\n    content: public RouteCollection (System.Web.Hosting.VirtualPathProvider virtualPathProvider);\n    parameters:\n    - id: virtualPathProvider\n      type: System.Web.Hosting.VirtualPathProvider\n      description: A provider for retrieving resources from a virtual file system.\n  overload: System.Web.Routing.RouteCollection.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.Add(System.String,System.Web.Routing.RouteBase)\n  commentId: M:System.Web.Routing.RouteCollection.Add(System.String,System.Web.Routing.RouteBase)\n  id: Add(System.String,System.Web.Routing.RouteBase)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: Add(String, RouteBase)\n  nameWithType: RouteCollection.Add(String, RouteBase)\n  fullName: RouteCollection.Add(String, RouteBase)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Adds a route to the end of the <xref href=\"System.Web.Routing.RouteCollection\"></xref> object and assigns the specified name to the route.\n  remarks: \"The <xref:System.Web.Routing.RouteCollection.Add%2A> method enables you to define a name for a route when you add it to the route collection. By defining a name for the route, you can specify a particular route to use when you use routing to construct a URL. Specifying a particular route is important when more than one route matches the values that you pass to the <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method. If you do not specify a named route, ASP.NET routing will use the first route in the collection that matches the values. For more information, see [How to: Construct URLs from Routes](http://msdn.microsoft.com/library/1ffd4085-71f6-4822-be8f-f682ca638650).  \\n  \\n A name can be used only one time in the <xref:System.Web.Routing.RouteCollection> object.  \\n  \\n If you do not have to specify a name for the route, you can add the route by calling the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method.  \\n  \\n Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.\"\n  example:\n  - \"The following example shows how to add a route to a <xref:System.Web.Routing.RouteCollection> object and assign a name to the route.  \\n  \\n [!code-csharp[System.Web.Routing.RouteCollection.MapPageRoute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute/cs/global.asax#1)]\\n [!code-vb[System.Web.Routing.RouteCollection.MapPageRoute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute/vb/global.asax#1)]\"\n  syntax:\n    content: public void Add (string name, System.Web.Routing.RouteBase item);\n    parameters:\n    - id: name\n      type: System.String\n      description: The value that identifies the route. The value can be `null` or an empty string.\n    - id: item\n      type: System.Web.Routing.RouteBase\n      description: The route to add to the end of the collection.\n  overload: System.Web.Routing.RouteCollection.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>item</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>name</code> is already used in the collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.AppendTrailingSlash\n  commentId: P:System.Web.Routing.RouteCollection.AppendTrailingSlash\n  id: AppendTrailingSlash\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: AppendTrailingSlash\n  nameWithType: RouteCollection.AppendTrailingSlash\n  fullName: RouteCollection.AppendTrailingSlash\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Gets or sets a value that indicates whether trailing slashes are added when virtual paths are normalized.\n  syntax:\n    content: public bool AppendTrailingSlash { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if trailing slashes are added; otherwise, `false`. The default is `false`.'\n  overload: System.Web.Routing.RouteCollection.AppendTrailingSlash*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.ClearItems\n  commentId: M:System.Web.Routing.RouteCollection.ClearItems\n  id: ClearItems\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: ClearItems()\n  nameWithType: RouteCollection.ClearItems()\n  fullName: RouteCollection.ClearItems()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Removes all the elements from the <xref href=\"System.Web.Routing.RouteCollection\"></xref> object.\n  remarks: Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.\n  syntax:\n    content: protected override void ClearItems ();\n    parameters: []\n  overload: System.Web.Routing.RouteCollection.ClearItems*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.GetReadLock\n  commentId: M:System.Web.Routing.RouteCollection.GetReadLock\n  id: GetReadLock\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: GetReadLock()\n  nameWithType: RouteCollection.GetReadLock()\n  fullName: RouteCollection.GetReadLock()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Provides an object for managing thread safety when you retrieve an object from the collection.\n  remarks: \"The <xref:System.Web.Routing.RouteCollection> object is available to multiple processes in the application. Therefore, if you have to retrieve a route when the application is running, use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method in order to guarantee thread safety. By obtaining a read lock on the route collection, you make sure that the collection will not be modified while you are trying to retrieve it.  \\n  \\n The <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method stops the thread from continuing until the lock can be acquired. If a write lock is in place, the thread waits until the update is completed and the write lock is released. The read lock on the route collection is released when the <xref:System.IDisposable> object that is returned by this method is disposed.  \\n  \\n If you do not use <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>, you might get an error while you are reading through the <xref:System.Web.Routing.RouteCollection> collection. For example, suppose you loop through the objects in the <xref:System.Web.Routing.RouteCollection> collection to read them, without calling <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>. While you are doing that, another thread from another request might call <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> and add a route to the collection. The first thread will then fail with an error.  \\n  \\n There are two scenarios in which you do not have to call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>:  \\n  \\n-   Public methods of the <xref:System.Web.Routing.RouteCollection> class such as <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> and <xref:System.Web.Routing.RouteCollection.GetRouteData%2A> call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> internally. Therefore, you do not have to explicitly call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> when you call a public method of the <xref:System.Web.Routing.RouteCollection> class to retrieve data from the collection.  \\n  \\n-   When the application is starting and is not yet processing requests, such as in the `Application_Start` event handler, only one thread is running. Because there are no other threads that might update the collection while you are reading it, you do not have to call <xref:System.Web.Routing.RouteCollection.GetReadLock%2A>.\"\n  example:\n  - The following example shows how to use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method when you retrieve a route while the application is running. The `Using` statement ensures that no matter what happens at run time when you read from the collection (whether the code completes normally or an exception is thrown) the lock will be safely released at the end of the `Using` code block.\n  syntax:\n    content: public IDisposable GetReadLock ();\n    parameters: []\n    return:\n      type: System.IDisposable\n      description: An object that manages thread safety.\n  overload: System.Web.Routing.RouteCollection.GetReadLock*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.GetRouteData(System.Web.HttpContextBase)\n  commentId: M:System.Web.Routing.RouteCollection.GetRouteData(System.Web.HttpContextBase)\n  id: GetRouteData(System.Web.HttpContextBase)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: GetRouteData(HttpContextBase)\n  nameWithType: RouteCollection.GetRouteData(HttpContextBase)\n  fullName: RouteCollection.GetRouteData(HttpContextBase)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Returns information about the route in the collection that matches the specified values.\n  syntax:\n    content: public System.Web.Routing.RouteData GetRouteData (System.Web.HttpContextBase httpContext);\n    parameters:\n    - id: httpContext\n      type: System.Web.HttpContextBase\n      description: An object that encapsulates information about the HTTP request.\n    return:\n      type: System.Web.Routing.RouteData\n      description: An object that contains the values from the route definition.\n  overload: System.Web.Routing.RouteCollection.GetRouteData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>context</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Web.HttpContextBase.Request\"></xref> property of the object in the <code>context</code> parameter is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)\n  commentId: M:System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)\n  id: GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: GetVirtualPath(RequestContext, RouteValueDictionary)\n  nameWithType: RouteCollection.GetVirtualPath(RequestContext, RouteValueDictionary)\n  fullName: RouteCollection.GetVirtualPath(RequestContext, RouteValueDictionary)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Returns information about the URL path that is associated with the route, given the specified context and parameter values.\n  syntax:\n    content: public System.Web.Routing.VirtualPathData GetVirtualPath (System.Web.Routing.RequestContext requestContext, System.Web.Routing.RouteValueDictionary values);\n    parameters:\n    - id: requestContext\n      type: System.Web.Routing.RequestContext\n      description: An object that encapsulates information about the requested route.\n    - id: values\n      type: System.Web.Routing.RouteValueDictionary\n      description: An object that contains the parameters for a route.\n    return:\n      type: System.Web.Routing.VirtualPathData\n      description: An object that contains information about the URL path that is associated with the route.\n  overload: System.Web.Routing.RouteCollection.GetVirtualPath*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)\n  commentId: M:System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)\n  id: GetVirtualPath(System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: GetVirtualPath(RequestContext, String, RouteValueDictionary)\n  nameWithType: RouteCollection.GetVirtualPath(RequestContext, String, RouteValueDictionary)\n  fullName: RouteCollection.GetVirtualPath(RequestContext, String, RouteValueDictionary)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Returns information about the URL path that is associated with the named route, given the specified context, route name, and parameter values.\n  syntax:\n    content: public System.Web.Routing.VirtualPathData GetVirtualPath (System.Web.Routing.RequestContext requestContext, string name, System.Web.Routing.RouteValueDictionary values);\n    parameters:\n    - id: requestContext\n      type: System.Web.Routing.RequestContext\n      description: An object that encapsulates information about the requested route.\n    - id: name\n      type: System.String\n      description: The name of the route to use when information about the URL path is retrieved.\n    - id: values\n      type: System.Web.Routing.RouteValueDictionary\n      description: An object that contains the parameters for a route.\n    return:\n      type: System.Web.Routing.VirtualPathData\n      description: An object that contains information about the URL path that is associated with the route.\n  overload: System.Web.Routing.RouteCollection.GetVirtualPath*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: No route could be found that has the name specified in the <code>name</code> parameter.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.GetWriteLock\n  commentId: M:System.Web.Routing.RouteCollection.GetWriteLock\n  id: GetWriteLock\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: GetWriteLock()\n  nameWithType: RouteCollection.GetWriteLock()\n  fullName: RouteCollection.GetWriteLock()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Provides an object for managing thread safety when you add or remove elements in the collection.\n  remarks: \"The recommended approach for defining routes in an ASP.NET application is to add the routes to the <xref:System.Web.Routing.RouteTable.Routes%2A> property in an event handler for the `Application_Start` event in the Global.asax file. For more information, see <xref:System.Web.Routing.RouteCollection>.  \\n  \\n If you have to add a route when the application is running, you use the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to guarantee thread safety. The write lock on the route collection is released when the <xref:System.IDisposable> object that is returned by this method is disposed.\"\n  example:\n  - The following example shows how to use the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method when you add a route while the application is running.\n  syntax:\n    content: public IDisposable GetWriteLock ();\n    parameters: []\n    return:\n      type: System.IDisposable\n      description: An object that manages thread safety.\n  overload: System.Web.Routing.RouteCollection.GetWriteLock*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.Ignore(System.String,System.Object)\n  commentId: M:System.Web.Routing.RouteCollection.Ignore(System.String,System.Object)\n  id: Ignore(System.String,System.Object)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: Ignore(String, Object)\n  nameWithType: RouteCollection.Ignore(String, Object)\n  fullName: RouteCollection.Ignore(String, Object)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Defines a URL pattern that should not be checked for matches against routes if a request URL meets the specified constraints.\n  remarks: \"This method creates a route that is mapped to the <xref:System.Web.Routing.StopRoutingHandler> route handler. After you call this method, requests that match the specified URL pattern will not be processed as route requests.  \\n  \\n ASP.NET routing automatically ignores requests when the URL matches a physical file, such as an image file. In some cases you might also want routing to ignore requests when there is no physical file. For example, the requests that ASP.NET automatically makes for .axd files should not be treated as route requests even though there is no physical file that corresponds to the .axd file-name extension.\"\n  example:\n  - \"The following example shows how to use this method to ignore all URLs that have an .aspx extension. You might want to do this if you register a custom HTTP handler to handle all URLs for files that have the extension \\\".aspx\\\". A single URL pattern that would match all .aspx requests would require two catchall parameters such as `{*path}.aspx/{*pathinfo}`. (This pattern would match any URL that ends in .aspx, including those that have query-string parameters.) However, routing allows only one catchall parameter at the end. As an alternative, you can specify a URL pattern that has a single catchall parameter that matches all URLs and then specify constraints that exclude everything that does not have the .aspx extension, as shown in the following example:  \\n  \\n```vb  \\nroutes.Ignore(\\\"{*allaspx}\\\", new With {.allaspx = \\\".*\\\\.aspx(/.*)?\\\"})  \\n```  \\n  \\n```csharp  \\nroutes.Ignore(\\\"{*allaspx}\\\", new {allaspx=@\\\".*\\\\.aspx(/.*)?\\\"});  \\n```  \\n  \\n The previous line of code would typically be added to a method that is called from the `Application_Start` method in the Global.asax, as shown in the example for the <xref:System.Web.Routing.RouteCollection.Ignore%28System.String%29> overload.\"\n  syntax:\n    content: public void Ignore (string url, object constraints);\n    parameters:\n    - id: url\n      type: System.String\n      description: The URL pattern to be ignored.\n    - id: constraints\n      type: System.Object\n      description: Additional criteria that determine whether a request that matches the URL pattern will be ignored.\n  overload: System.Web.Routing.RouteCollection.Ignore*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>url</code> parameter is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.Ignore(System.String)\n  commentId: M:System.Web.Routing.RouteCollection.Ignore(System.String)\n  id: Ignore(System.String)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: Ignore(String)\n  nameWithType: RouteCollection.Ignore(String)\n  fullName: RouteCollection.Ignore(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Defines a URL pattern that should not be checked for matches against routes.\n  remarks: \"This method creates a route that is mapped to the <xref:System.Web.Routing.StopRoutingHandler> route handler. After you call this method, requests that match the specified URL pattern will not be processed as route requests.  \\n  \\n ASP.NET routing automatically ignores requests when the URL matches a physical file, such as an image file. In some cases you might also want routing to ignore requests when there is no physical file. For example, the requests that ASP.NET automatically makes for .axd files should not be treated as route requests even though there is no physical file that corresponds to the .axd file-name extension.\"\n  example:\n  - \"The default template for MVC projects uses this method to exclude .axd files from routing, as shown in the following example:  \\n  \\n [!code-csharp[MvcDefaultApp#2](~/samples/snippets/csharp/VS_Snippets_WebNet/mvcdefaultapp/cs/global.asax.cs#2)]\\n [!code-vb[MvcDefaultApp#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/mvcdefaultapp/vb/global.asax.vb#2)]\"\n  syntax:\n    content: public void Ignore (string url);\n    parameters:\n    - id: url\n      type: System.String\n      description: The URL pattern to be ignored.\n  overload: System.Web.Routing.RouteCollection.Ignore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.InsertItem(System.Int32,System.Web.Routing.RouteBase)\n  commentId: M:System.Web.Routing.RouteCollection.InsertItem(System.Int32,System.Web.Routing.RouteBase)\n  id: InsertItem(System.Int32,System.Web.Routing.RouteBase)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: InsertItem(Int32, RouteBase)\n  nameWithType: RouteCollection.InsertItem(Int32, RouteBase)\n  fullName: RouteCollection.InsertItem(Int32, RouteBase)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Inserts the specified route into the <xref href=\"System.Web.Routing.RouteCollection\"></xref> object at the specified index.\n  remarks: \"When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection.  \\n  \\n Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.\"\n  syntax:\n    content: protected override void InsertItem (int index, System.Web.Routing.RouteBase item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which <code>item</code> is inserted.\n    - id: item\n      type: System.Web.Routing.RouteBase\n      description: The route to insert.\n  overload: System.Web.Routing.RouteCollection.InsertItem*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>item</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>item</code> is already in the collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.Item(System.String)\n  commentId: P:System.Web.Routing.RouteCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: RouteCollection.Item(String)\n  fullName: RouteCollection.Item(String)\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Gets the route in the collection that has the specified name.\n  remarks: Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.\n  syntax:\n    content: public System.Web.Routing.RouteBase this[string name] { get; }\n    parameters:\n    - id: name\n      type: System.String\n      description: The value that identifies the route to get.\n    return:\n      type: System.Web.Routing.RouteBase\n      description: An object that has the specified name, or `null` if <code>name</code> is `null`, is an empty string, or does not match any route in the collection.\n  overload: System.Web.Routing.RouteCollection.Item*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.LowercaseUrls\n  commentId: P:System.Web.Routing.RouteCollection.LowercaseUrls\n  id: LowercaseUrls\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: LowercaseUrls\n  nameWithType: RouteCollection.LowercaseUrls\n  fullName: RouteCollection.LowercaseUrls\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Gets or sets a value that indicates whether URLs are converted to lower case when virtual paths are normalized.\n  remarks: If a query string is included in the URL, that part of the URL is not converted to lower case.\n  syntax:\n    content: public bool LowercaseUrls { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` to convert URLs to lower case; otherwise `false`. The default is `false`.'\n  overload: System.Web.Routing.RouteCollection.LowercaseUrls*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String)\n  commentId: M:System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String)\n  id: MapPageRoute(System.String,System.String,System.String)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: MapPageRoute(String, String, String)\n  nameWithType: RouteCollection.MapPageRoute(String, String, String)\n  fullName: RouteCollection.MapPageRoute(String, String, String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Provides a way to define routes for Web Forms applications.\n  remarks: This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.\n  example:\n  - \"The following example shows how to define a route by using this method. The first statement defines a route that does not have a name. The second statement defines a named route. This example is part of a larger example that is available in the <xref:System.Web.Routing.RouteCollection.MapPageRoute%2A> method overview.  \\n  \\n [!code-csharp[System.Web.Routing.RouteCollection.MapPageRoute#140](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute/cs/global.asax#140)]\\n [!code-vb[System.Web.Routing.RouteCollection.MapPageRoute#140](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute/vb/global.asax#140)]\"\n  syntax:\n    content: public System.Web.Routing.Route MapPageRoute (string routeName, string routeUrl, string physicalFile);\n    parameters:\n    - id: routeName\n      type: System.String\n      description: The name of the route.\n    - id: routeUrl\n      type: System.String\n      description: The URL pattern for the route.\n    - id: physicalFile\n      type: System.String\n      description: The physical URL for the route.\n    return:\n      type: System.Web.Routing.Route\n      description: The route that is added to the route collection.\n  overload: System.Web.Routing.RouteCollection.MapPageRoute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean)\n  commentId: M:System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean)\n  id: MapPageRoute(System.String,System.String,System.String,System.Boolean)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: MapPageRoute(String, String, String, Boolean)\n  nameWithType: RouteCollection.MapPageRoute(String, String, String, Boolean)\n  fullName: RouteCollection.MapPageRoute(String, String, String, Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Provides a way to define routes for Web Forms applications.\n  remarks: This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.\n  example:\n  - \"The following example shows how to define a route by using this method. This example is part of a larger example that is available in the <xref:System.Web.Routing.RouteCollection.MapPageRoute%2A> method overview.  \\n  \\n [!code-csharp[System.Web.Routing.RouteCollection.MapPageRoute#145](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute/cs/global.asax#145)]\\n [!code-vb[System.Web.Routing.RouteCollection.MapPageRoute#145](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute/vb/global.asax#145)]\"\n  syntax:\n    content: public System.Web.Routing.Route MapPageRoute (string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess);\n    parameters:\n    - id: routeName\n      type: System.String\n      description: The name of the route.\n    - id: routeUrl\n      type: System.String\n      description: The URL pattern for the route.\n    - id: physicalFile\n      type: System.String\n      description: The physical URL for the route.\n    - id: checkPhysicalUrlAccess\n      type: System.Boolean\n      description: A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property.\n    return:\n      type: System.Web.Routing.Route\n      description: The route that is added to the route collection.\n  overload: System.Web.Routing.RouteCollection.MapPageRoute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary)\n  commentId: M:System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary)\n  id: MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: MapPageRoute(String, String, String, Boolean, RouteValueDictionary)\n  nameWithType: RouteCollection.MapPageRoute(String, String, String, Boolean, RouteValueDictionary)\n  fullName: RouteCollection.MapPageRoute(String, String, String, Boolean, RouteValueDictionary)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Provides a way to define routes for Web Forms applications.\n  remarks: This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.\n  example:\n  - \"The following example shows how to define a route by using this method. This example is part of a larger example that is available in the <xref:System.Web.Routing.RouteCollection.MapPageRoute%2A> method overview.  \\n  \\n [!code-csharp[System.Web.Routing.RouteCollection.MapPageRoute#150](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute/cs/global.asax#150)]\\n [!code-vb[System.Web.Routing.RouteCollection.MapPageRoute#150](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute/vb/global.asax#150)]\"\n  syntax:\n    content: public System.Web.Routing.Route MapPageRoute (string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess, System.Web.Routing.RouteValueDictionary defaults);\n    parameters:\n    - id: routeName\n      type: System.String\n      description: The name of the route.\n    - id: routeUrl\n      type: System.String\n      description: The URL pattern for the route.\n    - id: physicalFile\n      type: System.String\n      description: The physical URL for the route.\n    - id: checkPhysicalUrlAccess\n      type: System.Boolean\n      description: A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property.\n    - id: defaults\n      type: System.Web.Routing.RouteValueDictionary\n      description: Default values for the route parameters.\n    return:\n      type: System.Web.Routing.Route\n      description: The route that is added to the route collection.\n  overload: System.Web.Routing.RouteCollection.MapPageRoute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)\n  commentId: M:System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)\n  id: MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: MapPageRoute(String, String, String, Boolean, RouteValueDictionary, RouteValueDictionary)\n  nameWithType: RouteCollection.MapPageRoute(String, String, String, Boolean, RouteValueDictionary, RouteValueDictionary)\n  fullName: RouteCollection.MapPageRoute(String, String, String, Boolean, RouteValueDictionary, RouteValueDictionary)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Provides a way to define routes for Web Forms applications.\n  remarks: This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.\n  example:\n  - \"The following example shows how to define a route by using this method. This example is part of a larger example that is available in the <xref:System.Web.Routing.RouteCollection.MapPageRoute%2A> method overview.  \\n  \\n [!code-csharp[System.Web.Routing.RouteCollection.MapPageRoute#155](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute/cs/global.asax#155)]\\n [!code-vb[System.Web.Routing.RouteCollection.MapPageRoute#155](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute/vb/global.asax#155)]\"\n  syntax:\n    content: public System.Web.Routing.Route MapPageRoute (string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess, System.Web.Routing.RouteValueDictionary defaults, System.Web.Routing.RouteValueDictionary constraints);\n    parameters:\n    - id: routeName\n      type: System.String\n      description: The name of the route.\n    - id: routeUrl\n      type: System.String\n      description: The URL pattern for the route.\n    - id: physicalFile\n      type: System.String\n      description: The physical URL for the route.\n    - id: checkPhysicalUrlAccess\n      type: System.Boolean\n      description: A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property.\n    - id: defaults\n      type: System.Web.Routing.RouteValueDictionary\n      description: Default values for the route.\n    - id: constraints\n      type: System.Web.Routing.RouteValueDictionary\n      description: Constraints that a URL request must meet in order to be processed as this route.\n    return:\n      type: System.Web.Routing.Route\n      description: The route that is added to the route collection.\n  overload: System.Web.Routing.RouteCollection.MapPageRoute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)\n  commentId: M:System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)\n  id: MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: MapPageRoute(String, String, String, Boolean, RouteValueDictionary, RouteValueDictionary, RouteValueDictionary)\n  nameWithType: RouteCollection.MapPageRoute(String, String, String, Boolean, RouteValueDictionary, RouteValueDictionary, RouteValueDictionary)\n  fullName: RouteCollection.MapPageRoute(String, String, String, Boolean, RouteValueDictionary, RouteValueDictionary, RouteValueDictionary)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Provides a way to define routes for Web Forms applications.\n  remarks: This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.\n  example:\n  - \"The following example shows how to define a route by using this method. This example is part of a larger example that is available in the <xref:System.Web.Routing.RouteCollection.MapPageRoute%2A> method overview.  \\n  \\n [!code-csharp[System.Web.Routing.RouteCollection.MapPageRoute#160](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute/cs/global.asax#160)]\\n [!code-vb[System.Web.Routing.RouteCollection.MapPageRoute#160](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute/vb/global.asax#160)]\"\n  syntax:\n    content: public System.Web.Routing.Route MapPageRoute (string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess, System.Web.Routing.RouteValueDictionary defaults, System.Web.Routing.RouteValueDictionary constraints, System.Web.Routing.RouteValueDictionary dataTokens);\n    parameters:\n    - id: routeName\n      type: System.String\n      description: The name of the route.\n    - id: routeUrl\n      type: System.String\n      description: The URL pattern for the route.\n    - id: physicalFile\n      type: System.String\n      description: The physical URL for the route.\n    - id: checkPhysicalUrlAccess\n      type: System.Boolean\n      description: A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href=\"System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\"></xref> property.\n    - id: defaults\n      type: System.Web.Routing.RouteValueDictionary\n      description: Default values for the route parameters.\n    - id: constraints\n      type: System.Web.Routing.RouteValueDictionary\n      description: Constraints that a URL request must meet in order to be processed as this route.\n    - id: dataTokens\n      type: System.Web.Routing.RouteValueDictionary\n      description: Values that are associated with the route that are not used to determine whether a route matches a URL pattern.\n    return:\n      type: System.Web.Routing.Route\n      description: The route that is added to the route collection.\n  overload: System.Web.Routing.RouteCollection.MapPageRoute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>routeUrl</code> parameter is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.RemoveItem(System.Int32)\n  commentId: M:System.Web.Routing.RouteCollection.RemoveItem(System.Int32)\n  id: RemoveItem(System.Int32)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: RemoveItem(Int32)\n  nameWithType: RouteCollection.RemoveItem(Int32)\n  fullName: RouteCollection.RemoveItem(Int32)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Removes the route from the <xref href=\"System.Web.Routing.RouteCollection\"></xref> object at the specified index.\n  remarks: Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.\n  syntax:\n    content: protected override void RemoveItem (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the route to remove.\n  overload: System.Web.Routing.RouteCollection.RemoveItem*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.RouteExistingFiles\n  commentId: P:System.Web.Routing.RouteCollection.RouteExistingFiles\n  id: RouteExistingFiles\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: RouteExistingFiles\n  nameWithType: RouteCollection.RouteExistingFiles\n  fullName: RouteCollection.RouteExistingFiles\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Gets or sets a value that indicates whether ASP.NET routing should handle URLs that match an existing file.\n  remarks: Although this value can be changed dynamically, any change made after a service has been activated will be ignored when using ASP.NET routing integration. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][ASP.NET Routing Integration](http://go.microsoft.com/fwlink/?LinkId=195235).\n  syntax:\n    content: public bool RouteExistingFiles { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if ASP.NET routing handles all requests, even those that match an existing file; otherwise, `false`. The default value is `false`.'\n  overload: System.Web.Routing.RouteCollection.RouteExistingFiles*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Routing.RouteCollection.SetItem(System.Int32,System.Web.Routing.RouteBase)\n  commentId: M:System.Web.Routing.RouteCollection.SetItem(System.Int32,System.Web.Routing.RouteBase)\n  id: SetItem(System.Int32,System.Web.Routing.RouteBase)\n  parent: System.Web.Routing.RouteCollection\n  langs:\n  - csharp\n  name: SetItem(Int32, RouteBase)\n  nameWithType: RouteCollection.SetItem(Int32, RouteBase)\n  fullName: RouteCollection.SetItem(Int32, RouteBase)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Replaces the route at the specified index.\n  remarks: \"When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection.  \\n  \\n Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.\"\n  syntax:\n    content: protected override void SetItem (int index, System.Web.Routing.RouteBase item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the route to replace.\n    - id: item\n      type: System.Web.Routing.RouteBase\n      description: The route to add at the specified index.\n  overload: System.Web.Routing.RouteCollection.SetItem*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>item</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>item</code> is already in the collection.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\nreferences:\n- uid: System.Collections.ObjectModel.Collection`1\n  name: Collection<T>\n  nameWithType: Collection<T>\n  fullName: System.Collections.ObjectModel.Collection<T>\n- uid: System.Web.Routing.RouteBase\n  name: RouteBase\n  nameWithType: RouteBase\n  fullName: System.Web.Routing.RouteBase\n- uid: System.Collections.ObjectModel.Collection{System.Web.Routing.RouteBase}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: Collection<RouteBase>\n  nameWithType: Collection<RouteBase>\n  fullName: System.Collections.ObjectModel.Collection<System.Web.Routing.RouteBase>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.Collection`1\n    name: Collection\n    nameWithType: Collection\n    fullName: System.Collections.ObjectModel.Collection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Web.Routing.RouteBase\n    name: RouteBase\n    nameWithType: RouteBase\n    fullName: System.Web.Routing.RouteBase\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Web.Routing.RouteCollection.#ctor\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: RouteCollection()\n  nameWithType: RouteCollection.RouteCollection()\n  fullName: RouteCollection.RouteCollection()\n- uid: System.Web.Routing.RouteCollection.#ctor(System.Web.Hosting.VirtualPathProvider)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: RouteCollection(VirtualPathProvider)\n  nameWithType: RouteCollection.RouteCollection(VirtualPathProvider)\n  fullName: RouteCollection.RouteCollection(VirtualPathProvider)\n- uid: System.Web.Hosting.VirtualPathProvider\n  parent: System.Web.Hosting\n  isExternal: false\n  name: VirtualPathProvider\n  nameWithType: VirtualPathProvider\n  fullName: System.Web.Hosting.VirtualPathProvider\n- uid: System.Web.Routing.RouteCollection.Add(System.String,System.Web.Routing.RouteBase)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: Add(String, RouteBase)\n  nameWithType: RouteCollection.Add(String, RouteBase)\n  fullName: RouteCollection.Add(String, RouteBase)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.Routing.RouteCollection.AppendTrailingSlash\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: AppendTrailingSlash\n  nameWithType: RouteCollection.AppendTrailingSlash\n  fullName: RouteCollection.AppendTrailingSlash\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.Routing.RouteCollection.ClearItems\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: ClearItems()\n  nameWithType: RouteCollection.ClearItems()\n  fullName: RouteCollection.ClearItems()\n- uid: System.Web.Routing.RouteCollection.GetReadLock\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: GetReadLock()\n  nameWithType: RouteCollection.GetReadLock()\n  fullName: RouteCollection.GetReadLock()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n- uid: System.Web.Routing.RouteCollection.GetRouteData(System.Web.HttpContextBase)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: GetRouteData(HttpContextBase)\n  nameWithType: RouteCollection.GetRouteData(HttpContextBase)\n  fullName: RouteCollection.GetRouteData(HttpContextBase)\n- uid: System.Web.Routing.RouteData\n  parent: System.Web.Routing\n  isExternal: false\n  name: RouteData\n  nameWithType: RouteData\n  fullName: System.Web.Routing.RouteData\n- uid: System.Web.HttpContextBase\n  parent: System.Web\n  isExternal: false\n  name: HttpContextBase\n  nameWithType: HttpContextBase\n  fullName: System.Web.HttpContextBase\n- uid: System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: GetVirtualPath(RequestContext, RouteValueDictionary)\n  nameWithType: RouteCollection.GetVirtualPath(RequestContext, RouteValueDictionary)\n  fullName: RouteCollection.GetVirtualPath(RequestContext, RouteValueDictionary)\n- uid: System.Web.Routing.VirtualPathData\n  parent: System.Web.Routing\n  isExternal: false\n  name: VirtualPathData\n  nameWithType: VirtualPathData\n  fullName: System.Web.Routing.VirtualPathData\n- uid: System.Web.Routing.RequestContext\n  parent: System.Web.Routing\n  isExternal: false\n  name: RequestContext\n  nameWithType: RequestContext\n  fullName: System.Web.Routing.RequestContext\n- uid: System.Web.Routing.RouteValueDictionary\n  parent: System.Web.Routing\n  isExternal: false\n  name: RouteValueDictionary\n  nameWithType: RouteValueDictionary\n  fullName: System.Web.Routing.RouteValueDictionary\n- uid: System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: GetVirtualPath(RequestContext, String, RouteValueDictionary)\n  nameWithType: RouteCollection.GetVirtualPath(RequestContext, String, RouteValueDictionary)\n  fullName: RouteCollection.GetVirtualPath(RequestContext, String, RouteValueDictionary)\n- uid: System.Web.Routing.RouteCollection.GetWriteLock\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: GetWriteLock()\n  nameWithType: RouteCollection.GetWriteLock()\n  fullName: RouteCollection.GetWriteLock()\n- uid: System.Web.Routing.RouteCollection.Ignore(System.String,System.Object)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: Ignore(String, Object)\n  nameWithType: RouteCollection.Ignore(String, Object)\n  fullName: RouteCollection.Ignore(String, Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.Routing.RouteCollection.Ignore(System.String)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: Ignore(String)\n  nameWithType: RouteCollection.Ignore(String)\n  fullName: RouteCollection.Ignore(String)\n- uid: System.Web.Routing.RouteCollection.InsertItem(System.Int32,System.Web.Routing.RouteBase)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: InsertItem(Int32, RouteBase)\n  nameWithType: RouteCollection.InsertItem(Int32, RouteBase)\n  fullName: RouteCollection.InsertItem(Int32, RouteBase)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.Routing.RouteCollection.Item(System.String)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: Item(String)\n  nameWithType: RouteCollection.Item(String)\n  fullName: RouteCollection.Item(String)\n- uid: System.Web.Routing.RouteCollection.LowercaseUrls\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: LowercaseUrls\n  nameWithType: RouteCollection.LowercaseUrls\n  fullName: RouteCollection.LowercaseUrls\n- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: MapPageRoute(String, String, String)\n  nameWithType: RouteCollection.MapPageRoute(String, String, String)\n  fullName: RouteCollection.MapPageRoute(String, String, String)\n- uid: System.Web.Routing.Route\n  parent: System.Web.Routing\n  isExternal: false\n  name: Route\n  nameWithType: Route\n  fullName: System.Web.Routing.Route\n- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: MapPageRoute(String, String, String, Boolean)\n  nameWithType: RouteCollection.MapPageRoute(String, String, String, Boolean)\n  fullName: RouteCollection.MapPageRoute(String, String, String, Boolean)\n- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: MapPageRoute(String, String, String, Boolean, RouteValueDictionary)\n  nameWithType: RouteCollection.MapPageRoute(String, String, String, Boolean, RouteValueDictionary)\n  fullName: RouteCollection.MapPageRoute(String, String, String, Boolean, RouteValueDictionary)\n- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: MapPageRoute(String, String, String, Boolean, RouteValueDictionary, RouteValueDictionary)\n  nameWithType: RouteCollection.MapPageRoute(String, String, String, Boolean, RouteValueDictionary, RouteValueDictionary)\n  fullName: RouteCollection.MapPageRoute(String, String, String, Boolean, RouteValueDictionary, RouteValueDictionary)\n- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: MapPageRoute(String, String, String, Boolean, RouteValueDictionary, RouteValueDictionary, RouteValueDictionary)\n  nameWithType: RouteCollection.MapPageRoute(String, String, String, Boolean, RouteValueDictionary, RouteValueDictionary, RouteValueDictionary)\n  fullName: RouteCollection.MapPageRoute(String, String, String, Boolean, RouteValueDictionary, RouteValueDictionary, RouteValueDictionary)\n- uid: System.Web.Routing.RouteCollection.RemoveItem(System.Int32)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: RemoveItem(Int32)\n  nameWithType: RouteCollection.RemoveItem(Int32)\n  fullName: RouteCollection.RemoveItem(Int32)\n- uid: System.Web.Routing.RouteCollection.RouteExistingFiles\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: RouteExistingFiles\n  nameWithType: RouteCollection.RouteExistingFiles\n  fullName: RouteCollection.RouteExistingFiles\n- uid: System.Web.Routing.RouteCollection.SetItem(System.Int32,System.Web.Routing.RouteBase)\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: SetItem(Int32, RouteBase)\n  nameWithType: RouteCollection.SetItem(Int32, RouteBase)\n  fullName: RouteCollection.SetItem(Int32, RouteBase)\n- uid: System.Web.Routing.RouteCollection.Ignore*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: Ignore\n  nameWithType: RouteCollection.Ignore\n  fullName: RouteCollection.Ignore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.MapPageRoute*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: MapPageRoute\n  nameWithType: RouteCollection.MapPageRoute\n  fullName: RouteCollection.MapPageRoute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.#ctor*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: RouteCollection\n  nameWithType: RouteCollection.RouteCollection\n  fullName: RouteCollection.RouteCollection\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.Add*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: Add\n  nameWithType: RouteCollection.Add\n  fullName: RouteCollection.Add\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.AppendTrailingSlash*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: AppendTrailingSlash\n  nameWithType: RouteCollection.AppendTrailingSlash\n  fullName: RouteCollection.AppendTrailingSlash\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.ClearItems*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: ClearItems\n  nameWithType: RouteCollection.ClearItems\n  fullName: RouteCollection.ClearItems\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.GetReadLock*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: GetReadLock\n  nameWithType: RouteCollection.GetReadLock\n  fullName: RouteCollection.GetReadLock\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.GetRouteData*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: GetRouteData\n  nameWithType: RouteCollection.GetRouteData\n  fullName: RouteCollection.GetRouteData\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.GetVirtualPath*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: GetVirtualPath\n  nameWithType: RouteCollection.GetVirtualPath\n  fullName: RouteCollection.GetVirtualPath\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.GetWriteLock*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: GetWriteLock\n  nameWithType: RouteCollection.GetWriteLock\n  fullName: RouteCollection.GetWriteLock\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.InsertItem*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: InsertItem\n  nameWithType: RouteCollection.InsertItem\n  fullName: RouteCollection.InsertItem\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.Item*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: Item\n  nameWithType: RouteCollection.Item\n  fullName: RouteCollection.Item\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.LowercaseUrls*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: LowercaseUrls\n  nameWithType: RouteCollection.LowercaseUrls\n  fullName: RouteCollection.LowercaseUrls\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.RemoveItem*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: RemoveItem\n  nameWithType: RouteCollection.RemoveItem\n  fullName: RouteCollection.RemoveItem\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.RouteExistingFiles*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: RouteExistingFiles\n  nameWithType: RouteCollection.RouteExistingFiles\n  fullName: RouteCollection.RouteExistingFiles\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Web.Routing.RouteCollection.SetItem*\n  parent: System.Web.Routing.RouteCollection\n  isExternal: false\n  name: SetItem\n  nameWithType: RouteCollection.SetItem\n  fullName: RouteCollection.SetItem\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Routing/RouteCollection.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Collections.ObjectModel.Collection`1.Add(`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: Add(T)\n  nameWithType: Collection<T>.Add(T)\n  fullName: Collection<T>.Add(T)\n- uid: System.Collections.ObjectModel.Collection`1.Clear\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: Clear()\n  nameWithType: Collection<T>.Clear()\n  fullName: Collection<T>.Clear()\n- uid: System.Collections.ObjectModel.Collection`1.Contains(`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: Contains(T)\n  nameWithType: Collection<T>.Contains(T)\n  fullName: Collection<T>.Contains(T)\n- uid: System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: CopyTo(T[], Int32)\n  nameWithType: Collection<T>.CopyTo(T[], Int32)\n  fullName: Collection<T>.CopyTo(T[], Int32)\n- uid: System.Collections.ObjectModel.Collection`1.Count\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: Count\n  nameWithType: Collection<T>.Count\n  fullName: Collection<T>.Count\n- uid: System.Collections.ObjectModel.Collection`1.GetEnumerator\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: Collection<T>.GetEnumerator()\n  fullName: Collection<T>.GetEnumerator()\n- uid: System.Collections.ObjectModel.Collection`1.IndexOf(`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: IndexOf(T)\n  nameWithType: Collection<T>.IndexOf(T)\n  fullName: Collection<T>.IndexOf(T)\n- uid: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: Insert(Int32, T)\n  nameWithType: Collection<T>.Insert(Int32, T)\n  fullName: Collection<T>.Insert(Int32, T)\n- uid: System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: InsertItem(Int32, T)\n  nameWithType: Collection<T>.InsertItem(Int32, T)\n  fullName: Collection<T>.InsertItem(Int32, T)\n- uid: System.Collections.ObjectModel.Collection`1.Item(System.Int32)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: Collection<T>.Item(Int32)\n  fullName: Collection<T>.Item(Int32)\n- uid: System.Collections.ObjectModel.Collection`1.Items\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: Items\n  nameWithType: Collection<T>.Items\n  fullName: Collection<T>.Items\n- uid: System.Collections.ObjectModel.Collection`1.Remove(`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: Remove(T)\n  nameWithType: Collection<T>.Remove(T)\n  fullName: Collection<T>.Remove(T)\n- uid: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: Collection<T>.RemoveAt(Int32)\n  fullName: Collection<T>.RemoveAt(Int32)\n- uid: System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: SetItem(Int32, T)\n  nameWithType: Collection<T>.SetItem(Int32, T)\n  fullName: Collection<T>.SetItem(Int32, T)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: ICollection<T>.IsReadOnly\n  nameWithType: Collection<T>.ICollection<T>.IsReadOnly\n  fullName: Collection<T>.ICollection<T>.IsReadOnly\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: Collection<T>.ICollection.CopyTo(Array, Int32)\n  fullName: Collection<T>.ICollection.CopyTo(Array, Int32)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: Collection<T>.ICollection.IsSynchronized\n  fullName: Collection<T>.ICollection.IsSynchronized\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: Collection<T>.ICollection.SyncRoot\n  fullName: Collection<T>.ICollection.SyncRoot\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: Collection<T>.IEnumerable.GetEnumerator()\n  fullName: Collection<T>.IEnumerable.GetEnumerator()\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: IList.Add(Object)\n  nameWithType: Collection<T>.IList.Add(Object)\n  fullName: Collection<T>.IList.Add(Object)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: IList.Contains(Object)\n  nameWithType: Collection<T>.IList.Contains(Object)\n  fullName: Collection<T>.IList.Contains(Object)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: IList.IndexOf(Object)\n  nameWithType: Collection<T>.IList.IndexOf(Object)\n  fullName: Collection<T>.IList.IndexOf(Object)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: IList.Insert(Int32, Object)\n  nameWithType: Collection<T>.IList.Insert(Int32, Object)\n  fullName: Collection<T>.IList.Insert(Int32, Object)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: IList.IsFixedSize\n  nameWithType: Collection<T>.IList.IsFixedSize\n  fullName: Collection<T>.IList.IsFixedSize\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: IList.IsReadOnly\n  nameWithType: Collection<T>.IList.IsReadOnly\n  fullName: Collection<T>.IList.IsReadOnly\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: IList.Item(Int32)\n  nameWithType: Collection<T>.IList.Item(Int32)\n  fullName: Collection<T>.IList.Item(Int32)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)\n  parent: System.Collections.ObjectModel.Collection`1\n  isExternal: false\n  name: IList.Remove(Object)\n  nameWithType: Collection<T>.IList.Remove(Object)\n  fullName: Collection<T>.IList.Remove(Object)\n- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableArray\n  isExternal: false\n  name: ToImmutableArray<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableDictionary\n  isExternal: false\n  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Collections.Immutable.ImmutableHashSet\n  isExternal: false\n  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableList\n  isExternal: false\n  name: ToImmutableList<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)\n- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Collections.Immutable.ImmutableSortedDictionary\n  isExternal: false\n  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})\n  parent: System.Collections.Immutable.ImmutableSortedSet\n  isExternal: false\n  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)\n- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)\n  parent: System.Data.DataTableExtensions\n  isExternal: false\n  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)\n- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  fullName: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Append<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: AsEnumerable<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Average(IEnumerable<Decimal>)\n  fullName: Enumerable.Average(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Double>)\n  nameWithType: Enumerable.Average(IEnumerable<Double>)\n  fullName: Enumerable.Average(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int32>)\n  nameWithType: Enumerable.Average(IEnumerable<Int32>)\n  fullName: Enumerable.Average(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int64>)\n  nameWithType: Enumerable.Average(IEnumerable<Int64>)\n  fullName: Enumerable.Average(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Single>)\n  nameWithType: Enumerable.Average(IEnumerable<Single>)\n  fullName: Enumerable.Average(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Max(IEnumerable<Decimal>)\n  fullName: Enumerable.Max(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Double>)\n  nameWithType: Enumerable.Max(IEnumerable<Double>)\n  fullName: Enumerable.Max(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int32>)\n  nameWithType: Enumerable.Max(IEnumerable<Int32>)\n  fullName: Enumerable.Max(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int64>)\n  nameWithType: Enumerable.Max(IEnumerable<Int64>)\n  fullName: Enumerable.Max(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Single>)\n  nameWithType: Enumerable.Max(IEnumerable<Single>)\n  fullName: Enumerable.Max(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Min(IEnumerable<Decimal>)\n  fullName: Enumerable.Min(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Double>)\n  nameWithType: Enumerable.Min(IEnumerable<Double>)\n  fullName: Enumerable.Min(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int32>)\n  nameWithType: Enumerable.Min(IEnumerable<Int32>)\n  fullName: Enumerable.Min(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int64>)\n  nameWithType: Enumerable.Min(IEnumerable<Int64>)\n  fullName: Enumerable.Min(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Single>)\n  nameWithType: Enumerable.Min(IEnumerable<Single>)\n  fullName: Enumerable.Min(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Prepend<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Reverse<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Skip<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)\n  fullName: Enumerable.Sum(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Double>)\n  nameWithType: Enumerable.Sum(IEnumerable<Double>)\n  fullName: Enumerable.Sum(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int32>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int32>)\n  fullName: Enumerable.Sum(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int64>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int64>)\n  fullName: Enumerable.Sum(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Single>)\n  nameWithType: Enumerable.Sum(IEnumerable<Single>)\n  fullName: Enumerable.Sum(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Take<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToArray<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToList<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  fullName: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel<TSource>(IEnumerable<TSource>)\n  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n  fullName: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable<TElement>(IEnumerable<TElement>)\n  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n  fullName: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Ancestors<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: AncestorsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>)\n  fullName: Extensions.Attributes(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Attributes(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>, XName)\n  fullName: Extensions.Attributes(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.DescendantNodes<T>(IEnumerable<T>)\n  fullName: Extensions.DescendantNodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantNodesAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Descendants<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Descendants<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: DescendantsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>)\n  fullName: Extensions.Elements<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Elements<T>(IEnumerable<T>, XName)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>, XName)\n  fullName: Extensions.Elements<T>(IEnumerable<T>, XName)\n- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: InDocumentOrder<T>(IEnumerable<T>)\n  nameWithType: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n  fullName: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Nodes<T>(IEnumerable<T>)\n  nameWithType: Extensions.Nodes<T>(IEnumerable<T>)\n  fullName: Extensions.Nodes<T>(IEnumerable<T>)\n- uid: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove(IEnumerable<XAttribute>)\n  nameWithType: Extensions.Remove(IEnumerable<XAttribute>)\n  fullName: Extensions.Remove(IEnumerable<XAttribute>)\n- uid: System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Xml.Linq.Extensions\n  isExternal: false\n  name: Remove<T>(IEnumerable<T>)\n  nameWithType: Extensions.Remove<T>(IEnumerable<T>)\n  fullName: Extensions.Remove<T>(IEnumerable<T>)\n"}