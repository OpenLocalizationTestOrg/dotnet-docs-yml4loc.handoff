{"nodes":[{"content":"Provides the `abstract` base class for implementing a license provider.","nodes":[{"pos":[0,71],"content":"Provides the <ph id=\"ph1\">`abstract`</ph> base class for implementing a license provider.","source":"Provides the `abstract` base class for implementing a license provider."}],"pos":[615,687],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.ComponentModel.LicenseProvider\"></xref> class.","nodes":[{"pos":[0,99],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseProvider\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ComponentModel.LicenseProvider\"></xref> class."}],"pos":[3091,3191],"yaml":true},{"content":"When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.","nodes":[{"pos":[0,166],"content":"When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.","nodes":[{"content":"When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.","pos":[0,166]}]}],"pos":[4872,5039],"yaml":true},{"content":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies where you can use the licensed object.","nodes":[{"pos":[0,113],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;&lt;/xref&gt;</ph> that specifies where you can use the licensed object.","source":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies where you can use the licensed object."}],"pos":[5319,5433],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> that represents the component requesting the license.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the component requesting the license.","source":"A <xref href=\"System.Type\"></xref> that represents the component requesting the license."}],"pos":[5491,5580],"yaml":true},{"content":"An object that is requesting the license.","nodes":[{"pos":[0,41],"content":"An object that is requesting the license.","nodes":[{"content":"An object that is requesting the license.","pos":[0,41]}]}],"pos":[5644,5686],"yaml":true},{"content":"`true` if a <xref href=\"System.ComponentModel.LicenseException\"></xref> should be thrown when the component cannot be granted a license; otherwise, `false`.","nodes":[{"pos":[0,156],"content":"<ph id=\"ph1\">`true`</ph> if a <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.LicenseException\"&gt;&lt;/xref&gt;</ph> should be thrown when the component cannot be granted a license; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if a <xref href=\"System.ComponentModel.LicenseException\"></xref> should be thrown when the component cannot be granted a license; otherwise, `false`."}],"pos":[5758,5917],"yaml":true},{"content":"A valid <xref href=\"System.ComponentModel.License\"></xref>.","nodes":[{"pos":[0,59],"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph>.","source":"A valid <xref href=\"System.ComponentModel.License\"></xref>."}],"pos":[5990,6050],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.LicenseProvider\n  commentId: T:System.ComponentModel.LicenseProvider\n  id: LicenseProvider\n  children:\n  - System.ComponentModel.LicenseProvider.#ctor\n  - System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  langs:\n  - csharp\n  name: LicenseProvider\n  nameWithType: LicenseProvider\n  fullName: System.ComponentModel.LicenseProvider\n  type: Class\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Provides the `abstract` base class for implementing a license provider.\n  remarks: ''\n  example:\n  - \"The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \\n  \\n [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]\\n [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract class LicenseProvider\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.ComponentModel.LicFileLicenseProvider\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseProvider.#ctor\n  commentId: M:System.ComponentModel.LicenseProvider.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.LicenseProvider\n  langs:\n  - csharp\n  name: LicenseProvider()\n  nameWithType: LicenseProvider.LicenseProvider()\n  fullName: LicenseProvider.LicenseProvider()\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.LicenseProvider\"></xref> class.\n  syntax:\n    content: protected LicenseProvider ();\n    parameters: []\n  overload: System.ComponentModel.LicenseProvider.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  commentId: M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  id: GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  parent: System.ComponentModel.LicenseProvider\n  langs:\n  - csharp\n  name: GetLicense(LicenseContext, Type, Object, Boolean)\n  nameWithType: LicenseProvider.GetLicense(LicenseContext, Type, Object, Boolean)\n  fullName: LicenseProvider.GetLicense(LicenseContext, Type, Object, Boolean)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.\n  syntax:\n    content: public abstract System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);\n    parameters:\n    - id: context\n      type: System.ComponentModel.LicenseContext\n      description: A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies where you can use the licensed object.\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the component requesting the license.\n    - id: instance\n      type: System.Object\n      description: An object that is requesting the license.\n    - id: allowExceptions\n      type: System.Boolean\n      description: '`true` if a <xref href=\"System.ComponentModel.LicenseException\"></xref> should be thrown when the component cannot be granted a license; otherwise, `false`.'\n    return:\n      type: System.ComponentModel.License\n      description: A valid <xref href=\"System.ComponentModel.License\"></xref>.\n  overload: System.ComponentModel.LicenseProvider.GetLicense*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.LicenseProvider.#ctor\n  parent: System.ComponentModel.LicenseProvider\n  isExternal: false\n  name: LicenseProvider()\n  nameWithType: LicenseProvider.LicenseProvider()\n  fullName: LicenseProvider.LicenseProvider()\n- uid: System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  parent: System.ComponentModel.LicenseProvider\n  isExternal: false\n  name: GetLicense(LicenseContext, Type, Object, Boolean)\n  nameWithType: LicenseProvider.GetLicense(LicenseContext, Type, Object, Boolean)\n  fullName: LicenseProvider.GetLicense(LicenseContext, Type, Object, Boolean)\n- uid: System.ComponentModel.License\n  parent: System.ComponentModel\n  isExternal: false\n  name: License\n  nameWithType: License\n  fullName: System.ComponentModel.License\n- uid: System.ComponentModel.LicenseContext\n  parent: System.ComponentModel\n  isExternal: false\n  name: LicenseContext\n  nameWithType: LicenseContext\n  fullName: System.ComponentModel.LicenseContext\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.LicenseProvider.#ctor*\n  parent: System.ComponentModel.LicenseProvider\n  isExternal: false\n  name: LicenseProvider\n  nameWithType: LicenseProvider.LicenseProvider\n  fullName: LicenseProvider.LicenseProvider\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseProvider.xml\n- uid: System.ComponentModel.LicenseProvider.GetLicense*\n  parent: System.ComponentModel.LicenseProvider\n  isExternal: false\n  name: GetLicense\n  nameWithType: LicenseProvider.GetLicense\n  fullName: LicenseProvider.GetLicense\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseProvider.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}