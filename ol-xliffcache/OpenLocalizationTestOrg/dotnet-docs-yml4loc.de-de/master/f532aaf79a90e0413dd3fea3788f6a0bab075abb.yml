### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.ProcessModuleCollection
  commentId: T:System.Diagnostics.ProcessModuleCollection
  id: ProcessModuleCollection
  children:
  - System.Diagnostics.ProcessModuleCollection.#ctor
  - System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])
  - System.Diagnostics.ProcessModuleCollection.Add(System.Diagnostics.ProcessModule)
  - System.Diagnostics.ProcessModuleCollection.AddRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.AsReadOnly
  - System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Diagnostics.ProcessModule)
  - System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Diagnostics.ProcessModule,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Int32,System.Int32,System.Diagnostics.ProcessModule,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.Capacity
  - System.Diagnostics.ProcessModuleCollection.Clear
  - System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)
  - System.Diagnostics.ProcessModuleCollection.ConvertAll``1(System.Converter{System.Diagnostics.ProcessModule,``0})
  - System.Diagnostics.ProcessModuleCollection.CopyTo(System.Int32,System.Diagnostics.ProcessModule[],System.Int32,System.Int32)
  - System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[])
  - System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)
  - System.Diagnostics.ProcessModuleCollection.Count
  - System.Diagnostics.ProcessModuleCollection.Exists(System.Predicate{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.Find(System.Predicate{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.FindAll(System.Predicate{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.FindIndex(System.Predicate{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.FindIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.FindIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.FindLast(System.Predicate{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Predicate{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.ForEach(System.Action{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.GetEnumerator
  - System.Diagnostics.ProcessModuleCollection.GetRange(System.Int32,System.Int32)
  - System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)
  - System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule,System.Int32)
  - System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule,System.Int32,System.Int32)
  - System.Diagnostics.ProcessModuleCollection.Insert(System.Int32,System.Diagnostics.ProcessModule)
  - System.Diagnostics.ProcessModuleCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.Item(System.Int32)
  - System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule)
  - System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule,System.Int32)
  - System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule,System.Int32,System.Int32)
  - System.Diagnostics.ProcessModuleCollection.Remove(System.Diagnostics.ProcessModule)
  - System.Diagnostics.ProcessModuleCollection.RemoveAll(System.Predicate{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.RemoveAt(System.Int32)
  - System.Diagnostics.ProcessModuleCollection.RemoveRange(System.Int32,System.Int32)
  - System.Diagnostics.ProcessModuleCollection.Reverse
  - System.Diagnostics.ProcessModuleCollection.Reverse(System.Int32,System.Int32)
  - System.Diagnostics.ProcessModuleCollection.Sort
  - System.Diagnostics.ProcessModuleCollection.Sort(System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.Sort(System.Comparison{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.ToArray
  - System.Diagnostics.ProcessModuleCollection.TrimExcess
  - System.Diagnostics.ProcessModuleCollection.TrueForAll(System.Predicate{System.Diagnostics.ProcessModule})
  - System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#IsSynchronized
  - System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  name: ProcessModuleCollection
  nameWithType: ProcessModuleCollection
  fullName: System.Diagnostics.ProcessModuleCollection
  type: Class
  assemblies:
  - System.Diagnostics.Process
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Provides a strongly typed collection of <xref href="System.Diagnostics.ProcessModule"></xref> objects.
  remarks: A module is an executable file or a dynamic link library (DLL). Each process consists of one or more modules. You can use this class to iterate over a collection of process modules on the system. A module is identified by its module name and fully qualified file path.
  syntax:
    content: 'public class ProcessModuleCollection : System.Collections.ReadOnlyCollectionBase'
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.ProcessModuleCollection.#ctor
  commentId: M:System.Diagnostics.ProcessModuleCollection.#ctor
  id: '#ctor'
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: ProcessModuleCollection()
  nameWithType: ProcessModuleCollection.ProcessModuleCollection()
  fullName: ProcessModuleCollection.ProcessModuleCollection()
  type: Constructor
  assemblies:
  - System.Diagnostics.Process
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Initializes a new instance of the <xref href="System.Diagnostics.ProcessModuleCollection"></xref> class, with no associated <xref href="System.Diagnostics.ProcessModule"></xref> instances.
  syntax:
    content: protected ProcessModuleCollection ();
    parameters: []
  overload: System.Diagnostics.ProcessModuleCollection.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])
  commentId: M:System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])
  id: '#ctor(System.Diagnostics.ProcessModule[])'
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: ProcessModuleCollection(ProcessModule[])
  nameWithType: ProcessModuleCollection.ProcessModuleCollection(ProcessModule[])
  fullName: ProcessModuleCollection.ProcessModuleCollection(ProcessModule[])
  type: Constructor
  assemblies:
  - System.Diagnostics.Process
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Initializes a new instance of the <xref href="System.Diagnostics.ProcessModuleCollection"></xref> class, using the specified array of <xref href="System.Diagnostics.ProcessModule"></xref> instances.
  syntax:
    content: public ProcessModuleCollection (System.Diagnostics.ProcessModule[] processModules);
    parameters:
    - id: processModules
      type: System.Diagnostics.ProcessModule[]
      description: An array of <xref href="System.Diagnostics.ProcessModule"></xref> instances with which to initialize this <xref href="System.Diagnostics.ProcessModuleCollection"></xref> instance.
  overload: System.Diagnostics.ProcessModuleCollection.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.ProcessModuleCollection.Add(System.Diagnostics.ProcessModule)
  commentId: M:System.Diagnostics.ProcessModuleCollection.Add(System.Diagnostics.ProcessModule)
  id: Add(System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Add(ProcessModule)
  nameWithType: ProcessModuleCollection.Add(ProcessModule)
  fullName: ProcessModuleCollection.Add(ProcessModule)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void Add (System.Diagnostics.ProcessModule item);
    parameters:
    - id: item
      type: System.Diagnostics.ProcessModule
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.Add*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.AddRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.AddRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule})
  id: AddRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: AddRange(IEnumerable<ProcessModule>)
  nameWithType: ProcessModuleCollection.AddRange(IEnumerable<ProcessModule>)
  fullName: ProcessModuleCollection.AddRange(IEnumerable<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void AddRange (System.Collections.Generic.IEnumerable<System.Diagnostics.ProcessModule> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule}
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.AddRange*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.AsReadOnly
  commentId: M:System.Diagnostics.ProcessModuleCollection.AsReadOnly
  id: AsReadOnly
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: AsReadOnly()
  nameWithType: ProcessModuleCollection.AsReadOnly()
  fullName: ProcessModuleCollection.AsReadOnly()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public System.Collections.ObjectModel.ReadOnlyCollection<System.Diagnostics.ProcessModule> AsReadOnly ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Diagnostics.ProcessModule}
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.AsReadOnly*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Diagnostics.ProcessModule)
  commentId: M:System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Diagnostics.ProcessModule)
  id: BinarySearch(System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: BinarySearch(ProcessModule)
  nameWithType: ProcessModuleCollection.BinarySearch(ProcessModule)
  fullName: ProcessModuleCollection.BinarySearch(ProcessModule)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int BinarySearch (System.Diagnostics.ProcessModule item);
    parameters:
    - id: item
      type: System.Diagnostics.ProcessModule
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.BinarySearch*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Diagnostics.ProcessModule,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Diagnostics.ProcessModule,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  id: BinarySearch(System.Diagnostics.ProcessModule,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: BinarySearch(ProcessModule, IComparer<ProcessModule>)
  nameWithType: ProcessModuleCollection.BinarySearch(ProcessModule, IComparer<ProcessModule>)
  fullName: ProcessModuleCollection.BinarySearch(ProcessModule, IComparer<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int BinarySearch (System.Diagnostics.ProcessModule item, System.Collections.Generic.IComparer<System.Diagnostics.ProcessModule> comparer);
    parameters:
    - id: item
      type: System.Diagnostics.ProcessModule
      description: ''
    - id: comparer
      type: System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.BinarySearch*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Int32,System.Int32,System.Diagnostics.ProcessModule,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Int32,System.Int32,System.Diagnostics.ProcessModule,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  id: BinarySearch(System.Int32,System.Int32,System.Diagnostics.ProcessModule,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: BinarySearch(Int32, Int32, ProcessModule, IComparer<ProcessModule>)
  nameWithType: ProcessModuleCollection.BinarySearch(Int32, Int32, ProcessModule, IComparer<ProcessModule>)
  fullName: ProcessModuleCollection.BinarySearch(Int32, Int32, ProcessModule, IComparer<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int BinarySearch (int index, int count, System.Diagnostics.ProcessModule item, System.Collections.Generic.IComparer<System.Diagnostics.ProcessModule> comparer);
    parameters:
    - id: index
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: item
      type: System.Diagnostics.ProcessModule
      description: ''
    - id: comparer
      type: System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.BinarySearch*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Capacity
  commentId: P:System.Diagnostics.ProcessModuleCollection.Capacity
  id: Capacity
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Capacity
  nameWithType: ProcessModuleCollection.Capacity
  fullName: ProcessModuleCollection.Capacity
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int Capacity { get; set; }
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.Capacity*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Clear
  commentId: M:System.Diagnostics.ProcessModuleCollection.Clear
  id: Clear
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: ProcessModuleCollection.Clear()
  fullName: ProcessModuleCollection.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void Clear ();
    parameters: []
  overload: System.Diagnostics.ProcessModuleCollection.Clear*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)
  commentId: M:System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)
  id: Contains(System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Contains(ProcessModule)
  nameWithType: ProcessModuleCollection.Contains(ProcessModule)
  fullName: ProcessModuleCollection.Contains(ProcessModule)
  type: Method
  assemblies:
  - System.Diagnostics.Process
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Determines whether the specified process module exists in the collection.
  remarks: A module is identified by its module name and its fully qualified file path.
  syntax:
    content: public bool Contains (System.Diagnostics.ProcessModule module);
    parameters:
    - id: module
      type: System.Diagnostics.ProcessModule
      description: A <xref href="System.Diagnostics.ProcessModule"></xref> instance that indicates the module to find in this collection.
    return:
      type: System.Boolean
      description: '`true` if the module exists in the collection; otherwise, `false`.'
  overload: System.Diagnostics.ProcessModuleCollection.Contains*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.ProcessModuleCollection.ConvertAll``1(System.Converter{System.Diagnostics.ProcessModule,``0})
  commentId: M:System.Diagnostics.ProcessModuleCollection.ConvertAll``1(System.Converter{System.Diagnostics.ProcessModule,``0})
  id: ConvertAll``1(System.Converter{System.Diagnostics.ProcessModule,``0})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: ConvertAll<TOutput>(Converter<ProcessModule,TOutput>)
  nameWithType: ProcessModuleCollection.ConvertAll<TOutput>(Converter<ProcessModule,TOutput>)
  fullName: ProcessModuleCollection.ConvertAll<TOutput>(Converter<ProcessModule,TOutput>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public System.Collections.Generic.List<TOutput> ConvertAll<TOutput> (Converter<System.Diagnostics.ProcessModule,TOutput> converter);
    parameters:
    - id: converter
      type: System.Converter{System.Diagnostics.ProcessModule,TOutput}
      description: ''
    typeParameters:
    - id: TOutput
      description: ''
    return:
      type: System.Collections.Generic.List{TOutput}
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.ConvertAll``1*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.CopyTo(System.Int32,System.Diagnostics.ProcessModule[],System.Int32,System.Int32)
  commentId: M:System.Diagnostics.ProcessModuleCollection.CopyTo(System.Int32,System.Diagnostics.ProcessModule[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Diagnostics.ProcessModule[],System.Int32,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: CopyTo(Int32, ProcessModule[], Int32, Int32)
  nameWithType: ProcessModuleCollection.CopyTo(Int32, ProcessModule[], Int32, Int32)
  fullName: ProcessModuleCollection.CopyTo(Int32, ProcessModule[], Int32, Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void CopyTo (int index, System.Diagnostics.ProcessModule[] array, int arrayIndex, int count);
    parameters:
    - id: index
      type: System.Int32
      description: ''
    - id: array
      type: System.Diagnostics.ProcessModule[]
      description: ''
    - id: arrayIndex
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.CopyTo*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[])
  commentId: M:System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[])
  id: CopyTo(System.Diagnostics.ProcessModule[])
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: CopyTo(ProcessModule[])
  nameWithType: ProcessModuleCollection.CopyTo(ProcessModule[])
  fullName: ProcessModuleCollection.CopyTo(ProcessModule[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void CopyTo (System.Diagnostics.ProcessModule[] array);
    parameters:
    - id: array
      type: System.Diagnostics.ProcessModule[]
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.CopyTo*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)
  commentId: M:System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)
  id: CopyTo(System.Diagnostics.ProcessModule[],System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: CopyTo(ProcessModule[], Int32)
  nameWithType: ProcessModuleCollection.CopyTo(ProcessModule[], Int32)
  fullName: ProcessModuleCollection.CopyTo(ProcessModule[], Int32)
  type: Method
  assemblies:
  - System.Diagnostics.Process
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Copies an array of <xref href="System.Diagnostics.ProcessModule"></xref> instances to the collection, at the specified index.
  syntax:
    content: public void CopyTo (System.Diagnostics.ProcessModule[] array, int index);
    parameters:
    - id: array
      type: System.Diagnostics.ProcessModule[]
      description: An array of <xref href="System.Diagnostics.ProcessModule"></xref> instances to add to the collection.
    - id: index
      type: System.Int32
      description: The location at which to add the new instances.
  overload: System.Diagnostics.ProcessModuleCollection.CopyTo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.ProcessModuleCollection.Count
  commentId: P:System.Diagnostics.ProcessModuleCollection.Count
  id: Count
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Count
  nameWithType: ProcessModuleCollection.Count
  fullName: ProcessModuleCollection.Count
  type: Property
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.Count*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Exists(System.Predicate{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.Exists(System.Predicate{System.Diagnostics.ProcessModule})
  id: Exists(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Exists(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.Exists(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.Exists(Predicate<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public bool Exists (Predicate<System.Diagnostics.ProcessModule> match);
    parameters:
    - id: match
      type: System.Predicate{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.Exists*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Find(System.Predicate{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.Find(System.Predicate{System.Diagnostics.ProcessModule})
  id: Find(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Find(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.Find(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.Find(Predicate<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public System.Diagnostics.ProcessModule Find (Predicate<System.Diagnostics.ProcessModule> match);
    parameters:
    - id: match
      type: System.Predicate{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Diagnostics.ProcessModule
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.Find*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.FindAll(System.Predicate{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.FindAll(System.Predicate{System.Diagnostics.ProcessModule})
  id: FindAll(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: FindAll(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindAll(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindAll(Predicate<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public System.Collections.Generic.List<System.Diagnostics.ProcessModule> FindAll (Predicate<System.Diagnostics.ProcessModule> match);
    parameters:
    - id: match
      type: System.Predicate{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Collections.Generic.List{System.Diagnostics.ProcessModule}
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.FindAll*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.FindIndex(System.Predicate{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.FindIndex(System.Predicate{System.Diagnostics.ProcessModule})
  id: FindIndex(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: FindIndex(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindIndex(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindIndex(Predicate<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int FindIndex (Predicate<System.Diagnostics.ProcessModule> match);
    parameters:
    - id: match
      type: System.Predicate{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.FindIndex*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.FindIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.FindIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  id: FindIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: FindIndex(Int32, Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindIndex(Int32, Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindIndex(Int32, Predicate<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int FindIndex (int startIndex, Predicate<System.Diagnostics.ProcessModule> match);
    parameters:
    - id: startIndex
      type: System.Int32
      description: ''
    - id: match
      type: System.Predicate{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.FindIndex*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.FindIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.FindIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  id: FindIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: FindIndex(Int32, Int32, Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindIndex(Int32, Int32, Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindIndex(Int32, Int32, Predicate<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int FindIndex (int startIndex, int count, Predicate<System.Diagnostics.ProcessModule> match);
    parameters:
    - id: startIndex
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: match
      type: System.Predicate{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.FindIndex*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.FindLast(System.Predicate{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.FindLast(System.Predicate{System.Diagnostics.ProcessModule})
  id: FindLast(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: FindLast(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindLast(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindLast(Predicate<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public System.Diagnostics.ProcessModule FindLast (Predicate<System.Diagnostics.ProcessModule> match);
    parameters:
    - id: match
      type: System.Predicate{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Diagnostics.ProcessModule
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.FindLast*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  id: FindLastIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: FindLastIndex(Int32, Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindLastIndex(Int32, Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindLastIndex(Int32, Predicate<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int FindLastIndex (int startIndex, Predicate<System.Diagnostics.ProcessModule> match);
    parameters:
    - id: startIndex
      type: System.Int32
      description: ''
    - id: match
      type: System.Predicate{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.FindLastIndex*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Predicate{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Predicate{System.Diagnostics.ProcessModule})
  id: FindLastIndex(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: FindLastIndex(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindLastIndex(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindLastIndex(Predicate<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int FindLastIndex (Predicate<System.Diagnostics.ProcessModule> match);
    parameters:
    - id: match
      type: System.Predicate{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.FindLastIndex*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  id: FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: FindLastIndex(Int32, Int32, Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindLastIndex(Int32, Int32, Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindLastIndex(Int32, Int32, Predicate<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int FindLastIndex (int startIndex, int count, Predicate<System.Diagnostics.ProcessModule> match);
    parameters:
    - id: startIndex
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: match
      type: System.Predicate{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.FindLastIndex*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.ForEach(System.Action{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.ForEach(System.Action{System.Diagnostics.ProcessModule})
  id: ForEach(System.Action{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: ForEach(Action<ProcessModule>)
  nameWithType: ProcessModuleCollection.ForEach(Action<ProcessModule>)
  fullName: ProcessModuleCollection.ForEach(Action<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void ForEach (Action<System.Diagnostics.ProcessModule> action);
    parameters:
    - id: action
      type: System.Action{System.Diagnostics.ProcessModule}
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.ForEach*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.GetEnumerator
  commentId: M:System.Diagnostics.ProcessModuleCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ProcessModuleCollection.GetEnumerator()
  fullName: ProcessModuleCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.GetEnumerator*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.GetRange(System.Int32,System.Int32)
  commentId: M:System.Diagnostics.ProcessModuleCollection.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: GetRange(Int32, Int32)
  nameWithType: ProcessModuleCollection.GetRange(Int32, Int32)
  fullName: ProcessModuleCollection.GetRange(Int32, Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public System.Collections.Generic.List<System.Diagnostics.ProcessModule> GetRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    return:
      type: System.Collections.Generic.List{System.Diagnostics.ProcessModule}
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.GetRange*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)
  commentId: M:System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)
  id: IndexOf(System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: IndexOf(ProcessModule)
  nameWithType: ProcessModuleCollection.IndexOf(ProcessModule)
  fullName: ProcessModuleCollection.IndexOf(ProcessModule)
  type: Method
  assemblies:
  - System.Diagnostics.Process
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Provides the location of a specified module within the collection.
  syntax:
    content: public int IndexOf (System.Diagnostics.ProcessModule module);
    parameters:
    - id: module
      type: System.Diagnostics.ProcessModule
      description: The <xref href="System.Diagnostics.ProcessModule"></xref> whose index is retrieved.
    return:
      type: System.Int32
      description: The zero-based index that defines the location of the module within the <xref href="System.Diagnostics.ProcessModuleCollection"></xref>.
  overload: System.Diagnostics.ProcessModuleCollection.IndexOf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule,System.Int32)
  commentId: M:System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule,System.Int32)
  id: IndexOf(System.Diagnostics.ProcessModule,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: IndexOf(ProcessModule, Int32)
  nameWithType: ProcessModuleCollection.IndexOf(ProcessModule, Int32)
  fullName: ProcessModuleCollection.IndexOf(ProcessModule, Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int IndexOf (System.Diagnostics.ProcessModule item, int index);
    parameters:
    - id: item
      type: System.Diagnostics.ProcessModule
      description: ''
    - id: index
      type: System.Int32
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.IndexOf*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule,System.Int32,System.Int32)
  commentId: M:System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule,System.Int32,System.Int32)
  id: IndexOf(System.Diagnostics.ProcessModule,System.Int32,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: IndexOf(ProcessModule, Int32, Int32)
  nameWithType: ProcessModuleCollection.IndexOf(ProcessModule, Int32, Int32)
  fullName: ProcessModuleCollection.IndexOf(ProcessModule, Int32, Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int IndexOf (System.Diagnostics.ProcessModule item, int index, int count);
    parameters:
    - id: item
      type: System.Diagnostics.ProcessModule
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.IndexOf*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Insert(System.Int32,System.Diagnostics.ProcessModule)
  commentId: M:System.Diagnostics.ProcessModuleCollection.Insert(System.Int32,System.Diagnostics.ProcessModule)
  id: Insert(System.Int32,System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Insert(Int32, ProcessModule)
  nameWithType: ProcessModuleCollection.Insert(Int32, ProcessModule)
  fullName: ProcessModuleCollection.Insert(Int32, ProcessModule)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void Insert (int index, System.Diagnostics.ProcessModule item);
    parameters:
    - id: index
      type: System.Int32
      description: ''
    - id: item
      type: System.Diagnostics.ProcessModule
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.Insert*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule})
  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: InsertRange(Int32, IEnumerable<ProcessModule>)
  nameWithType: ProcessModuleCollection.InsertRange(Int32, IEnumerable<ProcessModule>)
  fullName: ProcessModuleCollection.InsertRange(Int32, IEnumerable<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void InsertRange (int index, System.Collections.Generic.IEnumerable<System.Diagnostics.ProcessModule> collection);
    parameters:
    - id: index
      type: System.Int32
      description: ''
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule}
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.InsertRange*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Item(System.Int32)
  commentId: P:System.Diagnostics.ProcessModuleCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ProcessModuleCollection.Item(Int32)
  fullName: ProcessModuleCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Diagnostics.Process
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Gets an index for iterating over the set of process modules.
  syntax:
    content: public System.Diagnostics.ProcessModule this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index value of the module in the collection.
    return:
      type: System.Diagnostics.ProcessModule
      description: A <xref href="System.Diagnostics.ProcessModule"></xref> that indexes the modules in the collection
  overload: System.Diagnostics.ProcessModuleCollection.Item*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule)
  commentId: M:System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule)
  id: LastIndexOf(System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: LastIndexOf(ProcessModule)
  nameWithType: ProcessModuleCollection.LastIndexOf(ProcessModule)
  fullName: ProcessModuleCollection.LastIndexOf(ProcessModule)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int LastIndexOf (System.Diagnostics.ProcessModule item);
    parameters:
    - id: item
      type: System.Diagnostics.ProcessModule
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.LastIndexOf*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule,System.Int32)
  commentId: M:System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule,System.Int32)
  id: LastIndexOf(System.Diagnostics.ProcessModule,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: LastIndexOf(ProcessModule, Int32)
  nameWithType: ProcessModuleCollection.LastIndexOf(ProcessModule, Int32)
  fullName: ProcessModuleCollection.LastIndexOf(ProcessModule, Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int LastIndexOf (System.Diagnostics.ProcessModule item, int index);
    parameters:
    - id: item
      type: System.Diagnostics.ProcessModule
      description: ''
    - id: index
      type: System.Int32
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.LastIndexOf*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule,System.Int32,System.Int32)
  commentId: M:System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule,System.Int32,System.Int32)
  id: LastIndexOf(System.Diagnostics.ProcessModule,System.Int32,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: LastIndexOf(ProcessModule, Int32, Int32)
  nameWithType: ProcessModuleCollection.LastIndexOf(ProcessModule, Int32, Int32)
  fullName: ProcessModuleCollection.LastIndexOf(ProcessModule, Int32, Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int LastIndexOf (System.Diagnostics.ProcessModule item, int index, int count);
    parameters:
    - id: item
      type: System.Diagnostics.ProcessModule
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.LastIndexOf*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Remove(System.Diagnostics.ProcessModule)
  commentId: M:System.Diagnostics.ProcessModuleCollection.Remove(System.Diagnostics.ProcessModule)
  id: Remove(System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Remove(ProcessModule)
  nameWithType: ProcessModuleCollection.Remove(ProcessModule)
  fullName: ProcessModuleCollection.Remove(ProcessModule)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public bool Remove (System.Diagnostics.ProcessModule item);
    parameters:
    - id: item
      type: System.Diagnostics.ProcessModule
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.Remove*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.RemoveAll(System.Predicate{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.RemoveAll(System.Predicate{System.Diagnostics.ProcessModule})
  id: RemoveAll(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: RemoveAll(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.RemoveAll(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.RemoveAll(Predicate<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public int RemoveAll (Predicate<System.Diagnostics.ProcessModule> match);
    parameters:
    - id: match
      type: System.Predicate{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.RemoveAll*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.RemoveAt(System.Int32)
  commentId: M:System.Diagnostics.ProcessModuleCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: ProcessModuleCollection.RemoveAt(Int32)
  fullName: ProcessModuleCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.RemoveAt*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Diagnostics.ProcessModuleCollection.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: RemoveRange(Int32, Int32)
  nameWithType: ProcessModuleCollection.RemoveRange(Int32, Int32)
  fullName: ProcessModuleCollection.RemoveRange(Int32, Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void RemoveRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.RemoveRange*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Reverse
  commentId: M:System.Diagnostics.ProcessModuleCollection.Reverse
  id: Reverse
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Reverse()
  nameWithType: ProcessModuleCollection.Reverse()
  fullName: ProcessModuleCollection.Reverse()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void Reverse ();
    parameters: []
  overload: System.Diagnostics.ProcessModuleCollection.Reverse*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Reverse(System.Int32,System.Int32)
  commentId: M:System.Diagnostics.ProcessModuleCollection.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Reverse(Int32, Int32)
  nameWithType: ProcessModuleCollection.Reverse(Int32, Int32)
  fullName: ProcessModuleCollection.Reverse(Int32, Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void Reverse (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.Reverse*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Sort
  commentId: M:System.Diagnostics.ProcessModuleCollection.Sort
  id: Sort
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Sort()
  nameWithType: ProcessModuleCollection.Sort()
  fullName: ProcessModuleCollection.Sort()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void Sort ();
    parameters: []
  overload: System.Diagnostics.ProcessModuleCollection.Sort*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Sort(System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.Sort(System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  id: Sort(System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Sort(IComparer<ProcessModule>)
  nameWithType: ProcessModuleCollection.Sort(IComparer<ProcessModule>)
  fullName: ProcessModuleCollection.Sort(IComparer<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void Sort (System.Collections.Generic.IComparer<System.Diagnostics.ProcessModule> comparer);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule}
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.Sort*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Sort(System.Comparison{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.Sort(System.Comparison{System.Diagnostics.ProcessModule})
  id: Sort(System.Comparison{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Sort(Comparison<ProcessModule>)
  nameWithType: ProcessModuleCollection.Sort(Comparison<ProcessModule>)
  fullName: ProcessModuleCollection.Sort(Comparison<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void Sort (Comparison<System.Diagnostics.ProcessModule> comparison);
    parameters:
    - id: comparison
      type: System.Comparison{System.Diagnostics.ProcessModule}
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.Sort*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  id: Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: Sort(Int32, Int32, IComparer<ProcessModule>)
  nameWithType: ProcessModuleCollection.Sort(Int32, Int32, IComparer<ProcessModule>)
  fullName: ProcessModuleCollection.Sort(Int32, Int32, IComparer<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void Sort (int index, int count, System.Collections.Generic.IComparer<System.Diagnostics.ProcessModule> comparer);
    parameters:
    - id: index
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: comparer
      type: System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule}
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.Sort*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.ToArray
  commentId: M:System.Diagnostics.ProcessModuleCollection.ToArray
  id: ToArray
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: ToArray()
  nameWithType: ProcessModuleCollection.ToArray()
  fullName: ProcessModuleCollection.ToArray()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public System.Diagnostics.ProcessModule[] ToArray ();
    parameters: []
    return:
      type: System.Diagnostics.ProcessModule[]
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.ToArray*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.TrimExcess
  commentId: M:System.Diagnostics.ProcessModuleCollection.TrimExcess
  id: TrimExcess
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: TrimExcess()
  nameWithType: ProcessModuleCollection.TrimExcess()
  fullName: ProcessModuleCollection.TrimExcess()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public void TrimExcess ();
    parameters: []
  overload: System.Diagnostics.ProcessModuleCollection.TrimExcess*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.TrueForAll(System.Predicate{System.Diagnostics.ProcessModule})
  commentId: M:System.Diagnostics.ProcessModuleCollection.TrueForAll(System.Predicate{System.Diagnostics.ProcessModule})
  id: TrueForAll(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: TrueForAll(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.TrueForAll(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.TrueForAll(Predicate<ProcessModule>)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: >-
      [System.Obsolete("This API is no longer available", true)]

      public bool TrueForAll (Predicate<System.Diagnostics.ProcessModule> match);
    parameters:
    - id: match
      type: System.Predicate{System.Diagnostics.ProcessModule}
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.TrueForAll*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: ProcessModuleCollection.ICollection.CopyTo(Array, Int32)
  fullName: ProcessModuleCollection.ICollection.CopyTo(Array, Int32)
  type: Method
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: ''
    - id: index
      type: System.Int32
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#CopyTo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: ProcessModuleCollection.ICollection.IsSynchronized
  fullName: ProcessModuleCollection.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#SyncRoot
  commentId: P:System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Diagnostics.ProcessModuleCollection
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: ProcessModuleCollection.ICollection.SyncRoot
  fullName: ProcessModuleCollection.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: ''
  overload: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.ProcessModuleCollection.#ctor
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: ProcessModuleCollection()
  nameWithType: ProcessModuleCollection.ProcessModuleCollection()
  fullName: ProcessModuleCollection.ProcessModuleCollection()
- uid: System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: ProcessModuleCollection(ProcessModule[])
  nameWithType: ProcessModuleCollection.ProcessModuleCollection(ProcessModule[])
  fullName: ProcessModuleCollection.ProcessModuleCollection(ProcessModule[])
- uid: System.Diagnostics.ProcessModule
  name: ProcessModule
  nameWithType: ProcessModule
  fullName: System.Diagnostics.ProcessModule
- uid: System.Diagnostics.ProcessModule[]
  parent: System.Diagnostics
  isExternal: false
  name: ProcessModule[]
  nameWithType: ProcessModule[]
  fullName: System.Diagnostics.ProcessModule[]
  spec.csharp:
  - uid: System.Diagnostics.ProcessModule
    name: ProcessModule
    nameWithType: ProcessModule
    fullName: System.Diagnostics.ProcessModule
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.ProcessModuleCollection.Add(System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Add(ProcessModule)
  nameWithType: ProcessModuleCollection.Add(ProcessModule)
  fullName: ProcessModuleCollection.Add(ProcessModule)
- uid: System.Diagnostics.ProcessModuleCollection.AddRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: AddRange(IEnumerable<ProcessModule>)
  nameWithType: ProcessModuleCollection.AddRange(IEnumerable<ProcessModule>)
  fullName: ProcessModuleCollection.AddRange(IEnumerable<ProcessModule>)
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ProcessModule>
  nameWithType: IEnumerable<ProcessModule>
  fullName: System.Collections.Generic.IEnumerable<System.Diagnostics.ProcessModule>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.ProcessModule
    name: ProcessModule
    nameWithType: ProcessModule
    fullName: System.Diagnostics.ProcessModule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.ProcessModuleCollection.AsReadOnly
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: AsReadOnly()
  nameWithType: ProcessModuleCollection.AsReadOnly()
  fullName: ProcessModuleCollection.AsReadOnly()
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Diagnostics.ProcessModule}
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<ProcessModule>
  nameWithType: ReadOnlyCollection<ProcessModule>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Diagnostics.ProcessModule>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.ProcessModule
    name: ProcessModule
    nameWithType: ProcessModule
    fullName: System.Diagnostics.ProcessModule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: BinarySearch(ProcessModule)
  nameWithType: ProcessModuleCollection.BinarySearch(ProcessModule)
  fullName: ProcessModuleCollection.BinarySearch(ProcessModule)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Diagnostics.ProcessModule,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: BinarySearch(ProcessModule, IComparer<ProcessModule>)
  nameWithType: ProcessModuleCollection.BinarySearch(ProcessModule, IComparer<ProcessModule>)
  fullName: ProcessModuleCollection.BinarySearch(ProcessModule, IComparer<ProcessModule>)
- uid: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule}
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<ProcessModule>
  nameWithType: IComparer<ProcessModule>
  fullName: System.Collections.Generic.IComparer<System.Diagnostics.ProcessModule>
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.ProcessModule
    name: ProcessModule
    nameWithType: ProcessModule
    fullName: System.Diagnostics.ProcessModule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.ProcessModuleCollection.BinarySearch(System.Int32,System.Int32,System.Diagnostics.ProcessModule,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: BinarySearch(Int32, Int32, ProcessModule, IComparer<ProcessModule>)
  nameWithType: ProcessModuleCollection.BinarySearch(Int32, Int32, ProcessModule, IComparer<ProcessModule>)
  fullName: ProcessModuleCollection.BinarySearch(Int32, Int32, ProcessModule, IComparer<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.Capacity
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Capacity
  nameWithType: ProcessModuleCollection.Capacity
  fullName: ProcessModuleCollection.Capacity
- uid: System.Diagnostics.ProcessModuleCollection.Clear
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Clear()
  nameWithType: ProcessModuleCollection.Clear()
  fullName: ProcessModuleCollection.Clear()
- uid: System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Contains(ProcessModule)
  nameWithType: ProcessModuleCollection.Contains(ProcessModule)
  fullName: ProcessModuleCollection.Contains(ProcessModule)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.ProcessModuleCollection.ConvertAll``1(System.Converter{System.Diagnostics.ProcessModule,``0})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: ConvertAll<TOutput>(Converter<ProcessModule,TOutput>)
  nameWithType: ProcessModuleCollection.ConvertAll<TOutput>(Converter<ProcessModule,TOutput>)
  fullName: ProcessModuleCollection.ConvertAll<TOutput>(Converter<ProcessModule,TOutput>)
- uid: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
- uid: TOutput
  name: TOutput
  nameWithType: TOutput
  fullName: TOutput
- uid: System.Collections.Generic.List{TOutput}
  parent: System.Collections.Generic
  isExternal: false
  name: List<TOutput>
  nameWithType: List<TOutput>
  fullName: System.Collections.Generic.List<TOutput>
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOutput
    name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Converter`2
  name: Converter<TInput,TOutput>
  nameWithType: Converter<TInput,TOutput>
  fullName: System.Converter<TInput,TOutput>
- uid: System.Converter{System.Diagnostics.ProcessModule,TOutput}
  parent: System
  isExternal: false
  name: Converter<ProcessModule,TOutput>
  nameWithType: Converter<ProcessModule,TOutput>
  fullName: System.Converter<System.Diagnostics.ProcessModule,TOutput>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.ProcessModule
    name: ProcessModule
    nameWithType: ProcessModule
    fullName: System.Diagnostics.ProcessModule
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TOutput
    name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.ProcessModuleCollection.CopyTo(System.Int32,System.Diagnostics.ProcessModule[],System.Int32,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: CopyTo(Int32, ProcessModule[], Int32, Int32)
  nameWithType: ProcessModuleCollection.CopyTo(Int32, ProcessModule[], Int32, Int32)
  fullName: ProcessModuleCollection.CopyTo(Int32, ProcessModule[], Int32, Int32)
- uid: System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[])
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: CopyTo(ProcessModule[])
  nameWithType: ProcessModuleCollection.CopyTo(ProcessModule[])
  fullName: ProcessModuleCollection.CopyTo(ProcessModule[])
- uid: System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: CopyTo(ProcessModule[], Int32)
  nameWithType: ProcessModuleCollection.CopyTo(ProcessModule[], Int32)
  fullName: ProcessModuleCollection.CopyTo(ProcessModule[], Int32)
- uid: System.Diagnostics.ProcessModuleCollection.Count
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Count
  nameWithType: ProcessModuleCollection.Count
  fullName: ProcessModuleCollection.Count
- uid: System.Diagnostics.ProcessModuleCollection.Exists(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Exists(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.Exists(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.Exists(Predicate<ProcessModule>)
- uid: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Predicate{System.Diagnostics.ProcessModule}
  parent: System
  isExternal: false
  name: Predicate<ProcessModule>
  nameWithType: Predicate<ProcessModule>
  fullName: System.Predicate<System.Diagnostics.ProcessModule>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.ProcessModule
    name: ProcessModule
    nameWithType: ProcessModule
    fullName: System.Diagnostics.ProcessModule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.ProcessModuleCollection.Find(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Find(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.Find(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.Find(Predicate<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.FindAll(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: FindAll(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindAll(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindAll(Predicate<ProcessModule>)
- uid: System.Collections.Generic.List{System.Diagnostics.ProcessModule}
  parent: System.Collections.Generic
  isExternal: false
  name: List<ProcessModule>
  nameWithType: List<ProcessModule>
  fullName: System.Collections.Generic.List<System.Diagnostics.ProcessModule>
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.ProcessModule
    name: ProcessModule
    nameWithType: ProcessModule
    fullName: System.Diagnostics.ProcessModule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.ProcessModuleCollection.FindIndex(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: FindIndex(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindIndex(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindIndex(Predicate<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.FindIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: FindIndex(Int32, Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindIndex(Int32, Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindIndex(Int32, Predicate<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.FindIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: FindIndex(Int32, Int32, Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindIndex(Int32, Int32, Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindIndex(Int32, Int32, Predicate<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.FindLast(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: FindLast(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindLast(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindLast(Predicate<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: FindLastIndex(Int32, Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindLastIndex(Int32, Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindLastIndex(Int32, Predicate<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: FindLastIndex(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindLastIndex(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindLastIndex(Predicate<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: FindLastIndex(Int32, Int32, Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.FindLastIndex(Int32, Int32, Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.FindLastIndex(Int32, Int32, Predicate<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.ForEach(System.Action{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: ForEach(Action<ProcessModule>)
  nameWithType: ProcessModuleCollection.ForEach(Action<ProcessModule>)
  fullName: ProcessModuleCollection.ForEach(Action<ProcessModule>)
- uid: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: System.Action{System.Diagnostics.ProcessModule}
  parent: System
  isExternal: false
  name: Action<ProcessModule>
  nameWithType: Action<ProcessModule>
  fullName: System.Action<System.Diagnostics.ProcessModule>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.ProcessModule
    name: ProcessModule
    nameWithType: ProcessModule
    fullName: System.Diagnostics.ProcessModule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.ProcessModuleCollection.GetEnumerator
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: ProcessModuleCollection.GetEnumerator()
  fullName: ProcessModuleCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Diagnostics.ProcessModuleCollection.GetRange(System.Int32,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: GetRange(Int32, Int32)
  nameWithType: ProcessModuleCollection.GetRange(Int32, Int32)
  fullName: ProcessModuleCollection.GetRange(Int32, Int32)
- uid: System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: IndexOf(ProcessModule)
  nameWithType: ProcessModuleCollection.IndexOf(ProcessModule)
  fullName: ProcessModuleCollection.IndexOf(ProcessModule)
- uid: System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: IndexOf(ProcessModule, Int32)
  nameWithType: ProcessModuleCollection.IndexOf(ProcessModule, Int32)
  fullName: ProcessModuleCollection.IndexOf(ProcessModule, Int32)
- uid: System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule,System.Int32,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: IndexOf(ProcessModule, Int32, Int32)
  nameWithType: ProcessModuleCollection.IndexOf(ProcessModule, Int32, Int32)
  fullName: ProcessModuleCollection.IndexOf(ProcessModule, Int32, Int32)
- uid: System.Diagnostics.ProcessModuleCollection.Insert(System.Int32,System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Insert(Int32, ProcessModule)
  nameWithType: ProcessModuleCollection.Insert(Int32, ProcessModule)
  fullName: ProcessModuleCollection.Insert(Int32, ProcessModule)
- uid: System.Diagnostics.ProcessModuleCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: InsertRange(Int32, IEnumerable<ProcessModule>)
  nameWithType: ProcessModuleCollection.InsertRange(Int32, IEnumerable<ProcessModule>)
  fullName: ProcessModuleCollection.InsertRange(Int32, IEnumerable<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.Item(System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: ProcessModuleCollection.Item(Int32)
  fullName: ProcessModuleCollection.Item(Int32)
- uid: System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: LastIndexOf(ProcessModule)
  nameWithType: ProcessModuleCollection.LastIndexOf(ProcessModule)
  fullName: ProcessModuleCollection.LastIndexOf(ProcessModule)
- uid: System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: LastIndexOf(ProcessModule, Int32)
  nameWithType: ProcessModuleCollection.LastIndexOf(ProcessModule, Int32)
  fullName: ProcessModuleCollection.LastIndexOf(ProcessModule, Int32)
- uid: System.Diagnostics.ProcessModuleCollection.LastIndexOf(System.Diagnostics.ProcessModule,System.Int32,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: LastIndexOf(ProcessModule, Int32, Int32)
  nameWithType: ProcessModuleCollection.LastIndexOf(ProcessModule, Int32, Int32)
  fullName: ProcessModuleCollection.LastIndexOf(ProcessModule, Int32, Int32)
- uid: System.Diagnostics.ProcessModuleCollection.Remove(System.Diagnostics.ProcessModule)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Remove(ProcessModule)
  nameWithType: ProcessModuleCollection.Remove(ProcessModule)
  fullName: ProcessModuleCollection.Remove(ProcessModule)
- uid: System.Diagnostics.ProcessModuleCollection.RemoveAll(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: RemoveAll(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.RemoveAll(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.RemoveAll(Predicate<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.RemoveAt(System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: ProcessModuleCollection.RemoveAt(Int32)
  fullName: ProcessModuleCollection.RemoveAt(Int32)
- uid: System.Diagnostics.ProcessModuleCollection.RemoveRange(System.Int32,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: RemoveRange(Int32, Int32)
  nameWithType: ProcessModuleCollection.RemoveRange(Int32, Int32)
  fullName: ProcessModuleCollection.RemoveRange(Int32, Int32)
- uid: System.Diagnostics.ProcessModuleCollection.Reverse
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Reverse()
  nameWithType: ProcessModuleCollection.Reverse()
  fullName: ProcessModuleCollection.Reverse()
- uid: System.Diagnostics.ProcessModuleCollection.Reverse(System.Int32,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Reverse(Int32, Int32)
  nameWithType: ProcessModuleCollection.Reverse(Int32, Int32)
  fullName: ProcessModuleCollection.Reverse(Int32, Int32)
- uid: System.Diagnostics.ProcessModuleCollection.Sort
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Sort()
  nameWithType: ProcessModuleCollection.Sort()
  fullName: ProcessModuleCollection.Sort()
- uid: System.Diagnostics.ProcessModuleCollection.Sort(System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Sort(IComparer<ProcessModule>)
  nameWithType: ProcessModuleCollection.Sort(IComparer<ProcessModule>)
  fullName: ProcessModuleCollection.Sort(IComparer<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.Sort(System.Comparison{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Sort(Comparison<ProcessModule>)
  nameWithType: ProcessModuleCollection.Sort(Comparison<ProcessModule>)
  fullName: ProcessModuleCollection.Sort(Comparison<ProcessModule>)
- uid: System.Comparison`1
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
- uid: System.Comparison{System.Diagnostics.ProcessModule}
  parent: System
  isExternal: false
  name: Comparison<ProcessModule>
  nameWithType: Comparison<ProcessModule>
  fullName: System.Comparison<System.Diagnostics.ProcessModule>
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.ProcessModule
    name: ProcessModule
    nameWithType: ProcessModule
    fullName: System.Diagnostics.ProcessModule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.ProcessModuleCollection.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Sort(Int32, Int32, IComparer<ProcessModule>)
  nameWithType: ProcessModuleCollection.Sort(Int32, Int32, IComparer<ProcessModule>)
  fullName: ProcessModuleCollection.Sort(Int32, Int32, IComparer<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.ToArray
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: ToArray()
  nameWithType: ProcessModuleCollection.ToArray()
  fullName: ProcessModuleCollection.ToArray()
- uid: System.Diagnostics.ProcessModuleCollection.TrimExcess
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: TrimExcess()
  nameWithType: ProcessModuleCollection.TrimExcess()
  fullName: ProcessModuleCollection.TrimExcess()
- uid: System.Diagnostics.ProcessModuleCollection.TrueForAll(System.Predicate{System.Diagnostics.ProcessModule})
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: TrueForAll(Predicate<ProcessModule>)
  nameWithType: ProcessModuleCollection.TrueForAll(Predicate<ProcessModule>)
  fullName: ProcessModuleCollection.TrueForAll(Predicate<ProcessModule>)
- uid: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: ProcessModuleCollection.ICollection.CopyTo(Array, Int32)
  fullName: ProcessModuleCollection.ICollection.CopyTo(Array, Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#IsSynchronized
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: ProcessModuleCollection.ICollection.IsSynchronized
  fullName: ProcessModuleCollection.ICollection.IsSynchronized
- uid: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#SyncRoot
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: ProcessModuleCollection.ICollection.SyncRoot
  fullName: ProcessModuleCollection.ICollection.SyncRoot
- uid: System.Diagnostics.ProcessModuleCollection.#ctor*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: ProcessModuleCollection
  nameWithType: ProcessModuleCollection.ProcessModuleCollection
  fullName: ProcessModuleCollection.ProcessModuleCollection
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Add*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Add
  nameWithType: ProcessModuleCollection.Add
  fullName: ProcessModuleCollection.Add
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.AddRange*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: AddRange
  nameWithType: ProcessModuleCollection.AddRange
  fullName: ProcessModuleCollection.AddRange
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.AsReadOnly*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: AsReadOnly
  nameWithType: ProcessModuleCollection.AsReadOnly
  fullName: ProcessModuleCollection.AsReadOnly
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.BinarySearch*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: BinarySearch
  nameWithType: ProcessModuleCollection.BinarySearch
  fullName: ProcessModuleCollection.BinarySearch
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Capacity*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Capacity
  nameWithType: ProcessModuleCollection.Capacity
  fullName: ProcessModuleCollection.Capacity
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Clear*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Clear
  nameWithType: ProcessModuleCollection.Clear
  fullName: ProcessModuleCollection.Clear
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Contains*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Contains
  nameWithType: ProcessModuleCollection.Contains
  fullName: ProcessModuleCollection.Contains
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.ConvertAll``1*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: ConvertAll<TOutput>
  nameWithType: ProcessModuleCollection.ConvertAll<TOutput>
  fullName: ProcessModuleCollection.ConvertAll<TOutput>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.CopyTo*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: CopyTo
  nameWithType: ProcessModuleCollection.CopyTo
  fullName: ProcessModuleCollection.CopyTo
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Count*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Count
  nameWithType: ProcessModuleCollection.Count
  fullName: ProcessModuleCollection.Count
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Exists*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Exists
  nameWithType: ProcessModuleCollection.Exists
  fullName: ProcessModuleCollection.Exists
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Find*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Find
  nameWithType: ProcessModuleCollection.Find
  fullName: ProcessModuleCollection.Find
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.FindAll*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: FindAll
  nameWithType: ProcessModuleCollection.FindAll
  fullName: ProcessModuleCollection.FindAll
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.FindIndex*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: FindIndex
  nameWithType: ProcessModuleCollection.FindIndex
  fullName: ProcessModuleCollection.FindIndex
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.FindLast*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: FindLast
  nameWithType: ProcessModuleCollection.FindLast
  fullName: ProcessModuleCollection.FindLast
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.FindLastIndex*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: FindLastIndex
  nameWithType: ProcessModuleCollection.FindLastIndex
  fullName: ProcessModuleCollection.FindLastIndex
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.ForEach*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: ForEach
  nameWithType: ProcessModuleCollection.ForEach
  fullName: ProcessModuleCollection.ForEach
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.GetEnumerator*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: ProcessModuleCollection.GetEnumerator
  fullName: ProcessModuleCollection.GetEnumerator
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.GetRange*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: GetRange
  nameWithType: ProcessModuleCollection.GetRange
  fullName: ProcessModuleCollection.GetRange
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.IndexOf*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: IndexOf
  nameWithType: ProcessModuleCollection.IndexOf
  fullName: ProcessModuleCollection.IndexOf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Insert*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Insert
  nameWithType: ProcessModuleCollection.Insert
  fullName: ProcessModuleCollection.Insert
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.InsertRange*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: InsertRange
  nameWithType: ProcessModuleCollection.InsertRange
  fullName: ProcessModuleCollection.InsertRange
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Item*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Item
  nameWithType: ProcessModuleCollection.Item
  fullName: ProcessModuleCollection.Item
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.LastIndexOf*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: LastIndexOf
  nameWithType: ProcessModuleCollection.LastIndexOf
  fullName: ProcessModuleCollection.LastIndexOf
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Remove*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Remove
  nameWithType: ProcessModuleCollection.Remove
  fullName: ProcessModuleCollection.Remove
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.RemoveAll*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: RemoveAll
  nameWithType: ProcessModuleCollection.RemoveAll
  fullName: ProcessModuleCollection.RemoveAll
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.RemoveAt*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: RemoveAt
  nameWithType: ProcessModuleCollection.RemoveAt
  fullName: ProcessModuleCollection.RemoveAt
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.RemoveRange*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: RemoveRange
  nameWithType: ProcessModuleCollection.RemoveRange
  fullName: ProcessModuleCollection.RemoveRange
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Reverse*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Reverse
  nameWithType: ProcessModuleCollection.Reverse
  fullName: ProcessModuleCollection.Reverse
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.Sort*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: Sort
  nameWithType: ProcessModuleCollection.Sort
  fullName: ProcessModuleCollection.Sort
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.ToArray*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: ToArray
  nameWithType: ProcessModuleCollection.ToArray
  fullName: ProcessModuleCollection.ToArray
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.TrimExcess*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: TrimExcess
  nameWithType: ProcessModuleCollection.TrimExcess
  fullName: ProcessModuleCollection.TrimExcess
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.TrueForAll*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: TrueForAll
  nameWithType: ProcessModuleCollection.TrueForAll
  fullName: ProcessModuleCollection.TrueForAll
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#CopyTo*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: ProcessModuleCollection.System.Collections.ICollection.CopyTo
  fullName: ProcessModuleCollection.System.Collections.ICollection.CopyTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ProcessModuleCollection.System.Collections.ICollection.IsSynchronized
  fullName: ProcessModuleCollection.System.Collections.ICollection.IsSynchronized
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#SyncRoot*
  parent: System.Diagnostics.ProcessModuleCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ProcessModuleCollection.System.Collections.ICollection.SyncRoot
  fullName: ProcessModuleCollection.System.Collections.ICollection.SyncRoot
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ProcessModuleCollection.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
