{"nodes":[{"content":"A transformation API used to convert environment aware expressions to an activity tree.","nodes":[{"pos":[0,87],"content":"A transformation API used to convert environment aware expressions to an activity tree.","nodes":[{"content":"A transformation API used to convert environment aware expressions to an activity tree.","pos":[0,87]}]}],"pos":[1166,1254],"yaml":true},{"content":"The conversion methods in this class transform the specified lambda expressions, which can contain multiple sub-expressions, into activity trees composed of a hierarchy of activities. It is strongly recommended to use these conversion methods instead of instantiating expression activities directly because they provide a higher level of abstraction and enable you to implement your workflow more intuitively. See the examples for more information.  \n  \n The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","nodes":[{"pos":[0,448],"content":"The conversion methods in this class transform the specified lambda expressions, which can contain multiple sub-expressions, into activity trees composed of a hierarchy of activities. It is strongly recommended to use these conversion methods instead of instantiating expression activities directly because they provide a higher level of abstraction and enable you to implement your workflow more intuitively. See the examples for more information.","nodes":[{"content":"The conversion methods in this class transform the specified lambda expressions, which can contain multiple sub-expressions, into activity trees composed of a hierarchy of activities. It is strongly recommended to use these conversion methods instead of instantiating expression activities directly because they provide a higher level of abstraction and enable you to implement your workflow more intuitively. See the examples for more information.","pos":[0,448],"nodes":[{"content":"The conversion methods in this class transform the specified lambda expressions, which can contain multiple sub-expressions, into activity trees composed of a hierarchy of activities.","pos":[0,183]},{"content":"It is strongly recommended to use these conversion methods instead of instantiating expression activities directly because they provide a higher level of abstraction and enable you to implement your workflow more intuitively.","pos":[184,409]},{"content":"See the examples for more information.","pos":[410,448]}]}]},{"pos":[455,658],"content":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","nodes":[{"content":"The conversion methods in <ph id=\"ph1\">&lt;xref:System.Activities.Expressions.ExpressionServices&gt;</ph> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","pos":[0,203],"source":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments."}]}],"pos":[1265,1928],"yaml":true,"extradata":"MT"},{"content":"Converts a workflow environment-aware expression to an activity tree.","nodes":[{"pos":[0,69],"content":"Converts a workflow environment-aware expression to an activity tree.","nodes":[{"content":"Converts a workflow environment-aware expression to an activity tree.","pos":[0,69]}]}],"pos":[6889,6959],"yaml":true},{"content":"For a code example of <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>, see <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A>.  \n  \n The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","nodes":[{"pos":[0,170],"content":"For a code example of <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>, see <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A>.","nodes":[{"content":"For a code example of <ph id=\"ph1\">&lt;xref:System.Activities.Expressions.ExpressionServices.Convert%2A&gt;</ph>, see <ph id=\"ph2\">&lt;xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A&gt;</ph>.","pos":[0,170],"source":"For a code example of <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>, see <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A>."}]},{"pos":[177,380],"content":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","nodes":[{"content":"The conversion methods in <ph id=\"ph1\">&lt;xref:System.Activities.Expressions.ExpressionServices&gt;</ph> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","pos":[0,203],"source":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments."}]}],"pos":[6970,7355],"yaml":true,"extradata":"MT"},{"content":"The expression being converted.","nodes":[{"pos":[0,31],"content":"The expression being converted.","nodes":[{"content":"The expression being converted.","pos":[0,31]}]}],"pos":[7702,7734],"yaml":true},{"content":"The type the expression is being converted to.","nodes":[{"pos":[0,46],"content":"The type the expression is being converted to.","nodes":[{"content":"The type the expression is being converted to.","pos":[0,46]}]}],"pos":[7791,7838],"yaml":true},{"content":"The converted expression.","nodes":[{"pos":[0,25],"content":"The converted expression.","nodes":[{"content":"The converted expression.","pos":[0,25]}]}],"pos":[7910,7936],"yaml":true},{"content":"Converts a reference to a workflow environment-aware expression to an activity tree.","nodes":[{"pos":[0,84],"content":"Converts a reference to a workflow environment-aware expression to an activity tree.","nodes":[{"content":"Converts a reference to a workflow environment-aware expression to an activity tree.","pos":[0,84]}]}],"pos":[9485,9570],"yaml":true},{"content":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","nodes":[{"pos":[0,203],"content":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","nodes":[{"content":"The conversion methods in <ph id=\"ph1\">&lt;xref:System.Activities.Expressions.ExpressionServices&gt;</ph> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","pos":[0,203],"source":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments."}]}],"pos":[9581,9785],"yaml":true,"extradata":"MT"},{"content":"The expression being converted.","nodes":[{"pos":[0,31],"content":"The expression being converted.","nodes":[{"content":"The expression being converted.","pos":[0,31]}]}],"pos":[13350,13382],"yaml":true},{"content":"The type the expression is being converted to.","nodes":[{"pos":[0,46],"content":"The type the expression is being converted to.","nodes":[{"content":"The type the expression is being converted to.","pos":[0,46]}]}],"pos":[13439,13486],"yaml":true},{"content":"The converted expression.","nodes":[{"pos":[0,25],"content":"The converted expression.","nodes":[{"content":"The converted expression.","pos":[0,25]}]}],"pos":[13593,13619],"yaml":true},{"content":"Converts a workflow environment-aware expression to an activity tree.","nodes":[{"pos":[0,69],"content":"Converts a workflow environment-aware expression to an activity tree.","nodes":[{"content":"Converts a workflow environment-aware expression to an activity tree.","pos":[0,69]}]}],"pos":[15297,15367],"yaml":true},{"content":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","nodes":[{"pos":[0,203],"content":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","nodes":[{"content":"The conversion methods in <ph id=\"ph1\">&lt;xref:System.Activities.Expressions.ExpressionServices&gt;</ph> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","pos":[0,203],"source":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments."}]}],"pos":[15378,15582],"yaml":true,"extradata":"MT"},{"content":"The expression being converted.","nodes":[{"pos":[0,31],"content":"The expression being converted.","nodes":[{"content":"The expression being converted.","pos":[0,31]}]}],"pos":[15949,15981],"yaml":true},{"content":"The converted expression.","nodes":[{"pos":[0,25],"content":"The converted expression.","nodes":[{"content":"The converted expression.","pos":[0,25]}]}],"pos":[16058,16084],"yaml":true},{"content":"The type the expression is being converted to.","nodes":[{"pos":[0,46],"content":"The type the expression is being converted to.","nodes":[{"content":"The type the expression is being converted to.","pos":[0,46]}]}],"pos":[16141,16188],"yaml":true},{"content":"`true` if the expression can be converted; otherwise, `false`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`true`</ph> if the expression can be converted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the expression can be converted; otherwise, `false`."}],"pos":[16246,16311],"yaml":true},{"content":"Converts a reference to a workflow environment-aware expression to an activity tree.","nodes":[{"pos":[0,84],"content":"Converts a reference to a workflow environment-aware expression to an activity tree.","nodes":[{"content":"Converts a reference to a workflow environment-aware expression to an activity tree.","pos":[0,84]}]}],"pos":[18151,18236],"yaml":true},{"content":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","nodes":[{"pos":[0,203],"content":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","nodes":[{"content":"The conversion methods in <ph id=\"ph1\">&lt;xref:System.Activities.Expressions.ExpressionServices&gt;</ph> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.","pos":[0,203],"source":"The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments."}]}],"pos":[18247,18451],"yaml":true,"extradata":"MT"},{"content":"The expression being converted.","nodes":[{"pos":[0,31],"content":"The expression being converted.","nodes":[{"content":"The expression being converted.","pos":[0,31]}]}],"pos":[18855,18887],"yaml":true},{"content":"The converted expression.","nodes":[{"pos":[0,25],"content":"The converted expression.","nodes":[{"content":"The converted expression.","pos":[0,25]}]}],"pos":[18999,19025],"yaml":true},{"content":"The type the expression is being converted to.","nodes":[{"pos":[0,46],"content":"The type the expression is being converted to.","nodes":[{"content":"The type the expression is being converted to.","pos":[0,46]}]}],"pos":[19082,19129],"yaml":true},{"content":"`true` if the expression can be converted; otherwise, `false`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`true`</ph> if the expression can be converted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the expression can be converted; otherwise, `false`."}],"pos":[19187,19252],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Expressions.ExpressionServices\n  commentId: T:System.Activities.Expressions.ExpressionServices\n  id: ExpressionServices\n  children:\n  - System.Activities.Expressions.ExpressionServices.Convert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})\n  - System.Activities.Expressions.ExpressionServices.ConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})\n  - System.Activities.Expressions.ExpressionServices.TryConvert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{``0}@)\n  - System.Activities.Expressions.ExpressionServices.TryConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{System.Activities.Location{``0}}@)\n  langs:\n  - csharp\n  name: ExpressionServices\n  nameWithType: ExpressionServices\n  fullName: System.Activities.Expressions.ExpressionServices\n  type: Class\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Expressions\n  summary: A transformation API used to convert environment aware expressions to an activity tree.\n  remarks: \"The conversion methods in this class transform the specified lambda expressions, which can contain multiple sub-expressions, into activity trees composed of a hierarchy of activities. It is strongly recommended to use these conversion methods instead of instantiating expression activities directly because they provide a higher level of abstraction and enable you to implement your workflow more intuitively. See the examples for more information.  \\n  \\n The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.\"\n  example:\n  - \"The following code example calls <xref:System.Activities.Expressions.ExpressionServices.Convert%2A> to compute the sum of the array element at index 0 and the array element at index 1. Next, the resulting sum is assigned to a variable and is printed to the console.  \\n  \\n```  \\n  \\npublic static void ComputeSumWithConvert()  \\n{  \\n    var arrayvar = new Variable<int[]>(\\\"arrayvar\\\", new int[] { 1, 2 });  \\n    var intvar = new Variable<int>(\\\"intvar\\\");              \\n  \\n    // Use ExpressionServices.Convert() to convert the composite lambda expression  \\n    // that represents the sum of array elements at index 0 and 1.  \\n    Activity<int> activity1 = ExpressionServices.Convert<int>(ctx => arrayvar.Get(ctx)[0] + arrayvar.Get(ctx)[1]);  \\n  \\n    Activity seq = new Sequence  \\n    {  \\n        Variables = { arrayvar, intvar },  \\n        Activities =  \\n        {                      \\n            // Get the sum value.  \\n            new Assign<int>  \\n            {  \\n                To = intvar,  \\n                Value = activity1,  \\n            },  \\n            // Print the sum value of 3 to the console.  \\n            new WriteLine  \\n            {                          \\n                Text = new InArgument<string>(ctx => intvar.Get(ctx).ToString()),  \\n            },  \\n        }  \\n    };  \\n  \\n    WorkflowInvoker.Invoke(seq);  \\n  \\n}  \\n  \\n```  \\n  \\n The following code example is provided for comparison purposes. This second example shows how to compute the sum by instantiating the <xref:System.Activities.Expressions.Add%603> expression activity. The two examples are functionally equivalent but as you can see the second approach involves more coding and is not as straightforward as calling <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>. Therefore the first example is recommended.  \\n  \\n```  \\n  \\npublic static void ComputeSumWithExpressionActivity()  \\n{  \\n    var arrayvar = new Variable<int[]>(\\\"arrayvar\\\", new int[] { 1, 2 });  \\n    var intvar = new Variable<int>(\\\"intvar\\\");  \\n  \\n    // Create an Add activity to compute the sum of array elements at index 0 and 1.  \\n    Activity<int> activity1 = new Add<int, int, int>  \\n    {  \\n        Left = new ArrayItemValue<int>  \\n        {  \\n            Array = arrayvar,  \\n            Index = 0,  \\n        },  \\n        Right = new ArrayItemValue<int>  \\n        {  \\n            Array = arrayvar,  \\n            Index = 1,  \\n        }  \\n    };              \\n  \\n    Activity seq = new Sequence  \\n    {  \\n        Variables = { arrayvar, intvar },  \\n        Activities =  \\n        {  \\n            // Get the sum value.  \\n            new Assign<int>  \\n            {  \\n                To = intvar,  \\n                Value = activity1,  \\n            },  \\n            // Print the sum value of 3 to the console.   \\n            new WriteLine  \\n            {                          \\n                Text = new InArgument<string>(ctx => intvar.Get(ctx).ToString()),  \\n            },                      \\n        }  \\n    };  \\n  \\n    WorkflowInvoker.Invoke(seq);  \\n  \\n}  \\n  \\n```\"\n  syntax:\n    content: public static class ExpressionServices\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Expressions/ExpressionServices.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Expressions.ExpressionServices.Convert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})\n  commentId: M:System.Activities.Expressions.ExpressionServices.Convert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})\n  id: Convert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})\n  parent: System.Activities.Expressions.ExpressionServices\n  langs:\n  - csharp\n  name: Convert<TResult>(Expression<Func<ActivityContext,TResult>>)\n  nameWithType: ExpressionServices.Convert<TResult>(Expression<Func<ActivityContext,TResult>>)\n  fullName: ExpressionServices.Convert<TResult>(Expression<Func<ActivityContext,TResult>>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Expressions\n  summary: Converts a workflow environment-aware expression to an activity tree.\n  remarks: \"For a code example of <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>, see <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A>.  \\n  \\n The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.\"\n  syntax:\n    content: public static System.Activities.Activity<TResult> Convert<TResult> (System.Linq.Expressions.Expression<Func<System.Activities.ActivityContext,TResult>> expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,TResult}}\n      description: The expression being converted.\n    typeParameters:\n    - id: TResult\n      description: The type the expression is being converted to.\n    return:\n      type: System.Activities.Activity`1\n      description: The converted expression.\n  overload: System.Activities.Expressions.ExpressionServices.Convert``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Expressions/ExpressionServices.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Expressions.ExpressionServices.ConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})\n  commentId: M:System.Activities.Expressions.ExpressionServices.ConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})\n  id: ConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})\n  parent: System.Activities.Expressions.ExpressionServices\n  langs:\n  - csharp\n  name: ConvertReference<TResult>(Expression<Func<ActivityContext,TResult>>)\n  nameWithType: ExpressionServices.ConvertReference<TResult>(Expression<Func<ActivityContext,TResult>>)\n  fullName: ExpressionServices.ConvertReference<TResult>(Expression<Func<ActivityContext,TResult>>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Expressions\n  summary: Converts a reference to a workflow environment-aware expression to an activity tree.\n  remarks: The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.\n  example:\n  - \"The following two code examples illustrate the use of <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> and <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>. The first code example uses <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> in an `Assign` activity to convert a lambda expression into a string property that is assigned a value. Next, <xref:System.Activities.Expressions.ExpressionServices.Convert%2A> is called to convert a lambda expression into a string property value that is printed to the console in the `WriteLine` activity.  \\n  \\n```  \\n  \\n// Define a struct with a property named AProperty.  \\nstruct StructWithProperty  \\n{  \\n    public string AProperty { get; set; }  \\n}  \\n  \\npublic static void ConvertReferenceForValueTypePropertyReferenceSample()  \\n{              \\n    // Create a variable of type StructWithProperty to store the property.  \\n    var swpvar = new Variable<StructWithProperty>(\\\"swpvar\\\", new StructWithProperty());  \\n  \\n    Activity myActivity = new Sequence  \\n    {  \\n        Variables = { swpvar },  \\n        Activities =   \\n        {                      \\n            // Create an Assign activity to assign a value to the AProperty property.  \\n            new Assign<string>  \\n            {  \\n                To = ExpressionServices.ConvertReference<string>(ctx => swpvar.Get(ctx).AProperty),  \\n                // Assign a string literal to AProperty.  \\n                Value = \\\"Hello\\\",  \\n            },  \\n            // Print the new property value to the console.  \\n            new WriteLine()  \\n            {  \\n                Text = ExpressionServices.Convert<string>(ctx => swpvar.Get(ctx).AProperty),  \\n            }  \\n        }  \\n    };  \\n  \\n    // Invoke the Sequence activity.  \\n    WorkflowInvoker.Invoke(myActivity);  \\n}  \\n  \\n```  \\n  \\n The following code example is like the previous one except that the expression to convert is a reference to an item in a multidimensional array.  \\n  \\n```  \\n  \\npublic static void ConvertReferenceForMultidimensionalArrayItemReferenceSample()  \\n{  \\n    // Create a variable to store a multidimensional array.  \\n    var arrayvar = new Variable<int[,]>(\\\"arrayvar\\\", new int[4, 5]);  \\n  \\n    Activity myActivity = new Sequence  \\n    {  \\n        Variables = { arrayvar },  \\n        Activities =   \\n        {                      \\n            // Create an Assign activity to assign a value to the array item at index [1,2].  \\n            new Assign<int>  \\n            {  \\n                To = ExpressionServices.ConvertReference<int>(ctx => arrayvar.Get(ctx)[1, 2]),  \\n                // Assign an integer value to the array item at row 1 column 2.  \\n                Value = 1,  \\n            },  \\n            // Print the array item value to the console.  \\n            new WriteLine()  \\n            {  \\n                Text = ExpressionServices.Convert<string>(ctx => arrayvar.Get(ctx)[1, 2].ToString()),  \\n            }  \\n        }  \\n    };  \\n  \\n    // Invoke the Sequence activity.  \\n    WorkflowInvoker.Invoke(myActivity);  \\n}  \\n  \\n```\"\n  syntax:\n    content: public static System.Activities.Activity<System.Activities.Location<TResult>> ConvertReference<TResult> (System.Linq.Expressions.Expression<Func<System.Activities.ActivityContext,TResult>> expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,TResult}}\n      description: The expression being converted.\n    typeParameters:\n    - id: TResult\n      description: The type the expression is being converted to.\n    return:\n      type: System.Activities.Activity{System.Activities.Location{TResult}}\n      description: The converted expression.\n  overload: System.Activities.Expressions.ExpressionServices.ConvertReference``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Expressions/ExpressionServices.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Expressions.ExpressionServices.TryConvert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{``0}@)\n  commentId: M:System.Activities.Expressions.ExpressionServices.TryConvert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{``0}@)\n  id: TryConvert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{``0}@)\n  parent: System.Activities.Expressions.ExpressionServices\n  langs:\n  - csharp\n  name: TryConvert<TResult>(Expression<Func<ActivityContext,TResult>>, Activity<TResult>)\n  nameWithType: ExpressionServices.TryConvert<TResult>(Expression<Func<ActivityContext,TResult>>, Activity<TResult>)\n  fullName: ExpressionServices.TryConvert<TResult>(Expression<Func<ActivityContext,TResult>>, Activity<TResult>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Expressions\n  summary: Converts a workflow environment-aware expression to an activity tree.\n  remarks: The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.\n  syntax:\n    content: public static bool TryConvert<TResult> (System.Linq.Expressions.Expression<Func<System.Activities.ActivityContext,TResult>> expression, out System.Activities.Activity<TResult> result);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,TResult}}\n      description: The expression being converted.\n    - id: result\n      type: System.Activities.Activity`1\n      description: The converted expression.\n    typeParameters:\n    - id: TResult\n      description: The type the expression is being converted to.\n    return:\n      type: System.Boolean\n      description: '`true` if the expression can be converted; otherwise, `false`.'\n  overload: System.Activities.Expressions.ExpressionServices.TryConvert``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Expressions/ExpressionServices.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Expressions.ExpressionServices.TryConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{System.Activities.Location{``0}}@)\n  commentId: M:System.Activities.Expressions.ExpressionServices.TryConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{System.Activities.Location{``0}}@)\n  id: TryConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{System.Activities.Location{``0}}@)\n  parent: System.Activities.Expressions.ExpressionServices\n  langs:\n  - csharp\n  name: TryConvertReference<TResult>(Expression<Func<ActivityContext,TResult>>, Activity<Location<TResult>>)\n  nameWithType: ExpressionServices.TryConvertReference<TResult>(Expression<Func<ActivityContext,TResult>>, Activity<Location<TResult>>)\n  fullName: ExpressionServices.TryConvertReference<TResult>(Expression<Func<ActivityContext,TResult>>, Activity<Location<TResult>>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Expressions\n  summary: Converts a reference to a workflow environment-aware expression to an activity tree.\n  remarks: The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.\n  syntax:\n    content: public static bool TryConvertReference<TResult> (System.Linq.Expressions.Expression<Func<System.Activities.ActivityContext,TResult>> expression, out System.Activities.Activity<System.Activities.Location<TResult>> result);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,TResult}}\n      description: The expression being converted.\n    - id: result\n      type: System.Activities.Activity{System.Activities.Location{TResult}}\n      description: The converted expression.\n    typeParameters:\n    - id: TResult\n      description: The type the expression is being converted to.\n    return:\n      type: System.Boolean\n      description: '`true` if the expression can be converted; otherwise, `false`.'\n  overload: System.Activities.Expressions.ExpressionServices.TryConvertReference``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Expressions/ExpressionServices.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Activities.Expressions.ExpressionServices.Convert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})\n  parent: System.Activities.Expressions.ExpressionServices\n  isExternal: false\n  name: Convert<TResult>(Expression<Func<ActivityContext,TResult>>)\n  nameWithType: ExpressionServices.Convert<TResult>(Expression<Func<ActivityContext,TResult>>)\n  fullName: ExpressionServices.Convert<TResult>(Expression<Func<ActivityContext,TResult>>)\n- uid: System.Activities.Activity`1\n  parent: System.Activities\n  isExternal: false\n  name: Activity<TResult>\n  nameWithType: Activity<TResult>\n  fullName: System.Activities.Activity<TResult>\n- uid: System.Linq.Expressions.Expression`1\n  name: Expression<TDelegate>\n  nameWithType: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n- uid: System.Func`2\n  name: Func<T,TResult>\n  nameWithType: Func<T,TResult>\n  fullName: System.Func<T,TResult>\n- uid: System.Activities.ActivityContext\n  name: ActivityContext\n  nameWithType: ActivityContext\n  fullName: System.Activities.ActivityContext\n- uid: TResult\n  name: TResult\n  nameWithType: TResult\n  fullName: TResult\n- uid: System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,TResult}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<ActivityContext,TResult>>\n  nameWithType: Expression<Func<ActivityContext,TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<System.Activities.ActivityContext,TResult>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.ActivityContext\n    name: ActivityContext\n    nameWithType: ActivityContext\n    fullName: System.Activities.ActivityContext\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Expressions.ExpressionServices.ConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})\n  parent: System.Activities.Expressions.ExpressionServices\n  isExternal: false\n  name: ConvertReference<TResult>(Expression<Func<ActivityContext,TResult>>)\n  nameWithType: ExpressionServices.ConvertReference<TResult>(Expression<Func<ActivityContext,TResult>>)\n  fullName: ExpressionServices.ConvertReference<TResult>(Expression<Func<ActivityContext,TResult>>)\n- uid: System.Activities.Location`1\n  name: Location<T>\n  nameWithType: Location<T>\n  fullName: System.Activities.Location<T>\n- uid: System.Activities.Activity{System.Activities.Location{TResult}}\n  parent: System.Activities\n  isExternal: false\n  name: Activity<Location<TResult>>\n  nameWithType: Activity<Location<TResult>>\n  fullName: System.Activities.Activity<System.Activities.Location<TResult>>\n  spec.csharp:\n  - uid: System.Activities.Activity`1\n    name: Activity\n    nameWithType: Activity\n    fullName: System.Activities.Activity\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.Location`1\n    name: Location\n    nameWithType: Location\n    fullName: System.Activities.Location\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Expressions.ExpressionServices.TryConvert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{``0}@)\n  parent: System.Activities.Expressions.ExpressionServices\n  isExternal: false\n  name: TryConvert<TResult>(Expression<Func<ActivityContext,TResult>>, Activity<TResult>)\n  nameWithType: ExpressionServices.TryConvert<TResult>(Expression<Func<ActivityContext,TResult>>, Activity<TResult>)\n  fullName: ExpressionServices.TryConvert<TResult>(Expression<Func<ActivityContext,TResult>>, Activity<TResult>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Expressions.ExpressionServices.TryConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{System.Activities.Location{``0}}@)\n  parent: System.Activities.Expressions.ExpressionServices\n  isExternal: false\n  name: TryConvertReference<TResult>(Expression<Func<ActivityContext,TResult>>, Activity<Location<TResult>>)\n  nameWithType: ExpressionServices.TryConvertReference<TResult>(Expression<Func<ActivityContext,TResult>>, Activity<Location<TResult>>)\n  fullName: ExpressionServices.TryConvertReference<TResult>(Expression<Func<ActivityContext,TResult>>, Activity<Location<TResult>>)\n- uid: System.Activities.Expressions.ExpressionServices.Convert``1*\n  parent: System.Activities.Expressions.ExpressionServices\n  isExternal: false\n  name: Convert<TResult>\n  nameWithType: ExpressionServices.Convert<TResult>\n  fullName: ExpressionServices.Convert<TResult>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Expressions/ExpressionServices.xml\n- uid: System.Activities.Expressions.ExpressionServices.ConvertReference``1*\n  parent: System.Activities.Expressions.ExpressionServices\n  isExternal: false\n  name: ConvertReference<TResult>\n  nameWithType: ExpressionServices.ConvertReference<TResult>\n  fullName: ExpressionServices.ConvertReference<TResult>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Expressions/ExpressionServices.xml\n- uid: System.Activities.Expressions.ExpressionServices.TryConvert``1*\n  parent: System.Activities.Expressions.ExpressionServices\n  isExternal: false\n  name: TryConvert<TResult>\n  nameWithType: ExpressionServices.TryConvert<TResult>\n  fullName: ExpressionServices.TryConvert<TResult>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Expressions/ExpressionServices.xml\n- uid: System.Activities.Expressions.ExpressionServices.TryConvertReference``1*\n  parent: System.Activities.Expressions.ExpressionServices\n  isExternal: false\n  name: TryConvertReference<TResult>\n  nameWithType: ExpressionServices.TryConvertReference<TResult>\n  fullName: ExpressionServices.TryConvertReference<TResult>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Expressions/ExpressionServices.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}