{"nodes":[{"content":"With the <xref href=\"System.Deployment.Application\"></xref> namespace, you can program custom upgrade behavior into your ClickOnce application.","nodes":[{"pos":[0,143],"content":"With the <ph id=\"ph1\">&lt;xref href=\"System.Deployment.Application\"&gt;&lt;/xref&gt;</ph> namespace, you can program custom upgrade behavior into your ClickOnce application.","source":"With the <xref href=\"System.Deployment.Application\"></xref> namespace, you can program custom upgrade behavior into your ClickOnce application."}],"pos":[1745,1889],"yaml":true},{"content":"The key class in this namespace is <xref:System.Deployment.Application.ApplicationDeployment>. You can test whether your deployment has an available update by using either the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> or <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> methods; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event when it has successfully completed. <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A> returns important information about the update, such as its version number and whether it is a required update for current users. If an update is available, you can install it by using <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event after installation of the update is finished. For large updates, you can receive progress notifications through the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged> and <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> events, and use the information in <xref:System.ComponentModel.ProgressChangedEventArgs> to notify the user of the download status.  \n  \n You can also use <xref:System.Deployment.Application.ApplicationDeployment> to download large files and assemblies on demand. These files must be marked as \"optional\" within the deployment's application manifest, so that they are not downloaded at installation. You can download the files at any point during the application's duration by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> methods. You can download assemblies before they are loaded into memory by supplying an event handler for the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain> class. For more information, see [Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer](http://msdn.microsoft.com/library/59a0dd5f-1cab-4f2f-b780-0ab7399905d5).","nodes":[{"pos":[0,1449],"content":"The key class in this namespace is <xref:System.Deployment.Application.ApplicationDeployment>. You can test whether your deployment has an available update by using either the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> or <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> methods; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event when it has successfully completed. <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A> returns important information about the update, such as its version number and whether it is a required update for current users. If an update is available, you can install it by using <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event after installation of the update is finished. For large updates, you can receive progress notifications through the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged> and <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> events, and use the information in <xref:System.ComponentModel.ProgressChangedEventArgs> to notify the user of the download status.","nodes":[{"content":"The key class in this namespace is <xref:System.Deployment.Application.ApplicationDeployment>. You can test whether your deployment has an available update by using either the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> or <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> methods; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event when it has successfully completed. <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A> returns important information about the update, such as its version number and whether it is a required update for current users. If an update is available, you can install it by using <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event after installation of the update is finished. For large updates, you can receive progress notifications through the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged> and <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> events, and use the information in <xref:System.ComponentModel.ProgressChangedEventArgs> to notify the user of the download status.","pos":[0,1449],"nodes":[{"content":"The key class in this namespace is <ph id=\"ph1\">&lt;xref:System.Deployment.Application.ApplicationDeployment&gt;</ph>.","pos":[0,94],"source":"The key class in this namespace is <xref:System.Deployment.Application.ApplicationDeployment>."},{"content":"You can test whether your deployment has an available update by using either the <ph id=\"ph1\">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A&gt;</ph> methods; the latter method raises the <ph id=\"ph3\">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted&gt;</ph> event when it has successfully completed.","pos":[95,500],"source":" You can test whether your deployment has an available update by using either the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> or <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> methods; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event when it has successfully completed."},{"content":"<ph id=\"ph1\">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A&gt;</ph> returns important information about the update, such as its version number and whether it is a required update for current users.","pos":[501,715],"source":" <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A> returns important information about the update, such as its version number and whether it is a required update for current users."},{"content":"If an update is available, you can install it by using <ph id=\"ph1\">&lt;xref:System.Deployment.Application.ApplicationDeployment.Update%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A&gt;</ph>; the latter method raises the <ph id=\"ph3\">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted&gt;</ph> event after installation of the update is finished.","pos":[716,1073],"source":" If an update is available, you can install it by using <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event after installation of the update is finished."},{"content":"For large updates, you can receive progress notifications through the <ph id=\"ph1\">&lt;xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged&gt;</ph> events, and use the information in <ph id=\"ph3\">&lt;xref:System.ComponentModel.ProgressChangedEventArgs&gt;</ph> to notify the user of the download status.","pos":[1074,1449],"source":" For large updates, you can receive progress notifications through the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged> and <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> events, and use the information in <xref:System.ComponentModel.ProgressChangedEventArgs> to notify the user of the download status."}]}]},{"pos":[1456,2366],"content":"You can also use <xref:System.Deployment.Application.ApplicationDeployment> to download large files and assemblies on demand. These files must be marked as \"optional\" within the deployment's application manifest, so that they are not downloaded at installation. You can download the files at any point during the application's duration by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> methods. You can download assemblies before they are loaded into memory by supplying an event handler for the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain> class. For more information, see [Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer](http://msdn.microsoft.com/library/59a0dd5f-1cab-4f2f-b780-0ab7399905d5).","nodes":[{"content":"You can also use <ph id=\"ph1\">&lt;xref:System.Deployment.Application.ApplicationDeployment&gt;</ph> to download large files and assemblies on demand.","pos":[0,125],"source":"You can also use <xref:System.Deployment.Application.ApplicationDeployment> to download large files and assemblies on demand."},{"content":"These files must be marked as \"optional\" within the deployment's application manifest, so that they are not downloaded at installation.","pos":[126,261]},{"content":"You can download the files at any point during the application's duration by using the <ph id=\"ph1\">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A&gt;</ph> methods.","pos":[262,525],"source":" You can download the files at any point during the application's duration by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> methods."},{"content":"You can download assemblies before they are loaded into memory by supplying an event handler for the <ph id=\"ph1\">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event on the <ph id=\"ph2\">&lt;xref:System.AppDomain&gt;</ph> class.","pos":[526,710],"source":" You can download assemblies before they are loaded into memory by supplying an event handler for the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain> class."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer<ept id=\"p1\">](http://msdn.microsoft.com/library/59a0dd5f-1cab-4f2f-b780-0ab7399905d5)</ept>.","pos":[711,910],"source":" For more information, see [Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer](http://msdn.microsoft.com/library/59a0dd5f-1cab-4f2f-b780-0ab7399905d5)."}]}],"pos":[1900,4273],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Deployment.Application\n  id: System.Deployment.Application\n  children:\n  - System.Deployment.Application.ApplicationDeployment\n  - System.Deployment.Application.CheckForUpdateCompletedEventArgs\n  - System.Deployment.Application.CheckForUpdateCompletedEventHandler\n  - System.Deployment.Application.CompatibleFramework\n  - System.Deployment.Application.CompatibleFrameworkMissingException\n  - System.Deployment.Application.CompatibleFrameworks\n  - System.Deployment.Application.DependentPlatformMissingException\n  - System.Deployment.Application.DeploymentDownloadException\n  - System.Deployment.Application.DeploymentException\n  - System.Deployment.Application.DeploymentProgressChangedEventArgs\n  - System.Deployment.Application.DeploymentProgressChangedEventHandler\n  - System.Deployment.Application.DeploymentProgressState\n  - System.Deployment.Application.DeploymentServiceCom\n  - System.Deployment.Application.DownloadApplicationCompletedEventArgs\n  - System.Deployment.Application.DownloadFileGroupCompletedEventArgs\n  - System.Deployment.Application.DownloadFileGroupCompletedEventHandler\n  - System.Deployment.Application.DownloadProgressChangedEventArgs\n  - System.Deployment.Application.GetManifestCompletedEventArgs\n  - System.Deployment.Application.InPlaceHostingManager\n  - System.Deployment.Application.InvalidDeploymentException\n  - System.Deployment.Application.SupportedRuntimeMissingException\n  - System.Deployment.Application.TrustNotGrantedException\n  - System.Deployment.Application.UpdateCheckInfo\n  langs:\n  - csharp\n  name: System.Deployment.Application\n  nameWithType: System.Deployment.Application\n  fullName: System.Deployment.Application\n  type: Namespace\n  summary: With the <xref href=\"System.Deployment.Application\"></xref> namespace, you can program custom upgrade behavior into your ClickOnce application.\n  remarks: \"The key class in this namespace is <xref:System.Deployment.Application.ApplicationDeployment>. You can test whether your deployment has an available update by using either the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> or <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> methods; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event when it has successfully completed. <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A> returns important information about the update, such as its version number and whether it is a required update for current users. If an update is available, you can install it by using <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event after installation of the update is finished. For large updates, you can receive progress notifications through the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged> and <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> events, and use the information in <xref:System.ComponentModel.ProgressChangedEventArgs> to notify the user of the download status.  \\n  \\n You can also use <xref:System.Deployment.Application.ApplicationDeployment> to download large files and assemblies on demand. These files must be marked as \\\"optional\\\" within the deployment's application manifest, so that they are not downloaded at installation. You can download the files at any point during the application's duration by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> methods. You can download assemblies before they are loaded into memory by supplying an event handler for the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain> class. For more information, see [Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer](http://msdn.microsoft.com/library/59a0dd5f-1cab-4f2f-b780-0ab7399905d5).\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/ns-System.Deployment.Application.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Deployment.Application.ApplicationDeployment\n  parent: System.Deployment.Application\n  isExternal: false\n  name: ApplicationDeployment\n  nameWithType: ApplicationDeployment\n  fullName: System.Deployment.Application.ApplicationDeployment\n- uid: System.Deployment.Application.CheckForUpdateCompletedEventArgs\n  parent: System.Deployment.Application\n  isExternal: false\n  name: CheckForUpdateCompletedEventArgs\n  nameWithType: CheckForUpdateCompletedEventArgs\n  fullName: System.Deployment.Application.CheckForUpdateCompletedEventArgs\n- uid: System.Deployment.Application.CheckForUpdateCompletedEventHandler\n  parent: System.Deployment.Application\n  isExternal: false\n  name: CheckForUpdateCompletedEventHandler\n  nameWithType: CheckForUpdateCompletedEventHandler\n  fullName: System.Deployment.Application.CheckForUpdateCompletedEventHandler\n- uid: System.Deployment.Application.CompatibleFramework\n  parent: System.Deployment.Application\n  isExternal: false\n  name: CompatibleFramework\n  nameWithType: CompatibleFramework\n  fullName: System.Deployment.Application.CompatibleFramework\n- uid: System.Deployment.Application.CompatibleFrameworkMissingException\n  parent: System.Deployment.Application\n  isExternal: false\n  name: CompatibleFrameworkMissingException\n  nameWithType: CompatibleFrameworkMissingException\n  fullName: System.Deployment.Application.CompatibleFrameworkMissingException\n- uid: System.Deployment.Application.CompatibleFrameworks\n  parent: System.Deployment.Application\n  isExternal: false\n  name: CompatibleFrameworks\n  nameWithType: CompatibleFrameworks\n  fullName: System.Deployment.Application.CompatibleFrameworks\n- uid: System.Deployment.Application.DependentPlatformMissingException\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DependentPlatformMissingException\n  nameWithType: DependentPlatformMissingException\n  fullName: System.Deployment.Application.DependentPlatformMissingException\n- uid: System.Deployment.Application.DeploymentDownloadException\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DeploymentDownloadException\n  nameWithType: DeploymentDownloadException\n  fullName: System.Deployment.Application.DeploymentDownloadException\n- uid: System.Deployment.Application.DeploymentException\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DeploymentException\n  nameWithType: DeploymentException\n  fullName: System.Deployment.Application.DeploymentException\n- uid: System.Deployment.Application.DeploymentProgressChangedEventArgs\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DeploymentProgressChangedEventArgs\n  nameWithType: DeploymentProgressChangedEventArgs\n  fullName: System.Deployment.Application.DeploymentProgressChangedEventArgs\n- uid: System.Deployment.Application.DeploymentProgressChangedEventHandler\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DeploymentProgressChangedEventHandler\n  nameWithType: DeploymentProgressChangedEventHandler\n  fullName: System.Deployment.Application.DeploymentProgressChangedEventHandler\n- uid: System.Deployment.Application.DeploymentProgressState\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DeploymentProgressState\n  nameWithType: DeploymentProgressState\n  fullName: System.Deployment.Application.DeploymentProgressState\n- uid: System.Deployment.Application.DeploymentServiceCom\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DeploymentServiceCom\n  nameWithType: DeploymentServiceCom\n  fullName: System.Deployment.Application.DeploymentServiceCom\n- uid: System.Deployment.Application.DownloadApplicationCompletedEventArgs\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DownloadApplicationCompletedEventArgs\n  nameWithType: DownloadApplicationCompletedEventArgs\n  fullName: System.Deployment.Application.DownloadApplicationCompletedEventArgs\n- uid: System.Deployment.Application.DownloadFileGroupCompletedEventArgs\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DownloadFileGroupCompletedEventArgs\n  nameWithType: DownloadFileGroupCompletedEventArgs\n  fullName: System.Deployment.Application.DownloadFileGroupCompletedEventArgs\n- uid: System.Deployment.Application.DownloadFileGroupCompletedEventHandler\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DownloadFileGroupCompletedEventHandler\n  nameWithType: DownloadFileGroupCompletedEventHandler\n  fullName: System.Deployment.Application.DownloadFileGroupCompletedEventHandler\n- uid: System.Deployment.Application.DownloadProgressChangedEventArgs\n  parent: System.Deployment.Application\n  isExternal: false\n  name: DownloadProgressChangedEventArgs\n  nameWithType: DownloadProgressChangedEventArgs\n  fullName: System.Deployment.Application.DownloadProgressChangedEventArgs\n- uid: System.Deployment.Application.GetManifestCompletedEventArgs\n  parent: System.Deployment.Application\n  isExternal: false\n  name: GetManifestCompletedEventArgs\n  nameWithType: GetManifestCompletedEventArgs\n  fullName: System.Deployment.Application.GetManifestCompletedEventArgs\n- uid: System.Deployment.Application.InPlaceHostingManager\n  parent: System.Deployment.Application\n  isExternal: false\n  name: InPlaceHostingManager\n  nameWithType: InPlaceHostingManager\n  fullName: System.Deployment.Application.InPlaceHostingManager\n- uid: System.Deployment.Application.InvalidDeploymentException\n  parent: System.Deployment.Application\n  isExternal: false\n  name: InvalidDeploymentException\n  nameWithType: InvalidDeploymentException\n  fullName: System.Deployment.Application.InvalidDeploymentException\n- uid: System.Deployment.Application.SupportedRuntimeMissingException\n  parent: System.Deployment.Application\n  isExternal: false\n  name: SupportedRuntimeMissingException\n  nameWithType: SupportedRuntimeMissingException\n  fullName: System.Deployment.Application.SupportedRuntimeMissingException\n- uid: System.Deployment.Application.TrustNotGrantedException\n  parent: System.Deployment.Application\n  isExternal: false\n  name: TrustNotGrantedException\n  nameWithType: TrustNotGrantedException\n  fullName: System.Deployment.Application.TrustNotGrantedException\n- uid: System.Deployment.Application.UpdateCheckInfo\n  parent: System.Deployment.Application\n  isExternal: false\n  name: UpdateCheckInfo\n  nameWithType: UpdateCheckInfo\n  fullName: System.Deployment.Application.UpdateCheckInfo\n"}