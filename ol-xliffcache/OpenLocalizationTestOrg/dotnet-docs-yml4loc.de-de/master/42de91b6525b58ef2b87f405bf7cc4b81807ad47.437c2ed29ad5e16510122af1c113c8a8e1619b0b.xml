{"nodes":[{"content":"Used in conjunction with the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\"></xref> event, which is signaled when a resolve request for a specific <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> has completed.","nodes":[{"pos":[0,235],"content":"Used in conjunction with the <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\"&gt;&lt;/xref&gt;</ph> event, which is signaled when a resolve request for a specific <ph id=\"ph2\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;&lt;/xref&gt;</ph> has completed.","source":"Used in conjunction with the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\"></xref> event, which is signaled when a resolve request for a specific <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> has completed."}],"pos":[672,908],"yaml":true},{"content":"To use the ResolveCompletedEventArgs object, instantiate a <xref:System.Net.PeerToPeer.PeerNameResolver> object and utilize one of the Resolve methods. For asynchronous processing, use the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.  \n  \n When the Resolver has reached the end of the Cloud(s) to query for the <xref:System.Net.PeerToPeer.PeerName>, or it has reached the maximum number of record entries for the <xref:System.Net.PeerToPeer.PeerNameRecordCollection> it is constructing, the event to complete the resolve process is raised, and the associated delegate causes ResolveAsync to complete. The event can also be raised for abnormal completions, which do not return a collection.  \n  \n This event is raised only once when all endpoints have been found.  \n  \n All references to this instance of the Resolver object are coordinated with a supplied token, which is a unique, developer-determined identifier for this asynchronous resolve request.","nodes":[{"pos":[0,258],"content":"To use the ResolveCompletedEventArgs object, instantiate a <xref:System.Net.PeerToPeer.PeerNameResolver> object and utilize one of the Resolve methods. For asynchronous processing, use the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.","nodes":[{"content":"To use the ResolveCompletedEventArgs object, instantiate a <xref:System.Net.PeerToPeer.PeerNameResolver> object and utilize one of the Resolve methods. For asynchronous processing, use the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.","pos":[0,258],"nodes":[{"content":"To use the ResolveCompletedEventArgs object, instantiate a <ph id=\"ph1\">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> object and utilize one of the Resolve methods.","pos":[0,151],"source":"To use the ResolveCompletedEventArgs object, instantiate a <xref:System.Net.PeerToPeer.PeerNameResolver> object and utilize one of the Resolve methods."},{"content":"For asynchronous processing, use the <ph id=\"ph1\">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.","pos":[152,258],"source":" For asynchronous processing, use the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method."}]}]},{"pos":[265,714],"content":"When the Resolver has reached the end of the Cloud(s) to query for the <xref:System.Net.PeerToPeer.PeerName>, or it has reached the maximum number of record entries for the <xref:System.Net.PeerToPeer.PeerNameRecordCollection> it is constructing, the event to complete the resolve process is raised, and the associated delegate causes ResolveAsync to complete. The event can also be raised for abnormal completions, which do not return a collection.","nodes":[{"content":"When the Resolver has reached the end of the Cloud(s) to query for the <xref:System.Net.PeerToPeer.PeerName>, or it has reached the maximum number of record entries for the <xref:System.Net.PeerToPeer.PeerNameRecordCollection> it is constructing, the event to complete the resolve process is raised, and the associated delegate causes ResolveAsync to complete. The event can also be raised for abnormal completions, which do not return a collection.","pos":[0,449],"nodes":[{"content":"When the Resolver has reached the end of the Cloud(s) to query for the <ph id=\"ph1\">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>, or it has reached the maximum number of record entries for the <ph id=\"ph2\">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph> it is constructing, the event to complete the resolve process is raised, and the associated delegate causes ResolveAsync to complete.","pos":[0,360],"source":"When the Resolver has reached the end of the Cloud(s) to query for the <xref:System.Net.PeerToPeer.PeerName>, or it has reached the maximum number of record entries for the <xref:System.Net.PeerToPeer.PeerNameRecordCollection> it is constructing, the event to complete the resolve process is raised, and the associated delegate causes ResolveAsync to complete."},{"content":"The event can also be raised for abnormal completions, which do not return a collection.","pos":[361,449]}]}]},{"pos":[721,787],"content":"This event is raised only once when all endpoints have been found.","nodes":[{"content":"This event is raised only once when all endpoints have been found.","pos":[0,66]}]},{"pos":[794,977],"content":"All references to this instance of the Resolver object are coordinated with a supplied token, which is a unique, developer-determined identifier for this asynchronous resolve request.","nodes":[{"content":"All references to this instance of the Resolver object are coordinated with a supplied token, which is a unique, developer-determined identifier for this asynchronous resolve request.","pos":[0,183]}]}],"pos":[919,1905],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.PeerToPeer.ResolveCompletedEventArgs\"></xref> class.","nodes":[{"pos":[0,109],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.ResolveCompletedEventArgs\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Net.PeerToPeer.ResolveCompletedEventArgs\"></xref> class."}],"pos":[4126,4236],"yaml":true},{"content":"The collection associated with the peer name that was resolved.","nodes":[{"pos":[0,63],"content":"The collection associated with the peer name that was resolved.","nodes":[{"content":"The collection associated with the peer name that was resolved.","pos":[0,63]}]}],"pos":[4546,4610],"yaml":true},{"content":"Returns an exception if an error occurred.","nodes":[{"pos":[0,42],"content":"Returns an exception if an error occurred.","nodes":[{"content":"Returns an exception if an error occurred.","pos":[0,42]}]}],"pos":[4674,4717],"yaml":true},{"content":"`True` if the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\"></xref> operation was cancelled, otherwise `False`.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">`True`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\"&gt;&lt;/xref&gt;</ph> operation was cancelled, otherwise <ph id=\"ph3\">`False`</ph>.","source":"`True` if the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\"></xref> operation was cancelled, otherwise `False`."}],"pos":[4782,4916],"yaml":true},{"content":"The user token specified when a <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\"></xref> operation was started.","nodes":[{"pos":[0,128],"content":"The user token specified when a <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\"&gt;&lt;/xref&gt;</ph> operation was started.","source":"The user token specified when a <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\"></xref> operation was started."}],"pos":[4981,5110],"yaml":true},{"content":"Gets the <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> object to resolve.","nodes":[{"pos":[0,95],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"&gt;&lt;/xref&gt;</ph> object to resolve.","source":"Gets the <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> object to resolve."}],"pos":[6214,6310],"yaml":true},{"content":"This event is raised when all clouds have been queried for this peer name, or when the maximum number of peer name records has been retrieved. It is raised by putting the peer name record collection into the <xref:System.Net.PeerToPeer.ResolveCompletedEventArgs> event argument for which the OnResolveCompleted method is waiting.  The change in state awakens the process.  \n  \n Unless explicitly specified, the default value for all properties is `null` for reference types and zero (0) for properties of type `int`. If no records were found, `null` is returned.","nodes":[{"pos":[0,371],"content":"This event is raised when all clouds have been queried for this peer name, or when the maximum number of peer name records has been retrieved. It is raised by putting the peer name record collection into the <xref:System.Net.PeerToPeer.ResolveCompletedEventArgs> event argument for which the OnResolveCompleted method is waiting.  The change in state awakens the process.","nodes":[{"content":"This event is raised when all clouds have been queried for this peer name, or when the maximum number of peer name records has been retrieved. It is raised by putting the peer name record collection into the <xref:System.Net.PeerToPeer.ResolveCompletedEventArgs> event argument for which the OnResolveCompleted method is waiting.  The change in state awakens the process.","pos":[0,371],"nodes":[{"content":"This event is raised when all clouds have been queried for this peer name, or when the maximum number of peer name records has been retrieved.","pos":[0,142]},{"content":"It is raised by putting the peer name record collection into the <ph id=\"ph1\">&lt;xref:System.Net.PeerToPeer.ResolveCompletedEventArgs&gt;</ph> event argument for which the OnResolveCompleted method is waiting.","pos":[143,329],"source":" It is raised by putting the peer name record collection into the <xref:System.Net.PeerToPeer.ResolveCompletedEventArgs> event argument for which the OnResolveCompleted method is waiting."},{"content":"The change in state awakens the process.","pos":[331,371]}]}]},{"pos":[378,562],"content":"Unless explicitly specified, the default value for all properties is `null` for reference types and zero (0) for properties of type `int`. If no records were found, `null` is returned.","nodes":[{"content":"Unless explicitly specified, the default value for all properties is <ph id=\"ph1\">`null`</ph> for reference types and zero (0) for properties of type <ph id=\"ph2\">`int`</ph>.","pos":[0,138],"source":"Unless explicitly specified, the default value for all properties is `null` for reference types and zero (0) for properties of type `int`."},{"content":"If no records were found, <ph id=\"ph1\">`null`</ph> is returned.","pos":[139,184],"source":" If no records were found, `null` is returned."}]}],"pos":[6321,6888],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> object to resolve is the one found in response to a <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\"></xref> operation on a specific <xref href=\"System.Net.PeerToPeer.PeerName\"></xref>.","nodes":[{"pos":[0,274],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"&gt;&lt;/xref&gt;</ph> object to resolve is the one found in response to a <ph id=\"ph2\">&lt;xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\"&gt;&lt;/xref&gt;</ph> operation on a specific <ph id=\"ph3\">&lt;xref href=\"System.Net.PeerToPeer.PeerName\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> object to resolve is the one found in response to a <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\"></xref> operation on a specific <xref href=\"System.Net.PeerToPeer.PeerName\"></xref>."}],"pos":[7089,7364],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.PeerToPeer.ResolveCompletedEventArgs\n  commentId: T:System.Net.PeerToPeer.ResolveCompletedEventArgs\n  id: ResolveCompletedEventArgs\n  children:\n  - System.Net.PeerToPeer.ResolveCompletedEventArgs.#ctor(System.Net.PeerToPeer.PeerNameRecordCollection,System.Exception,System.Boolean,System.Object)\n  - System.Net.PeerToPeer.ResolveCompletedEventArgs.PeerNameRecordCollection\n  langs:\n  - csharp\n  name: ResolveCompletedEventArgs\n  nameWithType: ResolveCompletedEventArgs\n  fullName: System.Net.PeerToPeer.ResolveCompletedEventArgs\n  type: Class\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Used in conjunction with the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted\"></xref> event, which is signaled when a resolve request for a specific <xref href=\"System.Net.PeerToPeer.PeerName\"></xref> has completed.\n  remarks: \"To use the ResolveCompletedEventArgs object, instantiate a <xref:System.Net.PeerToPeer.PeerNameResolver> object and utilize one of the Resolve methods. For asynchronous processing, use the <xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A> method.  \\n  \\n When the Resolver has reached the end of the Cloud(s) to query for the <xref:System.Net.PeerToPeer.PeerName>, or it has reached the maximum number of record entries for the <xref:System.Net.PeerToPeer.PeerNameRecordCollection> it is constructing, the event to complete the resolve process is raised, and the associated delegate causes ResolveAsync to complete. The event can also be raised for abnormal completions, which do not return a collection.  \\n  \\n This event is raised only once when all endpoints have been found.  \\n  \\n All references to this instance of the Resolver object are coordinated with a supplied token, which is a unique, developer-determined identifier for this asynchronous resolve request.\"\n  syntax:\n    content: 'public class ResolveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  - System.ComponentModel.AsyncCompletedEventArgs\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.AsyncCompletedEventArgs.Cancelled\n  - System.ComponentModel.AsyncCompletedEventArgs.Error\n  - System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary\n  - System.ComponentModel.AsyncCompletedEventArgs.UserState\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/ResolveCompletedEventArgs.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.PeerToPeer.ResolveCompletedEventArgs.#ctor(System.Net.PeerToPeer.PeerNameRecordCollection,System.Exception,System.Boolean,System.Object)\n  commentId: M:System.Net.PeerToPeer.ResolveCompletedEventArgs.#ctor(System.Net.PeerToPeer.PeerNameRecordCollection,System.Exception,System.Boolean,System.Object)\n  id: '#ctor(System.Net.PeerToPeer.PeerNameRecordCollection,System.Exception,System.Boolean,System.Object)'\n  parent: System.Net.PeerToPeer.ResolveCompletedEventArgs\n  langs:\n  - csharp\n  name: ResolveCompletedEventArgs(PeerNameRecordCollection, Exception, Boolean, Object)\n  nameWithType: ResolveCompletedEventArgs.ResolveCompletedEventArgs(PeerNameRecordCollection, Exception, Boolean, Object)\n  fullName: ResolveCompletedEventArgs.ResolveCompletedEventArgs(PeerNameRecordCollection, Exception, Boolean, Object)\n  type: Constructor\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Initializes a new instance of the <xref href=\"System.Net.PeerToPeer.ResolveCompletedEventArgs\"></xref> class.\n  syntax:\n    content: public ResolveCompletedEventArgs (System.Net.PeerToPeer.PeerNameRecordCollection peerNameRecordCollection, Exception error, bool canceled, object userToken);\n    parameters:\n    - id: peerNameRecordCollection\n      type: System.Net.PeerToPeer.PeerNameRecordCollection\n      description: The collection associated with the peer name that was resolved.\n    - id: error\n      type: System.Exception\n      description: Returns an exception if an error occurred.\n    - id: canceled\n      type: System.Boolean\n      description: '`True` if the <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\"></xref> operation was cancelled, otherwise `False`.'\n    - id: userToken\n      type: System.Object\n      description: The user token specified when a <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\"></xref> operation was started.\n  overload: System.Net.PeerToPeer.ResolveCompletedEventArgs.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/ResolveCompletedEventArgs.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.PeerToPeer.ResolveCompletedEventArgs.PeerNameRecordCollection\n  commentId: P:System.Net.PeerToPeer.ResolveCompletedEventArgs.PeerNameRecordCollection\n  id: PeerNameRecordCollection\n  parent: System.Net.PeerToPeer.ResolveCompletedEventArgs\n  langs:\n  - csharp\n  name: PeerNameRecordCollection\n  nameWithType: ResolveCompletedEventArgs.PeerNameRecordCollection\n  fullName: ResolveCompletedEventArgs.PeerNameRecordCollection\n  type: Property\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Gets the <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> object to resolve.\n  remarks: \"This event is raised when all clouds have been queried for this peer name, or when the maximum number of peer name records has been retrieved. It is raised by putting the peer name record collection into the <xref:System.Net.PeerToPeer.ResolveCompletedEventArgs> event argument for which the OnResolveCompleted method is waiting.  The change in state awakens the process.  \\n  \\n Unless explicitly specified, the default value for all properties is `null` for reference types and zero (0) for properties of type `int`. If no records were found, `null` is returned.\"\n  syntax:\n    content: public System.Net.PeerToPeer.PeerNameRecordCollection PeerNameRecordCollection { get; }\n    return:\n      type: System.Net.PeerToPeer.PeerNameRecordCollection\n      description: The <xref href=\"System.Net.PeerToPeer.PeerNameRecordCollection\"></xref> object to resolve is the one found in response to a <xref href=\"System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*\"></xref> operation on a specific <xref href=\"System.Net.PeerToPeer.PeerName\"></xref>.\n  overload: System.Net.PeerToPeer.ResolveCompletedEventArgs.PeerNameRecordCollection*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/ResolveCompletedEventArgs.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.ComponentModel.AsyncCompletedEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: AsyncCompletedEventArgs\n  nameWithType: AsyncCompletedEventArgs\n  fullName: System.ComponentModel.AsyncCompletedEventArgs\n- uid: System.Net.PeerToPeer.ResolveCompletedEventArgs.#ctor(System.Net.PeerToPeer.PeerNameRecordCollection,System.Exception,System.Boolean,System.Object)\n  parent: System.Net.PeerToPeer.ResolveCompletedEventArgs\n  isExternal: false\n  name: ResolveCompletedEventArgs(PeerNameRecordCollection, Exception, Boolean, Object)\n  nameWithType: ResolveCompletedEventArgs.ResolveCompletedEventArgs(PeerNameRecordCollection, Exception, Boolean, Object)\n  fullName: ResolveCompletedEventArgs.ResolveCompletedEventArgs(PeerNameRecordCollection, Exception, Boolean, Object)\n- uid: System.Net.PeerToPeer.PeerNameRecordCollection\n  parent: System.Net.PeerToPeer\n  isExternal: false\n  name: PeerNameRecordCollection\n  nameWithType: PeerNameRecordCollection\n  fullName: System.Net.PeerToPeer.PeerNameRecordCollection\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Net.PeerToPeer.ResolveCompletedEventArgs.PeerNameRecordCollection\n  parent: System.Net.PeerToPeer.ResolveCompletedEventArgs\n  isExternal: false\n  name: PeerNameRecordCollection\n  nameWithType: ResolveCompletedEventArgs.PeerNameRecordCollection\n  fullName: ResolveCompletedEventArgs.PeerNameRecordCollection\n- uid: System.Net.PeerToPeer.ResolveCompletedEventArgs.#ctor*\n  parent: System.Net.PeerToPeer.ResolveCompletedEventArgs\n  isExternal: false\n  name: ResolveCompletedEventArgs\n  nameWithType: ResolveCompletedEventArgs.ResolveCompletedEventArgs\n  fullName: ResolveCompletedEventArgs.ResolveCompletedEventArgs\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/ResolveCompletedEventArgs.xml\n- uid: System.Net.PeerToPeer.ResolveCompletedEventArgs.PeerNameRecordCollection*\n  parent: System.Net.PeerToPeer.ResolveCompletedEventArgs\n  isExternal: false\n  name: PeerNameRecordCollection\n  nameWithType: ResolveCompletedEventArgs.PeerNameRecordCollection\n  fullName: ResolveCompletedEventArgs.PeerNameRecordCollection\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/ResolveCompletedEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n- uid: System.ComponentModel.AsyncCompletedEventArgs.Cancelled\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: Cancelled\n  nameWithType: AsyncCompletedEventArgs.Cancelled\n  fullName: AsyncCompletedEventArgs.Cancelled\n- uid: System.ComponentModel.AsyncCompletedEventArgs.Error\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: Error\n  nameWithType: AsyncCompletedEventArgs.Error\n  fullName: AsyncCompletedEventArgs.Error\n- uid: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: RaiseExceptionIfNecessary()\n  nameWithType: AsyncCompletedEventArgs.RaiseExceptionIfNecessary()\n  fullName: AsyncCompletedEventArgs.RaiseExceptionIfNecessary()\n- uid: System.ComponentModel.AsyncCompletedEventArgs.UserState\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: UserState\n  nameWithType: AsyncCompletedEventArgs.UserState\n  fullName: AsyncCompletedEventArgs.UserState\n"}