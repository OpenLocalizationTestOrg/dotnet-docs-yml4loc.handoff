{"nodes":[{"content":"Converts a base data type to another base data type.","nodes":[{"pos":[0,52],"content":"Converts a base data type to another base data type.","nodes":[{"content":"Converts a base data type to another base data type.","pos":[0,52]}]}],"pos":[15147,15200],"yaml":true},{"content":"The static methods of the <xref:System.Convert> class are primarily used to support conversion to and from the base data types in the .NET Framework. The supported base types are <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, <xref:System.DateTime> and <xref:System.String>. In addition, the <xref:System.Convert> class includes methods to support  other kinds of conversions.  \n  \n This topic consists of the following sections:  \n  \n [Conversions to and from Base Types](#Base)   \n [Non-Decimal Numbers](#NonDecimal)   \n [Conversions from Custom Objects to Base Types](#Custom)   \n [Culture-Specific Formatting Information](#Culture)   \n [Base64 Encoding](#Base64)   \n [Other Common Conversions](#Other)  \n  \n<a name=\"Base\"></a>   \n## Conversions to and from Base Types  \n A conversion method exists to convert every base type to every other base type. However, the actual call to a particular conversion method can produce one of five outcomes, depending on the value of the base type at run time and the target base type. These five outcomes are:  \n  \n-   No conversion. This occurs when an attempt is made to convert from a type to itself (for example, by calling <xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=fullName> with an argument of type <xref:System.Int32>). In this case, the method simply returns an instance of the original type.  \n  \n-   An <xref:System.InvalidCastException>. This occurs when a particular conversion is not supported. An <xref:System.InvalidCastException> is thrown for the following conversions:  \n  \n    -   Conversions from <xref:System.Char> to <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime>.  \n  \n    -   Conversions from <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime> to <xref:System.Char>.  \n  \n    -   Conversions from <xref:System.DateTime> to any other type except <xref:System.String>.  \n  \n    -   Conversions from any other type, except <xref:System.String>, to <xref:System.DateTime>.  \n  \n-   A <xref:System.FormatException>. This occurs when the attempt to convert a string value to any other base type fails because the string is not in the proper format. The exception is thrown for the following conversions:  \n  \n    -   A string to be converted to a <xref:System.Boolean> value does not equal <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.  \n  \n    -   A string to be converted to a <xref:System.Char> value consists of multiple characters.  \n  \n    -   A string to be converted to any numeric type is not recognized as a valid number.  \n  \n    -   A string to be converted to a <xref:System.DateTime> is not recognized as a valid date and time value.  \n  \n-   A successful conversion. For conversions between two different base types not listed in the previous outcomes, all widening conversions as well as all narrowing conversions that do not result in a loss of data will succeed and the method will return a value of the targeted base type.  \n  \n-   An <xref:System.OverflowException>. This occurs when a narrowing conversion results in a loss of data. For example, trying to convert a <xref:System.Int32> instance whose value is 10000 to a <xref:System.Byte> type throws an <xref:System.OverflowException> because 10000 is outside the range of the <xref:System.Byte> data type.  \n  \n An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits). However, an exception will be thrown if the result is larger than can be represented by the particular conversion method's return value type.  \n  \n For example, when a <xref:System.Double> is converted to a <xref:System.Single>, a loss of precision might occur but no exception is thrown. However, if the magnitude of the <xref:System.Double> is too large to be represented by a <xref:System.Single>, an overflow exception is thrown.  \n  \n<a name=\"NonDecimal\"></a>   \n## Non-Decimal Numbers  \n The <xref:System.Convert> class includes static methods that you can call to convert integral values to non-decimal string representations, and to convert strings that represent non-decimal numbers to integral values. Each of these conversion methods includes a `base` argument  that lets you specify  the number system; binary (base 2), octal (base 8), and hexadecimal (base 16), as well as decimal (base 10). There is a set of methods to convert each of the CLS-compliant primitive integral types to a string, and one to convert a string to each of the primitive integral types:  \n  \n-   <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29> and <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29>, to convert a byte value to and from a string in a specified base.  \n  \n-   <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> and <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29>, to convert a 16-bit signed integer to and from a string in a specified base.  \n  \n-   <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> and <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29>, to convert a 32-bit signed integer to and from a string in a specified base.  \n  \n-   <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> and <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29>, to convert a 64-bit signed integer to and from a string in a specified base.  \n  \n-   <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29>, to convert the string representation of a byte value in a specified format to a signed byte.  \n  \n-   <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 16-bit integer.  \n  \n-   <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 32-bit integer.  \n  \n-   <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 64-bit integer.  \n  \n The following example converts the value of <xref:System.Int16.MaxValue?displayProperty=fullName> to a string in all supported numeric formats. It then converts the string value back to a <xref:System.Int16> value.  \n  \n [!code-cpp[System.Convert#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/NonDecimal1.cpp#2)]\n [!code-csharp[System.Convert#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/NonDecimal1.cs#2)]\n [!code-vb[System.Convert#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/NonDecimal1.vb#2)]  \n  \n<a name=\"Custom\"></a>   \n## Conversions from Custom Objects to Base Types  \n In addition to supporting conversions between the base types, the <xref:System.Convert> method supports conversion of any custom type to any base type. To do this, the custom type must implement the <xref:System.IConvertible> interface, which defines methods for converting the implementing type to each of the base types. Conversions that are not supported by a particular type should throw an <xref:System.InvalidCastException>.  \n  \n When the <xref:System.Convert.ChangeType%2A> method is passed a custom type as its first parameter, or when the `Convert.To`*Type* method (such as <xref:System.Convert.ToInt32%28System.Object%29?displayProperty=fullName> or <xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName> is called and passed an instance of a custom type as its first parameter, the <xref:System.Convert> method, in turn, calls the custom type's <xref:System.IConvertible> implementation to perform the conversion. For more information, see [Type Conversion in the .NET Framework](~/docs/standard/base-types/type-conversion.md).  \n  \n<a name=\"Culture\"></a>   \n## Culture-Specific Formatting Information  \n All the base type conversion methods and the <xref:System.Convert.ChangeType%2A> method include overloads that have a parameter of type <xref:System.IFormatProvider>. For example, the <xref:System.Convert.ToBoolean%2A?displayProperty=fullName> method has the following two overloads:  \n  \n-   <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName>  \n  \n-   <xref:System.Convert.ToBoolean%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>  \n  \n The <xref:System.IFormatProvider> parameter can supply culture-specific formatting information to assist the conversion process. However, it is ignored by most of the base type conversion methods. It is used only by the following base type conversion methods.If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  \n  \n-   By methods that convert a value to a numeric type. The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>. It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.  \n  \n-   By methods that convert a value to a date and time. The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>. It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.  \n  \n-   By the <xref:System.Convert.ToString%2A?displayProperty=fullName> overloads that include an <xref:System.IFormatProvider> parameter and that convert either a numeric value to a string or a <xref:System.DateTime> value to a string.  \n  \n However, any user-defined type that implements <xref:System.IConvertible> can make use of the <xref:System.IFormatProvider> parameter.  \n  \n<a name=\"Base64\"></a>   \n## Base64 Encoding  \n Base64 encoding converts binary data to a string. Data expressed as base-64 digits can be easily conveyed over data channels that can only transmit 7-bit characters. The <xref:System.Convert> class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <xref:System.String> or to and from an array of Unicode characters consisting of base-64 digit characters.  \n  \n-   <xref:System.Convert.ToBase64String%2A>, which converts a byte array to a base64-encoded string.  \n  \n-   <xref:System.Convert.ToBase64CharArray%2A>, which converts a byte array to a base64-encoded character array.  \n  \n-   <xref:System.Convert.FromBase64String%2A>, which converts a base64-encoded string to a byte array.  \n  \n-   <xref:System.Convert.FromBase64CharArray%2A>, which converts a base64-encoded character array to a byte array.  \n  \n<a name=\"Other\"></a>   \n## Other Common Conversions  \n You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the <xref:System.Convert> class.  These include:  \n  \n Conversion to byte arrays  \n The <xref:System.BitConverter> class  provides methods that convert the primitive numeric types (including <xref:System.Boolean>) to byte arrays and from byte arrays back to primitive data types.  \n  \n Character encoding and decoding  \n The <xref:System.Text.Encoding> class and its derived classes (such as <xref:System.Text.UnicodeEncoding> and <xref:System.Text.UTF8Encoding>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters. For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)","nodes":[{"pos":[0,609],"content":"The static methods of the <xref:System.Convert> class are primarily used to support conversion to and from the base data types in the .NET Framework. The supported base types are <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, <xref:System.DateTime> and <xref:System.String>. In addition, the <xref:System.Convert> class includes methods to support  other kinds of conversions.","nodes":[{"content":"The static methods of the <xref:System.Convert> class are primarily used to support conversion to and from the base data types in the .NET Framework. The supported base types are <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, <xref:System.DateTime> and <xref:System.String>. In addition, the <xref:System.Convert> class includes methods to support  other kinds of conversions.","pos":[0,609],"nodes":[{"content":"The static methods of the <ph id=\"ph1\">&lt;xref:System.Convert&gt;</ph> class are primarily used to support conversion to and from the base data types in the .NET Framework.","pos":[0,149],"source":"The static methods of the <xref:System.Convert> class are primarily used to support conversion to and from the base data types in the .NET Framework."},{"content":"The supported base types are <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph10\">&lt;xref:System.UInt64&gt;</ph>, <ph id=\"ph11\">&lt;xref:System.Single&gt;</ph>, <ph id=\"ph12\">&lt;xref:System.Double&gt;</ph>, <ph id=\"ph13\">&lt;xref:System.Decimal&gt;</ph>, <ph id=\"ph14\">&lt;xref:System.DateTime&gt;</ph> and <ph id=\"ph15\">&lt;xref:System.String&gt;</ph>.","pos":[150,507],"source":" The supported base types are <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, <xref:System.DateTime> and <xref:System.String>."},{"content":"In addition, the <ph id=\"ph1\">&lt;xref:System.Convert&gt;</ph> class includes methods to support  other kinds of conversions.","pos":[508,609],"source":" In addition, the <xref:System.Convert> class includes methods to support  other kinds of conversions."}]}]},{"pos":[616,662],"content":"This topic consists of the following sections:","nodes":[{"content":"This topic consists of the following sections:","pos":[0,46]}]},{"pos":[669,938],"content":"[Conversions to and from Base Types](#Base)   \n [Non-Decimal Numbers](#NonDecimal)   \n [Conversions from Custom Objects to Base Types](#Custom)   \n [Culture-Specific Formatting Information](#Culture)   \n [Base64 Encoding](#Base64)   \n [Other Common Conversions](#Other)","nodes":[{"content":"<bpt id=\"p1\">[</bpt>Conversions to and from Base Types<ept id=\"p1\">](#Base)</ept><ph id=\"ph1\"> </ph>","pos":[0,44],"source":"[Conversions to and from Base Types](#Base) "},{"content":"<bpt id=\"p1\"> [</bpt>Non-Decimal Numbers<ept id=\"p1\">](#NonDecimal)</ept><ph id=\"ph1\"> </ph>","pos":[47,83],"source":" [Non-Decimal Numbers](#NonDecimal) "},{"content":"<bpt id=\"p1\"> [</bpt>Conversions from Custom Objects to Base Types<ept id=\"p1\">](#Custom)</ept><ph id=\"ph1\"> </ph>","pos":[86,144],"source":" [Conversions from Custom Objects to Base Types](#Custom) "},{"content":"<bpt id=\"p1\"> [</bpt>Culture-Specific Formatting Information<ept id=\"p1\">](#Culture)</ept><ph id=\"ph1\"> </ph>","pos":[147,200],"source":" [Culture-Specific Formatting Information](#Culture) "},{"content":"<bpt id=\"p1\"> [</bpt>Base64 Encoding<ept id=\"p1\">](#Base64)</ept><ph id=\"ph1\"> </ph>","pos":[203,231],"source":" [Base64 Encoding](#Base64) "},{"content":"<bpt id=\"p1\"> [</bpt>Other Common Conversions<ept id=\"p1\">](#Other)</ept>","pos":[234,269],"source":" [Other Common Conversions](#Other)"}]},{"pos":[970,1004],"content":"Conversions to and from Base Types","linkify":"Conversions to and from Base Types","nodes":[{"content":"Conversions to and from Base Types","pos":[0,34]}]},{"pos":[1008,1283],"content":"A conversion method exists to convert every base type to every other base type. However, the actual call to a particular conversion method can produce one of five outcomes, depending on the value of the base type at run time and the target base type. These five outcomes are:","nodes":[{"content":"A conversion method exists to convert every base type to every other base type. However, the actual call to a particular conversion method can produce one of five outcomes, depending on the value of the base type at run time and the target base type. These five outcomes are:","pos":[0,275],"nodes":[{"content":"A conversion method exists to convert every base type to every other base type.","pos":[0,79]},{"content":"However, the actual call to a particular conversion method can produce one of five outcomes, depending on the value of the base type at run time and the target base type.","pos":[80,250]},{"content":"These five outcomes are:","pos":[251,275]}]}]},{"pos":[1293,1595],"content":"No conversion. This occurs when an attempt is made to convert from a type to itself (for example, by calling <xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=fullName> with an argument of type <xref:System.Int32>). In this case, the method simply returns an instance of the original type.","nodes":[{"content":"No conversion. This occurs when an attempt is made to convert from a type to itself (for example, by calling <xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=fullName> with an argument of type <xref:System.Int32>). In this case, the method simply returns an instance of the original type.","pos":[0,302],"nodes":[{"content":"No conversion.","pos":[0,14]},{"content":"This occurs when an attempt is made to convert from a type to itself (for example, by calling <ph id=\"ph1\">&lt;xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=fullName&gt;</ph> with an argument of type <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>).","pos":[15,228],"source":" This occurs when an attempt is made to convert from a type to itself (for example, by calling <xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=fullName> with an argument of type <xref:System.Int32>)."},{"content":"In this case, the method simply returns an instance of the original type.","pos":[229,302]}]}]},{"pos":[1605,1781],"content":"An <xref:System.InvalidCastException>. This occurs when a particular conversion is not supported. An <xref:System.InvalidCastException> is thrown for the following conversions:","nodes":[{"content":"An <xref:System.InvalidCastException>. This occurs when a particular conversion is not supported. An <xref:System.InvalidCastException> is thrown for the following conversions:","pos":[0,176],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph>.","pos":[0,38],"source":"An <xref:System.InvalidCastException>."},{"content":"This occurs when a particular conversion is not supported.","pos":[39,97]},{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph> is thrown for the following conversions:","pos":[98,176],"source":" An <xref:System.InvalidCastException> is thrown for the following conversions:"}]}]},{"pos":[1795,1950],"content":"Conversions from <xref:System.Char> to <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime>.","nodes":[{"content":"Conversions from <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> to <ph id=\"ph2\">&lt;xref:System.Boolean&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Single&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Double&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Decimal&gt;</ph>, or <ph id=\"ph6\">&lt;xref:System.DateTime&gt;</ph>.","pos":[0,155],"source":"Conversions from <xref:System.Char> to <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime>."}]},{"pos":[1964,2119],"content":"Conversions from <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime> to <xref:System.Char>.","nodes":[{"content":"Conversions from <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Decimal&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.DateTime&gt;</ph> to <ph id=\"ph6\">&lt;xref:System.Char&gt;</ph>.","pos":[0,155],"source":"Conversions from <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime> to <xref:System.Char>."}]},{"pos":[2133,2219],"content":"Conversions from <xref:System.DateTime> to any other type except <xref:System.String>.","nodes":[{"content":"Conversions from <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> to any other type except <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[0,86],"source":"Conversions from <xref:System.DateTime> to any other type except <xref:System.String>."}]},{"pos":[2233,2321],"content":"Conversions from any other type, except <xref:System.String>, to <xref:System.DateTime>.","nodes":[{"content":"Conversions from any other type, except <ph id=\"ph1\">&lt;xref:System.String&gt;</ph>, to <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph>.","pos":[0,88],"source":"Conversions from any other type, except <xref:System.String>, to <xref:System.DateTime>."}]},{"pos":[2331,2550],"content":"A <xref:System.FormatException>. This occurs when the attempt to convert a string value to any other base type fails because the string is not in the proper format. The exception is thrown for the following conversions:","nodes":[{"content":"A <xref:System.FormatException>. This occurs when the attempt to convert a string value to any other base type fails because the string is not in the proper format. The exception is thrown for the following conversions:","pos":[0,219],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph>.","pos":[0,32],"source":"A <xref:System.FormatException>."},{"content":"This occurs when the attempt to convert a string value to any other base type fails because the string is not in the proper format.","pos":[33,164]},{"content":"The exception is thrown for the following conversions:","pos":[165,219]}]}]},{"pos":[2564,2757],"content":"A string to be converted to a <xref:System.Boolean> value does not equal <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.","nodes":[{"content":"A string to be converted to a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value does not equal <ph id=\"ph2\">&lt;xref:System.Boolean.TrueString?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Boolean.FalseString?displayProperty=fullName&gt;</ph>.","pos":[0,193],"source":"A string to be converted to a <xref:System.Boolean> value does not equal <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>."}]},{"pos":[2771,2858],"content":"A string to be converted to a <xref:System.Char> value consists of multiple characters.","nodes":[{"content":"A string to be converted to a <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> value consists of multiple characters.","pos":[0,87],"source":"A string to be converted to a <xref:System.Char> value consists of multiple characters."}]},{"pos":[2872,2953],"content":"A string to be converted to any numeric type is not recognized as a valid number.","nodes":[{"content":"A string to be converted to any numeric type is not recognized as a valid number.","pos":[0,81]}]},{"pos":[2967,3069],"content":"A string to be converted to a <xref:System.DateTime> is not recognized as a valid date and time value.","nodes":[{"content":"A string to be converted to a <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> is not recognized as a valid date and time value.","pos":[0,102],"source":"A string to be converted to a <xref:System.DateTime> is not recognized as a valid date and time value."}]},{"pos":[3079,3363],"content":"A successful conversion. For conversions between two different base types not listed in the previous outcomes, all widening conversions as well as all narrowing conversions that do not result in a loss of data will succeed and the method will return a value of the targeted base type.","nodes":[{"content":"A successful conversion. For conversions between two different base types not listed in the previous outcomes, all widening conversions as well as all narrowing conversions that do not result in a loss of data will succeed and the method will return a value of the targeted base type.","pos":[0,284],"nodes":[{"content":"A successful conversion.","pos":[0,24]},{"content":"For conversions between two different base types not listed in the previous outcomes, all widening conversions as well as all narrowing conversions that do not result in a loss of data will succeed and the method will return a value of the targeted base type.","pos":[25,284]}]}]},{"pos":[3373,3701],"content":"An <xref:System.OverflowException>. This occurs when a narrowing conversion results in a loss of data. For example, trying to convert a <xref:System.Int32> instance whose value is 10000 to a <xref:System.Byte> type throws an <xref:System.OverflowException> because 10000 is outside the range of the <xref:System.Byte> data type.","nodes":[{"content":"An <xref:System.OverflowException>. This occurs when a narrowing conversion results in a loss of data. For example, trying to convert a <xref:System.Int32> instance whose value is 10000 to a <xref:System.Byte> type throws an <xref:System.OverflowException> because 10000 is outside the range of the <xref:System.Byte> data type.","pos":[0,328],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.OverflowException&gt;</ph>.","pos":[0,35],"source":"An <xref:System.OverflowException>."},{"content":"This occurs when a narrowing conversion results in a loss of data.","pos":[36,102]},{"content":"For example, trying to convert a <ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph> instance whose value is 10000 to a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph> type throws an <ph id=\"ph3\">&lt;xref:System.OverflowException&gt;</ph> because 10000 is outside the range of the <ph id=\"ph4\">&lt;xref:System.Byte&gt;</ph> data type.","pos":[103,328],"source":" For example, trying to convert a <xref:System.Int32> instance whose value is 10000 to a <xref:System.Byte> type throws an <xref:System.OverflowException> because 10000 is outside the range of the <xref:System.Byte> data type."}]}]},{"pos":[3708,4002],"content":"An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits). However, an exception will be thrown if the result is larger than can be represented by the particular conversion method's return value type.","nodes":[{"content":"An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits). However, an exception will be thrown if the result is larger than can be represented by the particular conversion method's return value type.","pos":[0,294],"nodes":[{"content":"An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits).","pos":[0,152]},{"content":"However, an exception will be thrown if the result is larger than can be represented by the particular conversion method's return value type.","pos":[153,294]}]}]},{"pos":[4009,4294],"content":"For example, when a <xref:System.Double> is converted to a <xref:System.Single>, a loss of precision might occur but no exception is thrown. However, if the magnitude of the <xref:System.Double> is too large to be represented by a <xref:System.Single>, an overflow exception is thrown.","nodes":[{"content":"For example, when a <xref:System.Double> is converted to a <xref:System.Single>, a loss of precision might occur but no exception is thrown. However, if the magnitude of the <xref:System.Double> is too large to be represented by a <xref:System.Single>, an overflow exception is thrown.","pos":[0,285],"nodes":[{"content":"For example, when a <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> is converted to a <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph>, a loss of precision might occur but no exception is thrown.","pos":[0,140],"source":"For example, when a <xref:System.Double> is converted to a <xref:System.Single>, a loss of precision might occur but no exception is thrown."},{"content":"However, if the magnitude of the <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> is too large to be represented by a <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph>, an overflow exception is thrown.","pos":[141,285],"source":" However, if the magnitude of the <xref:System.Double> is too large to be represented by a <xref:System.Single>, an overflow exception is thrown."}]}]},{"pos":[4332,4351],"content":"Non-Decimal Numbers","linkify":"Non-Decimal Numbers","nodes":[{"content":"Non-Decimal Numbers","pos":[0,19]}]},{"pos":[4355,4935],"content":"The <xref:System.Convert> class includes static methods that you can call to convert integral values to non-decimal string representations, and to convert strings that represent non-decimal numbers to integral values. Each of these conversion methods includes a `base` argument  that lets you specify  the number system; binary (base 2), octal (base 8), and hexadecimal (base 16), as well as decimal (base 10). There is a set of methods to convert each of the CLS-compliant primitive integral types to a string, and one to convert a string to each of the primitive integral types:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert&gt;</ph> class includes static methods that you can call to convert integral values to non-decimal string representations, and to convert strings that represent non-decimal numbers to integral values.","pos":[0,217],"source":"The <xref:System.Convert> class includes static methods that you can call to convert integral values to non-decimal string representations, and to convert strings that represent non-decimal numbers to integral values."},{"content":"Each of these conversion methods includes a <ph id=\"ph1\">`base`</ph> argument  that lets you specify  the number system; binary (base 2), octal (base 8), and hexadecimal (base 16), as well as decimal (base 10).","pos":[218,410],"source":" Each of these conversion methods includes a `base` argument  that lets you specify  the number system; binary (base 2), octal (base 8), and hexadecimal (base 16), as well as decimal (base 10)."},{"content":"There is a set of methods to convert each of the CLS-compliant primitive integral types to a string, and one to convert a string to each of the primitive integral types:","pos":[411,580]}]},{"pos":[4945,5141],"content":"<xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29> and <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29>, to convert a byte value to and from a string in a specified base.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph>, to convert a byte value to and from a string in a specified base.","pos":[0,196],"source":"<xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29> and <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29>, to convert a byte value to and from a string in a specified base."}]},{"pos":[5151,5360],"content":"<xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> and <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29>, to convert a 16-bit signed integer to and from a string in a specified base.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph>, to convert a 16-bit signed integer to and from a string in a specified base.","pos":[0,209],"source":"<xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> and <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29>, to convert a 16-bit signed integer to and from a string in a specified base."}]},{"pos":[5370,5579],"content":"<xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> and <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29>, to convert a 32-bit signed integer to and from a string in a specified base.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph>, to convert a 32-bit signed integer to and from a string in a specified base.","pos":[0,209],"source":"<xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> and <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29>, to convert a 32-bit signed integer to and from a string in a specified base."}]},{"pos":[5589,5798],"content":"<xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> and <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29>, to convert a 64-bit signed integer to and from a string in a specified base.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph>, to convert a 64-bit signed integer to and from a string in a specified base.","pos":[0,209],"source":"<xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> and <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29>, to convert a 64-bit signed integer to and from a string in a specified base."}]},{"pos":[5808,5965],"content":"<xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29>, to convert the string representation of a byte value in a specified format to a signed byte.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph>, to convert the string representation of a byte value in a specified format to a signed byte.","pos":[0,157],"source":"<xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29>, to convert the string representation of a byte value in a specified format to a signed byte."}]},{"pos":[5975,6144],"content":"<xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 16-bit integer.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph>, to convert the string representation of an integer in a specified format to an unsigned 16-bit integer.","pos":[0,169],"source":"<xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 16-bit integer."}]},{"pos":[6154,6323],"content":"<xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 32-bit integer.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph>, to convert the string representation of an integer in a specified format to an unsigned 32-bit integer.","pos":[0,169],"source":"<xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 32-bit integer."}]},{"pos":[6333,6502],"content":"<xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 64-bit integer.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph>, to convert the string representation of an integer in a specified format to an unsigned 64-bit integer.","pos":[0,169],"source":"<xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 64-bit integer."}]},{"pos":[6509,6723],"content":"The following example converts the value of <xref:System.Int16.MaxValue?displayProperty=fullName> to a string in all supported numeric formats. It then converts the string value back to a <xref:System.Int16> value.","nodes":[{"content":"The following example converts the value of <xref:System.Int16.MaxValue?displayProperty=fullName> to a string in all supported numeric formats. It then converts the string value back to a <xref:System.Int16> value.","pos":[0,214],"nodes":[{"content":"The following example converts the value of <ph id=\"ph1\">&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;</ph> to a string in all supported numeric formats.","pos":[0,143],"source":"The following example converts the value of <xref:System.Int16.MaxValue?displayProperty=fullName> to a string in all supported numeric formats."},{"content":"It then converts the string value back to a <ph id=\"ph1\">&lt;xref:System.Int16&gt;</ph> value.","pos":[144,214],"source":" It then converts the string value back to a <xref:System.Int16> value."}]}]},{"pos":[6730,7082],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Convert#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/NonDecimal1.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Convert#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/NonDecimal1.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Convert#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/NonDecimal1.vb#2)</ept><ept id=\"p5\">]</ept>","leadings":[""," "," "],"source":"[!code-cpp[System.Convert#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/NonDecimal1.cpp#2)]\n[!code-csharp[System.Convert#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/NonDecimal1.cs#2)]\n[!code-vb[System.Convert#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/NonDecimal1.vb#2)]"},{"pos":[7116,7161],"content":"Conversions from Custom Objects to Base Types","linkify":"Conversions from Custom Objects to Base Types","nodes":[{"content":"Conversions from Custom Objects to Base Types","pos":[0,45]}]},{"pos":[7165,7595],"content":"In addition to supporting conversions between the base types, the <xref:System.Convert> method supports conversion of any custom type to any base type. To do this, the custom type must implement the <xref:System.IConvertible> interface, which defines methods for converting the implementing type to each of the base types. Conversions that are not supported by a particular type should throw an <xref:System.InvalidCastException>.","nodes":[{"content":"In addition to supporting conversions between the base types, the <xref:System.Convert> method supports conversion of any custom type to any base type. To do this, the custom type must implement the <xref:System.IConvertible> interface, which defines methods for converting the implementing type to each of the base types. Conversions that are not supported by a particular type should throw an <xref:System.InvalidCastException>.","pos":[0,430],"nodes":[{"content":"In addition to supporting conversions between the base types, the <ph id=\"ph1\">&lt;xref:System.Convert&gt;</ph> method supports conversion of any custom type to any base type.","pos":[0,151],"source":"In addition to supporting conversions between the base types, the <xref:System.Convert> method supports conversion of any custom type to any base type."},{"content":"To do this, the custom type must implement the <ph id=\"ph1\">&lt;xref:System.IConvertible&gt;</ph> interface, which defines methods for converting the implementing type to each of the base types.","pos":[152,322],"source":" To do this, the custom type must implement the <xref:System.IConvertible> interface, which defines methods for converting the implementing type to each of the base types."},{"content":"Conversions that are not supported by a particular type should throw an <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph>.","pos":[323,430],"source":" Conversions that are not supported by a particular type should throw an <xref:System.InvalidCastException>."}]}]},{"pos":[7602,8249],"content":"When the <xref:System.Convert.ChangeType%2A> method is passed a custom type as its first parameter, or when the `Convert.To`*Type* method (such as <xref:System.Convert.ToInt32%28System.Object%29?displayProperty=fullName> or <xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName> is called and passed an instance of a custom type as its first parameter, the <xref:System.Convert> method, in turn, calls the custom type's <xref:System.IConvertible> implementation to perform the conversion. For more information, see [Type Conversion in the .NET Framework](~/docs/standard/base-types/type-conversion.md).","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> method is passed a custom type as its first parameter, or when the <ph id=\"ph2\">`Convert.To`</ph><bpt id=\"p1\">*</bpt>Type<ept id=\"p1\">*</ept> method (such as <ph id=\"ph3\">&lt;xref:System.Convert.ToInt32%28System.Object%29?displayProperty=fullName&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> is called and passed an instance of a custom type as its first parameter, the <ph id=\"ph5\">&lt;xref:System.Convert&gt;</ph> method, in turn, calls the custom type's <ph id=\"ph6\">&lt;xref:System.IConvertible&gt;</ph> implementation to perform the conversion.","pos":[0,533],"source":"When the <xref:System.Convert.ChangeType%2A> method is passed a custom type as its first parameter, or when the `Convert.To`*Type* method (such as <xref:System.Convert.ToInt32%28System.Object%29?displayProperty=fullName> or <xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName> is called and passed an instance of a custom type as its first parameter, the <xref:System.Convert> method, in turn, calls the custom type's <xref:System.IConvertible> implementation to perform the conversion."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Type Conversion in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/type-conversion.md)</ept>.","pos":[534,647],"source":" For more information, see [Type Conversion in the .NET Framework](~/docs/standard/base-types/type-conversion.md)."}]},{"pos":[8284,8323],"content":"Culture-Specific Formatting Information","linkify":"Culture-Specific Formatting Information","nodes":[{"content":"Culture-Specific Formatting Information","pos":[0,39]}]},{"pos":[8327,8610],"content":"All the base type conversion methods and the <xref:System.Convert.ChangeType%2A> method include overloads that have a parameter of type <xref:System.IFormatProvider>. For example, the <xref:System.Convert.ToBoolean%2A?displayProperty=fullName> method has the following two overloads:","nodes":[{"content":"All the base type conversion methods and the <xref:System.Convert.ChangeType%2A> method include overloads that have a parameter of type <xref:System.IFormatProvider>. For example, the <xref:System.Convert.ToBoolean%2A?displayProperty=fullName> method has the following two overloads:","pos":[0,283],"nodes":[{"content":"All the base type conversion methods and the <ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> method include overloads that have a parameter of type <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph>.","pos":[0,166],"source":"All the base type conversion methods and the <xref:System.Convert.ChangeType%2A> method include overloads that have a parameter of type <xref:System.IFormatProvider>."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Convert.ToBoolean%2A?displayProperty=fullName&gt;</ph> method has the following two overloads:","pos":[167,283],"source":" For example, the <xref:System.Convert.ToBoolean%2A?displayProperty=fullName> method has the following two overloads:"}]}]},{"pos":[8620,8720],"content":"<xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName>","nodes":[]},{"pos":[8730,8830],"content":"<xref:System.Convert.ToBoolean%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>","nodes":[]},{"pos":[8837,9276],"content":"The <xref:System.IFormatProvider> parameter can supply culture-specific formatting information to assist the conversion process. However, it is ignored by most of the base type conversion methods. It is used only by the following base type conversion methods.If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph> parameter can supply culture-specific formatting information to assist the conversion process.","pos":[0,128],"source":"The <xref:System.IFormatProvider> parameter can supply culture-specific formatting information to assist the conversion process."},{"content":"However, it is ignored by most of the base type conversion methods.","pos":[129,196]},{"content":"It is used only by the following base type conversion methods.If a <ph id=\"ph1\">`null`</ph><ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> argument is passed to these methods, the <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.","pos":[197,439],"source":" It is used only by the following base type conversion methods.If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used."}]},{"pos":[9286,9660],"content":"By methods that convert a value to a numeric type. The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>. It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.","nodes":[{"content":"By methods that convert a value to a numeric type. The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>. It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.","pos":[0,374],"nodes":[{"content":"By methods that convert a value to a numeric type.","pos":[0,50]},{"content":"The <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph> parameter is used by the overload that has parameters of type <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.IFormatProvider&gt;</ph>.","pos":[51,202],"source":" The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>."},{"content":"It is also used by the overload that has parameters of type <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> if the object's run-time type is a <ph id=\"ph3\">&lt;xref:System.String&gt;</ph>.","pos":[203,374],"source":" It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>."}]}]},{"pos":[9670,10045],"content":"By methods that convert a value to a date and time. The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>. It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.","nodes":[{"content":"By methods that convert a value to a date and time. The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>. It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.","pos":[0,375],"nodes":[{"content":"By methods that convert a value to a date and time.","pos":[0,51]},{"content":"The <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph> parameter is used by the overload that has parameters of type <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.IFormatProvider&gt;</ph>.","pos":[52,203],"source":" The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>."},{"content":"It is also used by the overload that has parameters of type <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> if the object's run-time type is a <ph id=\"ph3\">&lt;xref:System.String&gt;</ph>.","pos":[204,375],"source":" It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>."}]}]},{"pos":[10055,10285],"content":"By the <xref:System.Convert.ToString%2A?displayProperty=fullName> overloads that include an <xref:System.IFormatProvider> parameter and that convert either a numeric value to a string or a <xref:System.DateTime> value to a string.","nodes":[{"content":"By the <ph id=\"ph1\">&lt;xref:System.Convert.ToString%2A?displayProperty=fullName&gt;</ph> overloads that include an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> parameter and that convert either a numeric value to a string or a <ph id=\"ph3\">&lt;xref:System.DateTime&gt;</ph> value to a string.","pos":[0,230],"source":"By the <xref:System.Convert.ToString%2A?displayProperty=fullName> overloads that include an <xref:System.IFormatProvider> parameter and that convert either a numeric value to a string or a <xref:System.DateTime> value to a string."}]},{"pos":[10292,10426],"content":"However, any user-defined type that implements <xref:System.IConvertible> can make use of the <xref:System.IFormatProvider> parameter.","nodes":[{"content":"However, any user-defined type that implements <ph id=\"ph1\">&lt;xref:System.IConvertible&gt;</ph> can make use of the <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> parameter.","pos":[0,134],"source":"However, any user-defined type that implements <xref:System.IConvertible> can make use of the <xref:System.IFormatProvider> parameter."}]},{"pos":[10460,10475],"content":"Base64 Encoding","linkify":"Base64 Encoding","nodes":[{"content":"Base64 Encoding","pos":[0,15]}]},{"pos":[10479,10910],"content":"Base64 encoding converts binary data to a string. Data expressed as base-64 digits can be easily conveyed over data channels that can only transmit 7-bit characters. The <xref:System.Convert> class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <xref:System.String> or to and from an array of Unicode characters consisting of base-64 digit characters.","nodes":[{"content":"Base64 encoding converts binary data to a string. Data expressed as base-64 digits can be easily conveyed over data channels that can only transmit 7-bit characters. The <xref:System.Convert> class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <xref:System.String> or to and from an array of Unicode characters consisting of base-64 digit characters.","pos":[0,431],"nodes":[{"content":"Base64 encoding converts binary data to a string.","pos":[0,49]},{"content":"Data expressed as base-64 digits can be easily conveyed over data channels that can only transmit 7-bit characters.","pos":[50,165]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert&gt;</ph> class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> or to and from an array of Unicode characters consisting of base-64 digit characters.","pos":[166,431],"source":" The <xref:System.Convert> class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <xref:System.String> or to and from an array of Unicode characters consisting of base-64 digit characters."}]}]},{"pos":[10920,11016],"content":"<xref:System.Convert.ToBase64String%2A>, which converts a byte array to a base64-encoded string.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph>, which converts a byte array to a base64-encoded string.","pos":[0,96],"source":"<xref:System.Convert.ToBase64String%2A>, which converts a byte array to a base64-encoded string."}]},{"pos":[11026,11134],"content":"<xref:System.Convert.ToBase64CharArray%2A>, which converts a byte array to a base64-encoded character array.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph>, which converts a byte array to a base64-encoded character array.","pos":[0,108],"source":"<xref:System.Convert.ToBase64CharArray%2A>, which converts a byte array to a base64-encoded character array."}]},{"pos":[11144,11242],"content":"<xref:System.Convert.FromBase64String%2A>, which converts a base64-encoded string to a byte array.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph>, which converts a base64-encoded string to a byte array.","pos":[0,98],"source":"<xref:System.Convert.FromBase64String%2A>, which converts a base64-encoded string to a byte array."}]},{"pos":[11252,11362],"content":"<xref:System.Convert.FromBase64CharArray%2A>, which converts a base64-encoded character array to a byte array.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.FromBase64CharArray%2A&gt;</ph>, which converts a base64-encoded character array to a byte array.","pos":[0,110],"source":"<xref:System.Convert.FromBase64CharArray%2A>, which converts a base64-encoded character array to a byte array."}]},{"pos":[11395,11419],"content":"Other Common Conversions","linkify":"Other Common Conversions","nodes":[{"content":"Other Common Conversions","pos":[0,24]}]},{"pos":[11423,11594],"content":"You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the <xref:System.Convert> class.  These include:","nodes":[{"content":"You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the <xref:System.Convert> class.  These include:","pos":[0,171],"nodes":[{"content":"You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the <ph id=\"ph1\">&lt;xref:System.Convert&gt;</ph> class.","pos":[0,155],"source":"You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the <xref:System.Convert> class."},{"content":"These include:","pos":[157,171]}]}]},{"pos":[11601,11825],"content":"Conversion to byte arrays  \n The <xref:System.BitConverter> class  provides methods that convert the primitive numeric types (including <xref:System.Boolean>) to byte arrays and from byte arrays back to primitive data types.","nodes":[{"content":"Conversion to byte arrays","pos":[0,25]},{"content":"The <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph> class  provides methods that convert the primitive numeric types (including <ph id=\"ph2\">&lt;xref:System.Boolean&gt;</ph>) to byte arrays and from byte arrays back to primitive data types.","pos":[29,224],"source":"The <xref:System.BitConverter> class  provides methods that convert the primitive numeric types (including <xref:System.Boolean>) to byte arrays and from byte arrays back to primitive data types."}]},{"pos":[11832,12361],"content":"Character encoding and decoding  \n The <xref:System.Text.Encoding> class and its derived classes (such as <xref:System.Text.UnicodeEncoding> and <xref:System.Text.UTF8Encoding>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters. For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)","nodes":[{"content":"Character encoding and decoding","pos":[0,31]},{"content":" The <xref:System.Text.Encoding> class and its derived classes (such as <xref:System.Text.UnicodeEncoding> and <xref:System.Text.UTF8Encoding>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters. For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)","pos":[34,529],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Encoding&gt;</ph> class and its derived classes (such as <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters.","pos":[1,376],"source":" The <xref:System.Text.Encoding> class and its derived classes (such as <xref:System.Text.UnicodeEncoding> and <xref:System.Text.UTF8Encoding>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept>","pos":[377,495],"source":" For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)"}]}]}],"pos":[15211,27702],"yaml":true,"extradata":"MT"},{"content":"Returns an object of the specified type and whose value is equivalent to the specified object.","nodes":[{"pos":[0,94],"content":"Returns an object of the specified type and whose value is equivalent to the specified object.","nodes":[{"content":"Returns an object of the specified type and whose value is equivalent to the specified object.","pos":[0,94]}]}],"pos":[30210,30305],"yaml":true},{"content":"<xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`. The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method requires that conversion of `value` to `conversionType` be supported.  \n  \n This method uses the current thread's culture for the conversion.","nodes":[{"pos":[0,564],"content":"<xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`. The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method requires that conversion of `value` to `conversionType` be supported.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> is a general-purpose conversion method that converts the object specified by <ph id=\"ph2\">`value`</ph> to <ph id=\"ph3\">`conversionType`</ph>.","pos":[0,141],"source":"<xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`."},{"content":"The <ph id=\"ph1\">`value`</ph> parameter can be an object of any type, and <ph id=\"ph2\">`conversionType`</ph> can also be a <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph> object that represents any base or custom type.","pos":[142,295],"source":" The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type."},{"content":"For the conversion to succeed, <ph id=\"ph1\">`value`</ph> must implement the <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface, because the method simply wraps a call to an appropriate <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> method.","pos":[296,483],"source":" For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method."},{"content":"The method requires that conversion of <ph id=\"ph1\">`value`</ph> to <ph id=\"ph2\">`conversionType`</ph> be supported.","pos":[484,564],"source":" The method requires that conversion of `value` to `conversionType` be supported."}]},{"pos":[571,636],"content":"This method uses the current thread's culture for the conversion.","nodes":[{"content":"This method uses the current thread's culture for the conversion.","pos":[0,65]}]}],"pos":[30316,30957],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[31614,31696],"yaml":true},{"content":"The type of object to return.","nodes":[{"pos":[0,29],"content":"The type of object to return.","nodes":[{"content":"The type of object to return.","pos":[0,29]}]}],"pos":[31764,31794],"yaml":true},{"content":"An object whose type is <code>conversionType</code> and whose value is equivalent to <code>value</code>.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>conversionType</code> is not a value type.","nodes":[{"pos":[0,104],"content":"An object whose type is <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">conversionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> and whose value is equivalent to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An object whose type is <code>conversionType</code> and whose value is equivalent to <code>value</code>."},{"pos":[111,115],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[122,252],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic), if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">conversionType</ph><ept id=\"p2\">&lt;/code&gt;</ept> is not a value type.","source":"A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>conversionType</code> is not a value type."}],"pos":[31851,32110],"yaml":true},{"content":"This conversion is not supported.  \n  \n -or-  \n  \n <code>value</code> is `null` and <code>conversionType</code> is a value type.  \n  \n -or-  \n  \n <code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]},{"pos":[40,44],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[51,128],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;conversionType&lt;/code&gt;</ph> is a value type.","source":"<code>value</code> is `null` and <code>conversionType</code> is a value type."},{"pos":[135,139],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[146,239],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[32263,32515],"yaml":true},{"content":"<code>value</code> is not in a format recognized by <code>conversionType</code>.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in a format recognized by <ph id=\"ph2\">&lt;code&gt;conversionType&lt;/code&gt;</ph>.","source":"<code>value</code> is not in a format recognized by <code>conversionType</code>."}],"pos":[32605,32686],"yaml":true},{"content":"<code>value</code> represents a number that is out of the range of <code>conversionType</code>.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is out of the range of <ph id=\"ph2\">&lt;code&gt;conversionType&lt;/code&gt;</ph>.","source":"<code>value</code> represents a number that is out of the range of <code>conversionType</code>."}],"pos":[32780,32876],"yaml":true},{"content":"<code>conversionType</code> is `null`.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;conversionType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>conversionType</code> is `null`."}],"pos":[32978,33017],"yaml":true},{"content":"Returns an object of the specified type whose value is equivalent to the specified object.","nodes":[{"pos":[0,90],"content":"Returns an object of the specified type whose value is equivalent to the specified object.","nodes":[{"content":"Returns an object of the specified type whose value is equivalent to the specified object.","pos":[0,90]}]}],"pos":[34559,34650],"yaml":true},{"content":"<xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`. The `value` parameter can be an object of any type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method also requires that conversion of `value` to `typeCode` be supported.  \n  \n The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> method does not support the conversion of `value` to a custom type. To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29> method.","nodes":[{"pos":[0,520],"content":"<xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`. The `value` parameter can be an object of any type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method also requires that conversion of `value` to `typeCode` be supported.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> is a general-purpose conversion method that converts the object specified by <ph id=\"ph2\">`value`</ph> to a predefined type specified by <ph id=\"ph3\">`typeCode`</ph>.","pos":[0,200],"source":"<xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`."},{"content":"The <ph id=\"ph1\">`value`</ph> parameter can be an object of any type.","pos":[201,252],"source":" The `value` parameter can be an object of any type."},{"content":"For the conversion to succeed, <ph id=\"ph1\">`value`</ph> must implement the <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface, because the method simply wraps a call to an appropriate <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> method.","pos":[253,440],"source":" For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method."},{"content":"The method also requires that conversion of <ph id=\"ph1\">`value`</ph> to <ph id=\"ph2\">`typeCode`</ph> be supported.","pos":[441,520],"source":" The method also requires that conversion of `value` to `typeCode` be supported."}]},{"pos":[527,781],"content":"The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> method does not support the conversion of `value` to a custom type. To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> method does not support the conversion of <ph id=\"ph2\">`value`</ph> to a custom type.","pos":[0,141],"source":"The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> method does not support the conversion of `value` to a custom type."},{"content":"To perform such a conversion, call the <ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29&gt;</ph> method.","pos":[142,254],"source":" To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29> method."}]}],"pos":[34661,35447],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[36300,36382],"yaml":true},{"content":"The type of object to return.","nodes":[{"pos":[0,29],"content":"The type of object to return.","nodes":[{"content":"The type of object to return.","pos":[0,29]}]}],"pos":[36448,36478],"yaml":true},{"content":"An object whose underlying type is <code>typeCode</code> and whose value is equivalent to <code>value</code>.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>typeCode</code> is <xref href=\"System.TypeCode.Empty\"></xref>, <xref href=\"System.TypeCode.String\"></xref>, or <xref href=\"System.TypeCode.Object\"></xref>.","nodes":[{"pos":[0,109],"content":"An object whose underlying type is <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeCode</ph><ept id=\"p1\">&lt;/code&gt;</ept> and whose value is equivalent to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An object whose underlying type is <code>typeCode</code> and whose value is equivalent to <code>value</code>."},{"pos":[116,120],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[127,370],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic), if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">typeCode</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph5\">&lt;xref href=\"System.TypeCode.Empty\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.TypeCode.String\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph7\">&lt;xref href=\"System.TypeCode.Object\"&gt;&lt;/xref&gt;</ph>.","source":"A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>typeCode</code> is <xref href=\"System.TypeCode.Empty\"></xref>, <xref href=\"System.TypeCode.String\"></xref>, or <xref href=\"System.TypeCode.Object\"></xref>."}],"pos":[36535,36918],"yaml":true},{"content":"This conversion is not supported.  \n  \n -or-  \n  \n <code>value</code> is `null` and <code>typeCode</code> specifies a value type.  \n  \n -or-  \n  \n <code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]},{"pos":[40,44],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[51,129],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;typeCode&lt;/code&gt;</ph> specifies a value type.","source":"<code>value</code> is `null` and <code>typeCode</code> specifies a value type."},{"pos":[136,140],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[147,240],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[37071,37324],"yaml":true},{"content":"<code>value</code> is not in a format recognized by the <code>typeCode</code> type.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in a format recognized by the <ph id=\"ph2\">&lt;code&gt;typeCode&lt;/code&gt;</ph> type.","source":"<code>value</code> is not in a format recognized by the <code>typeCode</code> type."}],"pos":[37414,37498],"yaml":true},{"content":"<code>value</code> represents a number that is out of the range of the <code>typeCode</code> type.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is out of the range of the <ph id=\"ph2\">&lt;code&gt;typeCode&lt;/code&gt;</ph> type.","source":"<code>value</code> represents a number that is out of the range of the <code>typeCode</code> type."}],"pos":[37592,37691],"yaml":true},{"content":"<code>typeCode</code> is invalid.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;typeCode&lt;/code&gt;</ph> is invalid.","source":"<code>typeCode</code> is invalid."}],"pos":[37785,37819],"yaml":true},{"content":"Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.","nodes":[{"pos":[0,152],"content":"Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.","nodes":[{"content":"Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.","pos":[0,152],"nodes":[{"content":"Returns an object of the specified type whose value is equivalent to the specified object.","pos":[0,90]},{"content":"A parameter supplies culture-specific formatting information.","pos":[91,152]}]}]}],"pos":[39113,39266],"yaml":true},{"content":"<xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`. The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method requires that conversion of `value` to `conversionType` be supported.  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation. If `value` is a base data type, `provider` is used only for the following conversions:  \n  \n-   Conversion from a number to a string, or from a string to a number. `provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object. However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default \"G\" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer. If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  \n  \n-   Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value. `provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object. If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  \n  \n If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter.","nodes":[{"pos":[0,564],"content":"<xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`. The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method requires that conversion of `value` to `conversionType` be supported.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> is a general-purpose conversion method that converts the object specified by <ph id=\"ph2\">`value`</ph> to <ph id=\"ph3\">`conversionType`</ph>.","pos":[0,141],"source":"<xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`."},{"content":"The <ph id=\"ph1\">`value`</ph> parameter can be an object of any type, and <ph id=\"ph2\">`conversionType`</ph> can also be a <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph> object that represents any base or custom type.","pos":[142,295],"source":" The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type."},{"content":"For the conversion to succeed, <ph id=\"ph1\">`value`</ph> must implement the <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface, because the method simply wraps a call to an appropriate <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> method.","pos":[296,483],"source":" For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method."},{"content":"The method requires that conversion of <ph id=\"ph1\">`value`</ph> to <ph id=\"ph2\">`conversionType`</ph> be supported.","pos":[484,564],"source":" The method requires that conversion of `value` to `conversionType` be supported."}]},{"pos":[571,898],"content":"The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation. If `value` is a base data type, `provider` is used only for the following conversions:","nodes":[{"content":"The <ph id=\"ph1\">`provider`</ph> parameter is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that supplies formatting information for the conversion.","pos":[0,132],"source":"The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion."},{"content":"Whether and how this parameter is used depends on the underlying <ph id=\"ph1\">&lt;xref:System.IConvertible&gt;</ph> implementation.","pos":[133,240],"source":" Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation."},{"content":"If <ph id=\"ph1\">`value`</ph> is a base data type, <ph id=\"ph2\">`provider`</ph> is used only for the following conversions:","pos":[241,327],"source":" If `value` is a base data type, `provider` is used only for the following conversions:"}]},{"pos":[908,1632],"content":"Conversion from a number to a string, or from a string to a number. `provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object. However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default \"G\" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer. If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.","nodes":[{"content":"Conversion from a number to a string, or from a string to a number.","pos":[0,67]},{"content":"<ph id=\"ph1\">`provider`</ph> must be a <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object, a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object, or a custom <ph id=\"ph4\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that returns a <ph id=\"ph5\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[68,316],"source":"`provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"However, because the <ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> method performs the conversion using the default \"G\" format specifier, the <ph id=\"ph2\">`provider`</ph> parameter has no effect if <ph id=\"ph3\">`value`</ph> or the target type is an unsigned integer.","pos":[317,596],"source":" However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default \"G\" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.","pos":[597,724],"source":" If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used."}]},{"pos":[1642,2000],"content":"Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value. `provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object. If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.","nodes":[{"content":"Conversion from a <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value to a string, or from a string to a <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> value.","pos":[0,111],"source":"Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value."},{"content":"<ph id=\"ph1\">`provider`</ph> must be a <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object.","pos":[112,230],"source":"`provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.","pos":[231,358],"source":" If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used."}]},{"pos":[2007,2129],"content":"If <ph id=\"ph1\">`value`</ph> is an application-defined type, its <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> implementation may use the <ph id=\"ph3\">`provider`</ph> parameter.","source":"If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter."}],"pos":[39277,41419],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[43042,43124],"yaml":true},{"content":"The type of object to return.","nodes":[{"pos":[0,29],"content":"The type of object to return.","nodes":[{"content":"The type of object to return.","pos":[0,29]}]}],"pos":[43192,43222],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[43295,43360],"yaml":true},{"content":"An object whose type is <code>conversionType</code> and whose value is equivalent to <code>value</code>.  \n  \n -or-  \n  \n <code>value</code>, if the <xref href=\"System.Type\"></xref> of <code>value</code> and <code>conversionType</code> are equal.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>conversionType</code> is not a value type.","nodes":[{"pos":[0,104],"content":"An object whose type is <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">conversionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> and whose value is equivalent to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An object whose type is <code>conversionType</code> and whose value is equivalent to <code>value</code>."},{"pos":[111,115],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[122,246],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, if the <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph> and <ph id=\"ph4\">&lt;code&gt;conversionType&lt;/code&gt;</ph> are equal.","source":"<code>value</code>, if the <xref href=\"System.Type\"></xref> of <code>value</code> and <code>conversionType</code> are equal."},{"pos":[253,257],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[264,394],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic), if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">conversionType</ph><ept id=\"p2\">&lt;/code&gt;</ept> is not a value type.","source":"A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>conversionType</code> is not a value type."}],"pos":[43417,43824],"yaml":true},{"content":"This conversion is not supported.  \n  \n -or-  \n  \n <code>value</code> is `null` and <code>conversionType</code> is a value type.  \n  \n -or-  \n  \n <code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]},{"pos":[40,44],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[51,128],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;conversionType&lt;/code&gt;</ph> is a value type.","source":"<code>value</code> is `null` and <code>conversionType</code> is a value type."},{"pos":[135,139],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[146,239],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[43977,44229],"yaml":true},{"content":"<code>value</code> is not in a format for <code>conversionType</code> recognized by <code>provider</code>.","nodes":[{"pos":[0,106],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in a format for <ph id=\"ph2\">&lt;code&gt;conversionType&lt;/code&gt;</ph> recognized by <ph id=\"ph3\">&lt;code&gt;provider&lt;/code&gt;</ph>.","source":"<code>value</code> is not in a format for <code>conversionType</code> recognized by <code>provider</code>."}],"pos":[44319,44426],"yaml":true},{"content":"<code>value</code> represents a number that is out of the range of <code>conversionType</code>.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is out of the range of <ph id=\"ph2\">&lt;code&gt;conversionType&lt;/code&gt;</ph>.","source":"<code>value</code> represents a number that is out of the range of <code>conversionType</code>."}],"pos":[44520,44616],"yaml":true},{"content":"<code>conversionType</code> is `null`.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;conversionType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>conversionType</code> is `null`."}],"pos":[44718,44757],"yaml":true},{"content":"Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.","nodes":[{"pos":[0,152],"content":"Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.","nodes":[{"content":"Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.","pos":[0,152],"nodes":[{"content":"Returns an object of the specified type whose value is equivalent to the specified object.","pos":[0,90]},{"content":"A parameter supplies culture-specific formatting information.","pos":[91,152]}]}]}],"pos":[46419,46572],"yaml":true},{"content":"<xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`. The `value` parameter can be an object of any type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method also requires that conversion of `value` to `typeCode` be supported.  \n  \n The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method does not support the conversion of `value` to a custom type. To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method.  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation. If `value` is a base data type, `provider` is used only for the following conversions. If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  \n  \n-   Conversion from a number to a string, or from a string to a number. `provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object. However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default \"G\" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer.  \n  \n-   Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value. `provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object.  \n  \n If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter.","nodes":[{"pos":[0,545],"content":"<xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`. The `value` parameter can be an object of any type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method also requires that conversion of `value` to `typeCode` be supported.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> is a general-purpose conversion method that converts the object specified by <ph id=\"ph2\">`value`</ph> to a predefined type specified by <ph id=\"ph3\">`typeCode`</ph>.","pos":[0,225],"source":"<xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`."},{"content":"The <ph id=\"ph1\">`value`</ph> parameter can be an object of any type.","pos":[226,277],"source":" The `value` parameter can be an object of any type."},{"content":"For the conversion to succeed, <ph id=\"ph1\">`value`</ph> must implement the <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface, because the method simply wraps a call to an appropriate <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> method.","pos":[278,465],"source":" For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method."},{"content":"The method also requires that conversion of <ph id=\"ph1\">`value`</ph> to <ph id=\"ph2\">`typeCode`</ph> be supported.","pos":[466,545],"source":" The method also requires that conversion of `value` to `typeCode` be supported."}]},{"pos":[552,856],"content":"The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method does not support the conversion of `value` to a custom type. To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> method does not support the conversion of <ph id=\"ph2\">`value`</ph> to a custom type.","pos":[0,166],"source":"The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method does not support the conversion of `value` to a custom type."},{"content":"To perform such a conversion, call the <ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29&gt;</ph> method.","pos":[167,304],"source":" To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method."}]},{"pos":[863,1371],"content":"The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation. If `value` is a base data type, `provider` is used only for the following conversions. If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.","nodes":[{"content":"The <ph id=\"ph1\">`provider`</ph> parameter is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that supplies formatting information for the conversion.","pos":[0,132],"source":"The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion."},{"content":"Whether and how this parameter is used depends on the underlying <ph id=\"ph1\">&lt;xref:System.IConvertible&gt;</ph> implementation.","pos":[133,240],"source":" Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation."},{"content":"If <ph id=\"ph1\">`value`</ph> is a base data type, <ph id=\"ph2\">`provider`</ph> is used only for the following conversions.","pos":[241,327],"source":" If `value` is a base data type, `provider` is used only for the following conversions."},{"content":"If a <ph id=\"ph1\">`null`</ph><ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> argument is passed to these methods, the <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.","pos":[328,508],"source":" If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used."}]},{"pos":[1381,1977],"content":"Conversion from a number to a string, or from a string to a number. `provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object. However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default \"G\" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer.","nodes":[{"content":"Conversion from a number to a string, or from a string to a number.","pos":[0,67]},{"content":"<ph id=\"ph1\">`provider`</ph> must be a <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object, a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object, or a custom <ph id=\"ph4\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that returns a <ph id=\"ph5\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[68,316],"source":"`provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"However, because the <ph id=\"ph1\">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> method performs the conversion using the default \"G\" format specifier, the <ph id=\"ph2\">`provider`</ph> parameter has no effect if <ph id=\"ph3\">`value`</ph> or the target type is an unsigned integer.","pos":[317,596],"source":" However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default \"G\" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer."}]},{"pos":[1987,2217],"content":"Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value. `provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object.","nodes":[{"content":"Conversion from a <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value to a string, or from a string to a <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> value.","pos":[0,111],"source":"Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value."},{"content":"<ph id=\"ph1\">`provider`</ph> must be a <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object.","pos":[112,230],"source":"`provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object."}]},{"pos":[2224,2346],"content":"If <ph id=\"ph1\">`value`</ph> is an application-defined type, its <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> implementation may use the <ph id=\"ph3\">`provider`</ph> parameter.","source":"If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter."}],"pos":[46583,48944],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[50549,50631],"yaml":true},{"content":"The type of object to return.","nodes":[{"pos":[0,29],"content":"The type of object to return.","nodes":[{"content":"The type of object to return.","pos":[0,29]}]}],"pos":[50697,50727],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[50800,50865],"yaml":true},{"content":"An object whose underlying type is <code>typeCode</code> and whose value is equivalent to <code>value</code>.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>typeCode</code> is <xref href=\"System.TypeCode.Empty\"></xref>, <xref href=\"System.TypeCode.String\"></xref>, or <xref href=\"System.TypeCode.Object\"></xref>.","nodes":[{"pos":[0,109],"content":"An object whose underlying type is <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeCode</ph><ept id=\"p1\">&lt;/code&gt;</ept> and whose value is equivalent to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An object whose underlying type is <code>typeCode</code> and whose value is equivalent to <code>value</code>."},{"pos":[116,120],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[127,370],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic), if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">typeCode</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph5\">&lt;xref href=\"System.TypeCode.Empty\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.TypeCode.String\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph7\">&lt;xref href=\"System.TypeCode.Object\"&gt;&lt;/xref&gt;</ph>.","source":"A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>typeCode</code> is <xref href=\"System.TypeCode.Empty\"></xref>, <xref href=\"System.TypeCode.String\"></xref>, or <xref href=\"System.TypeCode.Object\"></xref>."}],"pos":[50922,51305],"yaml":true},{"content":"This conversion is not supported.  \n  \n -or-  \n  \n <code>value</code> is `null` and <code>typeCode</code> specifies a value type.  \n  \n -or-  \n  \n <code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]},{"pos":[40,44],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[51,129],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;typeCode&lt;/code&gt;</ph> specifies a value type.","source":"<code>value</code> is `null` and <code>typeCode</code> specifies a value type."},{"pos":[136,140],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[147,240],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[51458,51711],"yaml":true},{"content":"<code>value</code> is not in a format for the <code>typeCode</code> type recognized by <code>provider</code>.","nodes":[{"pos":[0,109],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in a format for the <ph id=\"ph2\">&lt;code&gt;typeCode&lt;/code&gt;</ph> type recognized by <ph id=\"ph3\">&lt;code&gt;provider&lt;/code&gt;</ph>.","source":"<code>value</code> is not in a format for the <code>typeCode</code> type recognized by <code>provider</code>."}],"pos":[51801,51911],"yaml":true},{"content":"<code>value</code> represents a number that is out of the range of the <code>typeCode</code> type.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is out of the range of the <ph id=\"ph2\">&lt;code&gt;typeCode&lt;/code&gt;</ph> type.","source":"<code>value</code> represents a number that is out of the range of the <code>typeCode</code> type."}],"pos":[52005,52104],"yaml":true},{"content":"<code>typeCode</code> is invalid.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;typeCode&lt;/code&gt;</ph> is invalid.","source":"<code>typeCode</code> is invalid."}],"pos":[52198,52232],"yaml":true},{"content":"A constant that represents a database column that is absent of data; that is, database null.","nodes":[{"pos":[0,92],"content":"A constant that represents a database column that is absent of data; that is, database null.","nodes":[{"content":"A constant that represents a database column that is absent of data; that is, database null.","pos":[0,92]}]}],"pos":[53482,53575],"yaml":true},{"content":"The <xref:System.Convert.DBNull> field is equivalent to <xref:System.DBNull.Value?displayProperty=fullName>, as the following example shows.  \n  \n [!code-csharp[System.Convert.DBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.dbnull/cs/dbnull1.cs#1)]\n [!code-vb[System.Convert.DBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.dbnull/vb/dbnull1.vb#1)]","nodes":[{"pos":[0,140],"content":"The <xref:System.Convert.DBNull> field is equivalent to <xref:System.DBNull.Value?displayProperty=fullName>, as the following example shows.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.DBNull&gt;</ph> field is equivalent to <ph id=\"ph2\">&lt;xref:System.DBNull.Value?displayProperty=fullName&gt;</ph>, as the following example shows.","pos":[0,140],"source":"The <xref:System.Convert.DBNull> field is equivalent to <xref:System.DBNull.Value?displayProperty=fullName>, as the following example shows."}]},{"pos":[147,404],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.DBNull#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.dbnull/cs/dbnull1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.DBNull#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.dbnull/vb/dbnull1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.DBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.dbnull/cs/dbnull1.cs#1)]\n [!code-vb[System.Convert.DBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.dbnull/vb/dbnull1.vb#1)]"}],"pos":[53586,53996],"yaml":true,"extradata":"MT"},{"content":"Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.","nodes":[{"pos":[0,227],"content":"Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.","nodes":[{"content":"Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.","pos":[0,227],"nodes":[{"content":"Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.","pos":[0,139]},{"content":"Parameters specify the subset in the input array and the number of elements to convert.","pos":[140,227]}]}]}],"pos":[55428,55656],"yaml":true},{"content":"`inArray` is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", lowercase characters \"a\" to \"z\", numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".  \n  \n The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in `inArray` because all white-space characters are ignored.  \n  \n The valueless character, \"=\", is used for trailing padding. The end of `inArray` can consist of zero, one, or two padding characters.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.FromBase64CharArray%2A> method is designed to process a single character array that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class.","nodes":[{"pos":[0,269],"content":"`inArray` is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", lowercase characters \"a\" to \"z\", numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".","nodes":[{"content":"<ph id=\"ph1\">`inArray`</ph> is composed of base-64 digits, white-space characters, and trailing padding characters.","pos":[0,97],"source":"`inArray` is composed of base-64 digits, white-space characters, and trailing padding characters."},{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", lowercase characters \"a\" to \"z\", numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".","pos":[98,269]}]},{"pos":[276,613],"content":"The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in `inArray` because all white-space characters are ignored.","nodes":[{"content":"The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020).","pos":[0,219]},{"content":"An arbitrary number of white-space characters can appear in <ph id=\"ph1\">`inArray`</ph> because all white-space characters are ignored.","pos":[220,337],"source":" An arbitrary number of white-space characters can appear in `inArray` because all white-space characters are ignored."}]},{"pos":[620,753],"content":"The valueless character, \"=\", is used for trailing padding. The end of `inArray` can consist of zero, one, or two padding characters.","nodes":[{"content":"The valueless character, \"=\", is used for trailing padding.","pos":[0,59]},{"content":"The end of <ph id=\"ph1\">`inArray`</ph> can consist of zero, one, or two padding characters.","pos":[60,133],"source":" The end of `inArray` can consist of zero, one, or two padding characters."}]},{"pos":[761,1066],"content":"[!IMPORTANT]\n The <xref:System.Convert.FromBase64CharArray%2A> method is designed to process a single character array that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Convert.FromBase64CharArray%2A> method is designed to process a single character array that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class.","pos":[13,303],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.FromBase64CharArray%2A&gt;</ph> method is designed to process a single character array that contains all the data to be decoded.","pos":[1,146],"source":" The <xref:System.Convert.FromBase64CharArray%2A> method is designed to process a single character array that contains all the data to be decoded."},{"content":"To decode base-64 character data from a stream, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName&gt;</ph> class.","pos":[147,290],"source":" To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class."}]}]}],"pos":[55667,56761],"yaml":true,"extradata":"MT"},{"content":"A Unicode character array.","nodes":[{"pos":[0,26],"content":"A Unicode character array.","nodes":[{"content":"A Unicode character array.","pos":[0,26]}]}],"pos":[59394,59421],"yaml":true},{"content":"A position within <code>inArray</code>.","nodes":[{"pos":[0,39],"content":"A position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A position within <code>inArray</code>."}],"pos":[59482,59522],"yaml":true},{"content":"The number of elements in <code>inArray</code> to convert.","nodes":[{"pos":[0,58],"content":"The number of elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept> to convert.","source":"The number of elements in <code>inArray</code> to convert."}],"pos":[59583,59642],"yaml":true},{"content":"An array of 8-bit unsigned integers equivalent to <code>length</code> elements at position <code>offset</code> in <code>inArray</code>.","nodes":[{"pos":[0,135],"content":"An array of 8-bit unsigned integers equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> elements at position <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">offset</ph><ept id=\"p2\">&lt;/code&gt;</ept> in <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">inArray</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"An array of 8-bit unsigned integers equivalent to <code>length</code> elements at position <code>offset</code> in <code>inArray</code>."}],"pos":[59699,59835],"yaml":true},{"content":"<code>inArray</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;inArray&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>inArray</code> is `null`."}],"pos":[59999,60031],"yaml":true},{"content":"<code>offset</code> or <code>length</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> plus <code>length</code> indicates a position not within <code>inArray</code>.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is less than 0.","source":"<code>offset</code> or <code>length</code> is less than 0."},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,174],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> indicates a position not within <ph id=\"ph3\">&lt;code&gt;inArray&lt;/code&gt;</ph>.","source":"<code>offset</code> plus <code>length</code> indicates a position not within <code>inArray</code>."}],"pos":[60145,60326],"yaml":true},{"content":"The length of <code>inArray</code>, ignoring white-space characters, is not zero or a multiple of 4.  \n  \n -or-  \n  \n The format of <code>inArray</code> is invalid. <code>inArray</code> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters.","nodes":[{"pos":[0,100],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept>, ignoring white-space characters, is not zero or a multiple of 4.","source":"The length of <code>inArray</code>, ignoring white-space characters, is not zero or a multiple of 4."},{"pos":[107,111],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[118,314],"content":"The format of <code>inArray</code> is invalid. <code>inArray</code> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters.","nodes":[{"content":"The format of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","pos":[0,46],"source":"The format of <code>inArray</code> is invalid."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters.","pos":[47,196],"source":"<code>inArray</code> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters."}]}],"pos":[60416,60737],"yaml":true},{"content":"Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.","nodes":[{"pos":[0,122],"content":"Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.","nodes":[{"content":"Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.","pos":[0,122]}]}],"pos":[62254,62377],"yaml":true},{"content":"`s` is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", lowercase characters \"a\" to \"z\", numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".  \n  \n The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in `s` because all white-space characters are ignored.  \n  \n The valueless character, \"=\", is used for trailing padding. The end of `s` can consist of zero, one, or two padding characters.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.FromBase64String%2A>method is designed to process a single string that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class.","nodes":[{"pos":[0,263],"content":"`s` is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", lowercase characters \"a\" to \"z\", numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".","nodes":[{"content":"<ph id=\"ph1\">`s`</ph> is composed of base-64 digits, white-space characters, and trailing padding characters.","pos":[0,91],"source":"`s` is composed of base-64 digits, white-space characters, and trailing padding characters."},{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", lowercase characters \"a\" to \"z\", numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".","pos":[92,263]}]},{"pos":[270,601],"content":"The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in `s` because all white-space characters are ignored.","nodes":[{"content":"The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020).","pos":[0,219]},{"content":"An arbitrary number of white-space characters can appear in <ph id=\"ph1\">`s`</ph> because all white-space characters are ignored.","pos":[220,331],"source":" An arbitrary number of white-space characters can appear in `s` because all white-space characters are ignored."}]},{"pos":[608,735],"content":"The valueless character, \"=\", is used for trailing padding. The end of `s` can consist of zero, one, or two padding characters.","nodes":[{"content":"The valueless character, \"=\", is used for trailing padding.","pos":[0,59]},{"content":"The end of <ph id=\"ph1\">`s`</ph> can consist of zero, one, or two padding characters.","pos":[60,127],"source":" The end of `s` can consist of zero, one, or two padding characters."}]},{"pos":[743,1035],"content":"[!IMPORTANT]\n The <xref:System.Convert.FromBase64String%2A>method is designed to process a single string that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Convert.FromBase64String%2A>method is designed to process a single string that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class.","pos":[13,290],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph>method is designed to process a single string that contains all the data to be decoded.","pos":[1,133],"source":" The <xref:System.Convert.FromBase64String%2A>method is designed to process a single string that contains all the data to be decoded."},{"content":"To decode base-64 character data from a stream, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName&gt;</ph> class.","pos":[134,277],"source":" To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class."}]}]}],"pos":[62388,63451],"yaml":true,"extradata":"MT"},{"content":"The string to convert.","nodes":[{"pos":[0,22],"content":"The string to convert.","nodes":[{"content":"The string to convert.","pos":[0,22]}]}],"pos":[65481,65504],"yaml":true},{"content":"An array of 8-bit unsigned integers that is equivalent to <code>s</code>.","nodes":[{"pos":[0,73],"content":"An array of 8-bit unsigned integers that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">s</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An array of 8-bit unsigned integers that is equivalent to <code>s</code>."}],"pos":[65561,65635],"yaml":true},{"content":"<code>s</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>s</code> is `null`."}],"pos":[65796,65822],"yaml":true},{"content":"The length of <code>s</code>, ignoring white-space characters, is not zero or a multiple of 4.  \n  \n -or-  \n  \n The format of <code>s</code> is invalid. <code>s</code> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.","nodes":[{"pos":[0,94],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">s</ph><ept id=\"p1\">&lt;/code&gt;</ept>, ignoring white-space characters, is not zero or a multiple of 4.","source":"The length of <code>s</code>, ignoring white-space characters, is not zero or a multiple of 4."},{"pos":[101,105],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[112,296],"content":"The format of <code>s</code> is invalid. <code>s</code> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.","nodes":[{"content":"The format of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">s</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","pos":[0,40],"source":"The format of <code>s</code> is invalid."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">s</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.","pos":[41,184],"source":"<code>s</code> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters."}]}],"pos":[65912,66215],"yaml":true},{"content":"Returns the <xref href=\"System.TypeCode\"></xref> for the specified object.","nodes":[{"pos":[0,74],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.TypeCode\"&gt;&lt;/xref&gt;</ph> for the specified object.","source":"Returns the <xref href=\"System.TypeCode\"></xref> for the specified object."}],"pos":[67702,67777],"yaml":true},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[67928,68010],"yaml":true},{"content":"The <xref href=\"System.TypeCode\"></xref> for <code>value</code>, or <xref href=\"System.TypeCode.Empty\"></xref> if <code>value</code> is `null`.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.TypeCode\"&gt;&lt;/xref&gt;</ph> for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <ph id=\"ph3\">&lt;xref href=\"System.TypeCode.Empty\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph5\">`null`</ph>.","source":"The <xref href=\"System.TypeCode\"></xref> for <code>value</code>, or <xref href=\"System.TypeCode.Empty\"></xref> if <code>value</code> is `null`."}],"pos":[68069,68213],"yaml":true},{"content":"Returns an indication whether the specified object is of type <xref href=\"System.DBNull\"></xref>.","nodes":[{"pos":[0,97],"content":"Returns an indication whether the specified object is of type <ph id=\"ph1\">&lt;xref href=\"System.DBNull\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an indication whether the specified object is of type <xref href=\"System.DBNull\"></xref>."}],"pos":[69602,69700],"yaml":true},{"content":"The <xref:System.Convert.IsDBNull%2A> method tests whether the `value` parameter is equal to <xref:System.DBNull?displayProperty=fullName>. It is equivalent to the following code:  \n  \n [!code-csharp[System.Convert.IsDBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#1)]\n [!code-vb[System.Convert.IsDBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#1)]  \n  \n> [!NOTE]\n>  <xref:System.DBNull?displayProperty=fullName> is used to indicate a value that is missing. It is not equivalent to `null` or to <xref:System.String.Empty?displayProperty=fullName>. Therefore, code such as `Convert.IsDBNull(null)` in C# or `Convert.IsDBNull(Nothing)` in Visual Basic returns`false`.","nodes":[{"pos":[0,179],"content":"The <xref:System.Convert.IsDBNull%2A> method tests whether the `value` parameter is equal to <xref:System.DBNull?displayProperty=fullName>. It is equivalent to the following code:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.IsDBNull%2A&gt;</ph> method tests whether the <ph id=\"ph2\">`value`</ph> parameter is equal to <ph id=\"ph3\">&lt;xref:System.DBNull?displayProperty=fullName&gt;</ph>.","pos":[0,139],"source":"The <xref:System.Convert.IsDBNull%2A> method tests whether the `value` parameter is equal to <xref:System.DBNull?displayProperty=fullName>."},{"content":"It is equivalent to the following code:","pos":[140,179]}]},{"pos":[186,447],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.IsDBNull#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.IsDBNull#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.IsDBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#1)]\n [!code-vb[System.Convert.IsDBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#1)]"},{"pos":[455,764],"content":"[!NOTE]\n <xref:System.DBNull?displayProperty=fullName> is used to indicate a value that is missing. It is not equivalent to `null` or to <xref:System.String.Empty?displayProperty=fullName>. Therefore, code such as `Convert.IsDBNull(null)` in C# or `Convert.IsDBNull(Nothing)` in Visual Basic returns`false`.","leadings":["","> "],"nodes":[{"content":" <xref:System.DBNull?displayProperty=fullName> is used to indicate a value that is missing. It is not equivalent to `null` or to <xref:System.String.Empty?displayProperty=fullName>. Therefore, code such as `Convert.IsDBNull(null)` in C# or `Convert.IsDBNull(Nothing)` in Visual Basic returns`false`.","pos":[8,307],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.DBNull?displayProperty=fullName&gt;</ph> is used to indicate a value that is missing.","pos":[1,91],"source":" <xref:System.DBNull?displayProperty=fullName> is used to indicate a value that is missing."},{"content":"It is not equivalent to <ph id=\"ph1\">`null`</ph> or to <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[92,181],"source":" It is not equivalent to `null` or to <xref:System.String.Empty?displayProperty=fullName>."},{"content":"Therefore, code such as <ph id=\"ph1\">`Convert.IsDBNull(null)`</ph> in C# or <ph id=\"ph2\">`Convert.IsDBNull(Nothing)`</ph> in Visual Basic returns<ph id=\"ph3\">`false`</ph>.","pos":[182,299],"source":" Therefore, code such as `Convert.IsDBNull(null)` in C# or `Convert.IsDBNull(Nothing)` in Visual Basic returns`false`."}]}]}],"pos":[69711,70484],"yaml":true,"extradata":"MT"},{"content":"An object.","nodes":[{"pos":[0,10],"content":"An object.","nodes":[{"content":"An object.","pos":[0,10]}]}],"pos":[71429,71440],"yaml":true},{"content":"`true` if <code>value</code> is of type <xref href=\"System.DBNull\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is of type <ph id=\"ph3\">&lt;xref href=\"System.DBNull\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>value</code> is of type <xref href=\"System.DBNull\"></xref>; otherwise, `false`."}],"pos":[71498,71596],"yaml":true},{"content":"Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.","nodes":[{"pos":[0,266],"content":"Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.","nodes":[{"content":"Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.","pos":[0,266],"nodes":[{"content":"Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.","pos":[0,134]},{"content":"Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.","pos":[135,266]}]}]}],"pos":[73058,73325],"yaml":true},{"content":"The subset of `length` elements of `inArray` starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in `outArray` starting at position `offsetOut`. The return value indicates the number of converted elements in `outArray`. The subset of `outArray` consists of base-64 digits.  \n  \n The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.  \n  \n The `offset` and `length` parameters are 32-bit signed numbers. The `offsetIn` and `offsetOut` parameters are zero-based array positions.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.ToBase64CharArray%2A>method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","nodes":[{"pos":[0,320],"content":"The subset of `length` elements of `inArray` starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in `outArray` starting at position `offsetOut`. The return value indicates the number of converted elements in `outArray`. The subset of `outArray` consists of base-64 digits.","nodes":[{"content":"The subset of <ph id=\"ph1\">`length`</ph> elements of <ph id=\"ph2\">`inArray`</ph> starting at position <ph id=\"ph3\">`offsetIn`</ph>, are taken as a numeric value and converted to a subset of elements in <ph id=\"ph4\">`outArray`</ph> starting at position <ph id=\"ph5\">`offsetOut`</ph>.","pos":[0,192],"source":"The subset of `length` elements of `inArray` starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in `outArray` starting at position `offsetOut`."},{"content":"The return value indicates the number of converted elements in <ph id=\"ph1\">`outArray`</ph>.","pos":[193,267],"source":" The return value indicates the number of converted elements in `outArray`."},{"content":"The subset of <ph id=\"ph1\">`outArray`</ph> consists of base-64 digits.","pos":[268,320],"source":" The subset of `outArray` consists of base-64 digits."}]},{"pos":[327,566],"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.","nodes":[{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.","pos":[0,239],"nodes":[{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".","pos":[0,179]},{"content":"The valueless character, \"=\", is used for trailing padding.","pos":[180,239]}]}]},{"pos":[573,710],"content":"The `offset` and `length` parameters are 32-bit signed numbers. The `offsetIn` and `offsetOut` parameters are zero-based array positions.","nodes":[{"content":"The <ph id=\"ph1\">`offset`</ph> and <ph id=\"ph2\">`length`</ph> parameters are 32-bit signed numbers.","pos":[0,63],"source":"The `offset` and `length` parameters are 32-bit signed numbers."},{"content":"The <ph id=\"ph1\">`offsetIn`</ph> and <ph id=\"ph2\">`offsetOut`</ph> parameters are zero-based array positions.","pos":[64,137],"source":" The `offsetIn` and `offsetOut` parameters are zero-based array positions."}]},{"pos":[718,1021],"content":"[!IMPORTANT]\n The <xref:System.Convert.ToBase64CharArray%2A>method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Convert.ToBase64CharArray%2A>method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","pos":[13,301],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph>method is designed to process a single byte array that contains all the data to be encoded.","pos":[1,138],"source":" The <xref:System.Convert.ToBase64CharArray%2A>method is designed to process a single byte array that contains all the data to be encoded."},{"content":"To create a base-64 character array from a byte stream, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName&gt;</ph> class.","pos":[139,288],"source":" To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class."}]}]}],"pos":[73336,74385],"yaml":true,"extradata":"MT"},{"content":"An input array of 8-bit unsigned integers.","nodes":[{"pos":[0,42],"content":"An input array of 8-bit unsigned integers.","nodes":[{"content":"An input array of 8-bit unsigned integers.","pos":[0,42]}]}],"pos":[75292,75335],"yaml":true},{"content":"A position within <code>inArray</code>.","nodes":[{"pos":[0,39],"content":"A position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A position within <code>inArray</code>."}],"pos":[75398,75438],"yaml":true},{"content":"The number of elements of <code>inArray</code> to convert.","nodes":[{"pos":[0,58],"content":"The number of elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept> to convert.","source":"The number of elements of <code>inArray</code> to convert."}],"pos":[75499,75558],"yaml":true},{"content":"An output array of Unicode characters.","nodes":[{"pos":[0,38],"content":"An output array of Unicode characters.","nodes":[{"content":"An output array of Unicode characters.","pos":[0,38]}]}],"pos":[75622,75661],"yaml":true},{"content":"A position within <code>outArray</code>.","nodes":[{"pos":[0,40],"content":"A position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">outArray</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A position within <code>outArray</code>."}],"pos":[75725,75766],"yaml":true},{"content":"A 32-bit signed integer containing the number of bytes in <code>outArray</code>.","nodes":[{"pos":[0,80],"content":"A 32-bit signed integer containing the number of bytes in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">outArray</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit signed integer containing the number of bytes in <code>outArray</code>."}],"pos":[75822,75903],"yaml":true},{"content":"<code>inArray</code> or <code>outArray</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;inArray&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;outArray&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>inArray</code> or <code>outArray</code> is `null`."}],"pos":[76065,76122],"yaml":true},{"content":"<code>offsetIn</code>, <code>offsetOut</code>, or <code>length</code> is negative.  \n  \n -or-  \n  \n <code>offsetIn</code> plus <code>length</code> is greater than the length of <code>inArray</code>.  \n  \n -or-  \n  \n <code>offsetOut</code> plus the number of elements to return is greater than the length of <code>outArray</code>.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">&lt;code&gt;offsetIn&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;offsetOut&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;length&lt;/code&gt;</ph> is negative.","source":"<code>offsetIn</code>, <code>offsetOut</code>, or <code>length</code> is negative."},{"pos":[89,93],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[100,198],"content":"<ph id=\"ph1\">&lt;code&gt;offsetIn&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph3\">&lt;code&gt;inArray&lt;/code&gt;</ph>.","source":"<code>offsetIn</code> plus <code>length</code> is greater than the length of <code>inArray</code>."},{"pos":[205,209],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[216,329],"content":"<ph id=\"ph1\">&lt;code&gt;offsetOut&lt;/code&gt;</ph> plus the number of elements to return is greater than the length of <ph id=\"ph2\">&lt;code&gt;outArray&lt;/code&gt;</ph>.","source":"<code>offsetOut</code> plus the number of elements to return is greater than the length of <code>outArray</code>."}],"pos":[76236,76576],"yaml":true},{"content":"Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.","nodes":[{"pos":[0,320],"content":"Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.","nodes":[{"content":"Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.","pos":[0,320],"nodes":[{"content":"Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.","pos":[0,134]},{"content":"Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.","pos":[135,320]}]}]}],"pos":[78496,78817],"yaml":true},{"content":"The subset of `length` elements of the `inArray` parameter starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in the `outArray` parameter starting at position `offsetOut`. The return value indicates the number of converted elements in `outArray`. The subset of `outArray` consists of base-64 digits.  \n  \n The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character \"=\" is used for trailing padding.  \n  \n The `offset` and `length` parameters are 32-bit signed numbers. The `offsetIn` and `offsetOut` parameters are zero-based array positions.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.ToBase64CharArray%2A> method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  \n  \n If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/).","nodes":[{"pos":[0,348],"content":"The subset of `length` elements of the `inArray` parameter starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in the `outArray` parameter starting at position `offsetOut`. The return value indicates the number of converted elements in `outArray`. The subset of `outArray` consists of base-64 digits.","nodes":[{"content":"The subset of <ph id=\"ph1\">`length`</ph> elements of the <ph id=\"ph2\">`inArray`</ph> parameter starting at position <ph id=\"ph3\">`offsetIn`</ph>, are taken as a numeric value and converted to a subset of elements in the <ph id=\"ph4\">`outArray`</ph> parameter starting at position <ph id=\"ph5\">`offsetOut`</ph>.","pos":[0,220],"source":"The subset of `length` elements of the `inArray` parameter starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in the `outArray` parameter starting at position `offsetOut`."},{"content":"The return value indicates the number of converted elements in <ph id=\"ph1\">`outArray`</ph>.","pos":[221,295],"source":" The return value indicates the number of converted elements in `outArray`."},{"content":"The subset of <ph id=\"ph1\">`outArray`</ph> consists of base-64 digits.","pos":[296,348],"source":" The subset of `outArray` consists of base-64 digits."}]},{"pos":[355,592],"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character \"=\" is used for trailing padding.","nodes":[{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character \"=\" is used for trailing padding.","pos":[0,237],"nodes":[{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".","pos":[0,179]},{"content":"The valueless character \"=\" is used for trailing padding.","pos":[180,237]}]}]},{"pos":[599,736],"content":"The `offset` and `length` parameters are 32-bit signed numbers. The `offsetIn` and `offsetOut` parameters are zero-based array positions.","nodes":[{"content":"The <ph id=\"ph1\">`offset`</ph> and <ph id=\"ph2\">`length`</ph> parameters are 32-bit signed numbers.","pos":[0,63],"source":"The `offset` and `length` parameters are 32-bit signed numbers."},{"content":"The <ph id=\"ph1\">`offsetIn`</ph> and <ph id=\"ph2\">`offsetOut`</ph> parameters are zero-based array positions.","pos":[64,137],"source":" The `offsetIn` and `offsetOut` parameters are zero-based array positions."}]},{"pos":[744,1048],"content":"[!IMPORTANT]\n The <xref:System.Convert.ToBase64CharArray%2A> method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Convert.ToBase64CharArray%2A> method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","pos":[13,302],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.","pos":[1,139],"source":" The <xref:System.Convert.ToBase64CharArray%2A> method is designed to process a single byte array that contains all the data to be encoded."},{"content":"To create a base-64 character array from a byte stream, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName&gt;</ph> class.","pos":[140,289],"source":" To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class."}]}]},{"pos":[1055,1501],"content":"If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/).","nodes":[{"content":"If the <ph id=\"ph1\">`options`</ph> parameter is set to <ph id=\"ph2\">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.","pos":[0,200],"source":"If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters."},{"content":"A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).","pos":[201,308]},{"content":"For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at <bpt id=\"p1\">[</bpt>http://www.rfc-editor.org/<ept id=\"p1\">](http://www.rfc-editor.org/)</ept>.","pos":[309,446],"source":" For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/)."}]}],"pos":[78828,80361],"yaml":true,"extradata":"MT"},{"content":"An input array of 8-bit unsigned integers.","nodes":[{"pos":[0,42],"content":"An input array of 8-bit unsigned integers.","nodes":[{"content":"An input array of 8-bit unsigned integers.","pos":[0,42]}]}],"pos":[82180,82223],"yaml":true},{"content":"A position within <code>inArray</code>.","nodes":[{"pos":[0,39],"content":"A position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A position within <code>inArray</code>."}],"pos":[82286,82326],"yaml":true},{"content":"The number of elements of <code>inArray</code> to convert.","nodes":[{"pos":[0,58],"content":"The number of elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept> to convert.","source":"The number of elements of <code>inArray</code> to convert."}],"pos":[82387,82446],"yaml":true},{"content":"An output array of Unicode characters.","nodes":[{"pos":[0,38],"content":"An output array of Unicode characters.","nodes":[{"content":"An output array of Unicode characters.","pos":[0,38]}]}],"pos":[82510,82549],"yaml":true},{"content":"A position within <code>outArray</code>.","nodes":[{"pos":[0,40],"content":"A position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">outArray</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A position within <code>outArray</code>."}],"pos":[82613,82654],"yaml":true},{"content":"<xref href=\"System.Base64FormattingOptions.InsertLineBreaks\"></xref> to insert a line break every 76 characters, or <xref href=\"System.Base64FormattingOptions.None\"></xref> to not insert line breaks.","nodes":[{"pos":[0,199],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Base64FormattingOptions.InsertLineBreaks\"&gt;&lt;/xref&gt;</ph> to insert a line break every 76 characters, or <ph id=\"ph2\">&lt;xref href=\"System.Base64FormattingOptions.None\"&gt;&lt;/xref&gt;</ph> to not insert line breaks.","source":"<xref href=\"System.Base64FormattingOptions.InsertLineBreaks\"></xref> to insert a line break every 76 characters, or <xref href=\"System.Base64FormattingOptions.None\"></xref> to not insert line breaks."}],"pos":[82734,82934],"yaml":true},{"content":"A 32-bit signed integer containing the number of bytes in <code>outArray</code>.","nodes":[{"pos":[0,80],"content":"A 32-bit signed integer containing the number of bytes in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">outArray</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit signed integer containing the number of bytes in <code>outArray</code>."}],"pos":[82990,83071],"yaml":true},{"content":"<code>inArray</code> or <code>outArray</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;inArray&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;outArray&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>inArray</code> or <code>outArray</code> is `null`."}],"pos":[83233,83290],"yaml":true},{"content":"<code>offsetIn</code>, <code>offsetOut</code>, or <code>length</code> is negative.  \n  \n -or-  \n  \n <code>offsetIn</code> plus <code>length</code> is greater than the length of <code>inArray</code>.  \n  \n -or-  \n  \n <code>offsetOut</code> plus the number of elements to return is greater than the length of <code>outArray</code>.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">&lt;code&gt;offsetIn&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;offsetOut&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;length&lt;/code&gt;</ph> is negative.","source":"<code>offsetIn</code>, <code>offsetOut</code>, or <code>length</code> is negative."},{"pos":[89,93],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[100,198],"content":"<ph id=\"ph1\">&lt;code&gt;offsetIn&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph3\">&lt;code&gt;inArray&lt;/code&gt;</ph>.","source":"<code>offsetIn</code> plus <code>length</code> is greater than the length of <code>inArray</code>."},{"pos":[205,209],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[216,329],"content":"<ph id=\"ph1\">&lt;code&gt;offsetOut&lt;/code&gt;</ph> plus the number of elements to return is greater than the length of <ph id=\"ph2\">&lt;code&gt;outArray&lt;/code&gt;</ph>.","source":"<code>offsetOut</code> plus the number of elements to return is greater than the length of <code>outArray</code>."}],"pos":[83404,83744],"yaml":true},{"content":"<code>options</code> is not a valid <xref href=\"System.Base64FormattingOptions\"></xref> value.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Base64FormattingOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> is not a valid <xref href=\"System.Base64FormattingOptions\"></xref> value."}],"pos":[83838,83933],"yaml":true},{"content":"Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.","nodes":[{"pos":[0,299],"content":"Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.","nodes":[{"content":"Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.","pos":[0,299],"nodes":[{"content":"Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.","pos":[0,133]},{"content":"Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.","pos":[134,299]}]}]}],"pos":[85440,85740],"yaml":true},{"content":"The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64.  \n  \n The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character \"=\" is used for trailing padding.  \n  \n The `offset` and `length` parameters are 32-bit signed numbers. The `offset` parameter is zero-based.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  \n  \n If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/).","nodes":[{"pos":[0,121],"content":"The elements of the <ph id=\"ph1\">`inArray`</ph> parameter are taken as a numeric value and converted to a string representation in base 64.","source":"The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64."},{"pos":[128,365],"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character \"=\" is used for trailing padding.","nodes":[{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character \"=\" is used for trailing padding.","pos":[0,237],"nodes":[{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".","pos":[0,179]},{"content":"The valueless character \"=\" is used for trailing padding.","pos":[180,237]}]}]},{"pos":[372,473],"content":"The `offset` and `length` parameters are 32-bit signed numbers. The `offset` parameter is zero-based.","nodes":[{"content":"The <ph id=\"ph1\">`offset`</ph> and <ph id=\"ph2\">`length`</ph> parameters are 32-bit signed numbers.","pos":[0,63],"source":"The `offset` and `length` parameters are 32-bit signed numbers."},{"content":"The <ph id=\"ph1\">`offset`</ph> parameter is zero-based.","pos":[64,101],"source":" The `offset` parameter is zero-based."}]},{"pos":[481,756],"content":"[!IMPORTANT]\n The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","pos":[13,273],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.","pos":[1,136],"source":" The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded."},{"content":"To encode data from a stream, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName&gt;</ph> class.","pos":[137,260],"source":" To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class."}]}]},{"pos":[763,1209],"content":"If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/).","nodes":[{"content":"If the <ph id=\"ph1\">`options`</ph> parameter is set to <ph id=\"ph2\">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.","pos":[0,200],"source":"If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters."},{"content":"A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).","pos":[201,308]},{"content":"For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at <bpt id=\"p1\">[</bpt>http://www.rfc-editor.org/<ept id=\"p1\">](http://www.rfc-editor.org/)</ept>.","pos":[309,446],"source":" For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/)."}]}],"pos":[85751,86992],"yaml":true,"extradata":"MT"},{"content":"An array of 8-bit unsigned integers.","nodes":[{"pos":[0,36],"content":"An array of 8-bit unsigned integers.","nodes":[{"content":"An array of 8-bit unsigned integers.","pos":[0,36]}]}],"pos":[88753,88790],"yaml":true},{"content":"An offset in <code>inArray</code>.","nodes":[{"pos":[0,34],"content":"An offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An offset in <code>inArray</code>."}],"pos":[88851,88886],"yaml":true},{"content":"The number of elements of <code>inArray</code> to convert.","nodes":[{"pos":[0,58],"content":"The number of elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept> to convert.","source":"The number of elements of <code>inArray</code> to convert."}],"pos":[88947,89006],"yaml":true},{"content":"<xref href=\"System.Base64FormattingOptions.InsertLineBreaks\"></xref> to insert a line break every 76 characters, or <xref href=\"System.Base64FormattingOptions.None\"></xref> to not insert line breaks.","nodes":[{"pos":[0,199],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Base64FormattingOptions.InsertLineBreaks\"&gt;&lt;/xref&gt;</ph> to insert a line break every 76 characters, or <ph id=\"ph2\">&lt;xref href=\"System.Base64FormattingOptions.None\"&gt;&lt;/xref&gt;</ph> to not insert line breaks.","source":"<xref href=\"System.Base64FormattingOptions.InsertLineBreaks\"></xref> to insert a line break every 76 characters, or <xref href=\"System.Base64FormattingOptions.None\"></xref> to not insert line breaks."}],"pos":[89086,89286],"yaml":true},{"content":"The string representation in base 64 of <code>length</code> elements of <code>inArray</code>, starting at position <code>offset</code>.","nodes":[{"pos":[0,135],"content":"The string representation in base 64 of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> elements of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">inArray</ph><ept id=\"p2\">&lt;/code&gt;</ept>, starting at position <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">offset</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The string representation in base 64 of <code>length</code> elements of <code>inArray</code>, starting at position <code>offset</code>."}],"pos":[89343,89479],"yaml":true},{"content":"<code>inArray</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;inArray&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>inArray</code> is `null`."}],"pos":[89638,89670],"yaml":true},{"content":"<code>offset</code> or <code>length</code> is negative.  \n  \n -or-  \n  \n <code>offset</code> plus <code>length</code> is greater than the length of <code>inArray</code>.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>length</code> is negative."},{"pos":[62,66],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[73,169],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph3\">&lt;code&gt;inArray&lt;/code&gt;</ph>.","source":"<code>offset</code> plus <code>length</code> is greater than the length of <code>inArray</code>."}],"pos":[89784,89960],"yaml":true},{"content":"<code>options</code> is not a valid <xref href=\"System.Base64FormattingOptions\"></xref> value.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Base64FormattingOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> is not a valid <xref href=\"System.Base64FormattingOptions\"></xref> value."}],"pos":[90054,90149],"yaml":true},{"content":"Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.","nodes":[{"pos":[0,248],"content":"Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.","nodes":[{"content":"Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.","pos":[0,248],"nodes":[{"content":"Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.","pos":[0,133]},{"content":"Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.","pos":[134,248]}]}]}],"pos":[91488,91737],"yaml":true},{"content":"The elements of `inArray` are taken as a numeric value and converted to a string representation in base 64.  \n  \n The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.  \n  \n The `offset` and `length` parameters are 32-bit signed numbers. The `offset` parameter is zero-based.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","nodes":[{"pos":[0,107],"content":"The elements of <ph id=\"ph1\">`inArray`</ph> are taken as a numeric value and converted to a string representation in base 64.","source":"The elements of `inArray` are taken as a numeric value and converted to a string representation in base 64."},{"pos":[114,353],"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.","nodes":[{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.","pos":[0,239],"nodes":[{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".","pos":[0,179]},{"content":"The valueless character, \"=\", is used for trailing padding.","pos":[180,239]}]}]},{"pos":[360,461],"content":"The `offset` and `length` parameters are 32-bit signed numbers. The `offset` parameter is zero-based.","nodes":[{"content":"The <ph id=\"ph1\">`offset`</ph> and <ph id=\"ph2\">`length`</ph> parameters are 32-bit signed numbers.","pos":[0,63],"source":"The `offset` and `length` parameters are 32-bit signed numbers."},{"content":"The <ph id=\"ph1\">`offset`</ph> parameter is zero-based.","pos":[64,101],"source":" The `offset` parameter is zero-based."}]},{"pos":[469,744],"content":"[!IMPORTANT]\n The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","pos":[13,273],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.","pos":[1,136],"source":" The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded."},{"content":"To encode data from a stream, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName&gt;</ph> class.","pos":[137,260],"source":" To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class."}]}]}],"pos":[91748,92520],"yaml":true,"extradata":"MT"},{"content":"An array of 8-bit unsigned integers.","nodes":[{"pos":[0,36],"content":"An array of 8-bit unsigned integers.","nodes":[{"content":"An array of 8-bit unsigned integers.","pos":[0,36]}]}],"pos":[92700,92737],"yaml":true},{"content":"An offset in <code>inArray</code>.","nodes":[{"pos":[0,34],"content":"An offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An offset in <code>inArray</code>."}],"pos":[92798,92833],"yaml":true},{"content":"The number of elements of <code>inArray</code> to convert.","nodes":[{"pos":[0,58],"content":"The number of elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept> to convert.","source":"The number of elements of <code>inArray</code> to convert."}],"pos":[92894,92953],"yaml":true},{"content":"The string representation in base 64 of <code>length</code> elements of <code>inArray</code>, starting at position <code>offset</code>.","nodes":[{"pos":[0,135],"content":"The string representation in base 64 of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> elements of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">inArray</ph><ept id=\"p2\">&lt;/code&gt;</ept>, starting at position <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">offset</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The string representation in base 64 of <code>length</code> elements of <code>inArray</code>, starting at position <code>offset</code>."}],"pos":[93010,93146],"yaml":true},{"content":"<code>inArray</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;inArray&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>inArray</code> is `null`."}],"pos":[93305,93337],"yaml":true},{"content":"<code>offset</code> or <code>length</code> is negative.  \n  \n -or-  \n  \n <code>offset</code> plus <code>length</code> is greater than the length of <code>inArray</code>.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>length</code> is negative."},{"pos":[62,66],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[73,169],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph3\">&lt;code&gt;inArray&lt;/code&gt;</ph>.","source":"<code>offset</code> plus <code>length</code> is greater than the length of <code>inArray</code>."}],"pos":[93451,93627],"yaml":true},{"content":"Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.","nodes":[{"pos":[0,121],"content":"Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.","nodes":[{"content":"Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.","pos":[0,121]}]}],"pos":[95115,95237],"yaml":true},{"content":"The elements of `inArray` are taken as a numeric value and converted to a string representation that is encoded with base-64 digits.  \n  \n The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  \n  \n Ordinarily, the <xref:System.Convert.ToBase64String%2A> method is not used to round-trip a  UUEncoded (base-64 encoded) string.  That is, if you decode a string by calling the <xref:System.Convert.FromBase64String%2A> method, then encode the returned byte array by calling the <xref:System.Convert.ToBase64String%2A> method, the resulting string will not necessarily be identical to the original string. The string will round-trip only if the original string is a valid base-64 encoded string.","nodes":[{"pos":[0,132],"content":"The elements of <ph id=\"ph1\">`inArray`</ph> are taken as a numeric value and converted to a string representation that is encoded with base-64 digits.","source":"The elements of `inArray` are taken as a numeric value and converted to a string representation that is encoded with base-64 digits."},{"pos":[139,378],"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.","nodes":[{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.","pos":[0,239],"nodes":[{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".","pos":[0,179]},{"content":"The valueless character, \"=\", is used for trailing padding.","pos":[180,239]}]}]},{"pos":[386,661],"content":"[!IMPORTANT]\n The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","pos":[13,273],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.","pos":[1,136],"source":" The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded."},{"content":"To encode data from a stream, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName&gt;</ph> class.","pos":[137,260],"source":" To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class."}]}]},{"pos":[668,1161],"content":"Ordinarily, the <xref:System.Convert.ToBase64String%2A> method is not used to round-trip a  UUEncoded (base-64 encoded) string.  That is, if you decode a string by calling the <xref:System.Convert.FromBase64String%2A> method, then encode the returned byte array by calling the <xref:System.Convert.ToBase64String%2A> method, the resulting string will not necessarily be identical to the original string. The string will round-trip only if the original string is a valid base-64 encoded string.","nodes":[{"content":"Ordinarily, the <xref:System.Convert.ToBase64String%2A> method is not used to round-trip a  UUEncoded (base-64 encoded) string.  That is, if you decode a string by calling the <xref:System.Convert.FromBase64String%2A> method, then encode the returned byte array by calling the <xref:System.Convert.ToBase64String%2A> method, the resulting string will not necessarily be identical to the original string. The string will round-trip only if the original string is a valid base-64 encoded string.","pos":[0,493],"nodes":[{"content":"Ordinarily, the <ph id=\"ph1\">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is not used to round-trip a  UUEncoded (base-64 encoded) string.","pos":[0,127],"source":"Ordinarily, the <xref:System.Convert.ToBase64String%2A> method is not used to round-trip a  UUEncoded (base-64 encoded) string."},{"content":"That is, if you decode a string by calling the <ph id=\"ph1\">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph> method, then encode the returned byte array by calling the <ph id=\"ph2\">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method, the resulting string will not necessarily be identical to the original string.","pos":[129,403],"source":"  That is, if you decode a string by calling the <xref:System.Convert.FromBase64String%2A> method, then encode the returned byte array by calling the <xref:System.Convert.ToBase64String%2A> method, the resulting string will not necessarily be identical to the original string."},{"content":"The string will round-trip only if the original string is a valid base-64 encoded string.","pos":[404,493]}]}]}],"pos":[95248,96437],"yaml":true,"extradata":"MT"},{"content":"An array of 8-bit unsigned integers.","nodes":[{"pos":[0,36],"content":"An array of 8-bit unsigned integers.","nodes":[{"content":"An array of 8-bit unsigned integers.","pos":[0,36]}]}],"pos":[98477,98514],"yaml":true},{"content":"The string representation, in base 64, of the contents of <code>inArray</code>.","nodes":[{"pos":[0,79],"content":"The string representation, in base 64, of the contents of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation, in base 64, of the contents of <code>inArray</code>."}],"pos":[98571,98651],"yaml":true},{"content":"<code>inArray</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;inArray&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>inArray</code> is `null`."}],"pos":[98810,98842],"yaml":true},{"content":"Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value.","nodes":[{"pos":[0,194],"content":"Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value.","nodes":[{"content":"Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value.","pos":[0,194],"nodes":[{"content":"Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.","pos":[0,121]},{"content":"A parameter specifies whether to insert line breaks in the return value.","pos":[122,194]}]}]}],"pos":[100498,100693],"yaml":true},{"content":"The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64.  \n  \n The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character \"=\" is used for trailing padding.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  \n  \n If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). Because line breaks are considered whitespace characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array. The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window. For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/).","nodes":[{"pos":[0,121],"content":"The elements of the <ph id=\"ph1\">`inArray`</ph> parameter are taken as a numeric value and converted to a string representation in base 64.","source":"The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64."},{"pos":[128,365],"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character \"=\" is used for trailing padding.","nodes":[{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character \"=\" is used for trailing padding.","pos":[0,237],"nodes":[{"content":"The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".","pos":[0,179]},{"content":"The valueless character \"=\" is used for trailing padding.","pos":[180,237]}]}]},{"pos":[373,648],"content":"[!IMPORTANT]\n The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.","pos":[13,273],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.","pos":[1,136],"source":" The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded."},{"content":"To encode data from a stream, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName&gt;</ph> class.","pos":[137,260],"source":" To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class."}]}]},{"pos":[655,1385],"content":"If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). Because line breaks are considered whitespace characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array. The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window. For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/).","nodes":[{"content":"If the <ph id=\"ph1\">`options`</ph> parameter is set to <ph id=\"ph2\">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.","pos":[0,200],"source":"If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters."},{"content":"A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).","pos":[201,308]},{"content":"Because line breaks are considered whitespace characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array.","pos":[309,468]},{"content":"The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window.","pos":[469,592]},{"content":"For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at <bpt id=\"p1\">[</bpt>http://www.rfc-editor.org/<ept id=\"p1\">](http://www.rfc-editor.org/)</ept>.","pos":[593,730],"source":" For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/)."}]}],"pos":[100704,102119],"yaml":true,"extradata":"MT"},{"content":"An array of 8-bit unsigned integers.","nodes":[{"pos":[0,36],"content":"An array of 8-bit unsigned integers.","nodes":[{"content":"An array of 8-bit unsigned integers.","pos":[0,36]}]}],"pos":[103252,103289],"yaml":true},{"content":"<xref href=\"System.Base64FormattingOptions.InsertLineBreaks\"></xref> to insert a line break every 76 characters, or <xref href=\"System.Base64FormattingOptions.None\"></xref> to not insert line breaks.","nodes":[{"pos":[0,199],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Base64FormattingOptions.InsertLineBreaks\"&gt;&lt;/xref&gt;</ph> to insert a line break every 76 characters, or <ph id=\"ph2\">&lt;xref href=\"System.Base64FormattingOptions.None\"&gt;&lt;/xref&gt;</ph> to not insert line breaks.","source":"<xref href=\"System.Base64FormattingOptions.InsertLineBreaks\"></xref> to insert a line break every 76 characters, or <xref href=\"System.Base64FormattingOptions.None\"></xref> to not insert line breaks."}],"pos":[103369,103569],"yaml":true},{"content":"The string representation in base 64 of the elements in <code>inArray</code>.","nodes":[{"pos":[0,77],"content":"The string representation in base 64 of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inArray</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation in base 64 of the elements in <code>inArray</code>."}],"pos":[103626,103704],"yaml":true},{"content":"<code>inArray</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;inArray&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>inArray</code> is `null`."}],"pos":[103863,103895],"yaml":true},{"content":"<code>options</code> is not a valid <xref href=\"System.Base64FormattingOptions\"></xref> value.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Base64FormattingOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> is not a valid <xref href=\"System.Base64FormattingOptions\"></xref> value."}],"pos":[103989,104084],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.","nodes":[{"pos":[0,88],"content":"Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.","pos":[0,88]}]}],"pos":[105267,105356],"yaml":true},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[106098,106135],"yaml":true},{"content":"`true` if <code>value</code> is not zero; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not zero; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> is not zero; otherwise, `false`."}],"pos":[106193,106257],"yaml":true},{"content":"Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.","nodes":[{"pos":[0,151],"content":"Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.","pos":[0,151]}]}],"pos":[107943,108095],"yaml":true},{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,257],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,257],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Boolean.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,157],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[158,257],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[108106,108364],"yaml":true,"extradata":"MT"},{"content":"A string that contains the value of either <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.","nodes":[{"pos":[0,141],"content":"A string that contains the value of either <ph id=\"ph1\">&lt;xref href=\"System.Boolean.TrueString\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Boolean.FalseString\"&gt;&lt;/xref&gt;</ph>.","source":"A string that contains the value of either <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>."}],"pos":[108535,108677],"yaml":true},{"content":"An object that supplies culture-specific formatting information. This parameter is ignored.","nodes":[{"pos":[0,91],"content":"An object that supplies culture-specific formatting information. This parameter is ignored.","nodes":[{"content":"An object that supplies culture-specific formatting information. This parameter is ignored.","pos":[0,91],"nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]},{"content":"This parameter is ignored.","pos":[65,91]}]}]}],"pos":[108750,108842],"yaml":true},{"content":"`true` if <code>value</code> equals <xref href=\"System.Boolean.TrueString\"></xref>, or `false` if <code>value</code> equals <xref href=\"System.Boolean.FalseString\"></xref> or `null`.","nodes":[{"pos":[0,182],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> equals <ph id=\"ph3\">&lt;xref href=\"System.Boolean.TrueString\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">`false`</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph5\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> equals <ph id=\"ph6\">&lt;xref href=\"System.Boolean.FalseString\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph7\">`null`</ph>.","source":"`true` if <code>value</code> equals <xref href=\"System.Boolean.TrueString\"></xref>, or `false` if <code>value</code> equals <xref href=\"System.Boolean.FalseString\"></xref> or `null`."}],"pos":[108900,109085],"yaml":true},{"content":"<code>value</code> is not equal to <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.","nodes":[{"pos":[0,133],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not equal to <ph id=\"ph2\">&lt;xref href=\"System.Boolean.TrueString\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Boolean.FalseString\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is not equal to <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>."}],"pos":[109227,109361],"yaml":true},{"content":"Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.","nodes":[{"pos":[0,135],"content":"Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.","pos":[0,135]}]}],"pos":[110939,111075],"yaml":true},{"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore the `provider` parameter; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,284],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore the `provider` parameter; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"The base types ignore the <ph id=\"ph1\">`provider`</ph> parameter; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[110,284],"source":" The base types ignore the `provider` parameter; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}]}],"pos":[111086,111373],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[112578,112671],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[112744,112809],"yaml":true},{"content":"`true` or `false`, which reflects the value returned by invoking the <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"></xref> method for the underlying type of <code>value</code>. If <code>value</code> is `null`, the method returns `false`.","nodes":[{"pos":[0,258],"content":"`true` or `false`, which reflects the value returned by invoking the <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"></xref> method for the underlying type of <code>value</code>. If <code>value</code> is `null`, the method returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph>, which reflects the value returned by invoking the <ph id=\"ph3\">&lt;xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph> method for the underlying type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,197],"source":"`true` or `false`, which reflects the value returned by invoking the <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"></xref> method for the underlying type of <code>value</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the method returns <ph id=\"ph3\">`false`</ph>.","pos":[198,258],"source":" If <code>value</code> is `null`, the method returns `false`."}]}],"pos":[112867,113128],"yaml":true},{"content":"<code>value</code> is a string that does not equal <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.","nodes":[{"pos":[0,149],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is a string that does not equal <ph id=\"ph2\">&lt;xref href=\"System.Boolean.TrueString\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Boolean.FalseString\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is a string that does not equal <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>."}],"pos":[113270,113420],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion of <code>value</code> to a <xref href=\"System.Boolean\"></xref> is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,206],"content":"The conversion of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to a <ph id=\"ph2\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> is not supported.","source":"The conversion of <code>value</code> to a <xref href=\"System.Boolean\"></xref> is not supported."}],"pos":[113520,113737],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.","nodes":[{"pos":[0,91],"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.","pos":[0,91]}]}],"pos":[115195,115287],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[116037,116077],"yaml":true},{"content":"`true` if <code>value</code> is not zero; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not zero; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> is not zero; otherwise, `false`."}],"pos":[116135,116199],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.","nodes":[{"pos":[0,91],"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.","pos":[0,91]}]}],"pos":[117765,117857],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[118599,118639],"yaml":true},{"content":"`true` if <code>value</code> is not zero; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not zero; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> is not zero; otherwise, `false`."}],"pos":[118697,118761],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.","nodes":[{"pos":[0,91],"content":"Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.","pos":[0,91]}]}],"pos":[120327,120419],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[121164,121204],"yaml":true},{"content":"`true` if <code>value</code> is not zero; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not zero; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> is not zero; otherwise, `false`."}],"pos":[121262,121326],"yaml":true},{"content":"Converts the specified string representation of a logical value to its Boolean equivalent.","nodes":[{"pos":[0,90],"content":"Converts the specified string representation of a logical value to its Boolean equivalent.","nodes":[{"content":"Converts the specified string representation of a logical value to its Boolean equivalent.","pos":[0,90]}]}],"pos":[122892,122983],"yaml":true},{"content":"For a successful conversion to occur, the `value` parameter must equal either <xref:System.Boolean.TrueString?displayProperty=fullName>, a constant whose value is `True`, <xref:System.Boolean.FalseString?displayProperty=fullName>, a constant whose value is `False`, or it must be `null`. In comparing `value` with <xref:System.Boolean?displayProperty=fullName> and <xref:System.Boolean?displayProperty=fullName>, the method ignores case as well as leading and trailing white space.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,481],"content":"For a successful conversion to occur, the `value` parameter must equal either <xref:System.Boolean.TrueString?displayProperty=fullName>, a constant whose value is `True`, <xref:System.Boolean.FalseString?displayProperty=fullName>, a constant whose value is `False`, or it must be `null`. In comparing `value` with <xref:System.Boolean?displayProperty=fullName> and <xref:System.Boolean?displayProperty=fullName>, the method ignores case as well as leading and trailing white space.","nodes":[{"content":"For a successful conversion to occur, the <ph id=\"ph1\">`value`</ph> parameter must equal either <ph id=\"ph2\">&lt;xref:System.Boolean.TrueString?displayProperty=fullName&gt;</ph>, a constant whose value is <ph id=\"ph3\">`True`</ph>, <ph id=\"ph4\">&lt;xref:System.Boolean.FalseString?displayProperty=fullName&gt;</ph>, a constant whose value is <ph id=\"ph5\">`False`</ph>, or it must be <ph id=\"ph6\">`null`</ph>.","pos":[0,287],"source":"For a successful conversion to occur, the `value` parameter must equal either <xref:System.Boolean.TrueString?displayProperty=fullName>, a constant whose value is `True`, <xref:System.Boolean.FalseString?displayProperty=fullName>, a constant whose value is `False`, or it must be `null`."},{"content":"In comparing <ph id=\"ph1\">`value`</ph> with <ph id=\"ph2\">&lt;xref:System.Boolean?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Boolean?displayProperty=fullName&gt;</ph>, the method ignores case as well as leading and trailing white space.","pos":[288,481],"source":" In comparing `value` with <xref:System.Boolean?displayProperty=fullName> and <xref:System.Boolean?displayProperty=fullName>, the method ignores case as well as leading and trailing white space."}]},{"pos":[488,745],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,257],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Boolean.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,157],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[158,257],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[122994,123744],"yaml":true,"extradata":"MT"},{"content":"A string that contains the value of either <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.","nodes":[{"pos":[0,141],"content":"A string that contains the value of either <ph id=\"ph1\">&lt;xref href=\"System.Boolean.TrueString\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Boolean.FalseString\"&gt;&lt;/xref&gt;</ph>.","source":"A string that contains the value of either <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>."}],"pos":[124486,124628],"yaml":true},{"content":"`true` if <code>value</code> equals <xref href=\"System.Boolean.TrueString\"></xref>, or `false` if <code>value</code> equals <xref href=\"System.Boolean.FalseString\"></xref> or `null`.","nodes":[{"pos":[0,182],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> equals <ph id=\"ph3\">&lt;xref href=\"System.Boolean.TrueString\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">`false`</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph5\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> equals <ph id=\"ph6\">&lt;xref href=\"System.Boolean.FalseString\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph7\">`null`</ph>.","source":"`true` if <code>value</code> equals <xref href=\"System.Boolean.TrueString\"></xref>, or `false` if <code>value</code> equals <xref href=\"System.Boolean.FalseString\"></xref> or `null`."}],"pos":[124686,124871],"yaml":true},{"content":"<code>value</code> is not equal to <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.","nodes":[{"pos":[0,133],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not equal to <ph id=\"ph2\">&lt;xref href=\"System.Boolean.TrueString\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Boolean.FalseString\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is not equal to <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>."}],"pos":[125013,125147],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.","nodes":[{"pos":[0,106],"content":"Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.","pos":[0,106]}]}],"pos":[126605,126712],"yaml":true},{"content":"The single-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The single-precision floating-point number to convert.","nodes":[{"content":"The single-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[127411,127466],"yaml":true},{"content":"`true` if <code>value</code> is not zero; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not zero; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> is not zero; otherwise, `false`."}],"pos":[127524,127588],"yaml":true},{"content":"Converts the value of a specified object to an equivalent Boolean value.","nodes":[{"pos":[0,72],"content":"Converts the value of a specified object to an equivalent Boolean value.","nodes":[{"content":"Converts the value of a specified object to an equivalent Boolean value.","pos":[0,72]}]}],"pos":[129101,129174],"yaml":true},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[129866,129959],"yaml":true},{"content":"`true` or `false`, which reflects the value returned by invoking the <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"></xref> method for the underlying type of <code>value</code>. If <code>value</code> is `null`, the method returns `false`.","nodes":[{"pos":[0,258],"content":"`true` or `false`, which reflects the value returned by invoking the <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"></xref> method for the underlying type of <code>value</code>. If <code>value</code> is `null`, the method returns `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph>, which reflects the value returned by invoking the <ph id=\"ph3\">&lt;xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph> method for the underlying type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,197],"source":"`true` or `false`, which reflects the value returned by invoking the <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"></xref> method for the underlying type of <code>value</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the method returns <ph id=\"ph3\">`false`</ph>.","pos":[198,258],"source":" If <code>value</code> is `null`, the method returns `false`."}]}],"pos":[130017,130278],"yaml":true},{"content":"<code>value</code> is a string that does not equal <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.","nodes":[{"pos":[0,149],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is a string that does not equal <ph id=\"ph2\">&lt;xref href=\"System.Boolean.TrueString\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Boolean.FalseString\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is a string that does not equal <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>."}],"pos":[130420,130570],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion of <code>value</code> to a <xref href=\"System.Boolean\"></xref> is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,206],"content":"The conversion of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to a <ph id=\"ph2\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> is not supported.","source":"The conversion of <code>value</code> to a <xref href=\"System.Boolean\"></xref> is not supported."}],"pos":[130670,130887],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.","nodes":[{"pos":[0,106],"content":"Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.","pos":[0,106]}]}],"pos":[132345,132452],"yaml":true},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[133192,133247],"yaml":true},{"content":"`true` if <code>value</code> is not zero; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not zero; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> is not zero; otherwise, `false`."}],"pos":[133305,133369],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.","nodes":[{"pos":[0,89],"content":"Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.","pos":[0,89]}]}],"pos":[134876,134966],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[135661,135699],"yaml":true},{"content":"`true` if <code>value</code> is not zero; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not zero; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> is not zero; otherwise, `false`."}],"pos":[135757,135821],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.","nodes":[{"pos":[0,89],"content":"Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.","pos":[0,89]}]}],"pos":[137328,137418],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[138115,138153],"yaml":true},{"content":"`true` if <code>value</code> is not zero; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not zero; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> is not zero; otherwise, `false`."}],"pos":[138211,138275],"yaml":true},{"content":"Converts the value of the specified decimal number to an equivalent Boolean value.","nodes":[{"pos":[0,82],"content":"Converts the value of the specified decimal number to an equivalent Boolean value.","nodes":[{"content":"Converts the value of the specified decimal number to an equivalent Boolean value.","pos":[0,82]}]}],"pos":[139794,139877],"yaml":true},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[140580,140603],"yaml":true},{"content":"`true` if <code>value</code> is not zero; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not zero; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> is not zero; otherwise, `false`."}],"pos":[140661,140725],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[142250,142334],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[143124,143160],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[143218,143274],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[143426,143460],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[144562,144646],"yaml":true},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[144787,144821],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[144879,144935],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[145087,145121],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.","nodes":[{"pos":[0,90],"content":"Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.","pos":[0,90]}]}],"pos":[146223,146314],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[147014,147053],"yaml":true},{"content":"`true` if <code>value</code> is not zero; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not zero; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> is not zero; otherwise, `false`."}],"pos":[147111,147175],"yaml":true},{"content":"Returns the specified Boolean value; no actual conversion is performed.","nodes":[{"pos":[0,71],"content":"Returns the specified Boolean value; no actual conversion is performed.","nodes":[{"content":"Returns the specified Boolean value; no actual conversion is performed.","pos":[0,71]}]}],"pos":[148694,148766],"yaml":true},{"content":"The Boolean value to return.","nodes":[{"pos":[0,28],"content":"The Boolean value to return.","nodes":[{"content":"The Boolean value to return.","pos":[0,28]}]}],"pos":[148910,148939],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[148997,149039],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.","nodes":[{"pos":[0,89],"content":"Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.","pos":[0,89]}]}],"pos":[150546,150636],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[151332,151370],"yaml":true},{"content":"`true` if <code>value</code> is not zero; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not zero; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> is not zero; otherwise, `false`."}],"pos":[151428,151492],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,97],"content":"Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.","pos":[0,97]}]}],"pos":[152987,153085],"yaml":true},{"content":"Using the <xref:System.Convert.ToByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.Byte.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,271],"content":"Using the <xref:System.Convert.ToByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.Byte.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Convert.ToByte%28System.String%29&gt;</ph> method is equivalent to passing <ph id=\"ph2\">`value`</ph> to the <ph id=\"ph3\">&lt;xref:System.Byte.Parse%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[0,181],"source":"Using the <xref:System.Convert.ToByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.Byte.Parse%28System.String%29?displayProperty=fullName> method."},{"content":"<ph id=\"ph1\">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.","pos":[182,271],"source":"`value` is interpreted by using the formatting conventions of the current thread culture."}]},{"pos":[278,532],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,254],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Byte.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,154],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[155,254],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[153096,153633],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[154474,154520],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,108],"content":"An 8-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[154575,154684],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[154823,154927],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.","nodes":[{"pos":[0,157],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>."}],"pos":[155021,155179],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,100],"content":"Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.","pos":[0,100]}]}],"pos":[156619,156720],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[157303,157343],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"An 8-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[157398,157466],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref>.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref>."}],"pos":[157609,157687],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,100],"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.","pos":[0,100]}]}],"pos":[159180,159281],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[159855,159895],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"An 8-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[159950,160018],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref>.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref>."}],"pos":[160161,160239],"yaml":true},{"content":"Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,107],"content":"Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.","pos":[0,107]}]}],"pos":[161792,161900],"yaml":true},{"content":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the <xref:System.Byte> data type supports unsigned values only, the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all eight bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed byte value that is out of the range of the <xref:System.Byte> data type is converted to a <xref:System.Byte> value without the method throwing an exception. The following example converts <xref:System.SByte.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x80 converts to 128.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#3)]\n [!code-vb[System.Convert.BaseConversion#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#3)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <xref:System.Byte> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value back to a <xref:System.Byte> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two's complement instead of unsigned binary representation), the method throws an exception.  \n  \n [!code-csharp[System.Convert.BaseConversion#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#4)]\n [!code-vb[System.Convert.BaseConversion#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#4)]","nodes":[{"pos":[0,100],"content":"If <ph id=\"ph1\">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id=\"ph2\">`value`</ph> parameter with \"0x\" or \"0X\".","source":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\"."},{"pos":[107,922],"content":"Because the <xref:System.Byte> data type supports unsigned values only, the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all eight bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed byte value that is out of the range of the <xref:System.Byte> data type is converted to a <xref:System.Byte> value without the method throwing an exception. The following example converts <xref:System.SByte.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x80 converts to 128.\"","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> data type supports unsigned values only, the <ph id=\"ph2\">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that <ph id=\"ph3\">`value`</ph> is expressed using unsigned binary representation.","pos":[0,217],"source":"Because the <xref:System.Byte> data type supports unsigned values only, the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation."},{"content":"In other words, all eight bits are used to represent the numeric value, and a sign bit is absent.","pos":[218,315]},{"content":"As a result, it is possible to write code in which a signed byte value that is out of the range of the <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> data type is converted to a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph> value without the method throwing an exception.","pos":[316,532],"source":" As a result, it is possible to write code in which a signed byte value that is out of the range of the <xref:System.Byte> data type is converted to a <xref:System.Byte> value without the method throwing an exception."},{"content":"The following example converts <ph id=\"ph1\">&lt;xref:System.SByte.MinValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id=\"ph2\">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph> method.","pos":[533,724],"source":" The following example converts <xref:System.SByte.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method."},{"content":"Instead of throwing an exception, the method displays the message, \"0x80 converts to 128.\"","pos":[725,815]}]},{"pos":[929,1224],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#3)]\n [!code-vb[System.Convert.BaseConversion#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#3)]"},{"pos":[1231,2146],"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <xref:System.Byte> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value back to a <xref:System.Byte> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two's complement instead of unsigned binary representation), the method throws an exception.","nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <xref:System.Byte> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value back to a <xref:System.Byte> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two's complement instead of unsigned binary representation), the method throws an exception.","pos":[0,915],"nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.","pos":[0,223]},{"content":"The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> value.","pos":[224,444],"source":" The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <xref:System.Byte> value."},{"content":"The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.","pos":[445,590]},{"content":"When the example converts the value back to a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> value, it checks whether the original value was a signed integer.","pos":[591,721],"source":" When the example converts the value back to a <xref:System.Byte> value, it checks whether the original value was a signed integer."},{"content":"If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two's complement instead of unsigned binary representation), the method throws an exception.","pos":[722,915]}]}]},{"pos":[2153,2448],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#4)]\n [!code-vb[System.Convert.BaseConversion#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#4)]"}],"pos":[161911,164378],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[164971,165017],"yaml":true},{"content":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.","nodes":[{"pos":[0,76],"content":"The base of the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which must be 2, 8, 10, or 16.","source":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16."}],"pos":[165080,165157],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,126],"content":"An 8-bit unsigned integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"An 8-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[165212,165339],"yaml":true},{"content":"<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;fromBase&lt;/code&gt;</ph> is not 2, 8, 10, or 16.","source":"<code>fromBase</code> is not 2, 8, 10, or 16."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,164],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."}],"pos":[165482,165653],"yaml":true},{"content":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>."}],"pos":[165767,165831],"yaml":true},{"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"pos":[0,333],"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id=\"ph2\">&lt;code&gt;fromBase&lt;/code&gt;</ph>.","pos":[0,113],"source":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>."},{"content":"The exception message indicates that there are no digits to convert if the first character in <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is invalid; otherwise, the message indicates that <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> contains invalid trailing characters.","pos":[114,333],"source":" The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters."}]}],"pos":[165921,166255],"yaml":true},{"content":"<code>value</code>, which represents a base 10 unsigned number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a base 10 unsigned number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a base 10 unsigned number, is prefixed with a negative sign."},{"pos":[104,108],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[115,272],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>."}],"pos":[166349,166632],"yaml":true},{"content":"Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,133],"content":"Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.","pos":[0,133]}]}],"pos":[168192,168326],"yaml":true},{"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,270],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"The base types ignore <ph id=\"ph1\">`provider`</ph>; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[110,270],"source":" The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}]}],"pos":[168337,168610],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[170022,170104],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[170177,170242],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,108],"content":"An 8-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[170297,170406],"yaml":true},{"content":"<code>value</code> is not in the property format for a <xref href=\"System.Byte\"></xref> value.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in the property format for a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>value</code> is not in the property format for a <xref href=\"System.Byte\"></xref> value."}],"pos":[170545,170640],"yaml":true},{"content":"<code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>.  \n  \n -or-  \n  \n Conversion from <code>value</code> to the <xref href=\"System.Byte\"></xref> type is not supported.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>."},{"pos":[86,90],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[97,194],"content":"Conversion from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> type is not supported.","source":"Conversion from <code>value</code> to the <xref href=\"System.Byte\"></xref> type is not supported."}],"pos":[170740,170945],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.","nodes":[{"pos":[0,157],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>."}],"pos":[171039,171197],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.","nodes":[{"pos":[0,154],"content":"Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.","pos":[0,154]}]}],"pos":[172757,172912],"yaml":true},{"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,360],"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[0,123],"source":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id=\"ph2\">`value`</ph>.","pos":[124,246],"source":" The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture is used.","pos":[247,360],"source":" If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used."}]},{"pos":[367,621],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,254],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Byte.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,154],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[155,254],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[172923,173549],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[174465,174511],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[174584,174649],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,108],"content":"An 8-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[174704,174813],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[174952,175056],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.","nodes":[{"pos":[0,157],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>."}],"pos":[175150,175308],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,115],"content":"Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.","pos":[0,115]}]}],"pos":[176748,176864],"yaml":true},{"content":"A single-precision floating-point number.","nodes":[{"pos":[0,41],"content":"A single-precision floating-point number.","nodes":[{"content":"A single-precision floating-point number.","pos":[0,41]}]}],"pos":[177577,177619],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,214],"content":"<code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 8-bit unsigned integer.","pos":[0,66],"source":"<code>value</code>, rounded to the nearest 8-bit unsigned integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[67,214],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[177674,177889],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref> or less than <xref href=\"System.Byte.MinValue\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref> or less than <xref href=\"System.Byte.MinValue\"></xref>."}],"pos":[178032,178165],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,100],"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.","pos":[0,100]}]}],"pos":[179605,179706],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[180290,180330],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"An 8-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[180385,180453],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref>.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref>."}],"pos":[180596,180674],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,97],"content":"Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.","pos":[0,97]}]}],"pos":[182161,182259],"yaml":true},{"content":"The 8-bit signed integer to be converted.","nodes":[{"pos":[0,41],"content":"The 8-bit signed integer to be converted.","nodes":[{"content":"The 8-bit signed integer to be converted.","pos":[0,41]}]}],"pos":[182842,182884],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"An 8-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[182939,183007],"yaml":true},{"content":"<code>value</code> is less than <xref href=\"System.Byte.MinValue\"></xref>.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than <xref href=\"System.Byte.MinValue\"></xref>."}],"pos":[183150,183225],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,98],"content":"Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.","pos":[0,98]}]}],"pos":[184712,184811],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[185349,185387],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"An 8-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[185442,185510],"yaml":true},{"content":"<code>value</code> is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>."}],"pos":[185653,185786],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,98],"content":"Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.","pos":[0,98]}]}],"pos":[187220,187319],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[187856,187894],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"An 8-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[187949,188017],"yaml":true},{"content":"<code>value</code> is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>."}],"pos":[188160,188293],"yaml":true},{"content":"Returns the specified 8-bit unsigned integer; no actual conversion is performed.","nodes":[{"pos":[0,80],"content":"Returns the specified 8-bit unsigned integer; no actual conversion is performed.","nodes":[{"content":"Returns the specified 8-bit unsigned integer; no actual conversion is performed.","pos":[0,80]}]}],"pos":[189721,189802],"yaml":true},{"content":"The 8-bit unsigned integer to return.","nodes":[{"pos":[0,37],"content":"The 8-bit unsigned integer to return.","nodes":[{"content":"The 8-bit unsigned integer to return.","pos":[0,37]}]}],"pos":[189940,189978],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[190033,190075],"yaml":true},{"content":"Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,95],"content":"Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.","pos":[0,95]}]}],"pos":[191555,191651],"yaml":true},{"content":"This method returns an unsigned byte value that represents the numeric code of the <xref:System.Char> object passed to it. In the .NET Framework, a <xref:System.Char> object is a 16-bit value. This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.","nodes":[{"pos":[0,423],"content":"This method returns an unsigned byte value that represents the numeric code of the <xref:System.Char> object passed to it. In the .NET Framework, a <xref:System.Char> object is a 16-bit value. This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.","nodes":[{"content":"This method returns an unsigned byte value that represents the numeric code of the <xref:System.Char> object passed to it. In the .NET Framework, a <xref:System.Char> object is a 16-bit value. This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.","pos":[0,423],"nodes":[{"content":"This method returns an unsigned byte value that represents the numeric code of the <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object passed to it.","pos":[0,122],"source":"This method returns an unsigned byte value that represents the numeric code of the <xref:System.Char> object passed to it."},{"content":"In the .NET Framework, a <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object is a 16-bit value.","pos":[123,192],"source":" In the .NET Framework, a <xref:System.Char> object is a 16-bit value."},{"content":"This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.","pos":[193,423]}]}]}],"pos":[191662,192086],"yaml":true,"extradata":"MT"},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[192607,192641],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"An 8-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[192696,192764],"yaml":true},{"content":"<code>value</code> represents a number that is greater than <xref href=\"System.Byte.MaxValue\"></xref>.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is greater than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is greater than <xref href=\"System.Byte.MaxValue\"></xref>."}],"pos":[192907,193010],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[194462,194546],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[194692,194728],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[194783,194839],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[194988,195022],"yaml":true},{"content":"Converts the specified Boolean value to the equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,78],"content":"Converts the specified Boolean value to the equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the specified Boolean value to the equivalent 8-bit unsigned integer.","pos":[0,78]}]}],"pos":[196124,196203],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[196872,196902],"yaml":true},{"content":"The number 1 if <code>value</code> is `true`; otherwise, 0.","nodes":[{"pos":[0,59],"content":"The number 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`true`</ph>; otherwise, 0.","source":"The number 1 if <code>value</code> is `true`; otherwise, 0."}],"pos":[196957,197017],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,115],"content":"Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.","pos":[0,115]}]}],"pos":[198509,198625],"yaml":true},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[199390,199445],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,214],"content":"<code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 8-bit unsigned integer.","pos":[0,66],"source":"<code>value</code>, rounded to the nearest 8-bit unsigned integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[67,214],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[199500,199715],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref> or less than <xref href=\"System.Byte.MinValue\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref> or less than <xref href=\"System.Byte.MinValue\"></xref>."}],"pos":[199858,199991],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,98],"content":"Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.","pos":[0,98]}]}],"pos":[201425,201524],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[202060,202098],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"An 8-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[202153,202221],"yaml":true},{"content":"<code>value</code> is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>."}],"pos":[202364,202497],"yaml":true},{"content":"Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.","nodes":[{"pos":[0,91],"content":"Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.","pos":[0,91]}]}],"pos":[203943,204035],"yaml":true},{"content":"The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> and a <xref:System.Decimal> value to a <xref:System.Byte>.  \n  \n [!code-cpp[System.Convert Snippets#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)]\n [!code-csharp[System.Convert Snippets#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)]\n [!code-vb[System.Convert Snippets#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)]","nodes":[{"pos":[0,143],"content":"The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> and a <xref:System.Decimal> value to a <xref:System.Byte>.","nodes":[{"content":"The following example converts a <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> value to a <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph> and a <ph id=\"ph3\">&lt;xref:System.Decimal&gt;</ph> value to a <ph id=\"ph4\">&lt;xref:System.Byte&gt;</ph>.","pos":[0,143],"source":"The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> and a <xref:System.Decimal> value to a <xref:System.Byte>."}]},{"pos":[150,595],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Convert Snippets#18<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Convert Snippets#18<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Convert Snippets#18<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Convert Snippets#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)]\n [!code-csharp[System.Convert Snippets#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)]\n [!code-vb[System.Convert Snippets#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)]"}],"pos":[204046,204648],"yaml":true,"extradata":"MT"},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[204792,204815],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,214],"content":"<code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 8-bit unsigned integer.","pos":[0,66],"source":"<code>value</code>, rounded to the nearest 8-bit unsigned integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[67,214],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[204870,205085],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref> or less than <xref href=\"System.Byte.MinValue\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref> or less than <xref href=\"System.Byte.MinValue\"></xref>."}],"pos":[205228,205361],"yaml":true},{"content":"Converts the value of the specified object to an 8-bit unsigned integer.","nodes":[{"pos":[0,72],"content":"Converts the value of the specified object to an 8-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified object to an 8-bit unsigned integer.","pos":[0,72]}]}],"pos":[206801,206874],"yaml":true},{"content":"If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToByte%2A?displayProperty=fullName>implementation of the underlying type of `value`.","nodes":[{"pos":[0,168],"content":"If <ph id=\"ph1\">`value`</ph> is not <ph id=\"ph2\">`null`</ph>, this method wraps a call to the <ph id=\"ph3\">&lt;xref:System.IConvertible.ToByte%2A?displayProperty=fullName&gt;</ph>implementation of the underlying type of <ph id=\"ph4\">`value`</ph>.","source":"If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToByte%2A?displayProperty=fullName>implementation of the underlying type of `value`."}],"pos":[206885,207054],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[207627,207720],"yaml":true},{"content":"An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,108],"content":"An 8-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[207775,207884],"yaml":true},{"content":"<code>value</code> is not in the property format for a <xref href=\"System.Byte\"></xref> value.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in the property format for a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>value</code> is not in the property format for a <xref href=\"System.Byte\"></xref> value."}],"pos":[208023,208118],"yaml":true},{"content":"<code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>.  \n  \n -or-  \n  \n Conversion from <code>value</code> to the <xref href=\"System.Byte\"></xref> type is not supported.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>."},{"pos":[86,90],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[97,194],"content":"Conversion from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> type is not supported.","source":"Conversion from <code>value</code> to the <xref href=\"System.Byte\"></xref> type is not supported."}],"pos":[208218,208423],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.","nodes":[{"pos":[0,157],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Byte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Byte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>."}],"pos":[208517,208675],"yaml":true},{"content":"Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.","nodes":[{"pos":[0,131],"content":"Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.","nodes":[{"content":"Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.","pos":[0,131]}]}],"pos":[210235,210367],"yaml":true},{"content":"`value` must be a string that contains a single character.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`value`</ph> must be a string that contains a single character.","source":"`value` must be a string that contains a single character."},{"pos":[65,319],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,254],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Char.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,154],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[155,254],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[210378,210702],"yaml":true,"extradata":"MT"},{"content":"A string of length 1 or `null`.","nodes":[{"pos":[0,31],"content":"A string of length 1 or <ph id=\"ph1\">`null`</ph>.","source":"A string of length 1 or `null`."}],"pos":[211638,211670],"yaml":true},{"content":"An object that supplies culture-specific formatting information. This parameter is ignored.","nodes":[{"pos":[0,91],"content":"An object that supplies culture-specific formatting information. This parameter is ignored.","nodes":[{"content":"An object that supplies culture-specific formatting information. This parameter is ignored.","pos":[0,91],"nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]},{"content":"This parameter is ignored.","pos":[65,91]}]}]}],"pos":[211743,211835],"yaml":true},{"content":"A Unicode character that is equivalent to the first and only character in <code>value</code>.","nodes":[{"pos":[0,93],"content":"A Unicode character that is equivalent to the first and only character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A Unicode character that is equivalent to the first and only character in <code>value</code>."}],"pos":[211890,211984],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[212135,212165],"yaml":true},{"content":"The length of <code>value</code> is not 1.","nodes":[{"pos":[0,42],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not 1.","source":"The length of <code>value</code> is not 1."}],"pos":[212255,212298],"yaml":true},{"content":"Converts the value of the specified object to a Unicode character.","nodes":[{"pos":[0,66],"content":"Converts the value of the specified object to a Unicode character.","nodes":[{"content":"Converts the value of the specified object to a Unicode character.","pos":[0,66]}]}],"pos":[213738,213805],"yaml":true},{"content":"If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToChar%2A?displayProperty=fullName>implementation of the underlying type of `value`.","nodes":[{"pos":[0,168],"content":"If <ph id=\"ph1\">`value`</ph> is not <ph id=\"ph2\">`null`</ph>, this method wraps a call to the <ph id=\"ph3\">&lt;xref:System.IConvertible.ToChar%2A?displayProperty=fullName&gt;</ph>implementation of the underlying type of <ph id=\"ph4\">`value`</ph>.","source":"If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToChar%2A?displayProperty=fullName>implementation of the underlying type of `value`."}],"pos":[213816,213985],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[214516,214598],"yaml":true},{"content":"A Unicode character that is equivalent to value, or <xref href=\"System.Char.MinValue\"></xref> if <code>value</code> is `null`.","nodes":[{"pos":[0,126],"content":"A Unicode character that is equivalent to value, or <ph id=\"ph1\">&lt;xref href=\"System.Char.MinValue\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A Unicode character that is equivalent to value, or <xref href=\"System.Char.MinValue\"></xref> if <code>value</code> is `null`."}],"pos":[214653,214780],"yaml":true},{"content":"<code>value</code> is a null string.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is a null string.","source":"<code>value</code> is a null string."}],"pos":[214931,214968],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion of <code>value</code> to a <xref href=\"System.Char\"></xref> is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,203],"content":"The conversion of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to a <ph id=\"ph2\">&lt;xref href=\"System.Char\"&gt;&lt;/xref&gt;</ph> is not supported.","source":"The conversion of <code>value</code> to a <xref href=\"System.Char\"></xref> is not supported."}],"pos":[215068,215282],"yaml":true},{"content":"<code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref> or greater than <xref href=\"System.Char.MaxValue\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref href=\"System.Char.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Char.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref> or greater than <xref href=\"System.Char.MaxValue\"></xref>."}],"pos":[215376,215509],"yaml":true},{"content":"Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.","nodes":[{"pos":[0,140],"content":"Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.","pos":[0,140]}]}],"pos":[217069,217210],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToChar%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,150],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToChar%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToChar%2A?displayProperty=fullName> method of the underlying type of `value`."},{"pos":[157,427],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"The base types ignore <ph id=\"ph1\">`provider`</ph>; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[110,270],"source":" The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}]}],"pos":[217221,217653],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[218823,218905],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[218978,219043],"yaml":true},{"content":"A Unicode character that is equivalent to <code>value</code>, or <xref href=\"System.Char.MinValue\"></xref> if <code>value</code> is `null`.","nodes":[{"pos":[0,139],"content":"A Unicode character that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <ph id=\"ph2\">&lt;xref href=\"System.Char.MinValue\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`null`</ph>.","source":"A Unicode character that is equivalent to <code>value</code>, or <xref href=\"System.Char.MinValue\"></xref> if <code>value</code> is `null`."}],"pos":[219098,219238],"yaml":true},{"content":"<code>value</code> is a null string.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is a null string.","source":"<code>value</code> is a null string."}],"pos":[219389,219426],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion of <code>value</code> to a <xref href=\"System.Char\"></xref> is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,203],"content":"The conversion of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to a <ph id=\"ph2\">&lt;xref href=\"System.Char\"&gt;&lt;/xref&gt;</ph> is not supported.","source":"The conversion of <code>value</code> to a <xref href=\"System.Char\"></xref> is not supported."}],"pos":[219526,219740],"yaml":true},{"content":"<code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref> or greater than <xref href=\"System.Char.MaxValue\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref href=\"System.Char.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Char.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref> or greater than <xref href=\"System.Char.MaxValue\"></xref>."}],"pos":[219834,219967],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.","nodes":[{"pos":[0,96],"content":"Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.","pos":[0,96]}]}],"pos":[221407,221504],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[222101,222141],"yaml":true},{"content":"A Unicode character that is equivalent to <code>value</code>.","nodes":[{"pos":[0,61],"content":"A Unicode character that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A Unicode character that is equivalent to <code>value</code>."}],"pos":[222196,222258],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Char.MaxValue\"></xref>.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Char.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Char.MaxValue\"></xref>."}],"pos":[222401,222479],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.","nodes":[{"pos":[0,96],"content":"Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.","pos":[0,96]}]}],"pos":[223972,224069],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[224660,224700],"yaml":true},{"content":"A Unicode character that is equivalent to <code>value</code>.","nodes":[{"pos":[0,61],"content":"A Unicode character that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A Unicode character that is equivalent to <code>value</code>."}],"pos":[224755,224817],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Char.MaxValue\"></xref>.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Char.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Char.MaxValue\"></xref>."}],"pos":[224960,225038],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.","nodes":[{"pos":[0,96],"content":"Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.","pos":[0,96]}]}],"pos":[226531,226628],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[227228,227268],"yaml":true},{"content":"A Unicode character that is equivalent to <code>value</code>.","nodes":[{"pos":[0,61],"content":"A Unicode character that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A Unicode character that is equivalent to <code>value</code>."}],"pos":[227323,227385],"yaml":true},{"content":"Converts the first character of a specified string to a Unicode character.","nodes":[{"pos":[0,74],"content":"Converts the first character of a specified string to a Unicode character.","nodes":[{"content":"Converts the first character of a specified string to a Unicode character.","pos":[0,74]}]}],"pos":[228930,229005],"yaml":true},{"content":"`value` must be a string that contains a single character.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`value`</ph> must be a string that contains a single character.","source":"`value` must be a string that contains a single character."},{"pos":[65,319],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,254],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Char.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,154],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[155,254],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[229016,229340],"yaml":true,"extradata":"MT"},{"content":"A string of length 1.","nodes":[{"pos":[0,21],"content":"A string of length 1.","nodes":[{"content":"A string of length 1.","pos":[0,21]}]}],"pos":[229859,229881],"yaml":true},{"content":"A Unicode character that is equivalent to the first and only character in <code>value</code>.","nodes":[{"pos":[0,93],"content":"A Unicode character that is equivalent to the first and only character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A Unicode character that is equivalent to the first and only character in <code>value</code>."}],"pos":[229936,230030],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[230181,230211],"yaml":true},{"content":"The length of <code>value</code> is not 1.","nodes":[{"pos":[0,42],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not 1.","source":"The length of <code>value</code> is not 1."}],"pos":[230301,230344],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[231784,231868],"yaml":true},{"content":"The single-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The single-precision floating-point number to convert.","nodes":[{"content":"The single-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[232009,232064],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[232119,232175],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[232324,232358],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.","nodes":[{"pos":[0,93],"content":"Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.","pos":[0,93]}]}],"pos":[233448,233542],"yaml":true},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[234111,234148],"yaml":true},{"content":"A Unicode character that is equivalent to <code>value</code>.","nodes":[{"pos":[0,61],"content":"A Unicode character that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A Unicode character that is equivalent to <code>value</code>."}],"pos":[234203,234265],"yaml":true},{"content":"<code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref>.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref href=\"System.Char.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref>."}],"pos":[234408,234483],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.","nodes":[{"pos":[0,94],"content":"Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.","pos":[0,94]}]}],"pos":[235970,236065],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[236824,236862],"yaml":true},{"content":"A Unicode character that is equivalent to <code>value</code>.","nodes":[{"pos":[0,61],"content":"A Unicode character that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A Unicode character that is equivalent to <code>value</code>."}],"pos":[236917,236979],"yaml":true},{"content":"<code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref> or greater than <xref href=\"System.Char.MaxValue\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref href=\"System.Char.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Char.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref> or greater than <xref href=\"System.Char.MaxValue\"></xref>."}],"pos":[237122,237255],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.","nodes":[{"pos":[0,94],"content":"Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.","pos":[0,94]}]}],"pos":[238689,238784],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[239318,239356],"yaml":true},{"content":"A Unicode character that is equivalent to <code>value</code>.","nodes":[{"pos":[0,61],"content":"A Unicode character that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A Unicode character that is equivalent to <code>value</code>."}],"pos":[239411,239473],"yaml":true},{"content":"<code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref>.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref href=\"System.Char.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref>."}],"pos":[239616,239691],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[241131,241215],"yaml":true},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[241357,241412],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[241467,241523],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[241672,241706],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[242808,242892],"yaml":true},{"content":"The decimal number to convert.","nodes":[{"pos":[0,30],"content":"The decimal number to convert.","nodes":[{"content":"The decimal number to convert.","pos":[0,30]}]}],"pos":[243670,243701],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[243756,243812],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[243961,243995],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[245103,245187],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[245333,245369],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[245424,245480],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[245629,245663],"yaml":true},{"content":"Returns the specified Unicode character value; no actual conversion is performed.","nodes":[{"pos":[0,81],"content":"Returns the specified Unicode character value; no actual conversion is performed.","nodes":[{"content":"Returns the specified Unicode character value; no actual conversion is performed.","pos":[0,81]}]}],"pos":[246747,246829],"yaml":true},{"content":"The Unicode character to return.","nodes":[{"pos":[0,32],"content":"The Unicode character to return.","nodes":[{"content":"The Unicode character to return.","pos":[0,32]}]}],"pos":[246967,247000],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[247055,247097],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.","nodes":[{"pos":[0,95],"content":"Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.","pos":[0,95]}]}],"pos":[248233,248329],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[248853,248892],"yaml":true},{"content":"A Unicode character that is equivalent to <code>value</code>.","nodes":[{"pos":[0,61],"content":"A Unicode character that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A Unicode character that is equivalent to <code>value</code>."}],"pos":[248947,249009],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[250507,250591],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[250732,250762],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[250817,250873],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[251022,251056],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.","nodes":[{"pos":[0,94],"content":"Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.","pos":[0,94]}]}],"pos":[252146,252241],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[252766,252804],"yaml":true},{"content":"A Unicode character that is equivalent to <code>value</code>.","nodes":[{"pos":[0,61],"content":"A Unicode character that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A Unicode character that is equivalent to <code>value</code>."}],"pos":[252859,252921],"yaml":true},{"content":"<code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref> or greater than <xref href=\"System.Char.MaxValue\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref href=\"System.Char.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Char.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref> or greater than <xref href=\"System.Char.MaxValue\"></xref>."}],"pos":[253064,253197],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[254661,254745],"yaml":true},{"content":"The single-precision floating-point value to convert.","nodes":[{"pos":[0,53],"content":"The single-precision floating-point value to convert.","nodes":[{"content":"The single-precision floating-point value to convert.","pos":[0,53]}]}],"pos":[254894,254948],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[255007,255063],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[255216,255250],"yaml":true},{"content":"Converts the specified string representation of a date and time to an equivalent date and time value.","nodes":[{"pos":[0,101],"content":"Converts the specified string representation of a date and time to an equivalent date and time value.","nodes":[{"content":"Converts the specified string representation of a date and time to an equivalent date and time value.","pos":[0,101]}]}],"pos":[256370,256472],"yaml":true},{"content":"If `value` is not `null`, the return value is the result of invoking the <xref:System.DateTime.Parse%2A?displayProperty=fullName> method on `value` using the formatting information in a <xref:System.Globalization.DateTimeFormatInfo> object that is initialized for the current culture. The `value` argument must contain the representation of a date and time in one of the formats described in the <xref:System.Globalization.DateTimeFormatInfo> topic. If `value` is `null`, the method returns <xref:System.DateTime.MinValue?displayProperty=fullName>.  \n  \n This method tries to parse `value` completely and avoid throwing a <xref:System.FormatException>. It completes missing month, day, and year information with the current date. If `value` contains only a date and no time, this method assumes a time of midnight. Any leading, inner, or trailing white-space characters in `value` are ignored.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,548],"content":"If `value` is not `null`, the return value is the result of invoking the <xref:System.DateTime.Parse%2A?displayProperty=fullName> method on `value` using the formatting information in a <xref:System.Globalization.DateTimeFormatInfo> object that is initialized for the current culture. The `value` argument must contain the representation of a date and time in one of the formats described in the <xref:System.Globalization.DateTimeFormatInfo> topic. If `value` is `null`, the method returns <xref:System.DateTime.MinValue?displayProperty=fullName>.","nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is not <ph id=\"ph2\">`null`</ph>, the return value is the result of invoking the <ph id=\"ph3\">&lt;xref:System.DateTime.Parse%2A?displayProperty=fullName&gt;</ph> method on <ph id=\"ph4\">`value`</ph> using the formatting information in a <ph id=\"ph5\">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that is initialized for the current culture.","pos":[0,284],"source":"If `value` is not `null`, the return value is the result of invoking the <xref:System.DateTime.Parse%2A?displayProperty=fullName> method on `value` using the formatting information in a <xref:System.Globalization.DateTimeFormatInfo> object that is initialized for the current culture."},{"content":"The <ph id=\"ph1\">`value`</ph> argument must contain the representation of a date and time in one of the formats described in the <ph id=\"ph2\">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> topic.","pos":[285,449],"source":" The `value` argument must contain the representation of a date and time in one of the formats described in the <xref:System.Globalization.DateTimeFormatInfo> topic."},{"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, the method returns <ph id=\"ph3\">&lt;xref:System.DateTime.MinValue?displayProperty=fullName&gt;</ph>.","pos":[450,548],"source":" If `value` is `null`, the method returns <xref:System.DateTime.MinValue?displayProperty=fullName>."}]},{"pos":[555,893],"content":"This method tries to parse `value` completely and avoid throwing a <xref:System.FormatException>. It completes missing month, day, and year information with the current date. If `value` contains only a date and no time, this method assumes a time of midnight. Any leading, inner, or trailing white-space characters in `value` are ignored.","nodes":[{"content":"This method tries to parse <ph id=\"ph1\">`value`</ph> completely and avoid throwing a <ph id=\"ph2\">&lt;xref:System.FormatException&gt;</ph>.","pos":[0,97],"source":"This method tries to parse `value` completely and avoid throwing a <xref:System.FormatException>."},{"content":"It completes missing month, day, and year information with the current date.","pos":[98,174]},{"content":"If <ph id=\"ph1\">`value`</ph> contains only a date and no time, this method assumes a time of midnight.","pos":[175,259],"source":" If `value` contains only a date and no time, this method assumes a time of midnight."},{"content":"Any leading, inner, or trailing white-space characters in <ph id=\"ph1\">`value`</ph> are ignored.","pos":[260,338],"source":" Any leading, inner, or trailing white-space characters in `value` are ignored."}]},{"pos":[900,1157],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,257],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.DateTime.TryParse%2A?displayProperty=fullName&gt;</ph>method instead.","pos":[0,157],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[158,257],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[256483,257647],"yaml":true,"extradata":"MT"},{"content":"The string representation of a date and time.","nodes":[{"pos":[0,45],"content":"The string representation of a date and time.","nodes":[{"content":"The string representation of a date and time.","pos":[0,45]}]}],"pos":[258274,258320],"yaml":true},{"content":"The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <xref href=\"System.DateTime.MinValue\"></xref> if <code>value</code> is `null`.","nodes":[{"pos":[0,178],"content":"The date and time equivalent of the value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or the date and time equivalent of <ph id=\"ph2\">&lt;xref href=\"System.DateTime.MinValue\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`null`</ph>.","source":"The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <xref href=\"System.DateTime.MinValue\"></xref> if <code>value</code> is `null`."}],"pos":[258379,258558],"yaml":true},{"content":"<code>value</code> is not a properly formatted date and time string.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a properly formatted date and time string.","source":"<code>value</code> is not a properly formatted date and time string."}],"pos":[258701,258770],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[260234,260318],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[260513,260553],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[260612,260668],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[260821,260855],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.","nodes":[{"pos":[0,149],"content":"Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.","pos":[0,149]}]}],"pos":[262148,262298],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.DateTimeFormatInfo> object. The <xref:System.Globalization.DateTimeFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,163],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method on <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method on `value`."},{"pos":[170,529],"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.DateTimeFormatInfo> object. The <xref:System.Globalization.DateTimeFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> for the current culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id=\"ph3\">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object.","pos":[0,125],"source":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.DateTimeFormatInfo> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id=\"ph2\">`value`</ph>.","pos":[126,250],"source":" The <xref:System.Globalization.DateTimeFormatInfo> object provides culture-specific information about the format of `value`."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> for the current culture is used.","pos":[251,359],"source":" If `provider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> for the current culture is used."}]},{"pos":[536,793],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,257],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.DateTime.TryParse%2A?displayProperty=fullName&gt;</ph>method instead.","pos":[0,157],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[158,257],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[262309,263109],"yaml":true,"extradata":"MT"},{"content":"A string that contains a date and time to convert.","nodes":[{"pos":[0,50],"content":"A string that contains a date and time to convert.","nodes":[{"content":"A string that contains a date and time to convert.","pos":[0,50]}]}],"pos":[263739,263790],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[263863,263928],"yaml":true},{"content":"The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <xref href=\"System.DateTime.MinValue\"></xref> if <code>value</code> is `null`.","nodes":[{"pos":[0,178],"content":"The date and time equivalent of the value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or the date and time equivalent of <ph id=\"ph2\">&lt;xref href=\"System.DateTime.MinValue\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`null`</ph>.","source":"The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <xref href=\"System.DateTime.MinValue\"></xref> if <code>value</code> is `null`."}],"pos":[263987,264166],"yaml":true},{"content":"<code>value</code> is not a properly formatted date and time string.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a properly formatted date and time string.","source":"<code>value</code> is not a properly formatted date and time string."}],"pos":[264309,264378],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[265842,265926],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[266120,266160],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[266219,266275],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[266428,266462],"yaml":true},{"content":"Converts the value of the specified object to a <xref href=\"System.DateTime\"></xref> object, using the specified culture-specific formatting information.","nodes":[{"pos":[0,153],"content":"Converts the value of the specified object to a <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> object, using the specified culture-specific formatting information.","source":"Converts the value of the specified object to a <xref href=\"System.DateTime\"></xref> object, using the specified culture-specific formatting information."}],"pos":[267755,267909],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a date, `provider` could supply culture-specific information about the notation used to represent that date. `provider` is involved in the conversion of `value` if the runtime type of `value` is a <xref:System.String>, or if `value` is a user-defined type whose <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> implementation makes use of `provider`. If the runtime type of `value` is <xref:System.String> and `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.","nodes":[{"pos":[0,154],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> method of the underlying type of `value`."},{"pos":[161,888],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a date, `provider` could supply culture-specific information about the notation used to represent that date. `provider` is involved in the conversion of `value` if the runtime type of `value` is a <xref:System.String>, or if `value` is a user-defined type whose <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> implementation makes use of `provider`. If the runtime type of `value` is <xref:System.String> and `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"For example, if <ph id=\"ph1\">`value`</ph> is a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> that represents a date, <ph id=\"ph3\">`provider`</ph> could supply culture-specific information about the notation used to represent that date.","pos":[110,284],"source":" For example, if `value` is a <xref:System.String> that represents a date, `provider` could supply culture-specific information about the notation used to represent that date."},{"content":"<ph id=\"ph1\">`provider`</ph> is involved in the conversion of <ph id=\"ph2\">`value`</ph> if the runtime type of <ph id=\"ph3\">`value`</ph> is a <ph id=\"ph4\">&lt;xref:System.String&gt;</ph>, or if <ph id=\"ph5\">`value`</ph> is a user-defined type whose <ph id=\"ph6\">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName&gt;</ph> implementation makes use of <ph id=\"ph7\">`provider`</ph>.","pos":[285,543],"source":"`provider` is involved in the conversion of `value` if the runtime type of `value` is a <xref:System.String>, or if `value` is a user-defined type whose <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> implementation makes use of `provider`."},{"content":"If the runtime type of <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> and <ph id=\"ph3\">`provider`</ph> is <ph id=\"ph4\">`null`</ph>, the <ph id=\"ph5\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.","pos":[544,727],"source":" If the runtime type of `value` is <xref:System.String> and `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used."}]}],"pos":[267920,268813],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[269905,269987],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[270060,270125],"yaml":true},{"content":"The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <xref href=\"System.DateTime.MinValue\"></xref> if <code>value</code> is `null`.","nodes":[{"pos":[0,178],"content":"The date and time equivalent of the value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or the date and time equivalent of <ph id=\"ph2\">&lt;xref href=\"System.DateTime.MinValue\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`null`</ph>.","source":"The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <xref href=\"System.DateTime.MinValue\"></xref> if <code>value</code> is `null`."}],"pos":[270184,270363],"yaml":true},{"content":"<code>value</code> is not a valid date and time value.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a valid date and time value.","source":"<code>value</code> is not a valid date and time value."}],"pos":[270506,270561],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[270661,270813],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[272271,272355],"yaml":true},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[272548,272585],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[272644,272700],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[272853,272887],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[274060,274144],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[274337,274377],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[274436,274492],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[274645,274679],"yaml":true},{"content":"Converts the value of the specified object to a <xref href=\"System.DateTime\"></xref> object.","nodes":[{"pos":[0,92],"content":"Converts the value of the specified object to a <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> object.","source":"Converts the value of the specified object to a <xref href=\"System.DateTime\"></xref> object."}],"pos":[275852,275945],"yaml":true},{"content":"For the conversion to succeed, the runtime type of the `value` parameter must be either a <xref:System.DateTime> or a <xref:System.String>, or `value` must be `null`. Otherwise, the method throws an <xref:System.InvalidCastException>. In addition, if `value` is a string, it must contain a valid representation of a date and time value in the current culture or a <xref:System.FormatException> is thrown.  \n  \n The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> method of the underlying type of `value`.","nodes":[{"pos":[0,404],"content":"For the conversion to succeed, the runtime type of the `value` parameter must be either a <xref:System.DateTime> or a <xref:System.String>, or `value` must be `null`. Otherwise, the method throws an <xref:System.InvalidCastException>. In addition, if `value` is a string, it must contain a valid representation of a date and time value in the current culture or a <xref:System.FormatException> is thrown.","nodes":[{"content":"For the conversion to succeed, the runtime type of the <ph id=\"ph1\">`value`</ph> parameter must be either a <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> or a <ph id=\"ph3\">&lt;xref:System.String&gt;</ph>, or <ph id=\"ph4\">`value`</ph> must be <ph id=\"ph5\">`null`</ph>.","pos":[0,166],"source":"For the conversion to succeed, the runtime type of the `value` parameter must be either a <xref:System.DateTime> or a <xref:System.String>, or `value` must be `null`."},{"content":"Otherwise, the method throws an <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph>.","pos":[167,234],"source":" Otherwise, the method throws an <xref:System.InvalidCastException>."},{"content":"In addition, if <ph id=\"ph1\">`value`</ph> is a string, it must contain a valid representation of a date and time value in the current culture or a <ph id=\"ph2\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[235,404],"source":" In addition, if `value` is a string, it must contain a valid representation of a date and time value in the current culture or a <xref:System.FormatException> is thrown."}]},{"pos":[411,565],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> method of the underlying type of `value`."}],"pos":[275956,276526],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[277125,277218],"yaml":true},{"content":"The date and time equivalent of the value of <code>value</code>, or a date and time equivalent of <xref href=\"System.DateTime.MinValue\"></xref> if <code>value</code> is `null`.","nodes":[{"pos":[0,176],"content":"The date and time equivalent of the value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or a date and time equivalent of <ph id=\"ph2\">&lt;xref href=\"System.DateTime.MinValue\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`null`</ph>.","source":"The date and time equivalent of the value of <code>value</code>, or a date and time equivalent of <xref href=\"System.DateTime.MinValue\"></xref> if <code>value</code> is `null`."}],"pos":[277277,277454],"yaml":true},{"content":"<code>value</code> is not a valid date and time value.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a valid date and time value.","source":"<code>value</code> is not a valid date and time value."}],"pos":[277597,277652],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[277752,277904],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[279368,279452],"yaml":true},{"content":"The double-precision floating-point value to convert.","nodes":[{"pos":[0,53],"content":"The double-precision floating-point value to convert.","nodes":[{"content":"The double-precision floating-point value to convert.","pos":[0,53]}]}],"pos":[279602,279656],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[279715,279771],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[279924,279958],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[281072,281156],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[281302,281340],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[281399,281455],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[281608,281642],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[282768,282852],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[283001,283031],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[283090,283146],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[283299,283333],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[284441,284525],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[284671,284710],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[284769,284825],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[284978,285012],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[286120,286204],"yaml":true},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[286350,286384],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[286443,286499],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[286652,286686],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[287800,287884],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[288031,288069],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[288128,288184],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[288337,288371],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[289497,289581],"yaml":true},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[289733,289756],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[289815,289871],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[290024,290058],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[291172,291256],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[291404,291442],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[291501,291557],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[291710,291744],"yaml":true},{"content":"Returns the specified <xref href=\"System.DateTime\"></xref> object; no actual conversion is performed.","nodes":[{"pos":[0,101],"content":"Returns the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> object; no actual conversion is performed.","source":"Returns the specified <xref href=\"System.DateTime\"></xref> object; no actual conversion is performed."}],"pos":[292876,292978],"yaml":true},{"content":"A date and time value.","nodes":[{"pos":[0,22],"content":"A date and time value.","nodes":[{"content":"A date and time value.","pos":[0,22]}]}],"pos":[293132,293155],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[293214,293256],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.","nodes":[{"pos":[0,150],"content":"Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.","pos":[0,150]}]}],"pos":[294546,294697],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.Decimal.Parse%2A?displayProperty=fullName> method on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,121],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.Decimal.Parse%2A?displayProperty=fullName&gt;</ph> method on <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.Decimal.Parse%2A?displayProperty=fullName> method on `value`."},{"pos":[128,481],"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[0,123],"source":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id=\"ph2\">`value`</ph>.","pos":[124,246],"source":" The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.","pos":[247,353],"source":" If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used."}]},{"pos":[488,745],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,257],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Decimal.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,157],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[158,257],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[294708,295460],"yaml":true,"extradata":"MT"},{"content":"A string that contains a number to convert.","nodes":[{"pos":[0,43],"content":"A string that contains a number to convert.","nodes":[{"content":"A string that contains a number to convert.","pos":[0,43]}]}],"pos":[296139,296183],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[296256,296321],"yaml":true},{"content":"A decimal number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,117],"content":"A decimal number that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A decimal number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[296379,296497],"yaml":true},{"content":"<code>value</code> is not a number in a valid format.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a number in a valid format.","source":"<code>value</code> is not a number in a valid format."}],"pos":[296639,296693],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Decimal.MinValue\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,163],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Decimal.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Decimal.MinValue\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[296787,296951],"yaml":true},{"content":"Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.","nodes":[{"pos":[0,136],"content":"Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.","pos":[0,136]}]}],"pos":[298529,298666],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,153],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> method of the underlying type of `value`."},{"pos":[160,430],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"The base types ignore <ph id=\"ph1\">`provider`</ph>; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","pos":[110,270],"source":" The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}]}],"pos":[298677,299112],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[300332,300414],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[300487,300552],"yaml":true},{"content":"A decimal number that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,103],"content":"A decimal number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A decimal number that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[300610,300714],"yaml":true},{"content":"<code>value</code> is not in an appropriate format for a <xref href=\"System.Decimal\"></xref> type.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format for a <ph id=\"ph2\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> type.","source":"<code>value</code> is not in an appropriate format for a <xref href=\"System.Decimal\"></xref> type."}],"pos":[300856,300955],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[301055,301207],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Decimal.MinValue\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,163],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Decimal.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Decimal.MinValue\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[301301,301465],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.","nodes":[{"pos":[0,92],"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.","pos":[0,92]}]}],"pos":[302923,303016],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[303627,303667],"yaml":true},{"content":"A decimal number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,58],"content":"A decimal number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A decimal number that is equivalent to <code>value</code>."}],"pos":[303725,303784],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.","nodes":[{"pos":[0,92],"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.","pos":[0,92]}]}],"pos":[305350,305443],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[306048,306088],"yaml":true},{"content":"A decimal number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,58],"content":"A decimal number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A decimal number that is equivalent to <code>value</code>."}],"pos":[306146,306205],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.","nodes":[{"pos":[0,92],"content":"Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.","pos":[0,92]}]}],"pos":[307771,307864],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[308478,308518],"yaml":true},{"content":"The decimal number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,60],"content":"The decimal number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The decimal number that is equivalent to <code>value</code>."}],"pos":[308576,308637],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent decimal number.","nodes":[{"pos":[0,89],"content":"Converts the specified string representation of a number to an equivalent decimal number.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent decimal number.","pos":[0,89]}]}],"pos":[310203,310293],"yaml":true},{"content":"Using the <xref:System.Convert.ToDecimal%28System.String%29> method is equivalent to passing `value` to the <xref:System.Decimal.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,277],"content":"Using the <xref:System.Convert.ToDecimal%28System.String%29> method is equivalent to passing `value` to the <xref:System.Decimal.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Convert.ToDecimal%28System.String%29&gt;</ph> method is equivalent to passing <ph id=\"ph2\">`value`</ph> to the <ph id=\"ph3\">&lt;xref:System.Decimal.Parse%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[0,187],"source":"Using the <xref:System.Convert.ToDecimal%28System.String%29> method is equivalent to passing `value` to the <xref:System.Decimal.Parse%28System.String%29?displayProperty=fullName> method."},{"content":"<ph id=\"ph1\">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.","pos":[188,277],"source":"`value` is interpreted by using the formatting conventions of the current thread culture."}]},{"pos":[284,541],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,257],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Decimal.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,157],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[158,257],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[310304,310850],"yaml":true,"extradata":"MT"},{"content":"A string that contains a number to convert.","nodes":[{"pos":[0,43],"content":"A string that contains a number to convert.","nodes":[{"content":"A string that contains a number to convert.","pos":[0,43]}]}],"pos":[311675,311719],"yaml":true},{"content":"A decimal number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,117],"content":"A decimal number that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A decimal number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[311777,311895],"yaml":true},{"content":"<code>value</code> is not a number in a valid format.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a number in a valid format.","source":"<code>value</code> is not a number in a valid format."}],"pos":[312037,312091],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Decimal.MinValue\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,163],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Decimal.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Decimal.MinValue\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[312185,312349],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to the equivalent decimal number.","nodes":[{"pos":[0,90],"content":"Converts the value of the specified 8-bit signed integer to the equivalent decimal number.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to the equivalent decimal number.","pos":[0,90]}]}],"pos":[313801,313892],"yaml":true},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[314509,314546],"yaml":true},{"content":"A decimal number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,58],"content":"A decimal number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A decimal number that is equivalent to <code>value</code>."}],"pos":[314604,314663],"yaml":true},{"content":"Converts the value of the specified object to an equivalent decimal number.","nodes":[{"pos":[0,75],"content":"Converts the value of the specified object to an equivalent decimal number.","nodes":[{"content":"Converts the value of the specified object to an equivalent decimal number.","pos":[0,75]}]}],"pos":[316229,316305],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> method of the underlying type of `value`.","nodes":[{"pos":[0,153],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> method of the underlying type of `value`."}],"pos":[316316,316470],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[317029,317122],"yaml":true},{"content":"A decimal number that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,103],"content":"A decimal number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A decimal number that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[317180,317284],"yaml":true},{"content":"<code>value</code> is not in an appropriate format for a <xref href=\"System.Decimal\"></xref> type.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format for a <ph id=\"ph2\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> type.","source":"<code>value</code> is not in an appropriate format for a <xref href=\"System.Decimal\"></xref> type."}],"pos":[317426,317525],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[317625,317777],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Decimal.MinValue\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,163],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Decimal.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Decimal.MinValue\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[317871,318035],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to the equivalent decimal number.","nodes":[{"pos":[0,108],"content":"Converts the value of the specified single-precision floating-point number to the equivalent decimal number.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to the equivalent decimal number.","pos":[0,108]}]}],"pos":[319493,319602],"yaml":true},{"content":"The <xref:System.Decimal> value returned by this method contains a maximum of seven significant digits. If the `value` parameter contains more than seven significant digits, it is rounded using rounding to nearest. The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Single%29> method uses rounding to nearest to return a <xref:System.Decimal> value with seven significant digits.  \n  \n [!code-csharp[System.Convert.ToDecimal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#1)]\n [!code-vb[System.Convert.ToDecimal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#1)]","nodes":[{"pos":[0,410],"content":"The <xref:System.Decimal> value returned by this method contains a maximum of seven significant digits. If the `value` parameter contains more than seven significant digits, it is rounded using rounding to nearest. The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Single%29> method uses rounding to nearest to return a <xref:System.Decimal> value with seven significant digits.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Decimal&gt;</ph> value returned by this method contains a maximum of seven significant digits.","pos":[0,103],"source":"The <xref:System.Decimal> value returned by this method contains a maximum of seven significant digits."},{"content":"If the <ph id=\"ph1\">`value`</ph> parameter contains more than seven significant digits, it is rounded using rounding to nearest.","pos":[104,214],"source":" If the `value` parameter contains more than seven significant digits, it is rounded using rounding to nearest."},{"content":"The following example illustrates how the <ph id=\"ph1\">&lt;xref:System.Convert.ToDecimal%28System.Single%29&gt;</ph> method uses rounding to nearest to return a <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph> value with seven significant digits.","pos":[215,410],"source":" The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Single%29> method uses rounding to nearest to return a <xref:System.Decimal> value with seven significant digits."}]},{"pos":[417,692],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.ToDecimal#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.ToDecimal#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.ToDecimal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#1)]\n [!code-vb[System.Convert.ToDecimal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#1)]"}],"pos":[319613,320311],"yaml":true,"extradata":"MT"},{"content":"The single-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The single-precision floating-point number to convert.","nodes":[{"content":"The single-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[320893,320948],"yaml":true},{"content":"A decimal number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,58],"content":"A decimal number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A decimal number that is equivalent to <code>value</code>."}],"pos":[321006,321065],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Decimal.MaxValue\"></xref> or less than <xref href=\"System.Decimal.MinValue\"></xref>.","nodes":[{"pos":[0,138],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Decimal.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Decimal.MaxValue\"></xref> or less than <xref href=\"System.Decimal.MinValue\"></xref>."}],"pos":[321211,321350],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to an equivalent decimal number.","nodes":[{"pos":[0,90],"content":"Converts the value of the specified 32-bit signed integer to an equivalent decimal number.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to an equivalent decimal number.","pos":[0,90]}]}],"pos":[322802,322893],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[323449,323487],"yaml":true},{"content":"A decimal number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,58],"content":"A decimal number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A decimal number that is equivalent to <code>value</code>."}],"pos":[323545,323604],"yaml":true},{"content":"Converts the specified Boolean value to the equivalent decimal number.","nodes":[{"pos":[0,70],"content":"Converts the specified Boolean value to the equivalent decimal number.","nodes":[{"content":"Converts the specified Boolean value to the equivalent decimal number.","pos":[0,70]}]}],"pos":[325123,325194],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[325768,325798],"yaml":true},{"content":"The number 1 if <code>value</code> is `true`; otherwise, 0.","nodes":[{"pos":[0,59],"content":"The number 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`true`</ph>; otherwise, 0.","source":"The number 1 if <code>value</code> is `true`; otherwise, 0."}],"pos":[325856,325916],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.","nodes":[{"pos":[0,92],"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.","pos":[0,92]}]}],"pos":[327417,327510],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[328233,328272],"yaml":true},{"content":"The decimal number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,60],"content":"The decimal number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The decimal number that is equivalent to <code>value</code>."}],"pos":[328330,328391],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[329892,329976],"yaml":true},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[330762,330796],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[330854,330910],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[331062,331096],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to an equivalent decimal number.","nodes":[{"pos":[0,90],"content":"Converts the value of the specified 64-bit signed integer to an equivalent decimal number.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to an equivalent decimal number.","pos":[0,90]}]}],"pos":[332204,332295],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[333021,333059],"yaml":true},{"content":"A decimal number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,58],"content":"A decimal number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A decimal number that is equivalent to <code>value</code>."}],"pos":[333117,333176],"yaml":true},{"content":"Returns the specified decimal number; no actual conversion is performed.","nodes":[{"pos":[0,72],"content":"Returns the specified decimal number; no actual conversion is performed.","nodes":[{"content":"Returns the specified decimal number; no actual conversion is performed.","pos":[0,72]}]}],"pos":[334695,334768],"yaml":true},{"content":"A decimal number.","nodes":[{"pos":[0,17],"content":"A decimal number.","nodes":[{"content":"A decimal number.","pos":[0,17]}]}],"pos":[334918,334936],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[334994,335036],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to an equivalent decimal number.","nodes":[{"pos":[0,107],"content":"Converts the value of the specified double-precision floating-point number to an equivalent decimal number.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to an equivalent decimal number.","pos":[0,107]}]}],"pos":[336549,336657],"yaml":true},{"content":"The <xref:System.Decimal> value returned by this method contains a maximum of 15 significant digits. If the `value` parameter contains more than 15 significant digits, it is rounded using rounding to nearest. The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=fullName> method uses rounding to nearest to return a <xref:System.Decimal> value with 15 significant digits.  \n  \n [!code-csharp[System.Convert.ToDecimal#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#2)]\n [!code-vb[System.Convert.ToDecimal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#2)]","nodes":[{"pos":[0,426],"content":"The <xref:System.Decimal> value returned by this method contains a maximum of 15 significant digits. If the `value` parameter contains more than 15 significant digits, it is rounded using rounding to nearest. The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=fullName> method uses rounding to nearest to return a <xref:System.Decimal> value with 15 significant digits.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Decimal&gt;</ph> value returned by this method contains a maximum of 15 significant digits.","pos":[0,100],"source":"The <xref:System.Decimal> value returned by this method contains a maximum of 15 significant digits."},{"content":"If the <ph id=\"ph1\">`value`</ph> parameter contains more than 15 significant digits, it is rounded using rounding to nearest.","pos":[101,208],"source":" If the `value` parameter contains more than 15 significant digits, it is rounded using rounding to nearest."},{"content":"The following example illustrates how the <ph id=\"ph1\">&lt;xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=fullName&gt;</ph> method uses rounding to nearest to return a <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph> value with 15 significant digits.","pos":[209,426],"source":" The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=fullName> method uses rounding to nearest to return a <xref:System.Decimal> value with 15 significant digits."}]},{"pos":[433,708],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.ToDecimal#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.ToDecimal#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.ToDecimal#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#2)]\n [!code-vb[System.Convert.ToDecimal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#2)]"}],"pos":[336668,337382],"yaml":true,"extradata":"MT"},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[338091,338146],"yaml":true},{"content":"A decimal number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,58],"content":"A decimal number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A decimal number that is equivalent to <code>value</code>."}],"pos":[338204,338263],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Decimal.MaxValue\"></xref> or less than <xref href=\"System.Decimal.MinValue\"></xref>.","nodes":[{"pos":[0,138],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Decimal.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Decimal.MaxValue\"></xref> or less than <xref href=\"System.Decimal.MinValue\"></xref>."}],"pos":[338409,338548],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to an equivalent decimal number.","nodes":[{"pos":[0,90],"content":"Converts the value of the specified 16-bit signed integer to an equivalent decimal number.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to an equivalent decimal number.","pos":[0,90]}]}],"pos":[340000,340091],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[340656,340694],"yaml":true},{"content":"A decimal number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,58],"content":"A decimal number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A decimal number that is equivalent to <code>value</code>."}],"pos":[340752,340811],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[342336,342420],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[342572,342608],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[342666,342722],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[342874,342908],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.","pos":[0,114]}]}],"pos":[344010,344125],"yaml":true},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[344743,344780],"yaml":true},{"content":"The 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,66],"content":"The 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[344837,344904],"yaml":true},{"content":"Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.","nodes":[{"pos":[0,149],"content":"Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.","pos":[0,149]}]}],"pos":[346583,346733],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToDouble%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,152],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToDouble%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToDouble%2A?displayProperty=fullName> method of the underlying type of `value`."},{"pos":[159,447],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"For example, if <ph id=\"ph1\">`value`</ph> is a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> that represents a number, <ph id=\"ph3\">`provider`</ph> could supply culture-specific information about the notation used to represent that number.","pos":[110,288],"source":" For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number."}]},{"pos":[454,614],"content":"The base types ignore <ph id=\"ph1\">`provider`</ph>; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","source":"The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}],"pos":[346744,347365],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[348505,348587],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[348660,348725],"yaml":true},{"content":"A double-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,123],"content":"A double-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A double-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[348782,348906],"yaml":true},{"content":"<code>value</code> is not in an appropriate format for a <xref href=\"System.Double\"></xref> type.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format for a <ph id=\"ph2\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> type.","source":"<code>value</code> is not in an appropriate format for a <xref href=\"System.Double\"></xref> type."}],"pos":[349047,349145],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[349245,349339],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Double.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Double.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>."}],"pos":[349433,349595],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.","nodes":[{"pos":[0,116],"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.","pos":[0,116]}]}],"pos":[351047,351164],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[351784,351824],"yaml":true},{"content":"A double-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A double-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A double-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[351881,351964],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.","nodes":[{"pos":[0,116],"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.","pos":[0,116]}]}],"pos":[353523,353640],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[354259,354299],"yaml":true},{"content":"A double-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A double-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A double-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[354356,354439],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.","nodes":[{"pos":[0,117],"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.","pos":[0,117]}]}],"pos":[355998,356116],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[356737,356777],"yaml":true},{"content":"A double-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A double-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A double-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[356834,356917],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent double-precision floating-point number.","nodes":[{"pos":[0,113],"content":"Converts the specified string representation of a number to an equivalent double-precision floating-point number.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent double-precision floating-point number.","pos":[0,113]}]}],"pos":[358476,358590],"yaml":true},{"content":"Using the <xref:System.Convert.ToDouble%28System.String%29> method is equivalent to passing `value` to the <xref:System.Double.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,275],"content":"Using the <xref:System.Convert.ToDouble%28System.String%29> method is equivalent to passing `value` to the <xref:System.Double.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Convert.ToDouble%28System.String%29&gt;</ph> method is equivalent to passing <ph id=\"ph2\">`value`</ph> to the <ph id=\"ph3\">&lt;xref:System.Double.Parse%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[0,185],"source":"Using the <xref:System.Convert.ToDouble%28System.String%29> method is equivalent to passing `value` to the <xref:System.Double.Parse%28System.String%29?displayProperty=fullName> method."},{"content":"<ph id=\"ph1\">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.","pos":[186,275],"source":"`value` is interpreted by using the formatting conventions of the current thread culture."}]},{"pos":[282,538],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,256],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Double.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,156],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[157,256],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[358601,359144],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[359767,359813],"yaml":true},{"content":"A double-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,141],"content":"A double-precision floating-point number that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A double-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[359870,360012],"yaml":true},{"content":"<code>value</code> is not a number in a valid format.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a number in a valid format.","source":"<code>value</code> is not a number in a valid format."}],"pos":[360153,360207],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Double.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Double.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>."}],"pos":[360301,360463],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.","nodes":[{"pos":[0,131],"content":"Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.","pos":[0,131]}]}],"pos":[361915,362047],"yaml":true},{"content":"The single-precision floating-point number.","nodes":[{"pos":[0,43],"content":"The single-precision floating-point number.","nodes":[{"content":"The single-precision floating-point number.","pos":[0,43]}]}],"pos":[362766,362810],"yaml":true},{"content":"A double-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A double-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A double-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[362867,362950],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.","nodes":[{"pos":[0,174],"content":"Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.","pos":[0,174]}]}],"pos":[364576,364751],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.Double.Parse%2A?displayProperty=fullName> method on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,120],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.Double.Parse%2A?displayProperty=fullName&gt;</ph> method on <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.Double.Parse%2A?displayProperty=fullName> method on `value`."},{"pos":[127,480],"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[0,123],"source":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id=\"ph2\">`value`</ph>.","pos":[124,246],"source":" The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.","pos":[247,353],"source":" If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used."}]},{"pos":[487,743],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,256],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Double.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,156],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[157,256],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[364762,365512],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[366162,366208],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[366281,366346],"yaml":true},{"content":"A double-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,141],"content":"A double-precision floating-point number that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A double-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[366403,366545],"yaml":true},{"content":"<code>value</code> is not a number in a valid format.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a number in a valid format.","source":"<code>value</code> is not a number in a valid format."}],"pos":[366686,366740],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Double.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Double.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>."}],"pos":[366834,366996],"yaml":true},{"content":"Converts the value of the specified object to a double-precision floating-point number.","nodes":[{"pos":[0,87],"content":"Converts the value of the specified object to a double-precision floating-point number.","nodes":[{"content":"Converts the value of the specified object to a double-precision floating-point number.","pos":[0,87]}]}],"pos":[368448,368536],"yaml":true},{"content":"If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToDouble%2A?displayProperty=fullName>implementation of the underlying type of `value`.","nodes":[{"pos":[0,170],"content":"If <ph id=\"ph1\">`value`</ph> is not <ph id=\"ph2\">`null`</ph>, this method wraps a call to the <ph id=\"ph3\">&lt;xref:System.IConvertible.ToDouble%2A?displayProperty=fullName&gt;</ph>implementation of the underlying type of <ph id=\"ph4\">`value`</ph>.","source":"If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToDouble%2A?displayProperty=fullName>implementation of the underlying type of `value`."}],"pos":[368547,368718],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[369259,369352],"yaml":true},{"content":"A double-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,123],"content":"A double-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A double-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[369409,369533],"yaml":true},{"content":"<code>value</code> is not in an appropriate format for a <xref href=\"System.Double\"></xref> type.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format for a <ph id=\"ph2\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> type.","source":"<code>value</code> is not in an appropriate format for a <xref href=\"System.Double\"></xref> type."}],"pos":[369674,369772],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[369872,370024],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Double.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Double.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>."}],"pos":[370118,370280],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.","pos":[0,114]}]}],"pos":[371726,371841],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[372557,372595],"yaml":true},{"content":"A double-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A double-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A double-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[372652,372735],"yaml":true},{"content":"Converts the specified Boolean value to the equivalent double-precision floating-point number.","nodes":[{"pos":[0,94],"content":"Converts the specified Boolean value to the equivalent double-precision floating-point number.","nodes":[{"content":"Converts the specified Boolean value to the equivalent double-precision floating-point number.","pos":[0,94]}]}],"pos":[374247,374342],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[375062,375092],"yaml":true},{"content":"The number 1 if <code>value</code> is `true`; otherwise, 0.","nodes":[{"pos":[0,59],"content":"The number 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`true`</ph>; otherwise, 0.","source":"The number 1 if <code>value</code> is `true`; otherwise, 0."}],"pos":[375149,375209],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.","nodes":[{"pos":[0,116],"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.","pos":[0,116]}]}],"pos":[376703,376820],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[377534,377573],"yaml":true},{"content":"The double-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,84],"content":"The double-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The double-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[377630,377715],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[379209,379293],"yaml":true},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[379435,379469],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[379526,379582],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[379733,379767],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.","pos":[0,114]}]}],"pos":[380869,380984],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[381550,381588],"yaml":true},{"content":"A double-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A double-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A double-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[381645,381728],"yaml":true},{"content":"Converts the value of the specified decimal number to an equivalent double-precision floating-point number.","nodes":[{"pos":[0,107],"content":"Converts the value of the specified decimal number to an equivalent double-precision floating-point number.","nodes":[{"content":"Converts the value of the specified decimal number to an equivalent double-precision floating-point number.","pos":[0,107]}]}],"pos":[383240,383348],"yaml":true},{"content":"The decimal number to convert.","nodes":[{"pos":[0,30],"content":"The decimal number to convert.","nodes":[{"content":"The decimal number to convert.","pos":[0,30]}]}],"pos":[384071,384102],"yaml":true},{"content":"A double-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A double-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A double-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[384159,384242],"yaml":true},{"content":"Returns the specified double-precision floating-point number; no actual conversion is performed.","nodes":[{"pos":[0,96],"content":"Returns the specified double-precision floating-point number; no actual conversion is performed.","nodes":[{"content":"Returns the specified double-precision floating-point number; no actual conversion is performed.","pos":[0,96]}]}],"pos":[385748,385845],"yaml":true},{"content":"The double-precision floating-point number to return.","nodes":[{"pos":[0,53],"content":"The double-precision floating-point number to return.","nodes":[{"content":"The double-precision floating-point number to return.","pos":[0,53]}]}],"pos":[385991,386045],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[386102,386144],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.","pos":[0,114]}]}],"pos":[387644,387759],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[388328,388366],"yaml":true},{"content":"A double-precision floating-point number equivalent to <code>value</code>.","nodes":[{"pos":[0,74],"content":"A double-precision floating-point number equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A double-precision floating-point number equivalent to <code>value</code>."}],"pos":[388423,388498],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[390016,390100],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[390250,390286],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[390343,390399],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[390550,390584],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.","nodes":[{"pos":[0,97],"content":"Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.","pos":[0,97]}]}],"pos":[391680,391778],"yaml":true},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[392371,392408],"yaml":true},{"content":"A 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,64],"content":"A 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[392464,392529],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,157],"content":"Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.","pos":[0,157]}]}],"pos":[394201,394359],"yaml":true},{"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,353],"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[0,123],"source":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id=\"ph2\">`value`</ph>.","pos":[124,246],"source":" The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.","pos":[247,353],"source":" If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used."}]},{"pos":[360,615],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,255],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Int16.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,155],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[156,255],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[394370,394990],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[395765,395811],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[395884,395949],"yaml":true},{"content":"A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,124],"content":"A 16-bit signed integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[396005,396130],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[396270,396374],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>."}],"pos":[396468,396628],"yaml":true},{"content":"Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,131],"content":"Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.","pos":[0,131]}]}],"pos":[398194,398326],"yaml":true},{"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,288],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"For example, if <ph id=\"ph1\">`value`</ph> is a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> that represents a number, <ph id=\"ph3\">`provider`</ph> could supply culture-specific information about the notation used to represent that number.","pos":[110,288],"source":" For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number."}]},{"pos":[295,455],"content":"The base types ignore <ph id=\"ph1\">`provider`</ph>; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","source":"The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}],"pos":[398337,398797],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[399934,400016],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[400089,400154],"yaml":true},{"content":"A 16-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,106],"content":"A 16-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 16-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[400210,400317],"yaml":true},{"content":"<code>value</code> is not in an appropriate format for an <xref href=\"System.Int16\"></xref> type.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format for an <ph id=\"ph2\">&lt;xref href=\"System.Int16\"&gt;&lt;/xref&gt;</ph> type.","source":"<code>value</code> is not in an appropriate format for an <xref href=\"System.Int16\"></xref> type."}],"pos":[400457,400555],"yaml":true},{"content":"<code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>."}],"pos":[400655,400735],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>."}],"pos":[400829,400989],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.","pos":[0,99]}]}],"pos":[402435,402535],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[403154,403194],"yaml":true},{"content":"A 16-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 16-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit signed integer that is equivalent to <code>value</code>."}],"pos":[403250,403316],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref>.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref>."}],"pos":[403460,403539],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.","pos":[0,99]}]}],"pos":[405038,405138],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[405751,405791],"yaml":true},{"content":"A 16-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 16-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit signed integer that is equivalent to <code>value</code>."}],"pos":[405847,405913],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref>.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref>."}],"pos":[406057,406136],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.","nodes":[{"pos":[0,100],"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.","pos":[0,100]}]}],"pos":[407635,407736],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[408358,408398],"yaml":true},{"content":"A 16-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 16-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit signed integer that is equivalent to <code>value</code>."}],"pos":[408454,408520],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref>.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref>."}],"pos":[408664,408743],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 16-bit signed integer.","nodes":[{"pos":[0,96],"content":"Converts the specified string representation of a number to an equivalent 16-bit signed integer.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 16-bit signed integer.","pos":[0,96]}]}],"pos":[410242,410339],"yaml":true},{"content":"Using the <xref:System.Convert.ToInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int16.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,273],"content":"Using the <xref:System.Convert.ToInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int16.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Convert.ToInt16%28System.String%29&gt;</ph> method is equivalent to passing <ph id=\"ph2\">`value`</ph> to the <ph id=\"ph3\">&lt;xref:System.Int16.Parse%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[0,183],"source":"Using the <xref:System.Convert.ToInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int16.Parse%28System.String%29?displayProperty=fullName> method."},{"content":"<ph id=\"ph1\">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.","pos":[184,273],"source":"`value` is interpreted by using the formatting conventions of the current thread culture."}]},{"pos":[280,535],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,255],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Int16.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,155],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[156,255],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[410350,410890],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[411618,411664],"yaml":true},{"content":"A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,124],"content":"A 16-bit signed integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[411720,411845],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[411985,412089],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>."}],"pos":[412183,412343],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.","pos":[0,114]}]}],"pos":[413789,413904],"yaml":true},{"content":"The single-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The single-precision floating-point number to convert.","nodes":[{"content":"The single-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[414483,414538],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,213],"content":"<code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 16-bit signed integer.","pos":[0,65],"source":"<code>value</code>, rounded to the nearest 16-bit signed integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[66,213],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[414594,414808],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>."}],"pos":[414952,415087],"yaml":true},{"content":"Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.","nodes":[{"pos":[0,106],"content":"Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.","nodes":[{"content":"Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.","pos":[0,106]}]}],"pos":[416593,416700],"yaml":true},{"content":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int16> data type is converted to an <xref:System.Int16> value without the method throwing an exception. The following example increments <xref:System.Int16?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x8000 converts to -32768.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#5)]\n [!code-vb[System.Convert.BaseConversion#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#5)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.  \n  \n [!code-csharp[System.Convert.BaseConversion#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#6)]\n [!code-vb[System.Convert.BaseConversion#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#6)]","nodes":[{"pos":[0,100],"content":"If <ph id=\"ph1\">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id=\"ph2\">`value`</ph> parameter with \"0x\" or \"0X\".","source":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\"."},{"pos":[107,1012],"content":"Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int16> data type is converted to an <xref:System.Int16> value without the method throwing an exception. The following example increments <xref:System.Int16?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x8000 converts to -32768.\"","nodes":[{"content":"Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int16> data type is converted to an <xref:System.Int16> value without the method throwing an exception. The following example increments <xref:System.Int16?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x8000 converts to -32768.\"","pos":[0,905],"nodes":[{"content":"Because the negative sign is not supported for non-base 10 numeric representations, the <ph id=\"ph1\">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that negative numbers use two’s complement representation.","pos":[0,225],"source":"Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation."},{"content":"In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit.","pos":[226,339]},{"content":"As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <ph id=\"ph1\">&lt;xref:System.Int16&gt;</ph> data type is converted to an <ph id=\"ph2\">&lt;xref:System.Int16&gt;</ph> value without the method throwing an exception.","pos":[340,560],"source":" As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int16> data type is converted to an <xref:System.Int16> value without the method throwing an exception."},{"content":"The following example increments <ph id=\"ph1\">&lt;xref:System.Int16?displayProperty=fullName&gt;</ph> by one, converts the resulting number to its hexadecimal string representation, and then calls the <ph id=\"ph2\">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph> method.","pos":[561,809],"source":" The following example increments <xref:System.Int16?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method."},{"content":"Instead of throwing an exception, the method displays the message, \"0x8000 converts to -32768.\"","pos":[810,905]}]}]},{"pos":[1019,1314],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#5)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#5)]\n [!code-vb[System.Convert.BaseConversion#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#5)]"},{"pos":[1321,1863],"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.","nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.","pos":[0,542],"nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.","pos":[0,211]},{"content":"As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation.","pos":[212,425]},{"content":"Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.","pos":[426,542]}]}]},{"pos":[1870,2165],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#6<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#6)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#6)]\n [!code-vb[System.Convert.BaseConversion#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#6)]"}],"pos":[416711,418895],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[419494,419540],"yaml":true},{"content":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.","nodes":[{"pos":[0,76],"content":"The base of the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which must be 2, 8, 10, or 16.","source":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16."}],"pos":[419603,419680],"yaml":true},{"content":"A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,124],"content":"A 16-bit signed integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[419736,419861],"yaml":true},{"content":"<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;fromBase&lt;/code&gt;</ph> is not 2, 8, 10, or 16.","source":"<code>fromBase</code> is not 2, 8, 10, or 16."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,162],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign."}],"pos":[420005,420174],"yaml":true},{"content":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>."}],"pos":[420288,420352],"yaml":true},{"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"pos":[0,333],"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id=\"ph2\">&lt;code&gt;fromBase&lt;/code&gt;</ph>.","pos":[0,113],"source":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>."},{"content":"The exception message indicates that there are no digits to convert if the first character in <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is invalid; otherwise, the message indicates that <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> contains invalid trailing characters.","pos":[114,333],"source":" The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters."}]}],"pos":[420442,420776],"yaml":true},{"content":"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign."},{"pos":[106,110],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[117,276],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>."}],"pos":[420870,421157],"yaml":true},{"content":"Converts the value of the specified object to a 16-bit signed integer.","nodes":[{"pos":[0,70],"content":"Converts the value of the specified object to a 16-bit signed integer.","nodes":[{"content":"Converts the value of the specified object to a 16-bit signed integer.","pos":[0,70]}]}],"pos":[422603,422674],"yaml":true},{"content":"If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt16%2A?displayProperty=fullName> implementation of the underlying type of `value`.","nodes":[{"pos":[0,170],"content":"If <ph id=\"ph1\">`value`</ph> is not <ph id=\"ph2\">`null`</ph>, this method wraps a call to the <ph id=\"ph3\">&lt;xref:System.IConvertible.ToInt16%2A?displayProperty=fullName&gt;</ph> implementation of the underlying type of <ph id=\"ph4\">`value`</ph>.","source":"If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt16%2A?displayProperty=fullName> implementation of the underlying type of `value`."}],"pos":[422685,422856],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[423394,423487],"yaml":true},{"content":"A 16-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,106],"content":"A 16-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 16-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[423543,423650],"yaml":true},{"content":"<code>value</code> is not in an appropriate format for an <xref href=\"System.Int16\"></xref> type.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format for an <ph id=\"ph2\">&lt;xref href=\"System.Int16\"&gt;&lt;/xref&gt;</ph> type.","source":"<code>value</code> is not in an appropriate format for an <xref href=\"System.Int16\"></xref> type."}],"pos":[423790,423888],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[423988,424140],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>."}],"pos":[424234,424394],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.","nodes":[{"pos":[0,97],"content":"Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.","pos":[0,97]}]}],"pos":[425834,425932],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[426485,426523],"yaml":true},{"content":"The 16-bit signed integer equivalent of <code>value</code>.","nodes":[{"pos":[0,59],"content":"The 16-bit signed integer equivalent of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The 16-bit signed integer equivalent of <code>value</code>."}],"pos":[426579,426639],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>."}],"pos":[426783,426918],"yaml":true},{"content":"Returns the specified 16-bit signed integer; no actual conversion is performed.","nodes":[{"pos":[0,79],"content":"Returns the specified 16-bit signed integer; no actual conversion is performed.","nodes":[{"content":"Returns the specified 16-bit signed integer; no actual conversion is performed.","pos":[0,79]}]}],"pos":[428358,428438],"yaml":true},{"content":"The 16-bit signed integer to return.","nodes":[{"pos":[0,36],"content":"The 16-bit signed integer to return.","nodes":[{"content":"The 16-bit signed integer to return.","pos":[0,36]}]}],"pos":[428580,428617],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[428673,428715],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.","pos":[0,114]}]}],"pos":[430214,430329],"yaml":true},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[431020,431075],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,213],"content":"<code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 16-bit signed integer.","pos":[0,65],"source":"<code>value</code>, rounded to the nearest 16-bit signed integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[66,213],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[431131,431345],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>."}],"pos":[431489,431624],"yaml":true},{"content":"Converts the value of the specified decimal number to an equivalent 16-bit signed integer.","nodes":[{"pos":[0,90],"content":"Converts the value of the specified decimal number to an equivalent 16-bit signed integer.","nodes":[{"content":"Converts the value of the specified decimal number to an equivalent 16-bit signed integer.","pos":[0,90]}]}],"pos":[433076,433167],"yaml":true},{"content":"The decimal number to convert.","nodes":[{"pos":[0,30],"content":"The decimal number to convert.","nodes":[{"content":"The decimal number to convert.","pos":[0,30]}]}],"pos":[433871,433902],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,213],"content":"<code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 16-bit signed integer.","pos":[0,65],"source":"<code>value</code>, rounded to the nearest 16-bit signed integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[66,213],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[433958,434172],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>."}],"pos":[434316,434451],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[435909,435993],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[436141,436177],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[436233,436289],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[436439,436473],"yaml":true},{"content":"Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.","nodes":[{"pos":[0,94],"content":"Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.","nodes":[{"content":"Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.","pos":[0,94]}]}],"pos":[437563,437658],"yaml":true},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[438228,438262],"yaml":true},{"content":"A 16-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 16-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit signed integer that is equivalent to <code>value</code>."}],"pos":[438318,438384],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref>.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref>."}],"pos":[438528,438607],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.","pos":[0,99]}]}],"pos":[440041,440141],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[440700,440739],"yaml":true},{"content":"A 16-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 16-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit signed integer that is equivalent to <code>value</code>."}],"pos":[440795,440861],"yaml":true},{"content":"Converts the specified Boolean value to the equivalent 16-bit signed integer.","nodes":[{"pos":[0,77],"content":"Converts the specified Boolean value to the equivalent 16-bit signed integer.","nodes":[{"content":"Converts the specified Boolean value to the equivalent 16-bit signed integer.","pos":[0,77]}]}],"pos":[442366,442444],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[442993,443023],"yaml":true},{"content":"The number 1 if <code>value</code> is `true`; otherwise, 0.","nodes":[{"pos":[0,59],"content":"The number 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`true`</ph>; otherwise, 0.","source":"The number 1 if <code>value</code> is `true`; otherwise, 0."}],"pos":[443079,443139],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.","nodes":[{"pos":[0,97],"content":"Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.","pos":[0,97]}]}],"pos":[444632,444730],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[445289,445327],"yaml":true},{"content":"A 16-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 16-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit signed integer that is equivalent to <code>value</code>."}],"pos":[445383,445449],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>."}],"pos":[445593,445728],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.","pos":[0,114]}]}],"pos":[447174,447289],"yaml":true},{"content":"The single-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The single-precision floating-point number to convert.","nodes":[{"content":"The single-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[447853,447908],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,213],"content":"<code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 32-bit signed integer.","pos":[0,65],"source":"<code>value</code>, rounded to the nearest 32-bit signed integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[66,213],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[447964,448178],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref> or less than <xref href=\"System.Int32.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int32.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref> or less than <xref href=\"System.Int32.MinValue\"></xref>."}],"pos":[448322,448457],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.","nodes":[{"pos":[0,100],"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.","pos":[0,100]}]}],"pos":[449903,450004],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[450600,450640],"yaml":true},{"content":"A 32-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 32-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit signed integer that is equivalent to <code>value</code>."}],"pos":[450696,450762],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.","pos":[0,99]}]}],"pos":[452314,452414],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[453018,453058],"yaml":true},{"content":"A 32-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 32-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit signed integer that is equivalent to <code>value</code>."}],"pos":[453114,453180],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[453324,453403],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.","nodes":[{"pos":[0,97],"content":"Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.","pos":[0,97]}]}],"pos":[454896,454994],"yaml":true},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[455572,455609],"yaml":true},{"content":"A 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,64],"content":"A 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[455665,455730],"yaml":true},{"content":"Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,131],"content":"Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.","pos":[0,131]}]}],"pos":[457402,457534],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToInt32%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,151],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToInt32%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToInt32%2A?displayProperty=fullName> method of the underlying type of `value`."},{"pos":[158,446],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"For example, if <ph id=\"ph1\">`value`</ph> is a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> that represents a number, <ph id=\"ph3\">`provider`</ph> could supply culture-specific information about the notation used to represent that number.","pos":[110,288],"source":" For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number."}]},{"pos":[453,613],"content":"The base types ignore <ph id=\"ph1\">`provider`</ph>; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","source":"The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}],"pos":[457545,458165],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[459300,459382],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[459455,459520],"yaml":true},{"content":"A 32-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,106],"content":"A 32-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 32-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[459576,459683],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[459823,459875],"yaml":true},{"content":"<code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>."}],"pos":[459975,460055],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[460149,460309],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,157],"content":"Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.","pos":[0,157]}]}],"pos":[461875,462033],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.Int32.Parse%2A?displayProperty=fullName> method on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,119],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.Int32.Parse%2A?displayProperty=fullName&gt;</ph> method on <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.Int32.Parse%2A?displayProperty=fullName> method on `value`."},{"pos":[126,479],"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[0,123],"source":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id=\"ph2\">`value`</ph>.","pos":[124,246],"source":" The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.","pos":[247,353],"source":" If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used."}]},{"pos":[486,741],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,255],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Int32.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,155],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[156,255],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[462044,462792],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[463643,463689],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[463762,463827],"yaml":true},{"content":"A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,124],"content":"A 32-bit signed integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[463883,464008],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[464148,464252],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[464346,464506],"yaml":true},{"content":"Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.","nodes":[{"pos":[0,106],"content":"Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.","nodes":[{"content":"Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.","pos":[0,106]}]}],"pos":[466012,466119],"yaml":true},{"content":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int32> data type is converted to an <xref:System.Int32> value without the method throwing an exception. The following example increments <xref:System.Int32?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x80000000 converts to -2147483648.\"  \n  \n [!code-cpp[System.Convert.BaseConversion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#1)]\n [!code-csharp[System.Convert.BaseConversion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#1)]\n [!code-vb[System.Convert.BaseConversion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#1)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.  \n  \n [!code-cpp[System.Convert.BaseConversion#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#2)]\n [!code-csharp[System.Convert.BaseConversion#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#2)]\n [!code-vb[System.Convert.BaseConversion#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#2)]","nodes":[{"pos":[0,100],"content":"If <ph id=\"ph1\">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id=\"ph2\">`value`</ph> parameter with \"0x\" or \"0X\".","source":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\"."},{"pos":[107,1021],"content":"Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int32> data type is converted to an <xref:System.Int32> value without the method throwing an exception. The following example increments <xref:System.Int32?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x80000000 converts to -2147483648.\"","nodes":[{"content":"Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int32> data type is converted to an <xref:System.Int32> value without the method throwing an exception. The following example increments <xref:System.Int32?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x80000000 converts to -2147483648.\"","pos":[0,914],"nodes":[{"content":"Because the negative sign is not supported for non-base 10 numeric representations, the <ph id=\"ph1\">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that negative numbers use two’s complement representation.","pos":[0,225],"source":"Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation."},{"content":"In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit.","pos":[226,339]},{"content":"As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph> data type is converted to an <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph> value without the method throwing an exception.","pos":[340,560],"source":" As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int32> data type is converted to an <xref:System.Int32> value without the method throwing an exception."},{"content":"The following example increments <ph id=\"ph1\">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph> by one, converts the resulting number to its hexadecimal string representation, and then calls the <ph id=\"ph2\">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph> method.","pos":[561,809],"source":" The following example increments <xref:System.Int32?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method."},{"content":"Instead of throwing an exception, the method displays the message, \"0x80000000 converts to -2147483648.\"","pos":[810,914]}]}]},{"pos":[1028,1472],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#1<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#1<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#1)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Convert.BaseConversion#1<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#1)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Convert.BaseConversion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#1)]\n [!code-csharp[System.Convert.BaseConversion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#1)]\n [!code-vb[System.Convert.BaseConversion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#1)]"},{"pos":[1479,2021],"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.","nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.","pos":[0,542],"nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.","pos":[0,211]},{"content":"As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation.","pos":[212,425]},{"content":"Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.","pos":[426,542]}]}]},{"pos":[2028,2472],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Convert.BaseConversion#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#2)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Convert.BaseConversion#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#2)]\n [!code-csharp[System.Convert.BaseConversion#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#2)]\n [!code-vb[System.Convert.BaseConversion#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#2)]"}],"pos":[466130,468623],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[468779,468825],"yaml":true},{"content":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.","nodes":[{"pos":[0,76],"content":"The base of the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which must be 2, 8, 10, or 16.","source":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16."}],"pos":[468888,468965],"yaml":true},{"content":"A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,124],"content":"A 32-bit signed integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[469021,469146],"yaml":true},{"content":"<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;fromBase&lt;/code&gt;</ph> is not 2, 8, 10, or 16.","source":"<code>fromBase</code> is not 2, 8, 10, or 16."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,162],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign."}],"pos":[469290,469459],"yaml":true},{"content":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>."}],"pos":[469573,469637],"yaml":true},{"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"pos":[0,333],"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id=\"ph2\">&lt;code&gt;fromBase&lt;/code&gt;</ph>.","pos":[0,113],"source":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>."},{"content":"The exception message indicates that there are no digits to convert if the first character in <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is invalid; otherwise, the message indicates that <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> contains invalid trailing characters.","pos":[114,333],"source":" The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters."}]}],"pos":[469727,470061],"yaml":true},{"content":"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign."},{"pos":[106,110],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[117,276],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[470155,470442],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.","pos":[0,99]}]}],"pos":[471888,471988],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[472598,472638],"yaml":true},{"content":"A 32-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 32-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit signed integer that is equivalent to <code>value</code>."}],"pos":[472694,472760],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[472904,472983],"yaml":true},{"content":"Converts the value of the specified object to a 32-bit signed integer.","nodes":[{"pos":[0,70],"content":"Converts the value of the specified object to a 32-bit signed integer.","nodes":[{"content":"Converts the value of the specified object to a 32-bit signed integer.","pos":[0,70]}]}],"pos":[474482,474553],"yaml":true},{"content":"If`value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt32%2A?displayProperty=fullName>implementation of the underlying type of `value`.","nodes":[{"pos":[0,168],"content":"If<ph id=\"ph1\">`value`</ph> is not <ph id=\"ph2\">`null`</ph>, this method wraps a call to the <ph id=\"ph3\">&lt;xref:System.IConvertible.ToInt32%2A?displayProperty=fullName&gt;</ph>implementation of the underlying type of <ph id=\"ph4\">`value`</ph>.","source":"If`value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt32%2A?displayProperty=fullName>implementation of the underlying type of `value`."}],"pos":[474564,474733],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[475256,475349],"yaml":true},{"content":"A 32-bit signed integer equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,98],"content":"A 32-bit signed integer equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 32-bit signed integer equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[475405,475504],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[475644,475696],"yaml":true},{"content":"<code>value</code> does not implement the  <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the  <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the  <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[101,105],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[112,144],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[475796,475949],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[476043,476203],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 32-bit signed integer.","nodes":[{"pos":[0,96],"content":"Converts the specified string representation of a number to an equivalent 32-bit signed integer.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 32-bit signed integer.","pos":[0,96]}]}],"pos":[477649,477746],"yaml":true},{"content":"Using the <xref:System.Convert.ToInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int32.Parse%28System.String%29?displayProperty=fullName> method.`value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,272],"content":"Using the <xref:System.Convert.ToInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int32.Parse%28System.String%29?displayProperty=fullName> method.`value` is interpreted by using the formatting conventions of the current thread culture.","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Convert.ToInt32%28System.String%29&gt;</ph> method is equivalent to passing <ph id=\"ph2\">`value`</ph> to the <ph id=\"ph3\">&lt;xref:System.Int32.Parse%28System.String%29?displayProperty=fullName&gt;</ph> method.<ph id=\"ph4\">`value`</ph>","pos":[0,190],"source":"Using the <xref:System.Convert.ToInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int32.Parse%28System.String%29?displayProperty=fullName> method.`value`"},{"content":"is interpreted by using the formatting conventions of the current thread culture.","pos":[191,272]}]},{"pos":[279,534],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,255],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Int32.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,155],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[156,255],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[477757,478296],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[478830,478876],"yaml":true},{"content":"A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,124],"content":"A 32-bit signed integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[478932,479057],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[479197,479301],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[479395,479555],"yaml":true},{"content":"Returns the specified 32-bit signed integer; no actual conversion is performed.","nodes":[{"pos":[0,79],"content":"Returns the specified 32-bit signed integer; no actual conversion is performed.","nodes":[{"content":"Returns the specified 32-bit signed integer; no actual conversion is performed.","pos":[0,79]}]}],"pos":[480995,481075],"yaml":true},{"content":"The 32-bit signed integer to return.","nodes":[{"pos":[0,36],"content":"The 32-bit signed integer to return.","nodes":[{"content":"The 32-bit signed integer to return.","pos":[0,36]}]}],"pos":[481213,481250],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[481306,481348],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.","pos":[0,99]}]}],"pos":[482835,482935],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[483459,483498],"yaml":true},{"content":"A 32-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 32-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit signed integer that is equivalent to <code>value</code>."}],"pos":[483554,483620],"yaml":true},{"content":"Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.","nodes":[{"pos":[0,94],"content":"Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.","nodes":[{"content":"Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.","pos":[0,94]}]}],"pos":[485107,485202],"yaml":true},{"content":"The <xref:System.Convert.ToInt32%28System.Char%29> method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the `value` argument. If `value` is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value.","nodes":[{"pos":[0,281],"content":"The <xref:System.Convert.ToInt32%28System.Char%29> method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the `value` argument. If `value` is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.ToInt32%28System.Char%29&gt;</ph> method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the <ph id=\"ph2\">`value`</ph> argument.","pos":[0,159],"source":"The <xref:System.Convert.ToInt32%28System.Char%29> method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the `value` argument."},{"content":"If <ph id=\"ph1\">`value`</ph> is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value.","pos":[160,281],"source":" If `value` is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value."}]}],"pos":[485213,485495],"yaml":true,"extradata":"MT"},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[486025,486059],"yaml":true},{"content":"A 32-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 32-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit signed integer that is equivalent to <code>value</code>."}],"pos":[486115,486181],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[487692,487776],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[487922,487958],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[488014,488070],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[488220,488254],"yaml":true},{"content":"Converts the specified Boolean value to the equivalent 32-bit signed integer.","nodes":[{"pos":[0,77],"content":"Converts the specified Boolean value to the equivalent 32-bit signed integer.","nodes":[{"content":"Converts the specified Boolean value to the equivalent 32-bit signed integer.","pos":[0,77]}]}],"pos":[489362,489440],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[489983,490013],"yaml":true},{"content":"The number 1 if <code>value</code> is `true`; otherwise, 0.","nodes":[{"pos":[0,59],"content":"The number 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`true`</ph>; otherwise, 0.","source":"The number 1 if <code>value</code> is `true`; otherwise, 0."}],"pos":[490069,490129],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.","pos":[0,114]}]}],"pos":[491628,491743],"yaml":true},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[492303,492358],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,213],"content":"<code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 32-bit signed integer.","pos":[0,65],"source":"<code>value</code>, rounded to the nearest 32-bit signed integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[66,213],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[492414,492628],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref> or less than <xref href=\"System.Int32.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int32.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref> or less than <xref href=\"System.Int32.MinValue\"></xref>."}],"pos":[492772,492907],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.","nodes":[{"pos":[0,97],"content":"Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.","pos":[0,97]}]}],"pos":[494347,494445],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[494989,495027],"yaml":true},{"content":"A 32-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 32-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit signed integer that is equivalent to <code>value</code>."}],"pos":[495083,495149],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref> or less than <xref href=\"System.Int32.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int32.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref> or less than <xref href=\"System.Int32.MinValue\"></xref>."}],"pos":[495293,495428],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.","nodes":[{"pos":[0,97],"content":"Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.","pos":[0,97]}]}],"pos":[496868,496966],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[497509,497547],"yaml":true},{"content":"A 32-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 32-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit signed integer that is equivalent to <code>value</code>."}],"pos":[497603,497669],"yaml":true},{"content":"Converts the value of the specified decimal number to an equivalent 32-bit signed integer.","nodes":[{"pos":[0,90],"content":"Converts the value of the specified decimal number to an equivalent 32-bit signed integer.","nodes":[{"content":"Converts the value of the specified decimal number to an equivalent 32-bit signed integer.","pos":[0,90]}]}],"pos":[499174,499265],"yaml":true},{"content":"The decimal number to convert.","nodes":[{"pos":[0,30],"content":"The decimal number to convert.","nodes":[{"content":"The decimal number to convert.","pos":[0,30]}]}],"pos":[499829,499860],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,213],"content":"<code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 32-bit signed integer.","pos":[0,65],"source":"<code>value</code>, rounded to the nearest 32-bit signed integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[66,213],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[499916,500130],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref> or less than <xref href=\"System.Int32.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int32.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref> or less than <xref href=\"System.Int32.MinValue\"></xref>."}],"pos":[500274,500409],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.","pos":[0,114]}]}],"pos":[501872,501987],"yaml":true},{"content":"The single-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The single-precision floating-point number to convert.","nodes":[{"content":"The single-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[502556,502611],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,213],"content":"<code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 64-bit signed integer.","pos":[0,65],"source":"<code>value</code>, rounded to the nearest 64-bit signed integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[66,213],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[502667,502881],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int64.MaxValue\"></xref> or less than <xref href=\"System.Int64.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int64.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int64.MaxValue\"></xref> or less than <xref href=\"System.Int64.MinValue\"></xref>."}],"pos":[503025,503160],"yaml":true},{"content":"Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.","nodes":[{"pos":[0,106],"content":"Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.","nodes":[{"content":"Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.","pos":[0,106]}]}],"pos":[504666,504773],"yaml":true},{"content":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int64> data type is converted to an <xref:System.Int64> value without the method throwing an exception. The following example converts <xref:System.UInt64.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0xFFFFFFFFFFFFFFFF converts to -1.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#7)]\n [!code-vb[System.Convert.BaseConversion#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#7)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on.  \n  \n [!code-csharp[System.Convert.BaseConversion#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#8)]\n [!code-vb[System.Convert.BaseConversion#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#8)]  \n  \n The following example attempts to interpret each element in a string array as a hexadecimal string and convert it to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_2.cs#15)]\n [!code-vb[System.Convert.ToInt64#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_2.vb#15)]","nodes":[{"pos":[0,100],"content":"If <ph id=\"ph1\">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id=\"ph2\">`value`</ph> parameter with \"0x\" or \"0X\".","source":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\"."},{"pos":[107,969],"content":"Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int64> data type is converted to an <xref:System.Int64> value without the method throwing an exception. The following example converts <xref:System.UInt64.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0xFFFFFFFFFFFFFFFF converts to -1.\"","nodes":[{"content":"Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int64> data type is converted to an <xref:System.Int64> value without the method throwing an exception. The following example converts <xref:System.UInt64.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0xFFFFFFFFFFFFFFFF converts to -1.\"","pos":[0,862],"nodes":[{"content":"Because the negative sign is not supported for non-base 10 numeric representations, the <ph id=\"ph1\">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that negative numbers use two’s complement representation.","pos":[0,225],"source":"Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation."},{"content":"In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit.","pos":[226,343]},{"content":"As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph> data type is converted to an <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph> value without the method throwing an exception.","pos":[344,564],"source":" As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int64> data type is converted to an <xref:System.Int64> value without the method throwing an exception."},{"content":"The following example converts <ph id=\"ph1\">&lt;xref:System.UInt64.MaxValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id=\"ph2\">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph> method.","pos":[565,758],"source":" The following example converts <xref:System.UInt64.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method."},{"content":"Instead of throwing an exception, the method displays the message, \"0xFFFFFFFFFFFFFFFF converts to -1.\"","pos":[759,862]}]}]},{"pos":[976,1271],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#7<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#7<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#7)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#7)]\n [!code-vb[System.Convert.BaseConversion#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#7)]"},{"pos":[1278,1865],"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on.","nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on.","pos":[0,587],"nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.","pos":[0,211]},{"content":"As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation.","pos":[212,450]},{"content":"Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on.","pos":[451,587]}]}]},{"pos":[1872,2167],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#8<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#8<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#8)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#8)]\n [!code-vb[System.Convert.BaseConversion#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#8)]"},{"pos":[2174,2306],"content":"The following example attempts to interpret each element in a string array as a hexadecimal string and convert it to a long integer.","nodes":[{"content":"The following example attempts to interpret each element in a string array as a hexadecimal string and convert it to a long integer.","pos":[0,132]}]},{"pos":[2313,2582],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.ToInt64#15<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_2.cs#15)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.ToInt64#15<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_2.vb#15)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.ToInt64#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_2.cs#15)]\n [!code-vb[System.Convert.ToInt64#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_2.vb#15)]"}],"pos":[504784,507390],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[507547,507593],"yaml":true},{"content":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.","nodes":[{"pos":[0,76],"content":"The base of the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which must be 2, 8, 10, or 16.","source":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16."}],"pos":[507656,507733],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,124],"content":"A 64-bit signed integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[507789,507914],"yaml":true},{"content":"<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;fromBase&lt;/code&gt;</ph> is not 2, 8, 10, or 16.","source":"<code>fromBase</code> is not 2, 8, 10, or 16."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,162],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign."}],"pos":[508058,508227],"yaml":true},{"content":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>."}],"pos":[508341,508405],"yaml":true},{"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"pos":[0,333],"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id=\"ph2\">&lt;code&gt;fromBase&lt;/code&gt;</ph>.","pos":[0,113],"source":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>."},{"content":"The exception message indicates that there are no digits to convert if the first character in <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is invalid; otherwise, the message indicates that <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> contains invalid trailing characters.","pos":[114,333],"source":" The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters."}]}],"pos":[508495,508829],"yaml":true},{"content":"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign."},{"pos":[106,110],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[117,276],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int64.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[508923,509210],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,157],"content":"Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.","pos":[0,157]}]}],"pos":[510776,510934],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.Int64.Parse%2A?displayProperty=fullName> method on `value`.  \n  \n `provider` is an `IFormatProvider` instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The `NumberFormatInfo` object provides culture-specific information about the format of `value`. If `provider` is `null`, the `NumberFormatInfo` for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,119],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.Int64.Parse%2A?displayProperty=fullName&gt;</ph> method on <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.Int64.Parse%2A?displayProperty=fullName> method on `value`."},{"pos":[126,415],"content":"`provider` is an `IFormatProvider` instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The `NumberFormatInfo` object provides culture-specific information about the format of `value`. If `provider` is `null`, the `NumberFormatInfo` for the current culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> is an <ph id=\"ph2\">`IFormatProvider`</ph> instance that obtains a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[0,111],"source":"`provider` is an `IFormatProvider` instance that obtains a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"The <ph id=\"ph1\">`NumberFormatInfo`</ph> object provides culture-specific information about the format of <ph id=\"ph2\">`value`</ph>.","pos":[112,208],"source":" The `NumberFormatInfo` object provides culture-specific information about the format of `value`."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">`NumberFormatInfo`</ph> for the current culture is used.","pos":[209,289],"source":" If `provider` is `null`, the `NumberFormatInfo` for the current culture is used."}]},{"pos":[422,677],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,255],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Int64.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,155],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[156,255],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[510945,511629],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[512481,512527],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[512600,512665],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,124],"content":"A 64-bit signed integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[512721,512846],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[512986,513090],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int64.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[513184,513344],"yaml":true},{"content":"Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,131],"content":"Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.","pos":[0,131]}]}],"pos":[514910,515042],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToInt64%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,151],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToInt64%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToInt64%2A?displayProperty=fullName> method of the underlying type of `value`."},{"pos":[158,446],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"For example, if <ph id=\"ph1\">`value`</ph> is a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> that represents a number, <ph id=\"ph3\">`provider`</ph> could supply culture-specific information about the notation used to represent that number.","pos":[110,288],"source":" For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number."}]},{"pos":[453,613],"content":"The base types ignore <ph id=\"ph1\">`provider`</ph>; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","source":"The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}],"pos":[515053,515673],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[516809,516891],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[516964,517029],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,106],"content":"A 64-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 64-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[517085,517192],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[517332,517384],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[517484,517636],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int64.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[517730,517890],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.","pos":[0,99]}]}],"pos":[519336,519436],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[520045,520085],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 64-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit signed integer that is equivalent to <code>value</code>."}],"pos":[520141,520207],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[520351,520430],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.","pos":[0,99]}]}],"pos":[521929,522029],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[522621,522661],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 64-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit signed integer that is equivalent to <code>value</code>."}],"pos":[522717,522783],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.","nodes":[{"pos":[0,100],"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.","pos":[0,100]}]}],"pos":[524335,524436],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[525037,525077],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 64-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit signed integer that is equivalent to <code>value</code>."}],"pos":[525133,525199],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 64-bit signed integer.","nodes":[{"pos":[0,96],"content":"Converts the specified string representation of a number to an equivalent 64-bit signed integer.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 64-bit signed integer.","pos":[0,96]}]}],"pos":[526751,526848],"yaml":true},{"content":"Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,273],"content":"Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Convert.ToInt64%28System.String%29&gt;</ph> method is equivalent to passing <ph id=\"ph2\">`value`</ph> to the <ph id=\"ph3\">&lt;xref:System.Int64.Parse%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[0,183],"source":"Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=fullName> method."},{"content":"<ph id=\"ph1\">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.","pos":[184,273],"source":"`value` is interpreted by using the formatting conventions of the current thread culture."}]},{"pos":[280,535],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,255],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Int64.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,155],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[156,255],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[526859,527399],"yaml":true,"extradata":"MT"},{"content":"A string that contains a number to convert.","nodes":[{"pos":[0,43],"content":"A string that contains a number to convert.","nodes":[{"content":"A string that contains a number to convert.","pos":[0,43]}]}],"pos":[527943,527987],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,124],"content":"A 64-bit signed integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[528043,528168],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[528308,528412],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int64.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[528506,528666],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.","nodes":[{"pos":[0,97],"content":"Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.","pos":[0,97]}]}],"pos":[530106,530204],"yaml":true},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[530782,530819],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 64-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit signed integer that is equivalent to <code>value</code>."}],"pos":[530875,530941],"yaml":true},{"content":"Converts the value of the specified object to a 64-bit signed integer.","nodes":[{"pos":[0,70],"content":"Converts the value of the specified object to a 64-bit signed integer.","nodes":[{"content":"Converts the value of the specified object to a 64-bit signed integer.","pos":[0,70]}]}],"pos":[532493,532564],"yaml":true},{"content":"If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt64%2A?displayProperty=fullName> implementation of the underlying type of `value`.","nodes":[{"pos":[0,170],"content":"If <ph id=\"ph1\">`value`</ph> is not <ph id=\"ph2\">`null`</ph>, this method wraps a call to the <ph id=\"ph3\">&lt;xref:System.IConvertible.ToInt64%2A?displayProperty=fullName&gt;</ph> implementation of the underlying type of <ph id=\"ph4\">`value`</ph>.","source":"If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt64%2A?displayProperty=fullName> implementation of the underlying type of `value`."}],"pos":[532575,532746],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[533274,533367],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,106],"content":"A 64-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 64-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[533423,533530],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[533670,533722],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[533822,533974],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Int64.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[534068,534228],"yaml":true},{"content":"Returns the specified 64-bit signed integer; no actual conversion is performed.","nodes":[{"pos":[0,79],"content":"Returns the specified 64-bit signed integer; no actual conversion is performed.","nodes":[{"content":"Returns the specified 64-bit signed integer; no actual conversion is performed.","pos":[0,79]}]}],"pos":[535668,535748],"yaml":true},{"content":"A 64-bit signed integer.","nodes":[{"pos":[0,24],"content":"A 64-bit signed integer.","nodes":[{"content":"A 64-bit signed integer.","pos":[0,24]}]}],"pos":[536281,536306],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[536362,536404],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.","pos":[0,99]}]}],"pos":[537891,537991],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[538520,538559],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 64-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit signed integer that is equivalent to <code>value</code>."}],"pos":[538615,538681],"yaml":true},{"content":"Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.","nodes":[{"pos":[0,94],"content":"Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.","nodes":[{"content":"Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.","pos":[0,94]}]}],"pos":[540168,540263],"yaml":true},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[540801,540835],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 64-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit signed integer that is equivalent to <code>value</code>."}],"pos":[540891,540957],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[542468,542552],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[542699,542735],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[542791,542847],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[542997,543031],"yaml":true},{"content":"Converts the specified Boolean value to the equivalent 64-bit signed integer.","nodes":[{"pos":[0,77],"content":"Converts the specified Boolean value to the equivalent 64-bit signed integer.","nodes":[{"content":"Converts the specified Boolean value to the equivalent 64-bit signed integer.","pos":[0,77]}]}],"pos":[544139,544217],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[544766,544796],"yaml":true},{"content":"The number 1 if <code>value</code> is `true`; otherwise, 0.","nodes":[{"pos":[0,59],"content":"The number 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`true`</ph>; otherwise, 0.","source":"The number 1 if <code>value</code> is `true`; otherwise, 0."}],"pos":[544852,544912],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.","pos":[0,114]}]}],"pos":[546411,546526],"yaml":true},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[547092,547147],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,213],"content":"<code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 64-bit signed integer.","pos":[0,65],"source":"<code>value</code>, rounded to the nearest 64-bit signed integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[66,213],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[547203,547417],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int64.MaxValue\"></xref> or less than <xref href=\"System.Int64.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int64.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int64.MaxValue\"></xref> or less than <xref href=\"System.Int64.MinValue\"></xref>."}],"pos":[547561,547696],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.","nodes":[{"pos":[0,97],"content":"Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.","pos":[0,97]}]}],"pos":[549136,549234],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[549775,549813],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 64-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit signed integer that is equivalent to <code>value</code>."}],"pos":[549869,549935],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.","nodes":[{"pos":[0,97],"content":"Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.","pos":[0,97]}]}],"pos":[551428,551526],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[551665,551703],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 64-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit signed integer that is equivalent to <code>value</code>."}],"pos":[551759,551825],"yaml":true},{"content":"Converts the value of the specified decimal number to an equivalent 64-bit signed integer.","nodes":[{"pos":[0,90],"content":"Converts the value of the specified decimal number to an equivalent 64-bit signed integer.","nodes":[{"content":"Converts the value of the specified decimal number to an equivalent 64-bit signed integer.","pos":[0,90]}]}],"pos":[553330,553421],"yaml":true},{"content":"The decimal number to convert.","nodes":[{"pos":[0,30],"content":"The decimal number to convert.","nodes":[{"content":"The decimal number to convert.","pos":[0,30]}]}],"pos":[553990,554021],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,213],"content":"<code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 64-bit signed integer.","pos":[0,65],"source":"<code>value</code>, rounded to the nearest 64-bit signed integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[66,213],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[554077,554291],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.Int64.MaxValue\"></xref> or less than <xref href=\"System.Int64.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Int64.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.Int64.MaxValue\"></xref> or less than <xref href=\"System.Int64.MinValue\"></xref>."}],"pos":[554435,554570],"yaml":true},{"content":"Returns the specified 8-bit signed integer; no actual conversion is performed.","nodes":[{"pos":[0,78],"content":"Returns the specified 8-bit signed integer; no actual conversion is performed.","nodes":[{"content":"Returns the specified 8-bit signed integer; no actual conversion is performed.","pos":[0,78]}]}],"pos":[556010,556089],"yaml":true},{"content":"The 8-bit signed integer to return.","nodes":[{"pos":[0,35],"content":"The 8-bit signed integer to return.","nodes":[{"content":"The 8-bit signed integer to return.","pos":[0,35]}]}],"pos":[556276,556312],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[556368,556410],"yaml":true},{"content":"Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.","nodes":[{"pos":[0,105],"content":"Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.","nodes":[{"content":"Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.","pos":[0,105]}]}],"pos":[558022,558128],"yaml":true},{"content":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.SByte> data type is converted to an <xref:System.SByte> value without the method throwing an exception. The following example converts <xref:System.Byte.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0xff converts to -1.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#9)]\n [!code-vb[System.Convert.BaseConversion#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#9)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on.  \n  \n [!code-csharp[System.Convert.BaseConversion#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#10)]\n [!code-vb[System.Convert.BaseConversion#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#10)]","nodes":[{"pos":[0,100],"content":"If <ph id=\"ph1\">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id=\"ph2\">`value`</ph> parameter with \"0x\" or \"0X\".","source":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\"."},{"pos":[107,934],"content":"Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.SByte> data type is converted to an <xref:System.SByte> value without the method throwing an exception. The following example converts <xref:System.Byte.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0xff converts to -1.\"","nodes":[{"content":"Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.SByte> data type is converted to an <xref:System.SByte> value without the method throwing an exception. The following example converts <xref:System.Byte.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0xff converts to -1.\"","pos":[0,827],"nodes":[{"content":"Because the negative sign is not supported for non-base 10 numeric representations, the <ph id=\"ph1\">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that negative numbers use two’s complement representation.","pos":[0,225],"source":"Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation."},{"content":"In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit.","pos":[226,324]},{"content":"As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <ph id=\"ph1\">&lt;xref:System.SByte&gt;</ph> data type is converted to an <ph id=\"ph2\">&lt;xref:System.SByte&gt;</ph> value without the method throwing an exception.","pos":[325,545],"source":" As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.SByte> data type is converted to an <xref:System.SByte> value without the method throwing an exception."},{"content":"The following example converts <ph id=\"ph1\">&lt;xref:System.Byte.MaxValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id=\"ph2\">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph> method.","pos":[546,737],"source":" The following example converts <xref:System.Byte.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method."},{"content":"Instead of throwing an exception, the method displays the message, \"0xff converts to -1.\"","pos":[738,827]}]}]},{"pos":[941,1236],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#9<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#9<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#9)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#9)]\n [!code-vb[System.Convert.BaseConversion#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#9)]"},{"pos":[1243,1833],"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on.","nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on.","pos":[0,590],"nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.","pos":[0,211]},{"content":"As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation.","pos":[212,450]},{"content":"Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on.","pos":[451,590]}]}]},{"pos":[1840,2139],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#10)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#10)]\n [!code-vb[System.Convert.BaseConversion#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#10)]"}],"pos":[558139,560297],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[560984,561030],"yaml":true},{"content":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.","nodes":[{"pos":[0,76],"content":"The base of the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which must be 2, 8, 10, or 16.","source":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16."}],"pos":[561093,561170],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,124],"content":"An 8-bit signed integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"An 8-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[561226,561351],"yaml":true},{"content":"<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;fromBase&lt;/code&gt;</ph> is not 2, 8, 10, or 16.","source":"<code>fromBase</code> is not 2, 8, 10, or 16."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,162],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign."}],"pos":[561495,561664],"yaml":true},{"content":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>."}],"pos":[561778,561842],"yaml":true},{"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"pos":[0,333],"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id=\"ph2\">&lt;code&gt;fromBase&lt;/code&gt;</ph>.","pos":[0,113],"source":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>."},{"content":"The exception message indicates that there are no digits to convert if the first character in <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is invalid; otherwise, the message indicates that <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> contains invalid trailing characters.","pos":[114,333],"source":" The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters."}]}],"pos":[561932,562266],"yaml":true},{"content":"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign."},{"pos":[106,110],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[117,276],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>."}],"pos":[562360,562647],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,156],"content":"Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.","pos":[0,156]}]}],"pos":[564266,564423],"yaml":true},{"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,353],"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[0,123],"source":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id=\"ph2\">`value`</ph>.","pos":[124,246],"source":" The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.","pos":[247,353],"source":" If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used."}]},{"pos":[360,615],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,255],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.SByte.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,155],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[156,255],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[564434,565054],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[565885,565931],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[566004,566069],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"An 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[566125,566191],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[566343,566373],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[566463,566567],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>."}],"pos":[566661,566821],"yaml":true},{"content":"Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,131],"content":"Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.","pos":[0,131]}]}],"pos":[568440,568572],"yaml":true},{"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,288],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"For example, if <ph id=\"ph1\">`value`</ph> is a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> that represents a number, <ph id=\"ph3\">`provider`</ph> could supply culture-specific information about the notation used to represent that number.","pos":[110,288],"source":" For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number."}]},{"pos":[295,455],"content":"The base types ignore <ph id=\"ph1\">`provider`</ph>; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","source":"The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}],"pos":[568583,569043],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[570597,570679],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[570752,570817],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,106],"content":"An 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"An 8-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[570873,570980],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[571120,571172],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[571272,571424],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>."}],"pos":[571518,571678],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.","nodes":[{"pos":[0,98],"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.","pos":[0,98]}]}],"pos":[573177,573276],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[573874,573914],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"An 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[573970,574036],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>."}],"pos":[574180,574315],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.","nodes":[{"pos":[0,98],"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.","pos":[0,98]}]}],"pos":[575814,575913],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[576501,576541],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"An 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[576597,576663],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>."}],"pos":[576807,576942],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 8-bit signed integer.","nodes":[{"pos":[0,95],"content":"Converts the specified string representation of a number to an equivalent 8-bit signed integer.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 8-bit signed integer.","pos":[0,95]}]}],"pos":[578441,578537],"yaml":true},{"content":"Using the <xref:System.Convert.ToSByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.SByte.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,273],"content":"Using the <xref:System.Convert.ToSByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.SByte.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Convert.ToSByte%28System.String%29&gt;</ph> method is equivalent to passing <ph id=\"ph2\">`value`</ph> to the <ph id=\"ph3\">&lt;xref:System.SByte.Parse%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[0,183],"source":"Using the <xref:System.Convert.ToSByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.SByte.Parse%28System.String%29?displayProperty=fullName> method."},{"content":"<ph id=\"ph1\">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.","pos":[184,273],"source":"`value` is interpreted by using the formatting conventions of the current thread culture."}]},{"pos":[280,535],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,255],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.SByte.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,155],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[156,255],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[578548,579088],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[579872,579918],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if value is `null`.","nodes":[{"pos":[0,111],"content":"An 8-bit signed integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if value is <ph id=\"ph2\">`null`</ph>.","source":"An 8-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if value is `null`."}],"pos":[579974,580086],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[580226,580330],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>."}],"pos":[580424,580584],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.","nodes":[{"pos":[0,113],"content":"Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.","pos":[0,113]}]}],"pos":[582083,582197],"yaml":true},{"content":"The single-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The single-precision floating-point number to convert.","nodes":[{"content":"The single-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[582805,582860],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,212],"content":"<code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 8-bit signed integer.","pos":[0,64],"source":"<code>value</code>, rounded to the nearest 8-bit signed integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[65,212],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[582916,583129],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>."}],"pos":[583273,583408],"yaml":true},{"content":"Converts the value of the specified object to an 8-bit signed integer.","nodes":[{"pos":[0,70],"content":"Converts the value of the specified object to an 8-bit signed integer.","nodes":[{"content":"Converts the value of the specified object to an 8-bit signed integer.","pos":[0,70]}]}],"pos":[584907,584978],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName> method of the underlying type of `value`.","nodes":[{"pos":[0,151],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName> method of the underlying type of `value`."}],"pos":[584989,585141],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[585712,585805],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,106],"content":"An 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"An 8-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[585861,585968],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[586108,586160],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[586260,586412],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>."}],"pos":[586506,586666],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.","pos":[0,99]}]}],"pos":[588165,588265],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[588875,588915],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"An 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[588971,589037],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref>.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref>."}],"pos":[589181,589260],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.","nodes":[{"pos":[0,96],"content":"Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.","pos":[0,96]}]}],"pos":[590753,590850],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[591443,591481],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"An 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[591537,591603],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>."}],"pos":[591747,591882],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.","nodes":[{"pos":[0,96],"content":"Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.","pos":[0,96]}]}],"pos":[593375,593472],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[594064,594102],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"An 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[594158,594224],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>."}],"pos":[594368,594503],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.","nodes":[{"pos":[0,98],"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.","pos":[0,98]}]}],"pos":[595990,596089],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[596667,596706],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"An 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[596762,596828],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref>.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref>."}],"pos":[596972,597051],"yaml":true},{"content":"Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.","nodes":[{"pos":[0,93],"content":"Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.","nodes":[{"content":"Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.","pos":[0,93]}]}],"pos":[598538,598632],"yaml":true},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[599235,599269],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"An 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[599325,599391],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref>.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref>."}],"pos":[599535,599614],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[601125,601209],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[601402,601438],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[601494,601550],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[601700,601734],"yaml":true},{"content":"Converts the specified Boolean value to the equivalent 8-bit signed integer.","nodes":[{"pos":[0,76],"content":"Converts the specified Boolean value to the equivalent 8-bit signed integer.","nodes":[{"content":"Converts the specified Boolean value to the equivalent 8-bit signed integer.","pos":[0,76]}]}],"pos":[602895,602972],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[603556,603586],"yaml":true},{"content":"The number 1 if <code>value</code> is `true`; otherwise, 0.","nodes":[{"pos":[0,59],"content":"The number 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`true`</ph>; otherwise, 0.","source":"The number 1 if <code>value</code> is `true`; otherwise, 0."}],"pos":[603642,603702],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.","nodes":[{"pos":[0,113],"content":"Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.","pos":[0,113]}]}],"pos":[605254,605368],"yaml":true},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[605977,606032],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,212],"content":"<code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 8-bit signed integer.","pos":[0,64],"source":"<code>value</code>, rounded to the nearest 8-bit signed integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[65,212],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[606088,606301],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>."}],"pos":[606445,606580],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.","nodes":[{"pos":[0,97],"content":"Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.","pos":[0,97]}]}],"pos":[608073,608171],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[608773,608811],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"An 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[608867,608933],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>."}],"pos":[609077,609212],"yaml":true},{"content":"Converts the value of the specified decimal number to an equivalent 8-bit signed integer.","nodes":[{"pos":[0,89],"content":"Converts the value of the specified decimal number to an equivalent 8-bit signed integer.","nodes":[{"content":"Converts the value of the specified decimal number to an equivalent 8-bit signed integer.","pos":[0,89]}]}],"pos":[610717,610807],"yaml":true},{"content":"The decimal number to convert.","nodes":[{"pos":[0,30],"content":"The decimal number to convert.","nodes":[{"content":"The decimal number to convert.","pos":[0,30]}]}],"pos":[611419,611450],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,212],"content":"<code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 8-bit signed integer.","pos":[0,64],"source":"<code>value</code>, rounded to the nearest 8-bit signed integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[65,212],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[611506,611719],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>."}],"pos":[611863,611998],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.","nodes":[{"pos":[0,174],"content":"Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.","pos":[0,174]}]}],"pos":[613623,613798],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.Single.Parse%2A?displayProperty=fullName> method on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,120],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.Single.Parse%2A?displayProperty=fullName&gt;</ph> method on <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.Single.Parse%2A?displayProperty=fullName> method on `value`."},{"pos":[127,480],"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[0,123],"source":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id=\"ph2\">`value`</ph>.","pos":[124,246],"source":" The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.","pos":[247,353],"source":" If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used."}]},{"pos":[487,743],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,256],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Single.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,156],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[157,256],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[613809,614559],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[615232,615278],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[615351,615416],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,141],"content":"A single-precision floating-point number that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A single-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[615473,615615],"yaml":true},{"content":"<code>value</code> is not a number in a valid format.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a number in a valid format.","source":"<code>value</code> is not a number in a valid format."}],"pos":[615756,615810],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Single.MinValue\"></xref> or greater than <xref href=\"System.Single.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Single.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Single.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Single.MinValue\"></xref> or greater than <xref href=\"System.Single.MaxValue\"></xref>."}],"pos":[615904,616066],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.","pos":[0,114]}]}],"pos":[617512,617627],"yaml":true},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[618225,618262],"yaml":true},{"content":"An 8-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"An 8-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An 8-bit signed integer that is equivalent to <code>value</code>."}],"pos":[618319,618385],"yaml":true},{"content":"Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.","nodes":[{"pos":[0,149],"content":"Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.","pos":[0,149]}]}],"pos":[620064,620214],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,152],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method of the underlying type of `value`."},{"pos":[159,447],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"For example, if <ph id=\"ph1\">`value`</ph> is a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> that represents a number, <ph id=\"ph3\">`provider`</ph> could supply culture-specific information about the notation used to represent that number.","pos":[110,288],"source":" For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number."}]},{"pos":[454,614],"content":"The base types ignore <ph id=\"ph1\">`provider`</ph>; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","source":"The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}],"pos":[620225,620846],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[622204,622286],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[622359,622424],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,123],"content":"A single-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A single-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[622481,622605],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[622746,622798],"yaml":true},{"content":"<code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>."}],"pos":[622898,622978],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Single.MinValue\"></xref> or greater than <xref href=\"System.Single.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Single.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Single.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Single.MinValue\"></xref> or greater than <xref href=\"System.Single.MaxValue\"></xref>."}],"pos":[623072,623234],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.","nodes":[{"pos":[0,116],"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.","pos":[0,116]}]}],"pos":[624686,624803],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[625421,625461],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A single-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A single-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[625518,625601],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.","nodes":[{"pos":[0,116],"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.","pos":[0,116]}]}],"pos":[627160,627277],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[627889,627929],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A single-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A single-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[627986,628069],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent single-precision floating-point number.","nodes":[{"pos":[0,113],"content":"Converts the specified string representation of a number to an equivalent single-precision floating-point number.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent single-precision floating-point number.","pos":[0,113]}]}],"pos":[629628,629742],"yaml":true},{"content":"Using the <xref:System.Convert.ToSingle%28System.String%29> method is equivalent to passing `value` to the <xref:System.Single.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,275],"content":"Using the <xref:System.Convert.ToSingle%28System.String%29> method is equivalent to passing `value` to the <xref:System.Single.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Convert.ToSingle%28System.String%29&gt;</ph> method is equivalent to passing <ph id=\"ph2\">`value`</ph> to the <ph id=\"ph3\">&lt;xref:System.Single.Parse%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[0,185],"source":"Using the <xref:System.Convert.ToSingle%28System.String%29> method is equivalent to passing `value` to the <xref:System.Single.Parse%28System.String%29?displayProperty=fullName> method."},{"content":"<ph id=\"ph1\">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.","pos":[186,275],"source":"`value` is interpreted by using the formatting conventions of the current thread culture."}]},{"pos":[282,538],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,256],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.Single.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,156],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[157,256],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[629753,630296],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[630860,630906],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,141],"content":"A single-precision floating-point number that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A single-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[630963,631105],"yaml":true},{"content":"<code>value</code> is not a number in a valid format.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a number in a valid format.","source":"<code>value</code> is not a number in a valid format."}],"pos":[631246,631300],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Single.MinValue\"></xref> or greater than <xref href=\"System.Single.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Single.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Single.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Single.MinValue\"></xref> or greater than <xref href=\"System.Single.MaxValue\"></xref>."}],"pos":[631394,631556],"yaml":true},{"content":"Returns the specified single-precision floating-point number; no actual conversion is performed.","nodes":[{"pos":[0,96],"content":"Returns the specified single-precision floating-point number; no actual conversion is performed.","nodes":[{"content":"Returns the specified single-precision floating-point number; no actual conversion is performed.","pos":[0,96]}]}],"pos":[633008,633105],"yaml":true},{"content":"The single-precision floating-point number to return.","nodes":[{"pos":[0,53],"content":"The single-precision floating-point number to return.","nodes":[{"content":"The single-precision floating-point number to return.","pos":[0,53]}]}],"pos":[633249,633303],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[633360,633402],"yaml":true},{"content":"Converts the value of the specified object to a single-precision floating-point number.","nodes":[{"pos":[0,87],"content":"Converts the value of the specified object to a single-precision floating-point number.","nodes":[{"content":"Converts the value of the specified object to a single-precision floating-point number.","pos":[0,87]}]}],"pos":[634908,634996],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method of the underlying type of `value`.","nodes":[{"pos":[0,152],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method of the underlying type of `value`."}],"pos":[635007,635160],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[635708,635801],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,123],"content":"A single-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A single-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[635858,635982],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[636123,636175],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[636275,636427],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.Single.MinValue\"></xref> or greater than <xref href=\"System.Single.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.Single.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Single.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.Single.MinValue\"></xref> or greater than <xref href=\"System.Single.MaxValue\"></xref>."}],"pos":[636521,636683],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.","nodes":[{"pos":[0,117],"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.","pos":[0,117]}]}],"pos":[638135,638253],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[638874,638914],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A single-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A single-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[638971,639054],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.","pos":[0,114]}]}],"pos":[640607,640722],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[641270,641308],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A single-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A single-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[641365,641448],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.","pos":[0,114]}]}],"pos":[642948,643063],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[643624,643662],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A single-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A single-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[643719,643802],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.","nodes":[{"pos":[0,131],"content":"Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.","pos":[0,131]}]}],"pos":[645308,645440],"yaml":true},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[646015,646070],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to <code>value</code>.  \n  \n <code>value</code> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.","nodes":[{"pos":[0,82],"content":"A single-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A single-precision floating-point number that is equivalent to <code>value</code>."},{"pos":[89,251],"content":"<code>value</code> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is rounded using rounding to nearest.","pos":[0,56],"source":"<code>value</code> is rounded using rounding to nearest."},{"content":"For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.","pos":[57,162]}]}],"pos":[646127,646383],"yaml":true},{"content":"Converts the value of the specified decimal number to an equivalent single-precision floating-point number.","nodes":[{"pos":[0,107],"content":"Converts the value of the specified decimal number to an equivalent single-precision floating-point number.","nodes":[{"content":"Converts the value of the specified decimal number to an equivalent single-precision floating-point number.","pos":[0,107]}]}],"pos":[647895,648003],"yaml":true},{"content":"The decimal number to convert.","nodes":[{"pos":[0,30],"content":"The decimal number to convert.","nodes":[{"content":"The decimal number to convert.","pos":[0,30]}]}],"pos":[648581,648612],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to <code>value</code>.  \n  \n <code>value</code> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.","nodes":[{"pos":[0,82],"content":"A single-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A single-precision floating-point number that is equivalent to <code>value</code>."},{"pos":[89,251],"content":"<code>value</code> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is rounded using rounding to nearest.","pos":[0,56],"source":"<code>value</code> is rounded using rounding to nearest."},{"content":"For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.","pos":[57,162]}]}],"pos":[648669,648925],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[650443,650527],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[650676,650712],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[650769,650825],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[650976,651010],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[652106,652190],"yaml":true},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[652331,652365],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[652422,652478],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[652629,652663],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.","nodes":[{"pos":[0,116],"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.","pos":[0,116]}]}],"pos":[653759,653876],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[654431,654470],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A single-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A single-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[654527,654610],"yaml":true},{"content":"Converts the specified Boolean value to the equivalent single-precision floating-point number.","nodes":[{"pos":[0,94],"content":"Converts the specified Boolean value to the equivalent single-precision floating-point number.","nodes":[{"content":"Converts the specified Boolean value to the equivalent single-precision floating-point number.","pos":[0,94]}]}],"pos":[656122,656217],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[656772,656802],"yaml":true},{"content":"The number 1 if <code>value</code> is `true`; otherwise, 0.","nodes":[{"pos":[0,59],"content":"The number 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`true`</ph>; otherwise, 0.","source":"The number 1 if <code>value</code> is `true`; otherwise, 0."}],"pos":[656859,656919],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.","nodes":[{"pos":[0,114],"content":"Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.","pos":[0,114]}]}],"pos":[658419,658534],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[659092,659130],"yaml":true},{"content":"A single-precision floating-point number that is equivalent to <code>value</code>.","nodes":[{"pos":[0,82],"content":"A single-precision floating-point number that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A single-precision floating-point number that is equivalent to <code>value</code>."}],"pos":[659187,659270],"yaml":true},{"content":"Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.","nodes":[{"pos":[0,106],"content":"Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.","nodes":[{"content":"Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.","pos":[0,106]}]}],"pos":[660830,660937],"yaml":true},{"content":"If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation. This means that the high-order bit of the high-order byte (bit 15) is interpreted as the sign bit. If the <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.","nodes":[{"pos":[0,808],"content":"If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation. This means that the high-order bit of the high-order byte (bit 15) is interpreted as the sign bit. If the <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.","nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is positive and <ph id=\"ph2\">`toBase`</ph> is 2, 8, or 16, the returned string uses sign-and-magnitude representation.","pos":[0,111],"source":"If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation."},{"content":"If <ph id=\"ph1\">`value`</ph> is negative and <ph id=\"ph2\">`toBase`</ph> is 2, 8, or 16, the returned string uses two's complement representation.","pos":[112,221],"source":" If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation."},{"content":"This means that the high-order bit of the high-order byte (bit 15) is interpreted as the sign bit.","pos":[222,320]},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29&gt;</ph> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.","pos":[321,587],"source":" If the <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion."},{"content":"Such methods include <ph id=\"ph1\">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName&gt;</ph>.","pos":[588,808],"source":" Such methods include <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>."}]}],"pos":[660948,661757],"yaml":true,"extradata":"MT"},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[662381,662419],"yaml":true},{"content":"The base of the return value, which must be 2, 8, 10, or 16.","nodes":[{"pos":[0,60],"content":"The base of the return value, which must be 2, 8, 10, or 16.","nodes":[{"content":"The base of the return value, which must be 2, 8, 10, or 16.","pos":[0,60]}]}],"pos":[662480,662541],"yaml":true},{"content":"The string representation of <code>value</code> in base <code>toBase</code>.","nodes":[{"pos":[0,76],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> in base <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">toBase</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code> in base <code>toBase</code>."}],"pos":[662598,662675],"yaml":true},{"content":"<code>toBase</code> is not 2, 8, 10, or 16.","nodes":[{"pos":[0,43],"content":"<ph id=\"ph1\">&lt;code&gt;toBase&lt;/code&gt;</ph> is not 2, 8, 10, or 16.","source":"<code>toBase</code> is not 2, 8, 10, or 16."}],"pos":[662820,662864],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"pos":[0,159],"content":"Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.","pos":[0,159]}]}],"pos":[664447,664607],"yaml":true},{"content":"This implementation is identical to <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"pos":[0,118],"content":"This implementation is identical to <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph>.","pos":[0,118],"source":"This implementation is identical to <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName>."}]}],"pos":[664618,664737],"yaml":true,"extradata":"MT"},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[665707,665745],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[665818,665883],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[665940,665989],"yaml":true},{"content":"Converts the value of the specified <xref href=\"System.DateTime\"></xref> to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"pos":[0,174],"content":"Converts the value of the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> to its equivalent string representation, using the specified culture-specific formatting information.","source":"Converts the value of the specified <xref href=\"System.DateTime\"></xref> to its equivalent string representation, using the specified culture-specific formatting information."}],"pos":[667627,667802],"yaml":true},{"content":"This implementation is identical to <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"pos":[0,121],"content":"This implementation is identical to <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph>.","pos":[0,121],"source":"This implementation is identical to <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=fullName>."}]}],"pos":[667813,667935],"yaml":true,"extradata":"MT"},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[668546,668582],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[668655,668720],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[668777,668826],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"pos":[0,161],"content":"Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.","pos":[0,161]}]}],"pos":[670452,670614],"yaml":true},{"content":"This implementation is identical to <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"pos":[0,119],"content":"This implementation is identical to <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph>.","pos":[0,119],"source":"This implementation is identical to <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName>."}]}],"pos":[670625,670745],"yaml":true,"extradata":"MT"},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[671915,671955],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[672028,672093],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[672150,672199],"yaml":true},{"content":"Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"pos":[0,152],"content":"Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.","pos":[0,152]}]}],"pos":[673884,674037],"yaml":true},{"content":"This implementation is identical to <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"pos":[0,120],"content":"This implementation is identical to <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph>.","pos":[0,120],"source":"This implementation is identical to <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName>."}]}],"pos":[674048,674169],"yaml":true,"extradata":"MT"},{"content":"The decimal number to convert.","nodes":[{"pos":[0,30],"content":"The decimal number to convert.","nodes":[{"content":"The decimal number to convert.","pos":[0,30]}]}],"pos":[674803,674834],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[674907,674972],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[675029,675078],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"pos":[0,159],"content":"Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.","pos":[0,159]}]}],"pos":[676698,676858],"yaml":true},{"content":"This implementation is identical to <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"pos":[0,118],"content":"This implementation is identical to <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph>.","pos":[0,118],"source":"This implementation is identical to <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName>."}]}],"pos":[676869,676988],"yaml":true,"extradata":"MT"},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[677949,677987],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[678060,678125],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[678182,678231],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to its equivalent string representation.","nodes":[{"pos":[0,115],"content":"Converts the value of the specified double-precision floating-point number to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to its equivalent string representation.","pos":[0,115]}]}],"pos":[679857,679973],"yaml":true},{"content":"This implementation is identical to <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName>","nodes":[{"pos":[0,118],"content":"This implementation is identical to <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName>","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph>","pos":[0,118],"source":"This implementation is identical to <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName>"}]}],"pos":[679984,680103],"yaml":true,"extradata":"MT"},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[680734,680789],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[680862,680927],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[680984,681033],"yaml":true},{"content":"Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.","nodes":[{"pos":[0,106],"content":"Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.","nodes":[{"content":"Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.","pos":[0,106]}]}],"pos":[682593,682700],"yaml":true},{"content":"If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation. This means that the high-order bit of the highest-order byte (bit 31) is interpreted as the sign bit. If the <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.","nodes":[{"pos":[0,811],"content":"If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation. This means that the high-order bit of the highest-order byte (bit 31) is interpreted as the sign bit. If the <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.","nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is positive and <ph id=\"ph2\">`toBase`</ph> is 2, 8, or 16, the returned string uses sign-and-magnitude representation.","pos":[0,111],"source":"If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation."},{"content":"If <ph id=\"ph1\">`value`</ph> is negative and <ph id=\"ph2\">`toBase`</ph> is 2, 8, or 16, the returned string uses two's complement representation.","pos":[112,221],"source":" If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation."},{"content":"This means that the high-order bit of the highest-order byte (bit 31) is interpreted as the sign bit.","pos":[222,323]},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29&gt;</ph> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.","pos":[324,590],"source":" If the <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion."},{"content":"Such methods include <ph id=\"ph1\">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName&gt;</ph>.","pos":[591,811],"source":" Such methods include <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>."}]}],"pos":[682711,683523],"yaml":true,"extradata":"MT"},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[684133,684171],"yaml":true},{"content":"The base of the return value, which must be 2, 8, 10, or 16.","nodes":[{"pos":[0,60],"content":"The base of the return value, which must be 2, 8, 10, or 16.","nodes":[{"content":"The base of the return value, which must be 2, 8, 10, or 16.","pos":[0,60]}]}],"pos":[684232,684293],"yaml":true},{"content":"The string representation of <code>value</code> in base <code>toBase</code>.","nodes":[{"pos":[0,76],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> in base <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">toBase</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code> in base <code>toBase</code>."}],"pos":[684350,684427],"yaml":true},{"content":"<code>toBase</code> is not 2, 8, 10, or 16.","nodes":[{"pos":[0,43],"content":"<ph id=\"ph1\">&lt;code&gt;toBase&lt;/code&gt;</ph> is not 2, 8, 10, or 16.","source":"<code>toBase</code> is not 2, 8, 10, or 16."}],"pos":[684572,684616],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"pos":[0,158],"content":"Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.","pos":[0,158]}]}],"pos":[686199,686358],"yaml":true},{"content":"This implementation is identical to <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"pos":[0,118],"content":"This implementation is identical to <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph>.","pos":[0,118],"source":"This implementation is identical to <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName>."}]}],"pos":[686369,686488],"yaml":true,"extradata":"MT"},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[687518,687555],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[687628,687693],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[687750,687799],"yaml":true},{"content":"Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.","nodes":[{"pos":[0,106],"content":"Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.","nodes":[{"content":"Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.","pos":[0,106]}]}],"pos":[689412,689519],"yaml":true},{"content":"If `value` is positive and `toBase` is not 10, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is not 10, the returned string uses two's complement representation. This means that the high-order bit of the highest-order byte (bit 63) is interpreted as the sign bit. If the <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.","nodes":[{"pos":[0,801],"content":"If `value` is positive and `toBase` is not 10, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is not 10, the returned string uses two's complement representation. This means that the high-order bit of the highest-order byte (bit 63) is interpreted as the sign bit. If the <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.","nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is positive and <ph id=\"ph2\">`toBase`</ph> is not 10, the returned string uses sign-and-magnitude representation.","pos":[0,106],"source":"If `value` is positive and `toBase` is not 10, the returned string uses sign-and-magnitude representation."},{"content":"If <ph id=\"ph1\">`value`</ph> is negative and <ph id=\"ph2\">`toBase`</ph> is not 10, the returned string uses two's complement representation.","pos":[107,211],"source":" If `value` is negative and `toBase` is not 10, the returned string uses two's complement representation."},{"content":"This means that the high-order bit of the highest-order byte (bit 63) is interpreted as the sign bit.","pos":[212,313]},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29&gt;</ph> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.","pos":[314,580],"source":" If the <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion."},{"content":"Such methods include <ph id=\"ph1\">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName&gt;</ph>.","pos":[581,801],"source":" Such methods include <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>."}]}],"pos":[689530,690332],"yaml":true,"extradata":"MT"},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[690947,690985],"yaml":true},{"content":"The base of the return value, which must be 2, 8, 10, or 16.","nodes":[{"pos":[0,60],"content":"The base of the return value, which must be 2, 8, 10, or 16.","nodes":[{"content":"The base of the return value, which must be 2, 8, 10, or 16.","pos":[0,60]}]}],"pos":[691046,691107],"yaml":true},{"content":"The string representation of <code>value</code> in base <code>toBase</code>.","nodes":[{"pos":[0,76],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> in base <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">toBase</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code> in base <code>toBase</code>."}],"pos":[691164,691241],"yaml":true},{"content":"<code>toBase</code> is not 2, 8, 10, or 16.","nodes":[{"pos":[0,43],"content":"<ph id=\"ph1\">&lt;code&gt;toBase&lt;/code&gt;</ph> is not 2, 8, 10, or 16.","source":"<code>toBase</code> is not 2, 8, 10, or 16."}],"pos":[691386,691430],"yaml":true},{"content":"Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.","nodes":[{"pos":[0,143],"content":"Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.","pos":[0,143]}]}],"pos":[693019,693163],"yaml":true},{"content":"If the `value` parameter implements the <xref:System.IConvertible> interface, the method calls the <xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=fullName>implementation of `value`. Otherwise, if the `value` parameter implements the <xref:System.IFormattable> interface, the method calls its <xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>implementation. If `value` implements neither interface, the method calls the `value` parameter's `ToString()` method, and the `provider` parameter is ignored.  \n  \n The `provider` parameter is used if the `value` parameter implements the <xref:System.IConvertible> or <xref:System.IFormattable> interface. The most common use of the `provider` parameter is to specify culture-specific information used in the conversion of `value`. For example, if the `value` parameter is a negative decimal number, the `provider` parameter can supply culture-specific information about the notation used for the negative sign and decimal separator. The second example in the next section illustrates a format provider that does not supply culture-sensitive formatting information.","nodes":[{"pos":[0,587],"content":"If the `value` parameter implements the <xref:System.IConvertible> interface, the method calls the <xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=fullName>implementation of `value`. Otherwise, if the `value` parameter implements the <xref:System.IFormattable> interface, the method calls its <xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>implementation. If `value` implements neither interface, the method calls the `value` parameter's `ToString()` method, and the `provider` parameter is ignored.","nodes":[{"content":"If the <ph id=\"ph1\">`value`</ph> parameter implements the <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface, the method calls the <ph id=\"ph3\">&lt;xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph>implementation of <ph id=\"ph4\">`value`</ph>.","pos":[0,213],"source":"If the `value` parameter implements the <xref:System.IConvertible> interface, the method calls the <xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=fullName>implementation of `value`."},{"content":"Otherwise, if the <ph id=\"ph1\">`value`</ph> parameter implements the <ph id=\"ph2\">&lt;xref:System.IFormattable&gt;</ph> interface, the method calls its <ph id=\"ph3\">&lt;xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph>implementation.","pos":[214,443],"source":" Otherwise, if the `value` parameter implements the <xref:System.IFormattable> interface, the method calls its <xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>implementation."},{"content":"If <ph id=\"ph1\">`value`</ph> implements neither interface, the method calls the <ph id=\"ph2\">`value`</ph> parameter's <ph id=\"ph3\">`ToString()`</ph> method, and the <ph id=\"ph4\">`provider`</ph> parameter is ignored.","pos":[444,587],"source":" If `value` implements neither interface, the method calls the `value` parameter's `ToString()` method, and the `provider` parameter is ignored."}]},{"pos":[594,1194],"content":"The `provider` parameter is used if the `value` parameter implements the <xref:System.IConvertible> or <xref:System.IFormattable> interface. The most common use of the `provider` parameter is to specify culture-specific information used in the conversion of `value`. For example, if the `value` parameter is a negative decimal number, the `provider` parameter can supply culture-specific information about the notation used for the negative sign and decimal separator. The second example in the next section illustrates a format provider that does not supply culture-sensitive formatting information.","nodes":[{"content":"The <ph id=\"ph1\">`provider`</ph> parameter is used if the <ph id=\"ph2\">`value`</ph> parameter implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.IFormattable&gt;</ph> interface.","pos":[0,140],"source":"The `provider` parameter is used if the `value` parameter implements the <xref:System.IConvertible> or <xref:System.IFormattable> interface."},{"content":"The most common use of the <ph id=\"ph1\">`provider`</ph> parameter is to specify culture-specific information used in the conversion of <ph id=\"ph2\">`value`</ph>.","pos":[141,266],"source":" The most common use of the `provider` parameter is to specify culture-specific information used in the conversion of `value`."},{"content":"For example, if the <ph id=\"ph1\">`value`</ph> parameter is a negative decimal number, the <ph id=\"ph2\">`provider`</ph> parameter can supply culture-specific information about the notation used for the negative sign and decimal separator.","pos":[267,468],"source":" For example, if the `value` parameter is a negative decimal number, the `provider` parameter can supply culture-specific information about the notation used for the negative sign and decimal separator."},{"content":"The second example in the next section illustrates a format provider that does not supply culture-sensitive formatting information.","pos":[469,600]}]}],"pos":[693174,694373],"yaml":true,"extradata":"MT"},{"content":"An object that supplies the value to convert, or `null`.","nodes":[{"pos":[0,56],"content":"An object that supplies the value to convert, or <ph id=\"ph1\">`null`</ph>.","source":"An object that supplies the value to convert, or `null`."}],"pos":[696151,696208],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[696281,696346],"yaml":true},{"content":"The string representation of <code>value</code>, or <xref href=\"System.String.Empty\"></xref> if <code>value</code> is an object whose value is `null`. If <code>value</code> is `null`, the method returns `null`.","nodes":[{"pos":[0,210],"content":"The string representation of <code>value</code>, or <xref href=\"System.String.Empty\"></xref> if <code>value</code> is an object whose value is `null`. If <code>value</code> is `null`, the method returns `null`.","nodes":[{"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an object whose value is <ph id=\"ph4\">`null`</ph>.","pos":[0,150],"source":"The string representation of <code>value</code>, or <xref href=\"System.String.Empty\"></xref> if <code>value</code> is an object whose value is `null`."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the method returns <ph id=\"ph3\">`null`</ph>.","pos":[151,210],"source":" If <code>value</code> is `null`, the method returns `null`."}]}],"pos":[696403,696614],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"pos":[0,176],"content":"Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.","pos":[0,176]}]}],"pos":[698240,698417],"yaml":true},{"content":"This implementation is identical to <xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"pos":[0,119],"content":"This implementation is identical to <xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph>.","pos":[0,119],"source":"This implementation is identical to <xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=fullName>."}]}],"pos":[698428,698548],"yaml":true,"extradata":"MT"},{"content":"The single-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The single-precision floating-point number to convert.","nodes":[{"content":"The single-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[699178,699233],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[699306,699371],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[699428,699477],"yaml":true},{"content":"Returns the specified string instance; no actual conversion is performed.","nodes":[{"pos":[0,73],"content":"Returns the specified string instance; no actual conversion is performed.","nodes":[{"content":"Returns the specified string instance; no actual conversion is performed.","pos":[0,73]}]}],"pos":[701103,701177],"yaml":true},{"content":"The string to return.","nodes":[{"pos":[0,21],"content":"The string to return.","nodes":[{"content":"The string to return.","pos":[0,21]}]}],"pos":[702096,702118],"yaml":true},{"content":"An object that supplies culture-specific formatting information. This parameter is ignored.","nodes":[{"pos":[0,91],"content":"An object that supplies culture-specific formatting information. This parameter is ignored.","nodes":[{"content":"An object that supplies culture-specific formatting information. This parameter is ignored.","pos":[0,91],"nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]},{"content":"This parameter is ignored.","pos":[65,91]}]}]}],"pos":[702191,702283],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[702340,702382],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"pos":[0,161],"content":"Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.","pos":[0,161]}]}],"pos":[703664,703826],"yaml":true},{"content":"This implementation is identical to <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"pos":[0,119],"content":"This implementation is identical to <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph>.","pos":[0,119],"source":"This implementation is identical to <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName>."}]}],"pos":[703837,703957],"yaml":true,"extradata":"MT"},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[705129,705169],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[705242,705307],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[705364,705413],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"pos":[0,161],"content":"Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.","pos":[0,161]}]}],"pos":[707092,707254],"yaml":true},{"content":"This implementation is identical to <xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"pos":[0,119],"content":"This implementation is identical to <xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph>.","pos":[0,119],"source":"This implementation is identical to <xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=fullName>."}]}],"pos":[707265,707385],"yaml":true,"extradata":"MT"},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[708549,708589],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[708662,708727],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[708784,708833],"yaml":true},{"content":"Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"pos":[0,155],"content":"Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.","pos":[0,155]}]}],"pos":[710500,710656],"yaml":true},{"content":"This implementation is identical to <xref:System.Char.ToString?displayProperty=fullName>. The `provider` parameter is ignored.","nodes":[{"pos":[0,126],"content":"This implementation is identical to <xref:System.Char.ToString?displayProperty=fullName>. The `provider` parameter is ignored.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Char.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,89],"source":"This implementation is identical to <xref:System.Char.ToString?displayProperty=fullName>."},{"content":"The <ph id=\"ph1\">`provider`</ph> parameter is ignored.","pos":[90,126],"source":" The `provider` parameter is ignored."}]}],"pos":[710667,710794],"yaml":true,"extradata":"MT"},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[711800,711834],"yaml":true},{"content":"An object that supplies culture-specific formatting information. This parameter is ignored.","nodes":[{"pos":[0,91],"content":"An object that supplies culture-specific formatting information. This parameter is ignored.","nodes":[{"content":"An object that supplies culture-specific formatting information. This parameter is ignored.","pos":[0,91],"nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]},{"content":"This parameter is ignored.","pos":[65,91]}]}]}],"pos":[711907,711999],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[712056,712105],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"pos":[0,159],"content":"Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.","pos":[0,159]}]}],"pos":[713725,713885],"yaml":true},{"content":"This implementation is identical to <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"pos":[0,118],"content":"This implementation is identical to <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph>.","pos":[0,118],"source":"This implementation is identical to <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName>."}]}],"pos":[713896,714015],"yaml":true,"extradata":"MT"},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[714977,715015],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[715088,715153],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[715210,715259],"yaml":true},{"content":"Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.","nodes":[{"pos":[0,108],"content":"Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.","nodes":[{"content":"Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.","pos":[0,108]}]}],"pos":[716813,716922],"yaml":true},{"content":"If `toBase` does not equal 10, the string that is returned by the <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=fullName> method represents `value` by its magnitude only. If the method is called to create a string that will later be converted back to a number, a corresponding method that assumes a magnitude-only numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=fullName> or <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.","nodes":[{"pos":[0,630],"content":"If `toBase` does not equal 10, the string that is returned by the <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=fullName> method represents `value` by its magnitude only. If the method is called to create a string that will later be converted back to a number, a corresponding method that assumes a magnitude-only numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=fullName> or <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.","nodes":[{"content":"If <ph id=\"ph1\">`toBase`</ph> does not equal 10, the string that is returned by the <ph id=\"ph2\">&lt;xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> method represents <ph id=\"ph3\">`value`</ph> by its magnitude only.","pos":[0,202],"source":"If `toBase` does not equal 10, the string that is returned by the <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=fullName> method represents `value` by its magnitude only."},{"content":"If the method is called to create a string that will later be converted back to a number, a corresponding method that assumes a magnitude-only numeric representation should be called to perform the conversion.","pos":[203,412]},{"content":"Such methods include <ph id=\"ph1\">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName&gt;</ph>.","pos":[413,630],"source":" Such methods include <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=fullName> or <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>."}]}],"pos":[716933,717564],"yaml":true,"extradata":"MT"},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[718166,718205],"yaml":true},{"content":"The base of the return value, which must be 2, 8, 10, or 16.","nodes":[{"pos":[0,60],"content":"The base of the return value, which must be 2, 8, 10, or 16.","nodes":[{"content":"The base of the return value, which must be 2, 8, 10, or 16.","pos":[0,60]}]}],"pos":[718266,718327],"yaml":true},{"content":"The string representation of <code>value</code> in base <code>toBase</code>.","nodes":[{"pos":[0,76],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> in base <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">toBase</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code> in base <code>toBase</code>."}],"pos":[718384,718461],"yaml":true},{"content":"<code>toBase</code> is not 2, 8, 10, or 16.","nodes":[{"pos":[0,43],"content":"<ph id=\"ph1\">&lt;code&gt;toBase&lt;/code&gt;</ph> is not 2, 8, 10, or 16.","source":"<code>toBase</code> is not 2, 8, 10, or 16."}],"pos":[718606,718650],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.","nodes":[{"pos":[0,100],"content":"Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.","pos":[0,100]}]}],"pos":[720119,720220],"yaml":true},{"content":"This implementation is identical to <xref:System.UInt16.ToString?displayProperty=fullName>.","nodes":[{"pos":[0,91],"content":"This implementation is identical to <xref:System.UInt16.ToString?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.UInt16.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,91],"source":"This implementation is identical to <xref:System.UInt16.ToString?displayProperty=fullName>."}]}],"pos":[720231,720323],"yaml":true,"extradata":"MT"},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[720945,720985],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[721042,721091],"yaml":true},{"content":"Converts the specified Boolean value to its equivalent string representation.","nodes":[{"pos":[0,77],"content":"Converts the specified Boolean value to its equivalent string representation.","nodes":[{"content":"Converts the specified Boolean value to its equivalent string representation.","pos":[0,77]}]}],"pos":[722776,722854],"yaml":true},{"content":"This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=fullName>. It returns <xref:System.Boolean.TrueString?displayProperty=fullName> for `true` values and <xref:System.Boolean.FalseString?displayProperty=fullName> for `false` values.","nodes":[{"pos":[0,265],"content":"This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=fullName>. It returns <xref:System.Boolean.TrueString?displayProperty=fullName> for `true` values and <xref:System.Boolean.FalseString?displayProperty=fullName> for `false` values.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Boolean.ToString%2A?displayProperty=fullName&gt;</ph>.","pos":[0,95],"source":"This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=fullName>."},{"content":"It returns <ph id=\"ph1\">&lt;xref:System.Boolean.TrueString?displayProperty=fullName&gt;</ph> for <ph id=\"ph2\">`true`</ph> values and <ph id=\"ph3\">&lt;xref:System.Boolean.FalseString?displayProperty=fullName&gt;</ph> for <ph id=\"ph4\">`false`</ph> values.","pos":[96,265],"source":" It returns <xref:System.Boolean.TrueString?displayProperty=fullName> for `true` values and <xref:System.Boolean.FalseString?displayProperty=fullName> for `false` values."}]}],"pos":[722865,723131],"yaml":true,"extradata":"MT"},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[724143,724173],"yaml":true},{"content":"An instance of an object. This parameter is ignored.","nodes":[{"pos":[0,52],"content":"An instance of an object. This parameter is ignored.","nodes":[{"content":"An instance of an object. This parameter is ignored.","pos":[0,52],"nodes":[{"content":"An instance of an object.","pos":[0,25]},{"content":"This parameter is ignored.","pos":[26,52]}]}]}],"pos":[724246,724299],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[724356,724405],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"pos":[0,160],"content":"Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.","pos":[0,160]}]}],"pos":[726019,726180],"yaml":true},{"content":"This implementation is identical to <xref:System.Byte.ToString%2A?displayProperty=fullName>.","nodes":[{"pos":[0,92],"content":"This implementation is identical to <xref:System.Byte.ToString%2A?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Byte.ToString%2A?displayProperty=fullName&gt;</ph>.","pos":[0,92],"source":"This implementation is identical to <xref:System.Byte.ToString%2A?displayProperty=fullName>."}]}],"pos":[726191,726284],"yaml":true,"extradata":"MT"},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[727120,727159],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[727232,727297],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[727354,727403],"yaml":true},{"content":"Converts the specified Boolean value to its equivalent string representation.","nodes":[{"pos":[0,77],"content":"Converts the specified Boolean value to its equivalent string representation.","nodes":[{"content":"Converts the specified Boolean value to its equivalent string representation.","pos":[0,77]}]}],"pos":[728915,728993],"yaml":true},{"content":"This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=fullName>. It returns <xref:System.Boolean.TrueString?displayProperty=fullName> for `true` values and <xref:System.Boolean.FalseString?displayProperty=fullName> for `false` values.","nodes":[{"pos":[0,265],"content":"This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=fullName>. It returns <xref:System.Boolean.TrueString?displayProperty=fullName> for `true` values and <xref:System.Boolean.FalseString?displayProperty=fullName> for `false` values.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Boolean.ToString%2A?displayProperty=fullName&gt;</ph>.","pos":[0,95],"source":"This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=fullName>."},{"content":"It returns <ph id=\"ph1\">&lt;xref:System.Boolean.TrueString?displayProperty=fullName&gt;</ph> for <ph id=\"ph2\">`true`</ph> values and <ph id=\"ph3\">&lt;xref:System.Boolean.FalseString?displayProperty=fullName&gt;</ph> for <ph id=\"ph4\">`false`</ph> values.","pos":[96,265],"source":" It returns <xref:System.Boolean.TrueString?displayProperty=fullName> for `true` values and <xref:System.Boolean.FalseString?displayProperty=fullName> for `false` values."}]}],"pos":[729004,729270],"yaml":true,"extradata":"MT"},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[730040,730070],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[730127,730176],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.","pos":[0,99]}]}],"pos":[731670,731770],"yaml":true},{"content":"This implementation is identical to <xref:System.Byte.ToString?displayProperty=fullName>.","nodes":[{"pos":[0,89],"content":"This implementation is identical to <xref:System.Byte.ToString?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Byte.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,89],"source":"This implementation is identical to <xref:System.Byte.ToString?displayProperty=fullName>."}]}],"pos":[731781,731871],"yaml":true,"extradata":"MT"},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[732404,732443],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[732500,732549],"yaml":true},{"content":"Converts the value of the specified Unicode character to its equivalent string representation.","nodes":[{"pos":[0,94],"content":"Converts the value of the specified Unicode character to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified Unicode character to its equivalent string representation.","pos":[0,94]}]}],"pos":[734043,734138],"yaml":true},{"content":"This implementation is identical to <xref:System.Char.ToString%2A?displayProperty=fullName>.","nodes":[{"pos":[0,92],"content":"This implementation is identical to <xref:System.Char.ToString%2A?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Char.ToString%2A?displayProperty=fullName&gt;</ph>.","pos":[0,92],"source":"This implementation is identical to <xref:System.Char.ToString%2A?displayProperty=fullName>."}]}],"pos":[734149,734242],"yaml":true,"extradata":"MT"},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[734936,734970],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[735027,735076],"yaml":true},{"content":"Converts the value of the specified decimal number to its equivalent string representation.","nodes":[{"pos":[0,91],"content":"Converts the value of the specified decimal number to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified decimal number to its equivalent string representation.","pos":[0,91]}]}],"pos":[736588,736680],"yaml":true},{"content":"This implementation is identical to <xref:System.Decimal.ToString?displayProperty=fullName>.","nodes":[{"pos":[0,92],"content":"This implementation is identical to <xref:System.Decimal.ToString?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Decimal.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,92],"source":"This implementation is identical to <xref:System.Decimal.ToString?displayProperty=fullName>."}]}],"pos":[736691,736784],"yaml":true,"extradata":"MT"},{"content":"The decimal number to convert.","nodes":[{"pos":[0,30],"content":"The decimal number to convert.","nodes":[{"content":"The decimal number to convert.","pos":[0,30]}]}],"pos":[737487,737518],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[737575,737624],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to its equivalent string representation.","nodes":[{"pos":[0,115],"content":"Converts the value of the specified double-precision floating-point number to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to its equivalent string representation.","pos":[0,115]}]}],"pos":[739130,739246],"yaml":true},{"content":"This implementation is identical to <xref:System.Double.ToString?displayProperty=fullName>.","nodes":[{"pos":[0,91],"content":"This implementation is identical to <xref:System.Double.ToString?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Double.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,91],"source":"This implementation is identical to <xref:System.Double.ToString?displayProperty=fullName>."}]}],"pos":[739257,739349],"yaml":true,"extradata":"MT"},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[740043,740098],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[740155,740204],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to its equivalent string representation.","nodes":[{"pos":[0,98],"content":"Converts the value of the specified 16-bit signed integer to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to its equivalent string representation.","pos":[0,98]}]}],"pos":[741704,741803],"yaml":true},{"content":"This implementation is identical to <xref:System.Int16.ToString?displayProperty=fullName>.","nodes":[{"pos":[0,90],"content":"This implementation is identical to <xref:System.Int16.ToString?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Int16.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,90],"source":"This implementation is identical to <xref:System.Int16.ToString?displayProperty=fullName>."}]}],"pos":[741814,741905],"yaml":true,"extradata":"MT"},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[742465,742503],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[742560,742609],"yaml":true},{"content":"Converts the value of the specified <xref href=\"System.DateTime\"></xref> to its equivalent string representation.","nodes":[{"pos":[0,113],"content":"Converts the value of the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> to its equivalent string representation.","source":"Converts the value of the specified <xref href=\"System.DateTime\"></xref> to its equivalent string representation."}],"pos":[744127,744241],"yaml":true},{"content":"This implementation is identical to <xref:System.DateTime.ToString?displayProperty=fullName>. It uses the formatting conventions of the current culture and the \"G\" format specifier to convert a <xref:System.DateTime> value to its string representation.","nodes":[{"pos":[0,252],"content":"This implementation is identical to <xref:System.DateTime.ToString?displayProperty=fullName>. It uses the formatting conventions of the current culture and the \"G\" format specifier to convert a <xref:System.DateTime> value to its string representation.","nodes":[{"content":"This implementation is identical to <xref:System.DateTime.ToString?displayProperty=fullName>. It uses the formatting conventions of the current culture and the \"G\" format specifier to convert a <xref:System.DateTime> value to its string representation.","pos":[0,252],"nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.DateTime.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,93],"source":"This implementation is identical to <xref:System.DateTime.ToString?displayProperty=fullName>."},{"content":"It uses the formatting conventions of the current culture and the \"G\" format specifier to convert a <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value to its string representation.","pos":[94,252],"source":" It uses the formatting conventions of the current culture and the \"G\" format specifier to convert a <xref:System.DateTime> value to its string representation."}]}]}],"pos":[744252,744505],"yaml":true,"extradata":"MT"},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[745078,745114],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[745171,745220],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to its equivalent string representation.","nodes":[{"pos":[0,98],"content":"Converts the value of the specified 64-bit signed integer to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to its equivalent string representation.","pos":[0,98]}]}],"pos":[746720,746819],"yaml":true},{"content":"This implementation is identical to <xref:System.Int64.ToString?displayProperty=fullName>.","nodes":[{"pos":[0,90],"content":"This implementation is identical to <xref:System.Int64.ToString?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Int64.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,90],"source":"This implementation is identical to <xref:System.Int64.ToString?displayProperty=fullName>."}]}],"pos":[746830,746921],"yaml":true,"extradata":"MT"},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[747477,747515],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[747572,747621],"yaml":true},{"content":"Converts the value of the specified object to its equivalent string representation.","nodes":[{"pos":[0,83],"content":"Converts the value of the specified object to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified object to its equivalent string representation.","pos":[0,83]}]}],"pos":[749127,749211],"yaml":true},{"content":"To convert `value` to its string representation, the method tries to call the <xref:System.IConvertible.ToString%2A?displayProperty=fullName> implementation of `value`. If `value` does not implement the <xref:System.IConvertible> interface, the method tries to call the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> implementation of `value`. If value does not implement the <xref:System.IFormattable> interface, the method calls the `ToString` method of the underlying type of `value`.","nodes":[{"pos":[0,504],"content":"To convert `value` to its string representation, the method tries to call the <xref:System.IConvertible.ToString%2A?displayProperty=fullName> implementation of `value`. If `value` does not implement the <xref:System.IConvertible> interface, the method tries to call the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> implementation of `value`. If value does not implement the <xref:System.IFormattable> interface, the method calls the `ToString` method of the underlying type of `value`.","nodes":[{"content":"To convert <ph id=\"ph1\">`value`</ph> to its string representation, the method tries to call the <ph id=\"ph2\">&lt;xref:System.IConvertible.ToString%2A?displayProperty=fullName&gt;</ph> implementation of <ph id=\"ph3\">`value`</ph>.","pos":[0,168],"source":"To convert `value` to its string representation, the method tries to call the <xref:System.IConvertible.ToString%2A?displayProperty=fullName> implementation of `value`."},{"content":"If <ph id=\"ph1\">`value`</ph> does not implement the <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph> interface, the method tries to call the <ph id=\"ph3\">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> implementation of <ph id=\"ph4\">`value`</ph>.","pos":[169,360],"source":" If `value` does not implement the <xref:System.IConvertible> interface, the method tries to call the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> implementation of `value`."},{"content":"If value does not implement the <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> interface, the method calls the <ph id=\"ph2\">`ToString`</ph> method of the underlying type of <ph id=\"ph3\">`value`</ph>.","pos":[361,504],"source":" If value does not implement the <xref:System.IFormattable> interface, the method calls the `ToString` method of the underlying type of `value`."}]}],"pos":[749222,749727],"yaml":true,"extradata":"MT"},{"content":"An object that supplies the value to convert, or `null`.","nodes":[{"pos":[0,56],"content":"An object that supplies the value to convert, or <ph id=\"ph1\">`null`</ph>.","source":"An object that supplies the value to convert, or `null`."}],"pos":[750277,750334],"yaml":true},{"content":"The string representation of <code>value</code>, or <xref href=\"System.String.Empty\"></xref> if <code>value</code> is `null`.","nodes":[{"pos":[0,125],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`null`</ph>.","source":"The string representation of <code>value</code>, or <xref href=\"System.String.Empty\"></xref> if <code>value</code> is `null`."}],"pos":[750391,750517],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to its equivalent string representation.","nodes":[{"pos":[0,97],"content":"Converts the value of the specified 8-bit signed integer to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to its equivalent string representation.","pos":[0,97]}]}],"pos":[752017,752115],"yaml":true},{"content":"This implementation is identical to <xref:System.SByte.ToString?displayProperty=fullName>.","nodes":[{"pos":[0,90],"content":"This implementation is identical to <xref:System.SByte.ToString?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.SByte.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,90],"source":"This implementation is identical to <xref:System.SByte.ToString?displayProperty=fullName>."}]}],"pos":[752126,752217],"yaml":true,"extradata":"MT"},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[752814,752851],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[752908,752957],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to its equivalent string representation.","nodes":[{"pos":[0,115],"content":"Converts the value of the specified single-precision floating-point number to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to its equivalent string representation.","pos":[0,115]}]}],"pos":[754516,754632],"yaml":true},{"content":"This implementation is identical to <xref:System.Single.ToString?displayProperty=fullName>.","nodes":[{"pos":[0,91],"content":"This implementation is identical to <xref:System.Single.ToString?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Single.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,91],"source":"This implementation is identical to <xref:System.Single.ToString?displayProperty=fullName>."}]}],"pos":[754643,754735],"yaml":true,"extradata":"MT"},{"content":"The single-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The single-precision floating-point number to convert.","nodes":[{"content":"The single-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[755308,755363],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[755420,755469],"yaml":true},{"content":"Returns the specified string instance; no actual conversion is performed.","nodes":[{"pos":[0,73],"content":"Returns the specified string instance; no actual conversion is performed.","nodes":[{"content":"Returns the specified string instance; no actual conversion is performed.","pos":[0,73]}]}],"pos":[756975,757049],"yaml":true},{"content":"The string to return.","nodes":[{"pos":[0,21],"content":"The string to return.","nodes":[{"content":"The string to return.","pos":[0,21]}]}],"pos":[757947,757969],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[758026,758068],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.","nodes":[{"pos":[0,100],"content":"Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.","pos":[0,100]}]}],"pos":[759230,759331],"yaml":true},{"content":"This implementation is identical to <xref:System.UInt32.ToString?displayProperty=fullName>.","nodes":[{"pos":[0,91],"content":"This implementation is identical to <xref:System.UInt32.ToString?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.UInt32.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,91],"source":"This implementation is identical to <xref:System.UInt32.ToString?displayProperty=fullName>."}]}],"pos":[759342,759434],"yaml":true,"extradata":"MT"},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[760037,760077],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[760134,760183],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.","nodes":[{"pos":[0,100],"content":"Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.","pos":[0,100]}]}],"pos":[761742,761843],"yaml":true},{"content":"This implementation is identical to <xref:System.UInt64.ToString?displayProperty=fullName>.","nodes":[{"pos":[0,91],"content":"This implementation is identical to <xref:System.UInt64.ToString?displayProperty=fullName>.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.UInt64.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,91],"source":"This implementation is identical to <xref:System.UInt64.ToString?displayProperty=fullName>."}]}],"pos":[761854,761946],"yaml":true,"extradata":"MT"},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[762555,762595],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[762652,762701],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to its equivalent string representation.","nodes":[{"pos":[0,98],"content":"Converts the value of the specified 32-bit signed integer to its equivalent string representation.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to its equivalent string representation.","pos":[0,98]}]}],"pos":[764254,764353],"yaml":true},{"content":"This implementation is identical to <xref:System.Int32.ToString?displayProperty=fullName>. It formats `value` by using the formatting conventions of the current thread culture.","nodes":[{"pos":[0,176],"content":"This implementation is identical to <xref:System.Int32.ToString?displayProperty=fullName>. It formats `value` by using the formatting conventions of the current thread culture.","nodes":[{"content":"This implementation is identical to <ph id=\"ph1\">&lt;xref:System.Int32.ToString?displayProperty=fullName&gt;</ph>.","pos":[0,90],"source":"This implementation is identical to <xref:System.Int32.ToString?displayProperty=fullName>."},{"content":"It formats <ph id=\"ph1\">`value`</ph> by using the formatting conventions of the current thread culture.","pos":[91,176],"source":" It formats `value` by using the formatting conventions of the current thread culture."}]}],"pos":[764364,764541],"yaml":true,"extradata":"MT"},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[765498,765536],"yaml":true},{"content":"The string representation of <code>value</code>.","nodes":[{"pos":[0,48],"content":"The string representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string representation of <code>value</code>."}],"pos":[765593,765642],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,98],"content":"Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.","pos":[0,98]}]}],"pos":[767148,767247],"yaml":true},{"content":"Using the <xref:System.Convert.ToUInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt16.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,275],"content":"Using the <xref:System.Convert.ToUInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt16.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Convert.ToUInt16%28System.String%29&gt;</ph> method is equivalent to passing <ph id=\"ph2\">`value`</ph> to the <ph id=\"ph3\">&lt;xref:System.UInt16.Parse%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[0,185],"source":"Using the <xref:System.Convert.ToUInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt16.Parse%28System.String%29?displayProperty=fullName> method."},{"content":"<ph id=\"ph1\">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.","pos":[186,275],"source":"`value` is interpreted by using the formatting conventions of the current thread culture."}]},{"pos":[282,538],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,256],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.UInt16.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,156],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[157,256],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[767258,767801],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[768405,768451],"yaml":true},{"content":"A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,126],"content":"A 16-bit unsigned integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[768508,768635],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[768776,768880],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>."}],"pos":[768974,769136],"yaml":true},{"content":"Returns the specified 16-bit unsigned integer; no actual conversion is performed.","nodes":[{"pos":[0,81],"content":"Returns the specified 16-bit unsigned integer; no actual conversion is performed.","nodes":[{"content":"Returns the specified 16-bit unsigned integer; no actual conversion is performed.","pos":[0,81]}]}],"pos":[770641,770723],"yaml":true},{"content":"The 16-bit unsigned integer to return.","nodes":[{"pos":[0,38],"content":"The 16-bit unsigned integer to return.","nodes":[{"content":"The 16-bit unsigned integer to return.","pos":[0,38]}]}],"pos":[770914,770953],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[771010,771052],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,101],"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.","pos":[0,101]}]}],"pos":[772611,772713],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[773337,773377],"yaml":true},{"content":"A 16-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 16-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[773434,773502],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.UInt16.MaxValue\"></xref>.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.UInt16.MaxValue\"></xref>."}],"pos":[773647,773727],"yaml":true},{"content":"Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,108],"content":"Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.","pos":[0,108]}]}],"pos":[775292,775401],"yaml":true},{"content":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the <xref:System.UInt16> data type supports unsigned values only, the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all 16 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt16> data type is converted to a <xref:System.UInt16> value without the method throwing an exception. The following example converts <xref:System.Int16.MinValue?displayProperty=fullName> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x8000 converts to 32768.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#11)]\n [!code-vb[System.Convert.BaseConversion#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#11)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt16> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt16> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  \n  \n [!code-csharp[System.Convert.BaseConversion#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#12)]\n [!code-vb[System.Convert.BaseConversion#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#12)]","nodes":[{"pos":[0,100],"content":"If <ph id=\"ph1\">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id=\"ph2\">`value`</ph> parameter with \"0x\" or \"0X\".","source":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\"."},{"pos":[107,961],"content":"Because the <xref:System.UInt16> data type supports unsigned values only, the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all 16 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt16> data type is converted to a <xref:System.UInt16> value without the method throwing an exception. The following example converts <xref:System.Int16.MinValue?displayProperty=fullName> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x8000 converts to 32768.\"","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.UInt16&gt;</ph> data type supports unsigned values only, the <ph id=\"ph2\">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that <ph id=\"ph3\">`value`</ph> is expressed using unsigned binary representation.","pos":[0,221],"source":"Because the <xref:System.UInt16> data type supports unsigned values only, the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation."},{"content":"In other words, all 16 bits are used to represent the numeric value, and a sign bit is absent.","pos":[222,316]},{"content":"As a result, it is possible to write code in which a signed integer value that is out of the range of the <ph id=\"ph1\">&lt;xref:System.UInt16&gt;</ph> data type is converted to a <ph id=\"ph2\">&lt;xref:System.UInt16&gt;</ph> value without the method throwing an exception.","pos":[317,540],"source":" As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt16> data type is converted to a <xref:System.UInt16> value without the method throwing an exception."},{"content":"The following example converts <ph id=\"ph1\">&lt;xref:System.Int16.MinValue?displayProperty=fullName&gt;</ph> to its hexadecimal string representation, and then calls the <ph id=\"ph2\">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph> method.","pos":[541,759],"source":" The following example converts <xref:System.Int16.MinValue?displayProperty=fullName> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method."},{"content":"Instead of throwing an exception, the method displays the message, \"0x8000 converts to 32768.\"","pos":[760,854]}]},{"pos":[968,1267],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#11<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#11<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#11)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#11)]\n [!code-vb[System.Convert.BaseConversion#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#11)]"},{"pos":[1274,2160],"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt16> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt16> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.","nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt16> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt16> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.","pos":[0,886],"nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.","pos":[0,223]},{"content":"The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <ph id=\"ph1\">&lt;xref:System.UInt16&gt;</ph> value.","pos":[224,484],"source":" The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt16> value."},{"content":"The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.","pos":[485,630]},{"content":"When the example converts the value to a <ph id=\"ph1\">&lt;xref:System.UInt16&gt;</ph> value, it checks whether the original value was a signed integer.","pos":[631,758],"source":" When the example converts the value to a <xref:System.UInt16> value, it checks whether the original value was a signed integer."},{"content":"If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.","pos":[759,886]}]}]},{"pos":[2167,2466],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#12<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#12)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#12<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#12)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#12)]\n [!code-vb[System.Convert.BaseConversion#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#12)]"}],"pos":[775412,777897],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[778564,778610],"yaml":true},{"content":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.","nodes":[{"pos":[0,76],"content":"The base of the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which must be 2, 8, 10, or 16.","source":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16."}],"pos":[778673,778750],"yaml":true},{"content":"A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,126],"content":"A 16-bit unsigned integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[778807,778934],"yaml":true},{"content":"<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;fromBase&lt;/code&gt;</ph> is not 2, 8, 10, or 16.","source":"<code>fromBase</code> is not 2, 8, 10, or 16."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,164],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."}],"pos":[779079,779250],"yaml":true},{"content":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>."}],"pos":[779364,779428],"yaml":true},{"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"pos":[0,333],"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id=\"ph2\">&lt;code&gt;fromBase&lt;/code&gt;</ph>.","pos":[0,113],"source":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>."},{"content":"The exception message indicates that there are no digits to convert if the first character in <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is invalid; otherwise, the message indicates that <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> contains invalid trailing characters.","pos":[114,333],"source":" The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters."}]}],"pos":[779518,779852],"yaml":true},{"content":"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."},{"pos":[108,112],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[119,280],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>."}],"pos":[779946,780237],"yaml":true},{"content":"Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,133],"content":"Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.","pos":[0,133]}]}],"pos":[781862,781996],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,152],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> method of the underlying type of `value`."},{"pos":[159,447],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"For example, if <ph id=\"ph1\">`value`</ph> is a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> that represents a number, <ph id=\"ph3\">`provider`</ph> could supply culture-specific information about the notation used to represent that number.","pos":[110,288],"source":" For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number."}]},{"pos":[454,614],"content":"The base types ignore <ph id=\"ph1\">`provider`</ph>; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","source":"The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}],"pos":[782007,782628],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[784041,784123],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[784196,784261],"yaml":true},{"content":"A 16-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,108],"content":"A 16-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 16-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[784318,784427],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[784568,784620],"yaml":true},{"content":"<code>value</code> does not implement the  <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the  <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the  <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[101,105],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[112,144],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[784720,784873],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>."}],"pos":[784967,785129],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,159],"content":"Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.","pos":[0,159]}]}],"pos":[786754,786914],"yaml":true},{"content":"The return value is the result of invoking <xref:System.UInt16.Parse%2A?displayProperty=fullName> on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,109],"content":"The return value is the result of invoking <ph id=\"ph1\">&lt;xref:System.UInt16.Parse%2A?displayProperty=fullName&gt;</ph> on <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking <xref:System.UInt16.Parse%2A?displayProperty=fullName> on `value`."},{"pos":[116,469],"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[0,123],"source":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id=\"ph2\">`value`</ph>.","pos":[124,246],"source":" The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.","pos":[247,353],"source":" If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used."}]},{"pos":[476,732],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,256],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.UInt16.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,156],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[157,256],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[786925,787664],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[788570,788616],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[788689,788754],"yaml":true},{"content":"A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,126],"content":"A 16-bit unsigned integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[788811,788938],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[789079,789183],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>."}],"pos":[789277,789439],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,116],"content":"Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.","pos":[0,116]}]}],"pos":[790944,791061],"yaml":true},{"content":"The single-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The single-precision floating-point number to convert.","nodes":[{"content":"The single-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[791685,791740],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,215],"content":"<code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 16-bit unsigned integer.","pos":[0,67],"source":"<code>value</code>, rounded to the nearest 16-bit unsigned integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[68,215],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[791797,792013],"yaml":true},{"content":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>."}],"pos":[792158,792256],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,101],"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.","pos":[0,101]}]}],"pos":[793761,793863],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[794493,794533],"yaml":true},{"content":"A 16-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 16-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[794590,794658],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.UInt16.MaxValue\"></xref>.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.UInt16.MaxValue\"></xref>."}],"pos":[794803,794883],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.","pos":[0,99]}]}],"pos":[796382,796482],"yaml":true},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[797085,797122],"yaml":true},{"content":"A 16-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 16-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[797179,797247],"yaml":true},{"content":"<code>value</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","source":"<code>value</code> is less than zero."}],"pos":[797392,797430],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,116],"content":"Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.","pos":[0,116]}]}],"pos":[798935,799052],"yaml":true},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[799673,799728],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,215],"content":"<code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 16-bit unsigned integer.","pos":[0,67],"source":"<code>value</code>, rounded to the nearest 16-bit unsigned integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[68,215],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[799785,800001],"yaml":true},{"content":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>."}],"pos":[800146,800244],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.","pos":[0,99]}]}],"pos":[801743,801843],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[802442,802480],"yaml":true},{"content":"A 16-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 16-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[802537,802605],"yaml":true},{"content":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>."}],"pos":[802750,802848],"yaml":true},{"content":"Converts the value of the specified object to a 16-bit unsigned integer.","nodes":[{"pos":[0,72],"content":"Converts the value of the specified object to a 16-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified object to a 16-bit unsigned integer.","pos":[0,72]}]}],"pos":[804353,804426],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> method of the underlying type of `value`.","nodes":[{"pos":[0,152],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> method of the underlying type of `value`."}],"pos":[804437,804590],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[805184,805277],"yaml":true},{"content":"A 16-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,108],"content":"A 16-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 16-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[805334,805443],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[805584,805636],"yaml":true},{"content":"<code>value</code> does not implement the  <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the  <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the  <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[101,105],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[112,144],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[805736,805889],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>."}],"pos":[805983,806145],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,101],"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.","pos":[0,101]}]}],"pos":[807638,807740],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[808330,808369],"yaml":true},{"content":"A 16-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 16-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[808426,808494],"yaml":true},{"content":"Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,96],"content":"Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.","pos":[0,96]}]}],"pos":[810041,810138],"yaml":true},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[810733,810767],"yaml":true},{"content":"The 16-bit unsigned integer equivalent to <code>value</code>.","nodes":[{"pos":[0,61],"content":"The 16-bit unsigned integer equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The 16-bit unsigned integer equivalent to <code>value</code>."}],"pos":[810824,810886],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[812457,812541],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[812736,812772],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[812829,812885],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[813036,813070],"yaml":true},{"content":"Converts the specified Boolean value to the equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,79],"content":"Converts the specified Boolean value to the equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the specified Boolean value to the equivalent 16-bit unsigned integer.","pos":[0,79]}]}],"pos":[814237,814317],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[814917,814947],"yaml":true},{"content":"The number 1 if <code>value</code> is `true`; otherwise, 0.","nodes":[{"pos":[0,59],"content":"The number 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`true`</ph>; otherwise, 0.","source":"The number 1 if <code>value</code> is `true`; otherwise, 0."}],"pos":[815004,815064],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,100],"content":"Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.","pos":[0,100]}]}],"pos":[816617,816718],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[817331,817369],"yaml":true},{"content":"A 16-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 16-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[817426,817494],"yaml":true},{"content":"<code>value</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","source":"<code>value</code> is less than zero."}],"pos":[817639,817677],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.","pos":[0,99]}]}],"pos":[819176,819276],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[819870,819908],"yaml":true},{"content":"A 16-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 16-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[819965,820033],"yaml":true},{"content":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>."}],"pos":[820178,820276],"yaml":true},{"content":"Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.","nodes":[{"pos":[0,92],"content":"Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.","pos":[0,92]}]}],"pos":[821787,821880],"yaml":true},{"content":"The decimal number to convert.","nodes":[{"pos":[0,30],"content":"The decimal number to convert.","nodes":[{"content":"The decimal number to convert.","pos":[0,30]}]}],"pos":[822504,822535],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,215],"content":"<code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 16-bit unsigned integer.","pos":[0,67],"source":"<code>value</code>, rounded to the nearest 16-bit unsigned integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[68,215],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[822592,822808],"yaml":true},{"content":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>."}],"pos":[822953,823051],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,116],"content":"Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.","pos":[0,116]}]}],"pos":[824556,824673],"yaml":true},{"content":"The single-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The single-precision floating-point number to convert.","nodes":[{"content":"The single-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[825299,825354],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,215],"content":"<code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 32-bit unsigned integer.","pos":[0,67],"source":"<code>value</code>, rounded to the nearest 32-bit unsigned integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[68,215],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[825411,825627],"yaml":true},{"content":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\"></xref>."}],"pos":[825772,825870],"yaml":true},{"content":"Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,108],"content":"Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.","pos":[0,108]}]}],"pos":[827435,827544],"yaml":true},{"content":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the <xref:System.UInt32> data type supports unsigned values only, the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all 32 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt32> data type is converted to a <xref:System.UInt32> value without the method throwing an exception. The following example converts <xref:System.Int32.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x80000000 converts to 2147483648.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#13)]\n [!code-vb[System.Convert.BaseConversion#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#13)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt32> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt32> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  \n  \n [!code-csharp[System.Convert.BaseConversion#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#14)]\n [!code-vb[System.Convert.BaseConversion#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#14)]","nodes":[{"pos":[0,100],"content":"If <ph id=\"ph1\">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id=\"ph2\">`value`</ph> parameter with \"0x\" or \"0X\".","source":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\"."},{"pos":[107,945],"content":"Because the <xref:System.UInt32> data type supports unsigned values only, the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all 32 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt32> data type is converted to a <xref:System.UInt32> value without the method throwing an exception. The following example converts <xref:System.Int32.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x80000000 converts to 2147483648.\"","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.UInt32&gt;</ph> data type supports unsigned values only, the <ph id=\"ph2\">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that <ph id=\"ph3\">`value`</ph> is expressed using unsigned binary representation.","pos":[0,221],"source":"Because the <xref:System.UInt32> data type supports unsigned values only, the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation."},{"content":"In other words, all 32 bits are used to represent the numeric value, and a sign bit is absent.","pos":[222,316]},{"content":"As a result, it is possible to write code in which a signed integer value that is out of the range of the <ph id=\"ph1\">&lt;xref:System.UInt32&gt;</ph> data type is converted to a <ph id=\"ph2\">&lt;xref:System.UInt32&gt;</ph> value without the method throwing an exception.","pos":[317,540],"source":" As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt32> data type is converted to a <xref:System.UInt32> value without the method throwing an exception."},{"content":"The following example converts <ph id=\"ph1\">&lt;xref:System.Int32.MinValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id=\"ph2\">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph> method.","pos":[541,734],"source":" The following example converts <xref:System.Int32.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method."},{"content":"Instead of throwing an exception, the method displays the message, \"0x80000000 converts to 2147483648.\"","pos":[735,838]}]},{"pos":[952,1251],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#13<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#13)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#13<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#13)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#13)]\n [!code-vb[System.Convert.BaseConversion#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#13)]"},{"pos":[1258,2144],"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt32> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt32> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.","nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt32> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt32> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.","pos":[0,886],"nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.","pos":[0,223]},{"content":"The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <ph id=\"ph1\">&lt;xref:System.UInt32&gt;</ph> value.","pos":[224,484],"source":" The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt32> value."},{"content":"The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.","pos":[485,630]},{"content":"When the example converts the value to a <ph id=\"ph1\">&lt;xref:System.UInt32&gt;</ph> value, it checks whether the original value was a signed integer.","pos":[631,758],"source":" When the example converts the value to a <xref:System.UInt32> value, it checks whether the original value was a signed integer."},{"content":"If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.","pos":[759,886]}]}]},{"pos":[2151,2450],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#14<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#14)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#14<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#14)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#14)]\n [!code-vb[System.Convert.BaseConversion#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#14)]"}],"pos":[827555,830024],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[830682,830728],"yaml":true},{"content":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.","nodes":[{"pos":[0,76],"content":"The base of the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which must be 2, 8, 10, or 16.","source":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16."}],"pos":[830791,830868],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,126],"content":"A 32-bit unsigned integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[830925,831052],"yaml":true},{"content":"<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;fromBase&lt;/code&gt;</ph> is not 2, 8, 10, or 16.","source":"<code>fromBase</code> is not 2, 8, 10, or 16."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,164],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."}],"pos":[831197,831368],"yaml":true},{"content":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>."}],"pos":[831482,831546],"yaml":true},{"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"pos":[0,333],"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id=\"ph2\">&lt;code&gt;fromBase&lt;/code&gt;</ph>.","pos":[0,113],"source":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>."},{"content":"The exception message indicates that there are no digits to convert if the first character in <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is invalid; otherwise, the message indicates that <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> contains invalid trailing characters.","pos":[114,333],"source":" The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters."}]}],"pos":[831636,831970],"yaml":true},{"content":"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."},{"pos":[108,112],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[119,280],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt32.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>."}],"pos":[832064,832355],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,159],"content":"Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.","pos":[0,159]}]}],"pos":[833980,834140],"yaml":true},{"content":"The return value is the result of invoking <xref:System.UInt32.Parse%2A?displayProperty=fullName> on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,109],"content":"The return value is the result of invoking <ph id=\"ph1\">&lt;xref:System.UInt32.Parse%2A?displayProperty=fullName&gt;</ph> on <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking <xref:System.UInt32.Parse%2A?displayProperty=fullName> on `value`."},{"pos":[116,469],"content":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[0,123],"source":"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id=\"ph2\">`value`</ph>.","pos":[124,246],"source":" The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.","pos":[247,353],"source":" If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used."}]},{"pos":[476,732],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,256],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.UInt32.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,156],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[157,256],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[834151,834890],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[835794,835840],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[835913,835978],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,126],"content":"A 32-bit unsigned integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[836035,836162],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[836303,836407],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt32.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>."}],"pos":[836501,836663],"yaml":true},{"content":"Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,133],"content":"Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.","pos":[0,133]}]}],"pos":[838288,838422],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,152],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> method of the underlying type of `value`."},{"pos":[159,447],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"For example, if <ph id=\"ph1\">`value`</ph> is a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> that represents a number, <ph id=\"ph3\">`provider`</ph> could supply culture-specific information about the notation used to represent that number.","pos":[110,288],"source":" For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number."}]},{"pos":[454,614],"content":"The base types ignore <ph id=\"ph1\">`provider`</ph>; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","source":"The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}],"pos":[838433,839054],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[840465,840547],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[840620,840685],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,108],"content":"A 32-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 32-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[840742,840851],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[840992,841044],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[841144,841296],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt32.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>."}],"pos":[841390,841552],"yaml":true},{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,101],"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.","pos":[0,101]}]}],"pos":[843057,843159],"yaml":true},{"content":"The 64-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 64-bit unsigned integer to convert.","nodes":[{"content":"The 64-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[843782,843822],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 32-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[843879,843947],"yaml":true},{"content":"<code>value</code> is greater than <xref href=\"System.UInt32.MaxValue\"></xref>.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is greater than <xref href=\"System.UInt32.MaxValue\"></xref>."}],"pos":[844092,844172],"yaml":true},{"content":"Returns the specified 32-bit unsigned integer; no actual conversion is performed.","nodes":[{"pos":[0,81],"content":"Returns the specified 32-bit unsigned integer; no actual conversion is performed.","nodes":[{"content":"Returns the specified 32-bit unsigned integer; no actual conversion is performed.","pos":[0,81]}]}],"pos":[845677,845759],"yaml":true},{"content":"The 32-bit unsigned integer to return.","nodes":[{"pos":[0,38],"content":"The 32-bit unsigned integer to return.","nodes":[{"content":"The 32-bit unsigned integer to return.","pos":[0,38]}]}],"pos":[845946,845985],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[846042,846084],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,102],"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.","pos":[0,102]}]}],"pos":[847643,847746],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[848361,848401],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 32-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[848458,848526],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,98],"content":"Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.","pos":[0,98]}]}],"pos":[850085,850184],"yaml":true},{"content":"Using the <xref:System.Convert.ToUInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt32.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,275],"content":"Using the <xref:System.Convert.ToUInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt32.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Convert.ToUInt32%28System.String%29&gt;</ph> method is equivalent to passing <ph id=\"ph2\">`value`</ph> to the <ph id=\"ph3\">&lt;xref:System.UInt32.Parse%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[0,185],"source":"Using the <xref:System.Convert.ToUInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt32.Parse%28System.String%29?displayProperty=fullName> method."},{"content":"<ph id=\"ph1\">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.","pos":[186,275],"source":"`value` is interpreted by using the formatting conventions of the current thread culture."}]},{"pos":[282,538],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,256],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.UInt32.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,156],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[157,256],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[850195,850738],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[851363,851409],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,126],"content":"A 32-bit unsigned integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[851466,851593],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[851734,851838],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt32.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>."}],"pos":[851932,852094],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.","pos":[0,99]}]}],"pos":[853593,853693],"yaml":true},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[854298,854335],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 32-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[854392,854460],"yaml":true},{"content":"<code>value</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","source":"<code>value</code> is less than zero."}],"pos":[854605,854643],"yaml":true},{"content":"Converts the specified Boolean value to the equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,79],"content":"Converts the specified Boolean value to the equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the specified Boolean value to the equivalent 32-bit unsigned integer.","pos":[0,79]}]}],"pos":[856154,856234],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[856825,856855],"yaml":true},{"content":"The number 1 if <code>value</code> is `true`; otherwise, 0.","nodes":[{"pos":[0,59],"content":"The number 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`true`</ph>; otherwise, 0.","source":"The number 1 if <code>value</code> is `true`; otherwise, 0."}],"pos":[856912,856972],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.","pos":[0,99]}]}],"pos":[858525,858625],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[859226,859264],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 32-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[859321,859389],"yaml":true},{"content":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\"></xref>."}],"pos":[859534,859632],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.","pos":[0,99]}]}],"pos":[861131,861231],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[861827,861865],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 32-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[861922,861990],"yaml":true},{"content":"<code>value</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","source":"<code>value</code> is less than zero."}],"pos":[862135,862173],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,100],"content":"Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.","pos":[0,100]}]}],"pos":[863672,863773],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[864377,864415],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 32-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[864472,864540],"yaml":true},{"content":"<code>value</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","source":"<code>value</code> is less than zero."}],"pos":[864685,864723],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,116],"content":"Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.","pos":[0,116]}]}],"pos":[866228,866345],"yaml":true},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[866968,867023],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,215],"content":"<code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 32-bit unsigned integer.","pos":[0,67],"source":"<code>value</code>, rounded to the nearest 32-bit unsigned integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[68,215],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[867080,867296],"yaml":true},{"content":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\"></xref>."}],"pos":[867441,867539],"yaml":true},{"content":"Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,92],"content":"Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.","pos":[0,92]}]}],"pos":[869050,869143],"yaml":true},{"content":"The decimal number to convert.","nodes":[{"pos":[0,30],"content":"The decimal number to convert.","nodes":[{"content":"The decimal number to convert.","pos":[0,30]}]}],"pos":[869769,869800],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,215],"content":"<code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 32-bit unsigned integer.","pos":[0,67],"source":"<code>value</code>, rounded to the nearest 32-bit unsigned integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[68,215],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[869857,870073],"yaml":true},{"content":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\"></xref>."}],"pos":[870218,870316],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[871833,871917],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[872110,872146],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[872203,872259],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[872410,872444],"yaml":true},{"content":"Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,96],"content":"Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.","pos":[0,96]}]}],"pos":[873593,873690],"yaml":true},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[874276,874310],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 32-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[874367,874435],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.","nodes":[{"pos":[0,101],"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.","pos":[0,101]}]}],"pos":[875982,876084],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[876665,876704],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 32-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[876761,876829],"yaml":true},{"content":"Converts the value of the specified object to a 32-bit unsigned integer.","nodes":[{"pos":[0,72],"content":"Converts the value of the specified object to a 32-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified object to a 32-bit unsigned integer.","pos":[0,72]}]}],"pos":[878388,878461],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> method of the underlying type of `value`.","nodes":[{"pos":[0,152],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> method of the underlying type of `value`."}],"pos":[878472,878625],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[879210,879303],"yaml":true},{"content":"A 32-bit unsigned integer that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,112],"content":"A 32-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 32-bit unsigned integer that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[879360,879473],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[879614,879666],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[879766,879918],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt32.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>."}],"pos":[880012,880174],"yaml":true},{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,116],"content":"Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.","pos":[0,116]}]}],"pos":[881679,881796],"yaml":true},{"content":"The single-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The single-precision floating-point number to convert.","nodes":[{"content":"The single-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[882516,882571],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,215],"content":"<code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 64-bit unsigned integer.","pos":[0,67],"source":"<code>value</code>, rounded to the nearest 64-bit unsigned integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[68,215],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[882628,882844],"yaml":true},{"content":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt64.MaxValue\"></xref>."}],"pos":[882989,883087],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,98],"content":"Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.","pos":[0,98]}]}],"pos":[884592,884691],"yaml":true},{"content":"Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,273],"content":"Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Convert.ToInt64%28System.String%29&gt;</ph> method is equivalent to passing <ph id=\"ph2\">`value`</ph> to the <ph id=\"ph3\">&lt;xref:System.Int64.Parse%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[0,183],"source":"Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=fullName> method."},{"content":"<ph id=\"ph1\">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.","pos":[184,273],"source":"`value` is interpreted by using the formatting conventions of the current thread culture."}]},{"pos":[280,536],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,256],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.UInt64.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,156],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[157,256],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[884702,885243],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[885874,885920],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,124],"content":"A 64-bit signed integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[885977,886102],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[886243,886347],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt64.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>."}],"pos":[886441,886603],"yaml":true},{"content":"Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,133],"content":"Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.","pos":[0,133]}]}],"pos":[888228,888362],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.","nodes":[{"pos":[0,152],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> method of the underlying type of `value`."},{"pos":[159,447],"content":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"`provider` enables the user to specify culture-specific conversion information about the contents of `value`."},{"content":"For example, if <ph id=\"ph1\">`value`</ph> is a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> that represents a number, <ph id=\"ph3\">`provider`</ph> could supply culture-specific information about the notation used to represent that number.","pos":[110,288],"source":" For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number."}]},{"pos":[454,614],"content":"The base types ignore <ph id=\"ph1\">`provider`</ph>; however, the parameter may be used if <ph id=\"ph2\">`value`</ph> is a user-defined type that implements the <ph id=\"ph3\">&lt;xref:System.IConvertible&gt;</ph> interface.","source":"The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."}],"pos":[888373,888994],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface.","nodes":[{"pos":[0,81],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface."}],"pos":[890406,890488],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[890561,890626],"yaml":true},{"content":"A 64-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,108],"content":"A 64-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 64-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[890683,890792],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[890933,890985],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[891085,891237],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt64.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>."}],"pos":[891331,891493],"yaml":true},{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,101],"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.","pos":[0,101]}]}],"pos":[892998,893100],"yaml":true},{"content":"The 32-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 32-bit unsigned integer to convert.","nodes":[{"content":"The 32-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[893706,893746],"yaml":true},{"content":"A 64-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 64-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[893803,893871],"yaml":true},{"content":"Returns the specified 64-bit unsigned integer; no actual conversion is performed.","nodes":[{"pos":[0,81],"content":"Returns the specified 64-bit unsigned integer; no actual conversion is performed.","nodes":[{"content":"Returns the specified 64-bit unsigned integer; no actual conversion is performed.","pos":[0,81]}]}],"pos":[895430,895512],"yaml":true},{"content":"The 64-bit unsigned integer to return.","nodes":[{"pos":[0,38],"content":"The 64-bit unsigned integer to return.","nodes":[{"content":"The 64-bit unsigned integer to return.","pos":[0,38]}]}],"pos":[895701,895740],"yaml":true},{"content":"<code>value</code> is returned unchanged.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is returned unchanged.","source":"<code>value</code> is returned unchanged."}],"pos":[895797,895839],"yaml":true},{"content":"Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.","pos":[0,99]}]}],"pos":[897392,897492],"yaml":true},{"content":"The 8-bit signed integer to convert.","nodes":[{"pos":[0,36],"content":"The 8-bit signed integer to convert.","nodes":[{"content":"The 8-bit signed integer to convert.","pos":[0,36]}]}],"pos":[898103,898140],"yaml":true},{"content":"A 64-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 64-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[898197,898265],"yaml":true},{"content":"<code>value</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","source":"<code>value</code> is less than zero."}],"pos":[898410,898448],"yaml":true},{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,102],"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.","pos":[0,102]}]}],"pos":[899953,900056],"yaml":true},{"content":"The 16-bit unsigned integer to convert.","nodes":[{"pos":[0,39],"content":"The 16-bit unsigned integer to convert.","nodes":[{"content":"The 16-bit unsigned integer to convert.","pos":[0,39]}]}],"pos":[900675,900715],"yaml":true},{"content":"A 64-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 64-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[900772,900840],"yaml":true},{"content":"Converts the value of the specified object to a 64-bit unsigned integer.","nodes":[{"pos":[0,72],"content":"Converts the value of the specified object to a 64-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified object to a 64-bit unsigned integer.","pos":[0,72]}]}],"pos":[902399,902472],"yaml":true},{"content":"The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> method of the underlying type of `value`.","nodes":[{"pos":[0,152],"content":"The return value is the result of invoking the <ph id=\"ph1\">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName&gt;</ph> method of the underlying type of <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> method of the underlying type of `value`."}],"pos":[902483,902636],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.","nodes":[{"pos":[0,92],"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface, or <ph id=\"ph2\">`null`</ph>.","source":"An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`."}],"pos":[903227,903320],"yaml":true},{"content":"A 64-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.","nodes":[{"pos":[0,108],"content":"A 64-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 64-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`."}],"pos":[903377,903486],"yaml":true},{"content":"<code>value</code> is not in an appropriate format.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in an appropriate format.","source":"<code>value</code> is not in an appropriate format."}],"pos":[903627,903679],"yaml":true},{"content":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not implement the <ph id=\"ph2\">&lt;xref href=\"System.IConvertible\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,143],"content":"The conversion is not supported.","nodes":[{"content":"The conversion is not supported.","pos":[0,32]}]}],"pos":[903779,903931],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt64.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>."}],"pos":[904025,904187],"yaml":true},{"content":"Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,92],"content":"Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.","pos":[0,92]}]}],"pos":[905698,905791],"yaml":true},{"content":"The decimal number to convert.","nodes":[{"pos":[0,30],"content":"The decimal number to convert.","nodes":[{"content":"The decimal number to convert.","pos":[0,30]}]}],"pos":[906423,906454],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,215],"content":"<code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 64-bit unsigned integer.","pos":[0,67],"source":"<code>value</code>, rounded to the nearest 64-bit unsigned integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[68,215],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[906511,906727],"yaml":true},{"content":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt64.MaxValue\"></xref>."}],"pos":[906872,906970],"yaml":true},{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.","pos":[0,99]}]}],"pos":[908469,908569],"yaml":true},{"content":"The 32-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 32-bit signed integer to convert.","nodes":[{"content":"The 32-bit signed integer to convert.","pos":[0,37]}]}],"pos":[909175,909213],"yaml":true},{"content":"A 64-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 64-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[909270,909338],"yaml":true},{"content":"<code>value</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","source":"<code>value</code> is less than zero."}],"pos":[909483,909521],"yaml":true},{"content":"Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,100],"content":"Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.","pos":[0,100]}]}],"pos":[911020,911121],"yaml":true},{"content":"The 16-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 16-bit signed integer to convert.","nodes":[{"content":"The 16-bit signed integer to convert.","pos":[0,37]}]}],"pos":[911736,911774],"yaml":true},{"content":"A 64-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 64-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[911831,911899],"yaml":true},{"content":"<code>value</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","source":"<code>value</code> is less than zero."}],"pos":[912044,912082],"yaml":true},{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,116],"content":"Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.","pos":[0,116]}]}],"pos":[913587,913704],"yaml":true},{"content":"The double-precision floating-point number to convert.","nodes":[{"pos":[0,54],"content":"The double-precision floating-point number to convert.","nodes":[{"content":"The double-precision floating-point number to convert.","pos":[0,54]}]}],"pos":[914333,914388],"yaml":true},{"content":"<code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"pos":[0,215],"content":"<code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, rounded to the nearest 64-bit unsigned integer.","pos":[0,67],"source":"<code>value</code>, rounded to the nearest 64-bit unsigned integer."},{"content":"If <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.","pos":[68,215],"source":" If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6."}]}],"pos":[914445,914661],"yaml":true},{"content":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero or greater than <ph id=\"ph2\">&lt;xref href=\"System.UInt64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is less than zero or greater than <xref href=\"System.UInt64.MaxValue\"></xref>."}],"pos":[914806,914904],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.","nodes":[{"pos":[0,83],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.InvalidCastException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>."}],"pos":[916421,916505],"yaml":true},{"content":"The date and time value to convert.","nodes":[{"pos":[0,35],"content":"The date and time value to convert.","nodes":[{"content":"The date and time value to convert.","pos":[0,35]}]}],"pos":[916699,916735],"yaml":true},{"content":"This conversion is not supported. No value is returned.","nodes":[{"pos":[0,55],"content":"This conversion is not supported. No value is returned.","nodes":[{"content":"This conversion is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This conversion is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]}],"pos":[916792,916848],"yaml":true},{"content":"This conversion is not supported.","nodes":[{"pos":[0,33],"content":"This conversion is not supported.","nodes":[{"content":"This conversion is not supported.","pos":[0,33]}]}],"pos":[916999,917033],"yaml":true},{"content":"Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,96],"content":"Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.","pos":[0,96]}]}],"pos":[918182,918279],"yaml":true},{"content":"The Unicode character to convert.","nodes":[{"pos":[0,33],"content":"The Unicode character to convert.","nodes":[{"content":"The Unicode character to convert.","pos":[0,33]}]}],"pos":[918871,918905],"yaml":true},{"content":"A 64-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 64-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[918962,919030],"yaml":true},{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,101],"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.","pos":[0,101]}]}],"pos":[920577,920679],"yaml":true},{"content":"The 8-bit unsigned integer to convert.","nodes":[{"pos":[0,38],"content":"The 8-bit unsigned integer to convert.","nodes":[{"content":"The 8-bit unsigned integer to convert.","pos":[0,38]}]}],"pos":[921266,921305],"yaml":true},{"content":"A 64-bit signed integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,65],"content":"A 64-bit signed integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit signed integer that is equivalent to <code>value</code>."}],"pos":[921362,921428],"yaml":true},{"content":"Converts the specified Boolean value to the equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,79],"content":"Converts the specified Boolean value to the equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the specified Boolean value to the equivalent 64-bit unsigned integer.","pos":[0,79]}]}],"pos":[922993,923073],"yaml":true},{"content":"The Boolean value to convert.","nodes":[{"pos":[0,29],"content":"The Boolean value to convert.","nodes":[{"content":"The Boolean value to convert.","pos":[0,29]}]}],"pos":[923666,923696],"yaml":true},{"content":"The number 1 if <code>value</code> is `true`; otherwise, 0.","nodes":[{"pos":[0,59],"content":"The number 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`true`</ph>; otherwise, 0.","source":"The number 1 if <code>value</code> is `true`; otherwise, 0."}],"pos":[923753,923813],"yaml":true},{"content":"Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"pos":[0,159],"content":"Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.","nodes":[{"content":"Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.","pos":[0,159]}]}],"pos":[925492,925652],"yaml":true},{"content":"The return value is the result of invoking <xref:System.UInt64.Parse%2A?displayProperty=fullName> on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> implementation that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"pos":[0,109],"content":"The return value is the result of invoking <ph id=\"ph1\">&lt;xref:System.UInt64.Parse%2A?displayProperty=fullName&gt;</ph> on <ph id=\"ph2\">`value`</ph>.","source":"The return value is the result of invoking <xref:System.UInt64.Parse%2A?displayProperty=fullName> on `value`."},{"pos":[116,482],"content":"`provider` is an <xref:System.IFormatProvider> implementation that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.","nodes":[{"content":"<ph id=\"ph1\">`provider`</ph> is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that obtains a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.","pos":[0,129],"source":"`provider` is an <xref:System.IFormatProvider> implementation that obtains a <xref:System.Globalization.NumberFormatInfo> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id=\"ph2\">`value`</ph>.","pos":[130,252],"source":" The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture is used.","pos":[253,366],"source":" If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used."}]},{"pos":[489,745],"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.","pos":[0,256],"nodes":[{"content":"If you prefer not to handle an exception if the conversion fails, you can call the <ph id=\"ph1\">&lt;xref:System.UInt64.TryParse%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,156],"source":"If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.","pos":[157,256],"source":" It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."}]}]}],"pos":[925663,926415],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[927355,927401],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[927474,927539],"yaml":true},{"content":"A 64-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,126],"content":"A 64-bit unsigned integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 64-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[927596,927723],"yaml":true},{"content":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).","source":"<code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9)."}],"pos":[927864,927968],"yaml":true},{"content":"<code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt64.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>."}],"pos":[928062,928224],"yaml":true},{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,99],"content":"Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.","pos":[0,99]}]}],"pos":[929723,929823],"yaml":true},{"content":"The 64-bit signed integer to convert.","nodes":[{"pos":[0,37],"content":"The 64-bit signed integer to convert.","nodes":[{"content":"The 64-bit signed integer to convert.","pos":[0,37]}]}],"pos":[930435,930473],"yaml":true},{"content":"A 64-bit unsigned integer that is equivalent to <code>value</code>.","nodes":[{"pos":[0,67],"content":"A 64-bit unsigned integer that is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit unsigned integer that is equivalent to <code>value</code>."}],"pos":[930530,930598],"yaml":true},{"content":"<code>value</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","source":"<code>value</code> is less than zero."}],"pos":[930743,930781],"yaml":true},{"content":"Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.","nodes":[{"pos":[0,108],"content":"Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.","nodes":[{"content":"Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.","pos":[0,108]}]}],"pos":[932346,932455],"yaml":true},{"content":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the <xref:System.UInt64> data type supports unsigned values only, the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all 64 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed long integer value that is out of the range of the <xref:System.UInt64> data type is converted to a <xref:System.UInt64> value without the method throwing an exception. The following example converts <xref:System.Int64.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x8000000000000000 converts to 9223372036854775808.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#15)]\n [!code-vb[System.Convert.BaseConversion#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#15)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt64> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt64> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  \n  \n [!code-csharp[System.Convert.BaseConversion#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#16)]\n [!code-vb[System.Convert.BaseConversion#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#16)]","nodes":[{"pos":[0,100],"content":"If <ph id=\"ph1\">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id=\"ph2\">`value`</ph> parameter with \"0x\" or \"0X\".","source":"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\"."},{"pos":[107,967],"content":"Because the <xref:System.UInt64> data type supports unsigned values only, the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all 64 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed long integer value that is out of the range of the <xref:System.UInt64> data type is converted to a <xref:System.UInt64> value without the method throwing an exception. The following example converts <xref:System.Int64.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x8000000000000000 converts to 9223372036854775808.\"","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.UInt64&gt;</ph> data type supports unsigned values only, the <ph id=\"ph2\">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that <ph id=\"ph3\">`value`</ph> is expressed using unsigned binary representation.","pos":[0,221],"source":"Because the <xref:System.UInt64> data type supports unsigned values only, the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation."},{"content":"In other words, all 64 bits are used to represent the numeric value, and a sign bit is absent.","pos":[222,316]},{"content":"As a result, it is possible to write code in which a signed long integer value that is out of the range of the <ph id=\"ph1\">&lt;xref:System.UInt64&gt;</ph> data type is converted to a <ph id=\"ph2\">&lt;xref:System.UInt64&gt;</ph> value without the method throwing an exception.","pos":[317,545],"source":" As a result, it is possible to write code in which a signed long integer value that is out of the range of the <xref:System.UInt64> data type is converted to a <xref:System.UInt64> value without the method throwing an exception."},{"content":"The following example converts <ph id=\"ph1\">&lt;xref:System.Int64.MinValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id=\"ph2\">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph> method.","pos":[546,739],"source":" The following example converts <xref:System.Int64.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method."},{"content":"Instead of throwing an exception, the method displays the message, \"0x8000000000000000 converts to 9223372036854775808.\"","pos":[740,860]}]},{"pos":[974,1273],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#15<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#15)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#15<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#15)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#15)]\n [!code-vb[System.Convert.BaseConversion#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#15)]"},{"pos":[1280,2166],"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt64> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt64> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.","nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt64> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt64> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.","pos":[0,886],"nodes":[{"content":"When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.","pos":[0,223]},{"content":"The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <ph id=\"ph1\">&lt;xref:System.UInt64&gt;</ph> value.","pos":[224,484],"source":" The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt64> value."},{"content":"The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.","pos":[485,630]},{"content":"When the example converts the value to a <ph id=\"ph1\">&lt;xref:System.UInt64&gt;</ph> value, it checks whether the original value was a signed integer.","pos":[631,758],"source":" When the example converts the value to a <xref:System.UInt64> value, it checks whether the original value was a signed integer."},{"content":"If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.","pos":[759,886]}]}]},{"pos":[2173,2472],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Convert.BaseConversion#16<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#16)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Convert.BaseConversion#16<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#16)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Convert.BaseConversion#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#16)]\n [!code-vb[System.Convert.BaseConversion#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#16)]"}],"pos":[932466,934957],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[935621,935667],"yaml":true},{"content":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.","nodes":[{"pos":[0,76],"content":"The base of the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which must be 2, 8, 10, or 16.","source":"The base of the number in <code>value</code>, which must be 2, 8, 10, or 16."}],"pos":[935730,935807],"yaml":true},{"content":"A 64-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.","nodes":[{"pos":[0,126],"content":"A 64-bit unsigned integer that is equivalent to the number in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or 0 (zero) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A 64-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`."}],"pos":[935864,935991],"yaml":true},{"content":"<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;fromBase&lt;/code&gt;</ph> is not 2, 8, 10, or 16.","source":"<code>fromBase</code> is not 2, 8, 10, or 16."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,164],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."}],"pos":[936136,936307],"yaml":true},{"content":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is <xref href=\"System.String.Empty\"></xref>."}],"pos":[936421,936485],"yaml":true},{"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"pos":[0,333],"content":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id=\"ph2\">&lt;code&gt;fromBase&lt;/code&gt;</ph>.","pos":[0,113],"source":"<code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>."},{"content":"The exception message indicates that there are no digits to convert if the first character in <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is invalid; otherwise, the message indicates that <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> contains invalid trailing characters.","pos":[114,333],"source":" The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters."}]}],"pos":[936575,936909],"yaml":true},{"content":"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","source":"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."},{"pos":[108,112],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[119,280],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> represents a number that is less than <ph id=\"ph2\">&lt;xref href=\"System.UInt64.MinValue\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.UInt64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>."}],"pos":[937003,937294],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Convert\n  commentId: T:System.Convert\n  id: Convert\n  children:\n  - System.Convert.ChangeType(System.Object,System.Type)\n  - System.Convert.ChangeType(System.Object,System.TypeCode)\n  - System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\n  - System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\n  - System.Convert.DBNull\n  - System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)\n  - System.Convert.FromBase64String(System.String)\n  - System.Convert.GetTypeCode(System.Object)\n  - System.Convert.IsDBNull(System.Object)\n  - System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)\n  - System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)\n  - System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)\n  - System.Convert.ToBase64String(System.Byte[])\n  - System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)\n  - System.Convert.ToBoolean(System.SByte)\n  - System.Convert.ToBoolean(System.String,System.IFormatProvider)\n  - System.Convert.ToBoolean(System.Object,System.IFormatProvider)\n  - System.Convert.ToBoolean(System.UInt64)\n  - System.Convert.ToBoolean(System.UInt32)\n  - System.Convert.ToBoolean(System.UInt16)\n  - System.Convert.ToBoolean(System.String)\n  - System.Convert.ToBoolean(System.Single)\n  - System.Convert.ToBoolean(System.Object)\n  - System.Convert.ToBoolean(System.Double)\n  - System.Convert.ToBoolean(System.Int32)\n  - System.Convert.ToBoolean(System.Int16)\n  - System.Convert.ToBoolean(System.Decimal)\n  - System.Convert.ToBoolean(System.DateTime)\n  - System.Convert.ToBoolean(System.Char)\n  - System.Convert.ToBoolean(System.Byte)\n  - System.Convert.ToBoolean(System.Boolean)\n  - System.Convert.ToBoolean(System.Int64)\n  - System.Convert.ToByte(System.String)\n  - System.Convert.ToByte(System.UInt16)\n  - System.Convert.ToByte(System.UInt32)\n  - System.Convert.ToByte(System.String,System.Int32)\n  - System.Convert.ToByte(System.Object,System.IFormatProvider)\n  - System.Convert.ToByte(System.String,System.IFormatProvider)\n  - System.Convert.ToByte(System.Single)\n  - System.Convert.ToByte(System.UInt64)\n  - System.Convert.ToByte(System.SByte)\n  - System.Convert.ToByte(System.Int16)\n  - System.Convert.ToByte(System.Int64)\n  - System.Convert.ToByte(System.Byte)\n  - System.Convert.ToByte(System.Char)\n  - System.Convert.ToByte(System.DateTime)\n  - System.Convert.ToByte(System.Boolean)\n  - System.Convert.ToByte(System.Double)\n  - System.Convert.ToByte(System.Int32)\n  - System.Convert.ToByte(System.Decimal)\n  - System.Convert.ToByte(System.Object)\n  - System.Convert.ToChar(System.String,System.IFormatProvider)\n  - System.Convert.ToChar(System.Object)\n  - System.Convert.ToChar(System.Object,System.IFormatProvider)\n  - System.Convert.ToChar(System.UInt64)\n  - System.Convert.ToChar(System.UInt32)\n  - System.Convert.ToChar(System.UInt16)\n  - System.Convert.ToChar(System.String)\n  - System.Convert.ToChar(System.Single)\n  - System.Convert.ToChar(System.SByte)\n  - System.Convert.ToChar(System.Int64)\n  - System.Convert.ToChar(System.Int16)\n  - System.Convert.ToChar(System.Double)\n  - System.Convert.ToChar(System.Decimal)\n  - System.Convert.ToChar(System.DateTime)\n  - System.Convert.ToChar(System.Char)\n  - System.Convert.ToChar(System.Byte)\n  - System.Convert.ToChar(System.Boolean)\n  - System.Convert.ToChar(System.Int32)\n  - System.Convert.ToDateTime(System.Single)\n  - System.Convert.ToDateTime(System.String)\n  - System.Convert.ToDateTime(System.UInt16)\n  - System.Convert.ToDateTime(System.String,System.IFormatProvider)\n  - System.Convert.ToDateTime(System.UInt64)\n  - System.Convert.ToDateTime(System.Object,System.IFormatProvider)\n  - System.Convert.ToDateTime(System.SByte)\n  - System.Convert.ToDateTime(System.UInt32)\n  - System.Convert.ToDateTime(System.Object)\n  - System.Convert.ToDateTime(System.Double)\n  - System.Convert.ToDateTime(System.Int32)\n  - System.Convert.ToDateTime(System.Boolean)\n  - System.Convert.ToDateTime(System.Byte)\n  - System.Convert.ToDateTime(System.Char)\n  - System.Convert.ToDateTime(System.Int64)\n  - System.Convert.ToDateTime(System.Decimal)\n  - System.Convert.ToDateTime(System.Int16)\n  - System.Convert.ToDateTime(System.DateTime)\n  - System.Convert.ToDecimal(System.String,System.IFormatProvider)\n  - System.Convert.ToDecimal(System.Object,System.IFormatProvider)\n  - System.Convert.ToDecimal(System.UInt64)\n  - System.Convert.ToDecimal(System.UInt32)\n  - System.Convert.ToDecimal(System.UInt16)\n  - System.Convert.ToDecimal(System.String)\n  - System.Convert.ToDecimal(System.SByte)\n  - System.Convert.ToDecimal(System.Object)\n  - System.Convert.ToDecimal(System.Single)\n  - System.Convert.ToDecimal(System.Int32)\n  - System.Convert.ToDecimal(System.Boolean)\n  - System.Convert.ToDecimal(System.Byte)\n  - System.Convert.ToDecimal(System.Char)\n  - System.Convert.ToDecimal(System.Int64)\n  - System.Convert.ToDecimal(System.Decimal)\n  - System.Convert.ToDecimal(System.Double)\n  - System.Convert.ToDecimal(System.Int16)\n  - System.Convert.ToDecimal(System.DateTime)\n  - System.Convert.ToDouble(System.SByte)\n  - System.Convert.ToDouble(System.Object,System.IFormatProvider)\n  - System.Convert.ToDouble(System.UInt64)\n  - System.Convert.ToDouble(System.UInt32)\n  - System.Convert.ToDouble(System.UInt16)\n  - System.Convert.ToDouble(System.String)\n  - System.Convert.ToDouble(System.Single)\n  - System.Convert.ToDouble(System.String,System.IFormatProvider)\n  - System.Convert.ToDouble(System.Object)\n  - System.Convert.ToDouble(System.Int32)\n  - System.Convert.ToDouble(System.Boolean)\n  - System.Convert.ToDouble(System.Byte)\n  - System.Convert.ToDouble(System.Char)\n  - System.Convert.ToDouble(System.Int64)\n  - System.Convert.ToDouble(System.Decimal)\n  - System.Convert.ToDouble(System.Double)\n  - System.Convert.ToDouble(System.Int16)\n  - System.Convert.ToDouble(System.DateTime)\n  - System.Convert.ToInt16(System.SByte)\n  - System.Convert.ToInt16(System.String,System.IFormatProvider)\n  - System.Convert.ToInt16(System.Object,System.IFormatProvider)\n  - System.Convert.ToInt16(System.UInt64)\n  - System.Convert.ToInt16(System.UInt32)\n  - System.Convert.ToInt16(System.UInt16)\n  - System.Convert.ToInt16(System.String)\n  - System.Convert.ToInt16(System.Single)\n  - System.Convert.ToInt16(System.String,System.Int32)\n  - System.Convert.ToInt16(System.Object)\n  - System.Convert.ToInt16(System.Int32)\n  - System.Convert.ToInt16(System.Int16)\n  - System.Convert.ToInt16(System.Double)\n  - System.Convert.ToInt16(System.Decimal)\n  - System.Convert.ToInt16(System.DateTime)\n  - System.Convert.ToInt16(System.Char)\n  - System.Convert.ToInt16(System.Byte)\n  - System.Convert.ToInt16(System.Boolean)\n  - System.Convert.ToInt16(System.Int64)\n  - System.Convert.ToInt32(System.Single)\n  - System.Convert.ToInt32(System.UInt16)\n  - System.Convert.ToInt32(System.UInt32)\n  - System.Convert.ToInt32(System.SByte)\n  - System.Convert.ToInt32(System.Object,System.IFormatProvider)\n  - System.Convert.ToInt32(System.String,System.IFormatProvider)\n  - System.Convert.ToInt32(System.String,System.Int32)\n  - System.Convert.ToInt32(System.UInt64)\n  - System.Convert.ToInt32(System.Object)\n  - System.Convert.ToInt32(System.String)\n  - System.Convert.ToInt32(System.Int32)\n  - System.Convert.ToInt32(System.Byte)\n  - System.Convert.ToInt32(System.Char)\n  - System.Convert.ToInt32(System.DateTime)\n  - System.Convert.ToInt32(System.Boolean)\n  - System.Convert.ToInt32(System.Double)\n  - System.Convert.ToInt32(System.Int64)\n  - System.Convert.ToInt32(System.Int16)\n  - System.Convert.ToInt32(System.Decimal)\n  - System.Convert.ToInt64(System.Single)\n  - System.Convert.ToInt64(System.String,System.Int32)\n  - System.Convert.ToInt64(System.String,System.IFormatProvider)\n  - System.Convert.ToInt64(System.Object,System.IFormatProvider)\n  - System.Convert.ToInt64(System.UInt64)\n  - System.Convert.ToInt64(System.UInt32)\n  - System.Convert.ToInt64(System.UInt16)\n  - System.Convert.ToInt64(System.String)\n  - System.Convert.ToInt64(System.SByte)\n  - System.Convert.ToInt64(System.Object)\n  - System.Convert.ToInt64(System.Int64)\n  - System.Convert.ToInt64(System.Byte)\n  - System.Convert.ToInt64(System.Char)\n  - System.Convert.ToInt64(System.DateTime)\n  - System.Convert.ToInt64(System.Boolean)\n  - System.Convert.ToInt64(System.Double)\n  - System.Convert.ToInt64(System.Int16)\n  - System.Convert.ToInt64(System.Int32)\n  - System.Convert.ToInt64(System.Decimal)\n  - System.Convert.ToSByte(System.SByte)\n  - System.Convert.ToSByte(System.String,System.Int32)\n  - System.Convert.ToSByte(System.String,System.IFormatProvider)\n  - System.Convert.ToSByte(System.Object,System.IFormatProvider)\n  - System.Convert.ToSByte(System.UInt64)\n  - System.Convert.ToSByte(System.UInt32)\n  - System.Convert.ToSByte(System.String)\n  - System.Convert.ToSByte(System.Single)\n  - System.Convert.ToSByte(System.Object)\n  - System.Convert.ToSByte(System.UInt16)\n  - System.Convert.ToSByte(System.Int32)\n  - System.Convert.ToSByte(System.Int64)\n  - System.Convert.ToSByte(System.Byte)\n  - System.Convert.ToSByte(System.Char)\n  - System.Convert.ToSByte(System.DateTime)\n  - System.Convert.ToSByte(System.Boolean)\n  - System.Convert.ToSByte(System.Double)\n  - System.Convert.ToSByte(System.Int16)\n  - System.Convert.ToSByte(System.Decimal)\n  - System.Convert.ToSingle(System.String,System.IFormatProvider)\n  - System.Convert.ToSingle(System.SByte)\n  - System.Convert.ToSingle(System.Object,System.IFormatProvider)\n  - System.Convert.ToSingle(System.UInt64)\n  - System.Convert.ToSingle(System.UInt32)\n  - System.Convert.ToSingle(System.String)\n  - System.Convert.ToSingle(System.Single)\n  - System.Convert.ToSingle(System.Object)\n  - System.Convert.ToSingle(System.UInt16)\n  - System.Convert.ToSingle(System.Int32)\n  - System.Convert.ToSingle(System.Int16)\n  - System.Convert.ToSingle(System.Double)\n  - System.Convert.ToSingle(System.Decimal)\n  - System.Convert.ToSingle(System.DateTime)\n  - System.Convert.ToSingle(System.Char)\n  - System.Convert.ToSingle(System.Byte)\n  - System.Convert.ToSingle(System.Boolean)\n  - System.Convert.ToSingle(System.Int64)\n  - System.Convert.ToString(System.Int16,System.Int32)\n  - System.Convert.ToString(System.Int16,System.IFormatProvider)\n  - System.Convert.ToString(System.DateTime,System.IFormatProvider)\n  - System.Convert.ToString(System.UInt64,System.IFormatProvider)\n  - System.Convert.ToString(System.Decimal,System.IFormatProvider)\n  - System.Convert.ToString(System.Int32,System.IFormatProvider)\n  - System.Convert.ToString(System.Double,System.IFormatProvider)\n  - System.Convert.ToString(System.Int32,System.Int32)\n  - System.Convert.ToString(System.SByte,System.IFormatProvider)\n  - System.Convert.ToString(System.Int64,System.Int32)\n  - System.Convert.ToString(System.Object,System.IFormatProvider)\n  - System.Convert.ToString(System.Single,System.IFormatProvider)\n  - System.Convert.ToString(System.String,System.IFormatProvider)\n  - System.Convert.ToString(System.UInt16,System.IFormatProvider)\n  - System.Convert.ToString(System.UInt32,System.IFormatProvider)\n  - System.Convert.ToString(System.Char,System.IFormatProvider)\n  - System.Convert.ToString(System.Int64,System.IFormatProvider)\n  - System.Convert.ToString(System.Byte,System.Int32)\n  - System.Convert.ToString(System.UInt16)\n  - System.Convert.ToString(System.Boolean,System.IFormatProvider)\n  - System.Convert.ToString(System.Byte,System.IFormatProvider)\n  - System.Convert.ToString(System.Boolean)\n  - System.Convert.ToString(System.Byte)\n  - System.Convert.ToString(System.Char)\n  - System.Convert.ToString(System.Decimal)\n  - System.Convert.ToString(System.Double)\n  - System.Convert.ToString(System.Int16)\n  - System.Convert.ToString(System.DateTime)\n  - System.Convert.ToString(System.Int64)\n  - System.Convert.ToString(System.Object)\n  - System.Convert.ToString(System.SByte)\n  - System.Convert.ToString(System.Single)\n  - System.Convert.ToString(System.String)\n  - System.Convert.ToString(System.UInt32)\n  - System.Convert.ToString(System.UInt64)\n  - System.Convert.ToString(System.Int32)\n  - System.Convert.ToUInt16(System.String)\n  - System.Convert.ToUInt16(System.UInt16)\n  - System.Convert.ToUInt16(System.UInt32)\n  - System.Convert.ToUInt16(System.String,System.Int32)\n  - System.Convert.ToUInt16(System.Object,System.IFormatProvider)\n  - System.Convert.ToUInt16(System.String,System.IFormatProvider)\n  - System.Convert.ToUInt16(System.Single)\n  - System.Convert.ToUInt16(System.UInt64)\n  - System.Convert.ToUInt16(System.SByte)\n  - System.Convert.ToUInt16(System.Double)\n  - System.Convert.ToUInt16(System.Int64)\n  - System.Convert.ToUInt16(System.Object)\n  - System.Convert.ToUInt16(System.Byte)\n  - System.Convert.ToUInt16(System.Char)\n  - System.Convert.ToUInt16(System.DateTime)\n  - System.Convert.ToUInt16(System.Boolean)\n  - System.Convert.ToUInt16(System.Int16)\n  - System.Convert.ToUInt16(System.Int32)\n  - System.Convert.ToUInt16(System.Decimal)\n  - System.Convert.ToUInt32(System.Single)\n  - System.Convert.ToUInt32(System.String,System.Int32)\n  - System.Convert.ToUInt32(System.String,System.IFormatProvider)\n  - System.Convert.ToUInt32(System.Object,System.IFormatProvider)\n  - System.Convert.ToUInt32(System.UInt64)\n  - System.Convert.ToUInt32(System.UInt32)\n  - System.Convert.ToUInt32(System.UInt16)\n  - System.Convert.ToUInt32(System.String)\n  - System.Convert.ToUInt32(System.SByte)\n  - System.Convert.ToUInt32(System.Boolean)\n  - System.Convert.ToUInt32(System.Int64)\n  - System.Convert.ToUInt32(System.Int32)\n  - System.Convert.ToUInt32(System.Int16)\n  - System.Convert.ToUInt32(System.Double)\n  - System.Convert.ToUInt32(System.Decimal)\n  - System.Convert.ToUInt32(System.DateTime)\n  - System.Convert.ToUInt32(System.Char)\n  - System.Convert.ToUInt32(System.Byte)\n  - System.Convert.ToUInt32(System.Object)\n  - System.Convert.ToUInt64(System.Single)\n  - System.Convert.ToUInt64(System.String)\n  - System.Convert.ToUInt64(System.Object,System.IFormatProvider)\n  - System.Convert.ToUInt64(System.UInt32)\n  - System.Convert.ToUInt64(System.UInt64)\n  - System.Convert.ToUInt64(System.SByte)\n  - System.Convert.ToUInt64(System.UInt16)\n  - System.Convert.ToUInt64(System.Object)\n  - System.Convert.ToUInt64(System.Decimal)\n  - System.Convert.ToUInt64(System.Int32)\n  - System.Convert.ToUInt64(System.Int16)\n  - System.Convert.ToUInt64(System.Double)\n  - System.Convert.ToUInt64(System.DateTime)\n  - System.Convert.ToUInt64(System.Char)\n  - System.Convert.ToUInt64(System.Byte)\n  - System.Convert.ToUInt64(System.Boolean)\n  - System.Convert.ToUInt64(System.String,System.IFormatProvider)\n  - System.Convert.ToUInt64(System.Int64)\n  - System.Convert.ToUInt64(System.String,System.Int32)\n  langs:\n  - csharp\n  name: Convert\n  nameWithType: Convert\n  fullName: System.Convert\n  type: Class\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts a base data type to another base data type.\n  remarks: \"The static methods of the <xref:System.Convert> class are primarily used to support conversion to and from the base data types in the .NET Framework. The supported base types are <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, <xref:System.DateTime> and <xref:System.String>. In addition, the <xref:System.Convert> class includes methods to support  other kinds of conversions.  \\n  \\n This topic consists of the following sections:  \\n  \\n [Conversions to and from Base Types](#Base)   \\n [Non-Decimal Numbers](#NonDecimal)   \\n [Conversions from Custom Objects to Base Types](#Custom)   \\n [Culture-Specific Formatting Information](#Culture)   \\n [Base64 Encoding](#Base64)   \\n [Other Common Conversions](#Other)  \\n  \\n<a name=\\\"Base\\\"></a>   \\n## Conversions to and from Base Types  \\n A conversion method exists to convert every base type to every other base type. However, the actual call to a particular conversion method can produce one of five outcomes, depending on the value of the base type at run time and the target base type. These five outcomes are:  \\n  \\n-   No conversion. This occurs when an attempt is made to convert from a type to itself (for example, by calling <xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=fullName> with an argument of type <xref:System.Int32>). In this case, the method simply returns an instance of the original type.  \\n  \\n-   An <xref:System.InvalidCastException>. This occurs when a particular conversion is not supported. An <xref:System.InvalidCastException> is thrown for the following conversions:  \\n  \\n    -   Conversions from <xref:System.Char> to <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime>.  \\n  \\n    -   Conversions from <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime> to <xref:System.Char>.  \\n  \\n    -   Conversions from <xref:System.DateTime> to any other type except <xref:System.String>.  \\n  \\n    -   Conversions from any other type, except <xref:System.String>, to <xref:System.DateTime>.  \\n  \\n-   A <xref:System.FormatException>. This occurs when the attempt to convert a string value to any other base type fails because the string is not in the proper format. The exception is thrown for the following conversions:  \\n  \\n    -   A string to be converted to a <xref:System.Boolean> value does not equal <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.  \\n  \\n    -   A string to be converted to a <xref:System.Char> value consists of multiple characters.  \\n  \\n    -   A string to be converted to any numeric type is not recognized as a valid number.  \\n  \\n    -   A string to be converted to a <xref:System.DateTime> is not recognized as a valid date and time value.  \\n  \\n-   A successful conversion. For conversions between two different base types not listed in the previous outcomes, all widening conversions as well as all narrowing conversions that do not result in a loss of data will succeed and the method will return a value of the targeted base type.  \\n  \\n-   An <xref:System.OverflowException>. This occurs when a narrowing conversion results in a loss of data. For example, trying to convert a <xref:System.Int32> instance whose value is 10000 to a <xref:System.Byte> type throws an <xref:System.OverflowException> because 10000 is outside the range of the <xref:System.Byte> data type.  \\n  \\n An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits). However, an exception will be thrown if the result is larger than can be represented by the particular conversion method's return value type.  \\n  \\n For example, when a <xref:System.Double> is converted to a <xref:System.Single>, a loss of precision might occur but no exception is thrown. However, if the magnitude of the <xref:System.Double> is too large to be represented by a <xref:System.Single>, an overflow exception is thrown.  \\n  \\n<a name=\\\"NonDecimal\\\"></a>   \\n## Non-Decimal Numbers  \\n The <xref:System.Convert> class includes static methods that you can call to convert integral values to non-decimal string representations, and to convert strings that represent non-decimal numbers to integral values. Each of these conversion methods includes a `base` argument  that lets you specify  the number system; binary (base 2), octal (base 8), and hexadecimal (base 16), as well as decimal (base 10). There is a set of methods to convert each of the CLS-compliant primitive integral types to a string, and one to convert a string to each of the primitive integral types:  \\n  \\n-   <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29> and <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29>, to convert a byte value to and from a string in a specified base.  \\n  \\n-   <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> and <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29>, to convert a 16-bit signed integer to and from a string in a specified base.  \\n  \\n-   <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> and <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29>, to convert a 32-bit signed integer to and from a string in a specified base.  \\n  \\n-   <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> and <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29>, to convert a 64-bit signed integer to and from a string in a specified base.  \\n  \\n-   <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29>, to convert the string representation of a byte value in a specified format to a signed byte.  \\n  \\n-   <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 16-bit integer.  \\n  \\n-   <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 32-bit integer.  \\n  \\n-   <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 64-bit integer.  \\n  \\n The following example converts the value of <xref:System.Int16.MaxValue?displayProperty=fullName> to a string in all supported numeric formats. It then converts the string value back to a <xref:System.Int16> value.  \\n  \\n [!code-cpp[System.Convert#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/NonDecimal1.cpp#2)]\\n [!code-csharp[System.Convert#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/NonDecimal1.cs#2)]\\n [!code-vb[System.Convert#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/NonDecimal1.vb#2)]  \\n  \\n<a name=\\\"Custom\\\"></a>   \\n## Conversions from Custom Objects to Base Types  \\n In addition to supporting conversions between the base types, the <xref:System.Convert> method supports conversion of any custom type to any base type. To do this, the custom type must implement the <xref:System.IConvertible> interface, which defines methods for converting the implementing type to each of the base types. Conversions that are not supported by a particular type should throw an <xref:System.InvalidCastException>.  \\n  \\n When the <xref:System.Convert.ChangeType%2A> method is passed a custom type as its first parameter, or when the `Convert.To`*Type* method (such as <xref:System.Convert.ToInt32%28System.Object%29?displayProperty=fullName> or <xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName> is called and passed an instance of a custom type as its first parameter, the <xref:System.Convert> method, in turn, calls the custom type's <xref:System.IConvertible> implementation to perform the conversion. For more information, see [Type Conversion in the .NET Framework](~/docs/standard/base-types/type-conversion.md).  \\n  \\n<a name=\\\"Culture\\\"></a>   \\n## Culture-Specific Formatting Information  \\n All the base type conversion methods and the <xref:System.Convert.ChangeType%2A> method include overloads that have a parameter of type <xref:System.IFormatProvider>. For example, the <xref:System.Convert.ToBoolean%2A?displayProperty=fullName> method has the following two overloads:  \\n  \\n-   <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName>  \\n  \\n-   <xref:System.Convert.ToBoolean%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>  \\n  \\n The <xref:System.IFormatProvider> parameter can supply culture-specific formatting information to assist the conversion process. However, it is ignored by most of the base type conversion methods. It is used only by the following base type conversion methods.If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  \\n  \\n-   By methods that convert a value to a numeric type. The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>. It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.  \\n  \\n-   By methods that convert a value to a date and time. The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>. It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.  \\n  \\n-   By the <xref:System.Convert.ToString%2A?displayProperty=fullName> overloads that include an <xref:System.IFormatProvider> parameter and that convert either a numeric value to a string or a <xref:System.DateTime> value to a string.  \\n  \\n However, any user-defined type that implements <xref:System.IConvertible> can make use of the <xref:System.IFormatProvider> parameter.  \\n  \\n<a name=\\\"Base64\\\"></a>   \\n## Base64 Encoding  \\n Base64 encoding converts binary data to a string. Data expressed as base-64 digits can be easily conveyed over data channels that can only transmit 7-bit characters. The <xref:System.Convert> class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <xref:System.String> or to and from an array of Unicode characters consisting of base-64 digit characters.  \\n  \\n-   <xref:System.Convert.ToBase64String%2A>, which converts a byte array to a base64-encoded string.  \\n  \\n-   <xref:System.Convert.ToBase64CharArray%2A>, which converts a byte array to a base64-encoded character array.  \\n  \\n-   <xref:System.Convert.FromBase64String%2A>, which converts a base64-encoded string to a byte array.  \\n  \\n-   <xref:System.Convert.FromBase64CharArray%2A>, which converts a base64-encoded character array to a byte array.  \\n  \\n<a name=\\\"Other\\\"></a>   \\n## Other Common Conversions  \\n You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the <xref:System.Convert> class.  These include:  \\n  \\n Conversion to byte arrays  \\n The <xref:System.BitConverter> class  provides methods that convert the primitive numeric types (including <xref:System.Boolean>) to byte arrays and from byte arrays back to primitive data types.  \\n  \\n Character encoding and decoding  \\n The <xref:System.Text.Encoding> class and its derived classes (such as <xref:System.Text.UnicodeEncoding> and <xref:System.Text.UTF8Encoding>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters. For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)\"\n  example:\n  - \"The following example demonstrates some of the conversion methods in the <xref:System.Convert> class, including <xref:System.Convert.ToInt32%2A>, <xref:System.Convert.ToBoolean%2A>, and <xref:System.Convert.ToString%2A>.  \\n  \\n [!code-cpp[System.Convert#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/converter.cpp#1)]\\n [!code-csharp[System.Convert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/converter.cs#1)]\\n [!code-vb[System.Convert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/converter.vb#1)]\"\n  syntax:\n    content: public static class Convert\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ChangeType(System.Object,System.Type)\n  commentId: M:System.Convert.ChangeType(System.Object,System.Type)\n  id: ChangeType(System.Object,System.Type)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ChangeType(Object, Type)\n  nameWithType: Convert.ChangeType(Object, Type)\n  fullName: Convert.ChangeType(Object, Type)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns an object of the specified type and whose value is equivalent to the specified object.\n  remarks: \"<xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`. The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method requires that conversion of `value` to `conversionType` be supported.  \\n  \\n This method uses the current thread's culture for the conversion.\"\n  example:\n  - \"The following example illustrates the use of the <xref:System.Convert.ChangeType%2A> method.  \\n  \\n [!code-cpp[convertchangetype#1](~/samples/snippets/cpp/VS_Snippets_CLR/convertchangetype/CPP/convertchangetype.cpp#1)]\\n [!code-csharp[convertchangetype#1](~/samples/snippets/csharp/VS_Snippets_CLR/convertchangetype/CS/convertchangetype.cs#1)]\\n [!code-vb[convertchangetype#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convertchangetype/VB/convertchangetype.vb#1)]\"\n  syntax:\n    content: public static object ChangeType (object value, Type conversionType);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: conversionType\n      type: System.Type\n      description: The type of object to return.\n    return:\n      type: System.Object\n      description: \"An object whose type is <code>conversionType</code> and whose value is equivalent to <code>value</code>.  \\n  \\n -or-  \\n  \\n A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>conversionType</code> is not a value type.\"\n  overload: System.Convert.ChangeType*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"This conversion is not supported.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null` and <code>conversionType</code> is a value type.  \\n  \\n -or-  \\n  \\n <code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in a format recognized by <code>conversionType</code>.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is out of the range of <code>conversionType</code>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>conversionType</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ChangeType(System.Object,System.TypeCode)\n  commentId: M:System.Convert.ChangeType(System.Object,System.TypeCode)\n  id: ChangeType(System.Object,System.TypeCode)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ChangeType(Object, TypeCode)\n  nameWithType: Convert.ChangeType(Object, TypeCode)\n  fullName: Convert.ChangeType(Object, TypeCode)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Returns an object of the specified type whose value is equivalent to the specified object.\n  remarks: \"<xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`. The `value` parameter can be an object of any type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method also requires that conversion of `value` to `typeCode` be supported.  \\n  \\n The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> method does not support the conversion of `value` to a custom type. To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29> method.\"\n  example:\n  - \"The following example illustrates how to use the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> method to change an <xref:System.Object> to the type specified by the <xref:System.TypeCode> parameter, if possible.  \\n  \\n [!code-cpp[System.Convert.ChangeType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype_01.cpp#2)]\\n [!code-csharp[System.Convert.ChangeType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype01.cs#2)]\\n [!code-vb[System.Convert.ChangeType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype01.vb#2)]\"\n  syntax:\n    content: public static object ChangeType (object value, TypeCode typeCode);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: typeCode\n      type: System.TypeCode\n      description: The type of object to return.\n    return:\n      type: System.Object\n      description: \"An object whose underlying type is <code>typeCode</code> and whose value is equivalent to <code>value</code>.  \\n  \\n -or-  \\n  \\n A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>typeCode</code> is <xref href=\\\"System.TypeCode.Empty\\\"></xref>, <xref href=\\\"System.TypeCode.String\\\"></xref>, or <xref href=\\\"System.TypeCode.Object\\\"></xref>.\"\n  overload: System.Convert.ChangeType*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"This conversion is not supported.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null` and <code>typeCode</code> specifies a value type.  \\n  \\n -or-  \\n  \\n <code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in a format recognized by the <code>typeCode</code> type.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is out of the range of the <code>typeCode</code> type.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>typeCode</code> is invalid.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\n  commentId: M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\n  id: ChangeType(System.Object,System.Type,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ChangeType(Object, Type, IFormatProvider)\n  nameWithType: Convert.ChangeType(Object, Type, IFormatProvider)\n  fullName: Convert.ChangeType(Object, Type, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.\n  remarks: \"<xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`. The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method requires that conversion of `value` to `conversionType` be supported.  \\n  \\n The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation. If `value` is a base data type, `provider` is used only for the following conversions:  \\n  \\n-   Conversion from a number to a string, or from a string to a number. `provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object. However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default \\\"G\\\" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer. If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  \\n  \\n-   Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value. `provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object. If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  \\n  \\n If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter.\"\n  example:\n  - \"The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface.  \\n  \\n [!code-cpp[System.Convert.ChangeType#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype03.cpp#3)]\\n [!code-csharp[System.Convert.ChangeType#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype03.cs#3)]\\n [!code-vb[System.Convert.ChangeType#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype03.vb#3)]  \\n  \\n The following example creates an instance of the `Temperature` class and calls the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method to convert it to the basic numeric types supported by the .NET Framework and to a <xref:System.String>. It illustrates that the <xref:System.Convert.ChangeType%2A> method wraps a call to the source type's <xref:System.IConvertible> implementation.  \\n  \\n [!code-cpp[System.Convert.ChangeType#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype03.cpp#4)]\\n [!code-csharp[System.Convert.ChangeType#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype03.cs#4)]\\n [!code-vb[System.Convert.ChangeType#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype03.vb#4)]\"\n  syntax:\n    content: public static object ChangeType (object value, Type conversionType, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: conversionType\n      type: System.Type\n      description: The type of object to return.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Object\n      description: \"An object whose type is <code>conversionType</code> and whose value is equivalent to <code>value</code>.  \\n  \\n -or-  \\n  \\n <code>value</code>, if the <xref href=\\\"System.Type\\\"></xref> of <code>value</code> and <code>conversionType</code> are equal.  \\n  \\n -or-  \\n  \\n A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>conversionType</code> is not a value type.\"\n  overload: System.Convert.ChangeType*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"This conversion is not supported.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null` and <code>conversionType</code> is a value type.  \\n  \\n -or-  \\n  \\n <code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in a format for <code>conversionType</code> recognized by <code>provider</code>.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is out of the range of <code>conversionType</code>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>conversionType</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\n  commentId: M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\n  id: ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ChangeType(Object, TypeCode, IFormatProvider)\n  nameWithType: Convert.ChangeType(Object, TypeCode, IFormatProvider)\n  fullName: Convert.ChangeType(Object, TypeCode, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.\n  remarks: \"<xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`. The `value` parameter can be an object of any type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method also requires that conversion of `value` to `typeCode` be supported.  \\n  \\n The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method does not support the conversion of `value` to a custom type. To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method.  \\n  \\n The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation. If `value` is a base data type, `provider` is used only for the following conversions. If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  \\n  \\n-   Conversion from a number to a string, or from a string to a number. `provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object. However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default \\\"G\\\" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer.  \\n  \\n-   Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value. `provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object.  \\n  \\n If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter.\"\n  example:\n  - \"The following example defines a custom format provider named `InterceptProvider` that indicates when its <xref:System.IFormatProvider.GetFormat%2A> method is called and returns a <xref:System.Globalization.NumberFormatInfo> for the fr-FR culture and a <xref:System.Globalization.DateTimeFormatInfo> object for the en-US culture. This format provider is used in all calls to the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method. The example then creates an array with a <xref:System.Double> and a <xref:System.DateTime> value and makes repeated calls to <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> with each value and each member of the <xref:System.TypeCode> enumeration. The example illustrates when the method uses the <xref:System.IFormatProvider> parameter and also illustrates the use of the `provider` parameter to perform culture-sensitive formatting.  \\n  \\n [!code-cpp[System.Convert.ChangeType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype00.cpp#1)]\\n [!code-csharp[System.Convert.ChangeType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype00.cs#1)]\\n [!code-vb[System.Convert.ChangeType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype00.vb#1)]\"\n  syntax:\n    content: public static object ChangeType (object value, TypeCode typeCode, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: typeCode\n      type: System.TypeCode\n      description: The type of object to return.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Object\n      description: \"An object whose underlying type is <code>typeCode</code> and whose value is equivalent to <code>value</code>.  \\n  \\n -or-  \\n  \\n A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>typeCode</code> is <xref href=\\\"System.TypeCode.Empty\\\"></xref>, <xref href=\\\"System.TypeCode.String\\\"></xref>, or <xref href=\\\"System.TypeCode.Object\\\"></xref>.\"\n  overload: System.Convert.ChangeType*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"This conversion is not supported.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null` and <code>typeCode</code> specifies a value type.  \\n  \\n -or-  \\n  \\n <code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in a format for the <code>typeCode</code> type recognized by <code>provider</code>.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is out of the range of the <code>typeCode</code> type.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>typeCode</code> is invalid.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.DBNull\n  commentId: F:System.Convert.DBNull\n  id: DBNull\n  parent: System.Convert\n  langs:\n  - csharp\n  name: DBNull\n  nameWithType: Convert.DBNull\n  fullName: Convert.DBNull\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: A constant that represents a database column that is absent of data; that is, database null.\n  remarks: \"The <xref:System.Convert.DBNull> field is equivalent to <xref:System.DBNull.Value?displayProperty=fullName>, as the following example shows.  \\n  \\n [!code-csharp[System.Convert.DBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.dbnull/cs/dbnull1.cs#1)]\\n [!code-vb[System.Convert.DBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.dbnull/vb/dbnull1.vb#1)]\"\n  syntax:\n    content: public static readonly object DBNull;\n    return:\n      type: System.Object\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)\n  id: FromBase64CharArray(System.Char[],System.Int32,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: FromBase64CharArray(Char[], Int32, Int32)\n  nameWithType: Convert.FromBase64CharArray(Char[], Int32, Int32)\n  fullName: Convert.FromBase64CharArray(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.\n  remarks: \"`inArray` is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters \\\"A\\\" to \\\"Z\\\", lowercase characters \\\"a\\\" to \\\"z\\\", numerals \\\"0\\\" to \\\"9\\\", and the symbols \\\"+\\\" and \\\"/\\\".  \\n  \\n The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in `inArray` because all white-space characters are ignored.  \\n  \\n The valueless character, \\\"=\\\", is used for trailing padding. The end of `inArray` can consist of zero, one, or two padding characters.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Convert.FromBase64CharArray%2A> method is designed to process a single character array that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class.\"\n  example:\n  - \"The following example demonstrates the use of the <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to decode UUencoded (base-64) data and save it as binary output.  \\n  \\n [!code-cpp[System.Convert UUEncodeDecode functions#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CPP/class1.cpp#3)]\\n [!code-csharp[System.Convert UUEncodeDecode functions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CS/class1.cs#3)]\\n [!code-vb[System.Convert UUEncodeDecode functions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/VB/class1.vb#3)]  \\n  \\n The following example demonstrates the <xref:System.Convert.ToBase64CharArray%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%2CSystem.Base64FormattingOptions%29> and <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> methods. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits, \\\"A\\\", \\\"A\\\", \\\"E\\\", and \\\"C\\\", at the beginning of the output.  \\n  \\n If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit \\\"/\\\" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, \\\"w\\\". The last two 6-bit values are padding and correspond to the valueless padding character, \\\"=\\\".  \\n  \\n [!code-cpp[convert.tobase64chararray#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64chararray/CPP/tb64ca.cpp#1)]\\n [!code-csharp[convert.tobase64chararray#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64chararray/CS/tb64ca.cs#1)]\\n [!code-vb[convert.tobase64chararray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64chararray/VB/tb64ca.vb#1)]\"\n  syntax:\n    content: public static byte[] FromBase64CharArray (char[] inArray, int offset, int length);\n    parameters:\n    - id: inArray\n      type: System.Char[]\n      description: A Unicode character array.\n    - id: offset\n      type: System.Int32\n      description: A position within <code>inArray</code>.\n    - id: length\n      type: System.Int32\n      description: The number of elements in <code>inArray</code> to convert.\n    return:\n      type: System.Byte[]\n      description: An array of 8-bit unsigned integers equivalent to <code>length</code> elements at position <code>offset</code> in <code>inArray</code>.\n  overload: System.Convert.FromBase64CharArray*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inArray</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> or <code>length</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>offset</code> plus <code>length</code> indicates a position not within <code>inArray</code>.\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"The length of <code>inArray</code>, ignoring white-space characters, is not zero or a multiple of 4.  \\n  \\n -or-  \\n  \\n The format of <code>inArray</code> is invalid. <code>inArray</code> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.FromBase64String(System.String)\n  commentId: M:System.Convert.FromBase64String(System.String)\n  id: FromBase64String(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: FromBase64String(String)\n  nameWithType: Convert.FromBase64String(String)\n  fullName: Convert.FromBase64String(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.\n  remarks: \"`s` is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters \\\"A\\\" to \\\"Z\\\", lowercase characters \\\"a\\\" to \\\"z\\\", numerals \\\"0\\\" to \\\"9\\\", and the symbols \\\"+\\\" and \\\"/\\\".  \\n  \\n The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in `s` because all white-space characters are ignored.  \\n  \\n The valueless character, \\\"=\\\", is used for trailing padding. The end of `s` can consist of zero, one, or two padding characters.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Convert.FromBase64String%2A>method is designed to process a single string that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class.\"\n  example:\n  - \"The following example uses the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to convert a byte array to a UUencoded (base-64) string, and then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to restore the original byte array.  \\n  \\n [!code-csharp[System.Convert.ToBase64String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String2.cs#1)]\\n [!code-vb[System.Convert.ToBase64String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String2.vb#1)]  \\n  \\n The following is a more complex example that creates a 20-element array of 32-bit integers. It then uses the <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=fullName> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method. This buffer is then passed to the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to create a UUencoded (base-64) string.  It then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to decode the UUencoded string, and calls the <xref:System.BitConverter.ToInt32%2A?displayProperty=fullName> method to convert each set of four bytes (the size of a 32-bit integer) to an integer. The output from the example shows that the original array has been successfully restored.  \\n  \\n [!code-csharp[System.Convert.ToBase64String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String.cs#2)]\\n [!code-vb[System.Convert.ToBase64String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String.vb#2)]\"\n  syntax:\n    content: public static byte[] FromBase64String (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The string to convert.\n    return:\n      type: System.Byte[]\n      description: An array of 8-bit unsigned integers that is equivalent to <code>s</code>.\n  overload: System.Convert.FromBase64String*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>s</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"The length of <code>s</code>, ignoring white-space characters, is not zero or a multiple of 4.  \\n  \\n -or-  \\n  \\n The format of <code>s</code> is invalid. <code>s</code> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.GetTypeCode(System.Object)\n  commentId: M:System.Convert.GetTypeCode(System.Object)\n  id: GetTypeCode(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: GetTypeCode(Object)\n  nameWithType: Convert.GetTypeCode(Object)\n  fullName: Convert.GetTypeCode(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the <xref href=\"System.TypeCode\"></xref> for the specified object.\n  syntax:\n    content: public static TypeCode GetTypeCode (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    return:\n      type: System.TypeCode\n      description: The <xref href=\"System.TypeCode\"></xref> for <code>value</code>, or <xref href=\"System.TypeCode.Empty\"></xref> if <code>value</code> is `null`.\n  overload: System.Convert.GetTypeCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.IsDBNull(System.Object)\n  commentId: M:System.Convert.IsDBNull(System.Object)\n  id: IsDBNull(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: IsDBNull(Object)\n  nameWithType: Convert.IsDBNull(Object)\n  fullName: Convert.IsDBNull(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Returns an indication whether the specified object is of type <xref href=\"System.DBNull\"></xref>.\n  remarks: \"The <xref:System.Convert.IsDBNull%2A> method tests whether the `value` parameter is equal to <xref:System.DBNull?displayProperty=fullName>. It is equivalent to the following code:  \\n  \\n [!code-csharp[System.Convert.IsDBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#1)]\\n [!code-vb[System.Convert.IsDBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#1)]  \\n  \\n> [!NOTE]\\n>  <xref:System.DBNull?displayProperty=fullName> is used to indicate a value that is missing. It is not equivalent to `null` or to <xref:System.String.Empty?displayProperty=fullName>. Therefore, code such as `Convert.IsDBNull(null)` in C# or `Convert.IsDBNull(Nothing)` in Visual Basic returns`false`.\"\n  example:\n  - \"The following example uses a <xref:System.Data.SqlClient.SqlDataReader> object to retrieve survey data from a database. It assigns each row's field values to an array, and then passes each array element to the <xref:System.Convert.IsDBNull%2A> method. If the method returns `true`, the example assigns the string \\\"NA\\\" to the array element. The array is then added to the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection of a <xref:System.Windows.Forms.DataGridView?displayProperty=fullName> control.  \\n  \\n [!code-csharp[System.Convert.IsDBNull#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#2)]\\n [!code-vb[System.Convert.IsDBNull#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#2)]\"\n  syntax:\n    content: public static bool IsDBNull (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is of type <xref href=\"System.DBNull\"></xref>; otherwise, `false`.'\n  overload: System.Convert.IsDBNull*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)\n  fullName: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.\n  remarks: \"The subset of `length` elements of `inArray` starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in `outArray` starting at position `offsetOut`. The return value indicates the number of converted elements in `outArray`. The subset of `outArray` consists of base-64 digits.  \\n  \\n The base-64 digits in ascending order from zero are the uppercase characters \\\"A\\\" to \\\"Z\\\", the lowercase characters \\\"a\\\" to \\\"z\\\", the numerals \\\"0\\\" to \\\"9\\\", and the symbols \\\"+\\\" and \\\"/\\\". The valueless character, \\\"=\\\", is used for trailing padding.  \\n  \\n The `offset` and `length` parameters are 32-bit signed numbers. The `offsetIn` and `offsetOut` parameters are zero-based array positions.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Convert.ToBase64CharArray%2A>method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.\"\n  example:\n  - \"The following example demonstrates using the <xref:System.Convert.ToBase64CharArray%2A> method to UUencode (encode in base 64) a binary stream, then save the encoding to a file.  \\n  \\n [!code-cpp[System.Convert UUEncodeDecode functions#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CPP/class1.cpp#2)]\\n [!code-csharp[System.Convert UUEncodeDecode functions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CS/class1.cs#2)]\\n [!code-vb[System.Convert UUEncodeDecode functions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/VB/class1.vb#2)]\"\n  syntax:\n    content: public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut);\n    parameters:\n    - id: inArray\n      type: System.Byte[]\n      description: An input array of 8-bit unsigned integers.\n    - id: offsetIn\n      type: System.Int32\n      description: A position within <code>inArray</code>.\n    - id: length\n      type: System.Int32\n      description: The number of elements of <code>inArray</code> to convert.\n    - id: outArray\n      type: System.Char[]\n      description: An output array of Unicode characters.\n    - id: offsetOut\n      type: System.Int32\n      description: A position within <code>outArray</code>.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer containing the number of bytes in <code>outArray</code>.\n  overload: System.Convert.ToBase64CharArray*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inArray</code> or <code>outArray</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offsetIn</code>, <code>offsetOut</code>, or <code>length</code> is negative.  \\n  \\n -or-  \\n  \\n <code>offsetIn</code> plus <code>length</code> is greater than the length of <code>inArray</code>.  \\n  \\n -or-  \\n  \\n <code>offsetOut</code> plus the number of elements to return is greater than the length of <code>outArray</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)\n  commentId: M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)\n  id: ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32, Base64FormattingOptions)\n  nameWithType: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32, Base64FormattingOptions)\n  fullName: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32, Base64FormattingOptions)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.\n  remarks: \"The subset of `length` elements of the `inArray` parameter starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in the `outArray` parameter starting at position `offsetOut`. The return value indicates the number of converted elements in `outArray`. The subset of `outArray` consists of base-64 digits.  \\n  \\n The base-64 digits in ascending order from zero are the uppercase characters \\\"A\\\" to \\\"Z\\\", the lowercase characters \\\"a\\\" to \\\"z\\\", the numerals \\\"0\\\" to \\\"9\\\", and the symbols \\\"+\\\" and \\\"/\\\". The valueless character \\\"=\\\" is used for trailing padding.  \\n  \\n The `offset` and `length` parameters are 32-bit signed numbers. The `offsetIn` and `offsetOut` parameters are zero-based array positions.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Convert.ToBase64CharArray%2A> method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  \\n  \\n If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, \\\"Multipurpose Internet Mail Extensions\\\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/).\"\n  example:\n  - \"The following example demonstrates the <xref:System.Convert.ToBase64CharArray%2A> method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits \\\"A\\\", \\\"A\\\", \\\"E\\\", and \\\"C\\\" at the beginning of the output.  \\n  \\n If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit \\\"/\\\" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, \\\"w\\\". The last two 6-bit values are padding and correspond to the valueless padding character, \\\"=\\\".  \\n  \\n [!code-cpp[convert.tobase64chararray#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64chararray/CPP/tb64ca.cpp#1)]\\n [!code-csharp[convert.tobase64chararray#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64chararray/CS/tb64ca.cs#1)]\\n [!code-vb[convert.tobase64chararray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64chararray/VB/tb64ca.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, Base64FormattingOptions options);\n    parameters:\n    - id: inArray\n      type: System.Byte[]\n      description: An input array of 8-bit unsigned integers.\n    - id: offsetIn\n      type: System.Int32\n      description: A position within <code>inArray</code>.\n    - id: length\n      type: System.Int32\n      description: The number of elements of <code>inArray</code> to convert.\n    - id: outArray\n      type: System.Char[]\n      description: An output array of Unicode characters.\n    - id: offsetOut\n      type: System.Int32\n      description: A position within <code>outArray</code>.\n    - id: options\n      type: System.Base64FormattingOptions\n      description: <xref href=\"System.Base64FormattingOptions.InsertLineBreaks\"></xref> to insert a line break every 76 characters, or <xref href=\"System.Base64FormattingOptions.None\"></xref> to not insert line breaks.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer containing the number of bytes in <code>outArray</code>.\n  overload: System.Convert.ToBase64CharArray*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inArray</code> or <code>outArray</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offsetIn</code>, <code>offsetOut</code>, or <code>length</code> is negative.  \\n  \\n -or-  \\n  \\n <code>offsetIn</code> plus <code>length</code> is greater than the length of <code>inArray</code>.  \\n  \\n -or-  \\n  \\n <code>offsetOut</code> plus the number of elements to return is greater than the length of <code>outArray</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> is not a valid <xref href=\"System.Base64FormattingOptions\"></xref> value.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)\n  commentId: M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)\n  id: ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions)\n  nameWithType: Convert.ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions)\n  fullName: Convert.ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.\n  remarks: \"The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64.  \\n  \\n The base-64 digits in ascending order from zero are the uppercase characters \\\"A\\\" to \\\"Z\\\", the lowercase characters \\\"a\\\" to \\\"z\\\", the numerals \\\"0\\\" to \\\"9\\\", and the symbols \\\"+\\\" and \\\"/\\\". The valueless character \\\"=\\\" is used for trailing padding.  \\n  \\n The `offset` and `length` parameters are 32-bit signed numbers. The `offset` parameter is zero-based.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  \\n  \\n If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, \\\"Multipurpose Internet Mail Extensions\\\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/).\"\n  example:\n  - \"The following example demonstrates the <xref:System.Convert.ToBase64String%2A> method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits \\\"A\\\", \\\"A\\\", \\\"E\\\", and \\\"C\\\" at the beginning of the output.  \\n  \\n If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit \\\"/\\\" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, \\\"w\\\". The last two 6-bit values are padding and correspond to the valueless padding character, \\\"=\\\".  \\n  \\n [!code-cpp[convert.tobase64string#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64string/CPP/tb64s.cpp#1)]\\n [!code-csharp[convert.tobase64string#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64string/CS/tb64s.cs#1)]\\n [!code-vb[convert.tobase64string#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64string/VB/tb64s.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static string ToBase64String (byte[] inArray, int offset, int length, Base64FormattingOptions options);\n    parameters:\n    - id: inArray\n      type: System.Byte[]\n      description: An array of 8-bit unsigned integers.\n    - id: offset\n      type: System.Int32\n      description: An offset in <code>inArray</code>.\n    - id: length\n      type: System.Int32\n      description: The number of elements of <code>inArray</code> to convert.\n    - id: options\n      type: System.Base64FormattingOptions\n      description: <xref href=\"System.Base64FormattingOptions.InsertLineBreaks\"></xref> to insert a line break every 76 characters, or <xref href=\"System.Base64FormattingOptions.None\"></xref> to not insert line breaks.\n    return:\n      type: System.String\n      description: The string representation in base 64 of <code>length</code> elements of <code>inArray</code>, starting at position <code>offset</code>.\n  overload: System.Convert.ToBase64String*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inArray</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> or <code>length</code> is negative.  \\n  \\n -or-  \\n  \\n <code>offset</code> plus <code>length</code> is greater than the length of <code>inArray</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> is not a valid <xref href=\"System.Base64FormattingOptions\"></xref> value.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)\n  id: ToBase64String(System.Byte[],System.Int32,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBase64String(Byte[], Int32, Int32)\n  nameWithType: Convert.ToBase64String(Byte[], Int32, Int32)\n  fullName: Convert.ToBase64String(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.\n  remarks: \"The elements of `inArray` are taken as a numeric value and converted to a string representation in base 64.  \\n  \\n The base-64 digits in ascending order from zero are the uppercase characters \\\"A\\\" to \\\"Z\\\", the lowercase characters \\\"a\\\" to \\\"z\\\", the numerals \\\"0\\\" to \\\"9\\\", and the symbols \\\"+\\\" and \\\"/\\\". The valueless character, \\\"=\\\", is used for trailing padding.  \\n  \\n The `offset` and `length` parameters are 32-bit signed numbers. The `offset` parameter is zero-based.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.\"\n  syntax:\n    content: public static string ToBase64String (byte[] inArray, int offset, int length);\n    parameters:\n    - id: inArray\n      type: System.Byte[]\n      description: An array of 8-bit unsigned integers.\n    - id: offset\n      type: System.Int32\n      description: An offset in <code>inArray</code>.\n    - id: length\n      type: System.Int32\n      description: The number of elements of <code>inArray</code> to convert.\n    return:\n      type: System.String\n      description: The string representation in base 64 of <code>length</code> elements of <code>inArray</code>, starting at position <code>offset</code>.\n  overload: System.Convert.ToBase64String*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inArray</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> or <code>length</code> is negative.  \\n  \\n -or-  \\n  \\n <code>offset</code> plus <code>length</code> is greater than the length of <code>inArray</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBase64String(System.Byte[])\n  commentId: M:System.Convert.ToBase64String(System.Byte[])\n  id: ToBase64String(System.Byte[])\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBase64String(Byte[])\n  nameWithType: Convert.ToBase64String(Byte[])\n  fullName: Convert.ToBase64String(Byte[])\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.\n  remarks: \"The elements of `inArray` are taken as a numeric value and converted to a string representation that is encoded with base-64 digits.  \\n  \\n The base-64 digits in ascending order from zero are the uppercase characters \\\"A\\\" to \\\"Z\\\", the lowercase characters \\\"a\\\" to \\\"z\\\", the numerals \\\"0\\\" to \\\"9\\\", and the symbols \\\"+\\\" and \\\"/\\\". The valueless character, \\\"=\\\", is used for trailing padding.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  \\n  \\n Ordinarily, the <xref:System.Convert.ToBase64String%2A> method is not used to round-trip a  UUEncoded (base-64 encoded) string.  That is, if you decode a string by calling the <xref:System.Convert.FromBase64String%2A> method, then encode the returned byte array by calling the <xref:System.Convert.ToBase64String%2A> method, the resulting string will not necessarily be identical to the original string. The string will round-trip only if the original string is a valid base-64 encoded string.\"\n  example:\n  - \"The following example uses the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to convert a byte array to a UUencoded (base-64) string, and then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to restore the original byte array.  \\n  \\n [!code-csharp[System.Convert.ToBase64String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String2.cs#1)]\\n [!code-vb[System.Convert.ToBase64String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String2.vb#1)]  \\n  \\n The following is a more complex example that creates a 20-element array of 32-bit integers. It then uses the <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=fullName> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method. This buffer is then passed to the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to create a UUencoded (base-64) string.  It then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to decode the UUencoded string, and calls the <xref:System.BitConverter.ToInt32%2A?displayProperty=fullName> method to convert each set of four bytes (the size of a 32-bit integer) to an integer. The output from the example shows that the original array has been successfully restored.  \\n  \\n [!code-csharp[System.Convert.ToBase64String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String.cs#2)]\\n [!code-vb[System.Convert.ToBase64String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String.vb#2)]\"\n  syntax:\n    content: public static string ToBase64String (byte[] inArray);\n    parameters:\n    - id: inArray\n      type: System.Byte[]\n      description: An array of 8-bit unsigned integers.\n    return:\n      type: System.String\n      description: The string representation, in base 64, of the contents of <code>inArray</code>.\n  overload: System.Convert.ToBase64String*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inArray</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)\n  commentId: M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)\n  id: ToBase64String(System.Byte[],System.Base64FormattingOptions)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBase64String(Byte[], Base64FormattingOptions)\n  nameWithType: Convert.ToBase64String(Byte[], Base64FormattingOptions)\n  fullName: Convert.ToBase64String(Byte[], Base64FormattingOptions)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value.\n  remarks: \"The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64.  \\n  \\n The base-64 digits in ascending order from zero are the uppercase characters \\\"A\\\" to \\\"Z\\\", the lowercase characters \\\"a\\\" to \\\"z\\\", the numerals \\\"0\\\" to \\\"9\\\", and the symbols \\\"+\\\" and \\\"/\\\". The valueless character \\\"=\\\" is used for trailing padding.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  \\n  \\n If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). Because line breaks are considered whitespace characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array. The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window. For more information, see RFC 2045, \\\"Multipurpose Internet Mail Extensions\\\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/).\"\n  example:\n  - \"The following example calls the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%2CSystem.Base64FormattingOptions%29?displayProperty=fullName> with a <xref:System.Base64FormattingOptions?displayProperty=fullName> argument to insert line breaks in the string that is produced by encoding a 100-element byte array.  \\n  \\n [!code-csharp[System.Convert.ToBase64String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String3.cs#3)]\\n [!code-vb[System.Convert.ToBase64String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String3.vb#3)]  \\n  \\n As the output from the example shows, the <xref:System.Convert.FromBase64String%2A?displayProperty=fullName> succeeds in restoring the original byte array; the line break characters are ignored during the conversion.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static string ToBase64String (byte[] inArray, Base64FormattingOptions options);\n    parameters:\n    - id: inArray\n      type: System.Byte[]\n      description: An array of 8-bit unsigned integers.\n    - id: options\n      type: System.Base64FormattingOptions\n      description: <xref href=\"System.Base64FormattingOptions.InsertLineBreaks\"></xref> to insert a line break every 76 characters, or <xref href=\"System.Base64FormattingOptions.None\"></xref> to not insert line breaks.\n    return:\n      type: System.String\n      description: The string representation in base 64 of the elements in <code>inArray</code>.\n  overload: System.Convert.ToBase64String*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inArray</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> is not a valid <xref href=\"System.Base64FormattingOptions\"></xref> value.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.SByte)\n  commentId: M:System.Convert.ToBoolean(System.SByte)\n  id: ToBoolean(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(SByte)\n  nameWithType: Convert.ToBoolean(SByte)\n  fullName: Convert.ToBoolean(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.SByte> values to <xref:System.Boolean> values.  \\n  \\n [!code-cpp[System.Convert.ToBoolean#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#6)]\\n [!code-csharp[System.Convert.ToBoolean#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#6)]\\n [!code-vb[System.Convert.ToBoolean#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#6)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool ToBoolean (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToBoolean(System.String,System.IFormatProvider)\n  id: ToBoolean(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(String, IFormatProvider)\n  nameWithType: Convert.ToBoolean(String, IFormatProvider)\n  fullName: Convert.ToBoolean(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.\n  remarks: If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\n  syntax:\n    content: public static bool ToBoolean (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the value of either <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information. This parameter is ignored.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> equals <xref href=\"System.Boolean.TrueString\"></xref>, or `false` if <code>value</code> equals <xref href=\"System.Boolean.FalseString\"></xref> or `null`.'\n  overload: System.Convert.ToBoolean*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not equal to <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)\n  id: ToBoolean(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(Object, IFormatProvider)\n  nameWithType: Convert.ToBoolean(Object, IFormatProvider)\n  fullName: Convert.ToBoolean(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.\n  remarks: '`provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore the `provider` parameter; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.'\n  example:\n  - \"The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29> method. This method returns `true` if any of the non-discarded array values are non-zero. The <xref:System.IFormatProvider> object determines how elements are discarded for this calculation.  \\n  \\n [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]\\n [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]\\n [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]\"\n  syntax:\n    content: public static bool ToBoolean (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Boolean\n      description: '`true` or `false`, which reflects the value returned by invoking the <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"></xref> method for the underlying type of <code>value</code>. If <code>value</code> is `null`, the method returns `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is a string that does not equal <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion of <code>value</code> to a <xref href=\\\"System.Boolean\\\"></xref> is not supported.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.UInt64)\n  commentId: M:System.Convert.ToBoolean(System.UInt64)\n  id: ToBoolean(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(UInt64)\n  nameWithType: Convert.ToBoolean(UInt64)\n  fullName: Convert.ToBoolean(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.UInt64> values to <xref:System.Boolean> values.  \\n  \\n [!code-cpp[System.Convert.ToBoolean#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#10)]\\n [!code-csharp[System.Convert.ToBoolean#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#10)]\\n [!code-vb[System.Convert.ToBoolean#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#10)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool ToBoolean (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.UInt32)\n  commentId: M:System.Convert.ToBoolean(System.UInt32)\n  id: ToBoolean(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(UInt32)\n  nameWithType: Convert.ToBoolean(UInt32)\n  fullName: Convert.ToBoolean(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.Int32> values to <xref:System.Boolean> values.  \\n  \\n [!code-cpp[System.Convert.ToBoolean#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#9)]\\n [!code-csharp[System.Convert.ToBoolean#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#9)]\\n [!code-vb[System.Convert.ToBoolean#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool ToBoolean (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.UInt16)\n  commentId: M:System.Convert.ToBoolean(System.UInt16)\n  id: ToBoolean(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(UInt16)\n  nameWithType: Convert.ToBoolean(UInt16)\n  fullName: Convert.ToBoolean(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.UInt16> values to <xref:System.Boolean> values.  \\n  \\n [!code-cpp[System.Convert.ToBoolean#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#8)]\\n [!code-csharp[System.Convert.ToBoolean#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#8)]\\n [!code-vb[System.Convert.ToBoolean#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#8)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool ToBoolean (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.String)\n  commentId: M:System.Convert.ToBoolean(System.String)\n  id: ToBoolean(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(String)\n  nameWithType: Convert.ToBoolean(String)\n  fullName: Convert.ToBoolean(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a logical value to its Boolean equivalent.\n  remarks: \"For a successful conversion to occur, the `value` parameter must equal either <xref:System.Boolean.TrueString?displayProperty=fullName>, a constant whose value is `True`, <xref:System.Boolean.FalseString?displayProperty=fullName>, a constant whose value is `False`, or it must be `null`. In comparing `value` with <xref:System.Boolean?displayProperty=fullName> and <xref:System.Boolean?displayProperty=fullName>, the method ignores case as well as leading and trailing white space.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example uses the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=fullName> method to convert various strings to Boolean values.  \\n  \\n [!code-cpp[System.Convert.ToBoolean#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean1.cpp#1)]\\n [!code-csharp[System.Convert.ToBoolean#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/ToBoolean1.cs#1)]\\n [!code-vb[System.Convert.ToBoolean#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/ToBoolean1.vb#1)]\"\n  syntax:\n    content: public static bool ToBoolean (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the value of either <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> equals <xref href=\"System.Boolean.TrueString\"></xref>, or `false` if <code>value</code> equals <xref href=\"System.Boolean.FalseString\"></xref> or `null`.'\n  overload: System.Convert.ToBoolean*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not equal to <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.Single)\n  commentId: M:System.Convert.ToBoolean(System.Single)\n  id: ToBoolean(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(Single)\n  nameWithType: Convert.ToBoolean(Single)\n  fullName: Convert.ToBoolean(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.Single> values to <xref:System.Boolean> values.  \\n  \\n [!code-cpp[System.Convert.ToBoolean#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#7)]\\n [!code-csharp[System.Convert.ToBoolean#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#7)]\\n [!code-vb[System.Convert.ToBoolean#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#7)]\"\n  syntax:\n    content: public static bool ToBoolean (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to convert.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.Object)\n  commentId: M:System.Convert.ToBoolean(System.Object)\n  id: ToBoolean(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(Object)\n  nameWithType: Convert.ToBoolean(Object)\n  fullName: Convert.ToBoolean(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of a specified object to an equivalent Boolean value.\n  remarks: ''\n  example:\n  - \"The following example converts an array of object values to <xref:System.Boolean> values.  \\n  \\n [!code-cpp[System.Convert.ToBoolean#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#11)]\\n [!code-csharp[System.Convert.ToBoolean#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#11)]\\n [!code-vb[System.Convert.ToBoolean#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#11)]\"\n  syntax:\n    content: public static bool ToBoolean (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.Boolean\n      description: '`true` or `false`, which reflects the value returned by invoking the <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\"></xref> method for the underlying type of <code>value</code>. If <code>value</code> is `null`, the method returns `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is a string that does not equal <xref href=\"System.Boolean.TrueString\"></xref> or <xref href=\"System.Boolean.FalseString\"></xref>.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion of <code>value</code> to a <xref href=\\\"System.Boolean\\\"></xref> is not supported.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.Double)\n  commentId: M:System.Convert.ToBoolean(System.Double)\n  id: ToBoolean(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(Double)\n  nameWithType: Convert.ToBoolean(Double)\n  fullName: Convert.ToBoolean(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.\n  remarks: ''\n  example:\n  - \"The following example converts a Boolean to a <xref:System.Double> and a <xref:System.Double> to a Boolean value.  \\n  \\n [!code-cpp[System.Convert Snippets#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#1)]\\n [!code-csharp[System.Convert Snippets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#1)]\\n [!code-vb[System.Convert Snippets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#1)]\"\n  syntax:\n    content: public static bool ToBoolean (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.Int32)\n  commentId: M:System.Convert.ToBoolean(System.Int32)\n  id: ToBoolean(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(Int32)\n  nameWithType: Convert.ToBoolean(Int32)\n  fullName: Convert.ToBoolean(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.Int32> values to <xref:System.Boolean> values.  \\n  \\n [!code-cpp[System.Convert.ToBoolean#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#4)]\\n [!code-csharp[System.Convert.ToBoolean#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#4)]\\n [!code-vb[System.Convert.ToBoolean#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#4)]\"\n  syntax:\n    content: public static bool ToBoolean (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.Int16)\n  commentId: M:System.Convert.ToBoolean(System.Int16)\n  id: ToBoolean(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(Int16)\n  nameWithType: Convert.ToBoolean(Int16)\n  fullName: Convert.ToBoolean(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.Int16> values to <xref:System.Boolean> values.  \\n  \\n [!code-cpp[System.Convert.ToBoolean#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#3)]\\n [!code-csharp[System.Convert.ToBoolean#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#3)]\\n [!code-vb[System.Convert.ToBoolean#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#3)]\"\n  syntax:\n    content: public static bool ToBoolean (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.Decimal)\n  commentId: M:System.Convert.ToBoolean(System.Decimal)\n  id: ToBoolean(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(Decimal)\n  nameWithType: Convert.ToBoolean(Decimal)\n  fullName: Convert.ToBoolean(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to an equivalent Boolean value.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.Decimal> values to <xref:System.Boolean> values.  \\n  \\n [!code-cpp[System.Convert.ToBoolean#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#2)]\\n [!code-csharp[System.Convert.ToBoolean#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#2)]\\n [!code-vb[System.Convert.ToBoolean#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#2)]\"\n  syntax:\n    content: public static bool ToBoolean (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The number to convert.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.DateTime)\n  commentId: M:System.Convert.ToBoolean(System.DateTime)\n  id: ToBoolean(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(DateTime)\n  nameWithType: Convert.ToBoolean(DateTime)\n  fullName: Convert.ToBoolean(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example demonstrates that an attempt to convert a <xref:System.DateTime> value to a Boolean type throws <xref:System.InvalidCastException>.  \\n  \\n [!code-cpp[System.Convert Snippets#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#20)]\\n [!code-csharp[System.Convert Snippets#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#20)]\\n [!code-vb[System.Convert Snippets#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#20)]\"\n  syntax:\n    content: public static bool ToBoolean (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.Boolean\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToBoolean*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.Char)\n  commentId: M:System.Convert.ToBoolean(System.Char)\n  id: ToBoolean(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(Char)\n  nameWithType: Convert.ToBoolean(Char)\n  fullName: Convert.ToBoolean(Char)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static bool ToBoolean (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.Boolean\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToBoolean*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.Byte)\n  commentId: M:System.Convert.ToBoolean(System.Byte)\n  id: ToBoolean(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(Byte)\n  nameWithType: Convert.ToBoolean(Byte)\n  fullName: Convert.ToBoolean(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.Byte> values to <xref:System.Boolean> values.  \\n  \\n [!code-cpp[System.Convert.ToBoolean#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#12)]\\n [!code-csharp[System.Convert.ToBoolean#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#12)]\\n [!code-vb[System.Convert.ToBoolean#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#12)]\"\n  syntax:\n    content: public static bool ToBoolean (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.Boolean)\n  commentId: M:System.Convert.ToBoolean(System.Boolean)\n  id: ToBoolean(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(Boolean)\n  nameWithType: Convert.ToBoolean(Boolean)\n  fullName: Convert.ToBoolean(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified Boolean value; no actual conversion is performed.\n  syntax:\n    content: public static bool ToBoolean (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to return.\n    return:\n      type: System.Boolean\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToBoolean*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToBoolean(System.Int64)\n  commentId: M:System.Convert.ToBoolean(System.Int64)\n  id: ToBoolean(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToBoolean(Int64)\n  nameWithType: Convert.ToBoolean(Int64)\n  fullName: Convert.ToBoolean(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.Int64> values to <xref:System.Boolean> values.  \\n  \\n [!code-cpp[System.Convert.ToBoolean#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#5)]\\n [!code-csharp[System.Convert.ToBoolean#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#5)]\\n [!code-vb[System.Convert.ToBoolean#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#5)]\"\n  syntax:\n    content: public static bool ToBoolean (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'\n  overload: System.Convert.ToBoolean*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.String)\n  commentId: M:System.Convert.ToByte(System.String)\n  id: ToByte(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(String)\n  nameWithType: Convert.ToByte(String)\n  fullName: Convert.ToByte(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.\n  remarks: \"Using the <xref:System.Convert.ToByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.Byte.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example defines a string array and attempts to convert each string to a <xref:System.Byte>.  Note that while a `null` string parses to zero, <xref:System.String.Empty?displayProperty=fullName> throws a <xref:System.FormatException>. Also note that while leading and trailing spaces parse successfully, formatting symbols, such as currency symbols, group separators, or decimal separators, do not.  \\n  \\n [!code-csharp[System.Convert.ToByte#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/ToByte5.cs#15)]\\n [!code-vb[System.Convert.ToByte#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte5.vb#15)]\"\n  syntax:\n    content: public static byte ToByte (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.UInt16)\n  commentId: M:System.Convert.ToByte(System.UInt16)\n  id: ToByte(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(UInt16)\n  nameWithType: Convert.ToByte(UInt16)\n  fullName: Convert.ToByte(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts an array of unsigned 16-bit integers to <xref:System.Byte> values.  \\n  \\n [!code-csharp[System.Convert.ToByte#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#8)]\\n [!code-vb[System.Convert.ToByte#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#8)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static byte ToByte (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.UInt32)\n  commentId: M:System.Convert.ToByte(System.UInt32)\n  id: ToByte(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(UInt32)\n  nameWithType: Convert.ToByte(UInt32)\n  fullName: Convert.ToByte(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts an array of unsigned integers to <xref:System.Byte> values.  \\n  \\n [!code-csharp[System.Convert.ToByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#9)]\\n [!code-vb[System.Convert.ToByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static byte ToByte (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.String,System.Int32)\n  commentId: M:System.Convert.ToByte(System.String,System.Int32)\n  id: ToByte(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(String, Int32)\n  nameWithType: Convert.ToByte(String, Int32)\n  fullName: Convert.ToByte(String, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.\n  remarks: \"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \\\"0x\\\" or \\\"0X\\\".  \\n  \\n Because the <xref:System.Byte> data type supports unsigned values only, the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all eight bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed byte value that is out of the range of the <xref:System.Byte> data type is converted to a <xref:System.Byte> value without the method throwing an exception. The following example converts <xref:System.SByte.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \\\"0x80 converts to 128.\\\"  \\n  \\n [!code-csharp[System.Convert.BaseConversion#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#3)]\\n [!code-vb[System.Convert.BaseConversion#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#3)]  \\n  \\n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <xref:System.Byte> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value back to a <xref:System.Byte> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two's complement instead of unsigned binary representation), the method throws an exception.  \\n  \\n [!code-csharp[System.Convert.BaseConversion#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#4)]\\n [!code-vb[System.Convert.BaseConversion#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#4)]\"\n  example:\n  - \"The following example alternately attempts to interpret an array of strings as the representation of binary, octal, decimal, and hexadecimal values.  \\n  \\n [!code-csharp[System.Convert.ToByte#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte2.cs#11)]\\n [!code-vb[System.Convert.ToByte#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte2.vb#11)]\"\n  syntax:\n    content: public static byte ToByte (string value, int fromBase);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: fromBase\n      type: System.Int32\n      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>fromBase</code> is not 2, 8, 10, or 16.  \\n  \\n -or-  \\n  \\n <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>value</code> is <xref href=\"System.String.Empty\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"<code>value</code>, which represents a base 10 unsigned number, is prefixed with a negative sign.  \\n  \\n -or-  \\n  \\n <code>value</code> represents a number that is less than <xref href=\\\"System.Byte.MinValue\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToByte(System.Object,System.IFormatProvider)\n  id: ToByte(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(Object, IFormatProvider)\n  nameWithType: Convert.ToByte(Object, IFormatProvider)\n  fullName: Convert.ToByte(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.\n  remarks: '`provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.'\n  example:\n  - \"The following example defines a `ByteString` class that implements the <xref:System.IConvertible> interface. The class stores the string representation of a byte value along with a sign field, so that it is able to represent both signed and unsigned byte values.  \\n  \\n [!code-csharp[System.Convert.ToByte#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte3.cs#12)]\\n [!code-vb[System.Convert.ToByte#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte3.vb#12)]  \\n  \\n The following example instantiates several `ByteString` objects and calls the <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> method to convert them to byte values. It illustrates that the <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> method wraps a call to the <xref:System.IConvertible.ToByte%2A?displayProperty=fullName> method of the object to be converted.  \\n  \\n [!code-csharp[System.Convert.ToByte#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte3.cs#13)]\\n [!code-vb[System.Convert.ToByte#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte3.vb#13)]\"\n  syntax:\n    content: public static byte ToByte (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in the property format for a <xref href=\"System.Byte\"></xref> value.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement <xref href=\\\"System.IConvertible\\\"></xref>.  \\n  \\n -or-  \\n  \\n Conversion from <code>value</code> to the <xref href=\\\"System.Byte\\\"></xref> type is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToByte(System.String,System.IFormatProvider)\n  id: ToByte(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(String, IFormatProvider)\n  nameWithType: Convert.ToByte(String, IFormatProvider)\n  fullName: Convert.ToByte(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.\n  remarks: \"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example creates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the positive sign as \\\"pos\\\" and the negative sign as \\\"neg\\\", which it uses in calls to the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> method. It then calls the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> method repeatedly to convert each element in a string array to a <xref:System.Byte> value.  \\n  \\n [!code-csharp[System.Convert.ToByte#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte4.cs#14)]\\n [!code-vb[System.Convert.ToByte#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte4.vb#14)]\"\n  syntax:\n    content: public static byte ToByte (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.Single)\n  commentId: M:System.Convert.ToByte(System.Single)\n  id: ToByte(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(Single)\n  nameWithType: Convert.ToByte(Single)\n  fullName: Convert.ToByte(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts a <xref:System.Single> value to a <xref:System.Byte>.  \\n  \\n [!code-cpp[System.Convert Snippets#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#19)]\\n [!code-csharp[System.Convert Snippets#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#19)]\\n [!code-vb[System.Convert Snippets#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#19)]\"\n  syntax:\n    content: public static byte ToByte (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: A single-precision floating-point number.\n    return:\n      type: System.Byte\n      description: <code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref> or less than <xref href=\"System.Byte.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.UInt64)\n  commentId: M:System.Convert.ToByte(System.UInt64)\n  id: ToByte(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(UInt64)\n  nameWithType: Convert.ToByte(UInt64)\n  fullName: Convert.ToByte(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts an array of unsigned long integers to <xref:System.Byte> values.  \\n  \\n [!code-csharp[System.Convert.ToByte#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#10)]\\n [!code-vb[System.Convert.ToByte#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#10)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static byte ToByte (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.SByte)\n  commentId: M:System.Convert.ToByte(System.SByte)\n  id: ToByte(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(SByte)\n  nameWithType: Convert.ToByte(SByte)\n  fullName: Convert.ToByte(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.SByte> values to <xref:System.Byte> values.  \\n  \\n [!code-csharp[System.Convert.ToByte#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#7)]\\n [!code-vb[System.Convert.ToByte#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#7)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static byte ToByte (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to be converted.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than <xref href=\"System.Byte.MinValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.Int16)\n  commentId: M:System.Convert.ToByte(System.Int16)\n  id: ToByte(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(Int16)\n  nameWithType: Convert.ToByte(Int16)\n  fullName: Convert.ToByte(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.Int16> values to <xref:System.Byte> values.  \\n  \\n [!code-csharp[System.Convert.ToByte#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#3)]\\n [!code-vb[System.Convert.ToByte#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#3)]\"\n  syntax:\n    content: public static byte ToByte (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.Int64)\n  commentId: M:System.Convert.ToByte(System.Int64)\n  id: ToByte(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(Int64)\n  nameWithType: Convert.ToByte(Int64)\n  fullName: Convert.ToByte(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.Int64> values to <xref:System.Byte> values.  \\n  \\n [!code-csharp[System.Convert.ToByte#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#5)]\\n [!code-vb[System.Convert.ToByte#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#5)]\"\n  syntax:\n    content: public static byte ToByte (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.Byte)\n  commentId: M:System.Convert.ToByte(System.Byte)\n  id: ToByte(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(Byte)\n  nameWithType: Convert.ToByte(Byte)\n  fullName: Convert.ToByte(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 8-bit unsigned integer; no actual conversion is performed.\n  syntax:\n    content: public static byte ToByte (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to return.\n    return:\n      type: System.Byte\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToByte*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.Char)\n  commentId: M:System.Convert.ToByte(System.Char)\n  id: ToByte(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(Char)\n  nameWithType: Convert.ToByte(Char)\n  fullName: Convert.ToByte(Char)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.\n  remarks: This method returns an unsigned byte value that represents the numeric code of the <xref:System.Char> object passed to it. In the .NET Framework, a <xref:System.Char> object is a 16-bit value. This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.\n  example:\n  - \"The following example converts an array of <xref:System.Char> values to <xref:System.Byte> values.  \\n  \\n [!code-csharp[System.Convert.ToByte#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#2)]\\n [!code-vb[System.Convert.ToByte#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#2)]\"\n  syntax:\n    content: public static byte ToByte (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is greater than <xref href=\"System.Byte.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.DateTime)\n  commentId: M:System.Convert.ToByte(System.DateTime)\n  id: ToByte(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(DateTime)\n  nameWithType: Convert.ToByte(DateTime)\n  fullName: Convert.ToByte(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static byte ToByte (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.Byte\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.Boolean)\n  commentId: M:System.Convert.ToByte(System.Boolean)\n  id: ToByte(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(Boolean)\n  nameWithType: Convert.ToByte(Boolean)\n  fullName: Convert.ToByte(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to the equivalent 8-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example illustrates the conversion of <xref:System.Boolean> to <xref:System.Byte> values.  \\n  \\n [!code-cpp[System.Convert.ToByte#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.tobyte/cpp/tobyte1.cpp#1)]\\n [!code-csharp[System.Convert.ToByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#1)]\\n [!code-vb[System.Convert.ToByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#1)]\"\n  syntax:\n    content: public static byte ToByte (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.Byte\n      description: The number 1 if <code>value</code> is `true`; otherwise, 0.\n  overload: System.Convert.ToByte*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.Double)\n  commentId: M:System.Convert.ToByte(System.Double)\n  id: ToByte(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(Double)\n  nameWithType: Convert.ToByte(Double)\n  fullName: Convert.ToByte(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts a <xref:System.Byte> value to a <xref:System.Double> and a <xref:System.Double> value to a <xref:System.Byte>.  \\n  \\n [!code-cpp[System.Convert Snippets#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#2)]\\n [!code-csharp[System.Convert Snippets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#2)]\\n [!code-vb[System.Convert Snippets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#2)]\"\n  syntax:\n    content: public static byte ToByte (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.Byte\n      description: <code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref> or less than <xref href=\"System.Byte.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.Int32)\n  commentId: M:System.Convert.ToByte(System.Int32)\n  id: ToByte(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(Int32)\n  nameWithType: Convert.ToByte(Int32)\n  fullName: Convert.ToByte(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts an array of <xref:System.Int32> values to <xref:System.Byte> values.  \\n  \\n [!code-csharp[System.Convert.ToByte#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#4)]\\n [!code-vb[System.Convert.ToByte#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#4)]\"\n  syntax:\n    content: public static byte ToByte (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.Decimal)\n  commentId: M:System.Convert.ToByte(System.Decimal)\n  id: ToByte(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(Decimal)\n  nameWithType: Convert.ToByte(Decimal)\n  fullName: Convert.ToByte(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.\n  remarks: \"The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> and a <xref:System.Decimal> value to a <xref:System.Byte>.  \\n  \\n [!code-cpp[System.Convert Snippets#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)]\\n [!code-csharp[System.Convert Snippets#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)]\\n [!code-vb[System.Convert Snippets#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)]\"\n  syntax:\n    content: public static byte ToByte (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The number to convert.\n    return:\n      type: System.Byte\n      description: <code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Byte.MaxValue\"></xref> or less than <xref href=\"System.Byte.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToByte(System.Object)\n  commentId: M:System.Convert.ToByte(System.Object)\n  id: ToByte(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToByte(Object)\n  nameWithType: Convert.ToByte(Object)\n  fullName: Convert.ToByte(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to an 8-bit unsigned integer.\n  remarks: If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToByte%2A?displayProperty=fullName>implementation of the underlying type of `value`.\n  example:\n  - \"The following example uses the <xref:System.Convert.ToByte%28System.Object%29> method to convert an array of objects to <xref:System.Byte> values.  \\n  \\n [!code-csharp[System.Convert.ToByte#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#6)]\\n [!code-vb[System.Convert.ToByte#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#6)]\"\n  syntax:\n    content: public static byte ToByte (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.Byte\n      description: An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToByte*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in the property format for a <xref href=\"System.Byte\"></xref> value.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement <xref href=\\\"System.IConvertible\\\"></xref>.  \\n  \\n -or-  \\n  \\n Conversion from <code>value</code> to the <xref href=\\\"System.Byte\\\"></xref> type is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToChar(System.String,System.IFormatProvider)\n  id: ToChar(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(String, IFormatProvider)\n  nameWithType: Convert.ToChar(String, IFormatProvider)\n  fullName: Convert.ToChar(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.\n  remarks: \"`value` must be a string that contains a single character.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example converts a string representation of a <xref:System.Char> value with the `ToChar` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called. The example shows that the format provider is not referenced.  \\n  \\n [!code-cpp[System.Convert.ToNonNum_String#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/CPP/stringnonnum.cpp#2)]\\n [!code-csharp[System.Convert.ToNonNum_String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/CS/stringnonnum.cs#2)]\\n [!code-vb[System.Convert.ToNonNum_String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/VB/stringnonnum.vb#2)]\"\n  syntax:\n    content: public static char ToChar (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string of length 1 or `null`.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information. This parameter is ignored.\n    return:\n      type: System.Char\n      description: A Unicode character that is equivalent to the first and only character in <code>value</code>.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The length of <code>value</code> is not 1.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.Object)\n  commentId: M:System.Convert.ToChar(System.Object)\n  id: ToChar(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(Object)\n  nameWithType: Convert.ToChar(Object)\n  fullName: Convert.ToChar(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a Unicode character.\n  remarks: If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToChar%2A?displayProperty=fullName>implementation of the underlying type of `value`.\n  example:\n  - \"The following example attempts to convert each element in an object array to a <xref:System.Char> value.  \\n  \\n [!code-csharp[System.Convert.ToChar#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#9)]\\n [!code-vb[System.Convert.ToChar#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#9)]\"\n  syntax:\n    content: public static char ToChar (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    return:\n      type: System.Char\n      description: A Unicode character that is equivalent to value, or <xref href=\"System.Char.MinValue\"></xref> if <code>value</code> is `null`.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is a null string.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion of <code>value</code> to a <xref href=\\\"System.Char\\\"></xref> is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref> or greater than <xref href=\"System.Char.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToChar(System.Object,System.IFormatProvider)\n  id: ToChar(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(Object, IFormatProvider)\n  nameWithType: Convert.ToChar(Object, IFormatProvider)\n  fullName: Convert.ToChar(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.IConvertible.ToChar%2A?displayProperty=fullName> method of the underlying type of `value`.  \\n  \\n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.\"\n  example:\n  - \"The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToChar` method. This method returns a character whose Unicode value is the average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  \\n  \\n [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]\\n [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]\\n [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]\"\n  syntax:\n    content: public static char ToChar (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Char\n      description: A Unicode character that is equivalent to <code>value</code>, or <xref href=\"System.Char.MinValue\"></xref> if <code>value</code> is `null`.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is a null string.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion of <code>value</code> to a <xref href=\\\"System.Char\\\"></xref> is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref> or greater than <xref href=\"System.Char.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.UInt64)\n  commentId: M:System.Convert.ToChar(System.UInt64)\n  id: ToChar(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(UInt64)\n  nameWithType: Convert.ToChar(UInt64)\n  fullName: Convert.ToChar(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of unsigned long integers to a <xref:System.Char> value.  \\n  \\n [!code-csharp[System.Convert.ToChar#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#8)]\\n [!code-vb[System.Convert.ToChar#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#8)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static char ToChar (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.Char\n      description: A Unicode character that is equivalent to <code>value</code>.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Char.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.UInt32)\n  commentId: M:System.Convert.ToChar(System.UInt32)\n  id: ToChar(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(UInt32)\n  nameWithType: Convert.ToChar(UInt32)\n  fullName: Convert.ToChar(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of unsigned integers to a <xref:System.Char> value.  \\n  \\n [!code-csharp[System.Convert.ToChar#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#7)]\\n [!code-vb[System.Convert.ToChar#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#7)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static char ToChar (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.Char\n      description: A Unicode character that is equivalent to <code>value</code>.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Char.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.UInt16)\n  commentId: M:System.Convert.ToChar(System.UInt16)\n  id: ToChar(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(UInt16)\n  nameWithType: Convert.ToChar(UInt16)\n  fullName: Convert.ToChar(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of unsigned 16-bit integers to a <xref:System.Char> value.  \\n  \\n [!code-csharp[System.Convert.ToChar#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#6)]\\n [!code-vb[System.Convert.ToChar#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#6)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static char ToChar (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.Char\n      description: A Unicode character that is equivalent to <code>value</code>.\n  overload: System.Convert.ToChar*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.String)\n  commentId: M:System.Convert.ToChar(System.String)\n  id: ToChar(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(String)\n  nameWithType: Convert.ToChar(String)\n  fullName: Convert.ToChar(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the first character of a specified string to a Unicode character.\n  remarks: \"`value` must be a string that contains a single character.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example converts each element in a string array to a <xref:System.Char> value.  \\n  \\n [!code-csharp[System.Convert.ToChar#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#5)]\\n [!code-vb[System.Convert.ToChar#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#5)]\"\n  syntax:\n    content: public static char ToChar (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string of length 1.\n    return:\n      type: System.Char\n      description: A Unicode character that is equivalent to the first and only character in <code>value</code>.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The length of <code>value</code> is not 1.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.Single)\n  commentId: M:System.Convert.ToChar(System.Single)\n  id: ToChar(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(Single)\n  nameWithType: Convert.ToChar(Single)\n  fullName: Convert.ToChar(Single)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static char ToChar (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to convert.\n    return:\n      type: System.Char\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.SByte)\n  commentId: M:System.Convert.ToChar(System.SByte)\n  id: ToChar(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(SByte)\n  nameWithType: Convert.ToChar(SByte)\n  fullName: Convert.ToChar(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.\n  remarks: ''\n  example:\n  - \"The following example converts an array of signed bytes to <xref:System.Char> values.  \\n  \\n [!code-csharp[System.Convert.ToChar#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#4)]\\n [!code-vb[System.Convert.ToChar#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#4)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static char ToChar (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.Char\n      description: A Unicode character that is equivalent to <code>value</code>.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.Int64)\n  commentId: M:System.Convert.ToChar(System.Int64)\n  id: ToChar(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(Int64)\n  nameWithType: Convert.ToChar(Int64)\n  fullName: Convert.ToChar(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert a long integer to a <xref:System.Char>, and throws a <xref:System.OverflowException> on failure.  \\n  \\n [!code-cpp[System.Convert Snippets#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#8)]\\n [!code-csharp[System.Convert Snippets#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#8)]\\n [!code-vb[System.Convert Snippets#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#8)]\"\n  syntax:\n    content: public static char ToChar (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.Char\n      description: A Unicode character that is equivalent to <code>value</code>.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref> or greater than <xref href=\"System.Char.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.Int16)\n  commentId: M:System.Convert.ToChar(System.Int16)\n  id: ToChar(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(Int16)\n  nameWithType: Convert.ToChar(Int16)\n  fullName: Convert.ToChar(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.\n  remarks: ''\n  example:\n  - \"The following example converts an array of signed 16-bit integers to <xref:System.Char> values.  \\n  \\n [!code-csharp[System.Convert.ToChar#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#2)]\\n [!code-vb[System.Convert.ToChar#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#2)]\"\n  syntax:\n    content: public static char ToChar (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.Char\n      description: A Unicode character that is equivalent to <code>value</code>.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.Double)\n  commentId: M:System.Convert.ToChar(System.Double)\n  id: ToChar(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(Double)\n  nameWithType: Convert.ToChar(Double)\n  fullName: Convert.ToChar(Double)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static char ToChar (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.Char\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.Decimal)\n  commentId: M:System.Convert.ToChar(System.Decimal)\n  id: ToChar(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(Decimal)\n  nameWithType: Convert.ToChar(Decimal)\n  fullName: Convert.ToChar(Decimal)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert a <xref:System.Decimal> to <xref:System.Char>, and throws <xref:System.InvalidCastException> on failure.  \\n  \\n [!code-cpp[System.Convert Snippets#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#17)]\\n [!code-csharp[System.Convert Snippets#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#17)]\\n [!code-vb[System.Convert Snippets#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#17)]\"\n  syntax:\n    content: public static char ToChar (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal number to convert.\n    return:\n      type: System.Char\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.DateTime)\n  commentId: M:System.Convert.ToChar(System.DateTime)\n  id: ToChar(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(DateTime)\n  nameWithType: Convert.ToChar(DateTime)\n  fullName: Convert.ToChar(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static char ToChar (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.Char\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.Char)\n  commentId: M:System.Convert.ToChar(System.Char)\n  id: ToChar(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(Char)\n  nameWithType: Convert.ToChar(Char)\n  fullName: Convert.ToChar(Char)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Returns the specified Unicode character value; no actual conversion is performed.\n  syntax:\n    content: public static char ToChar (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to return.\n    return:\n      type: System.Char\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToChar*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.Byte)\n  commentId: M:System.Convert.ToChar(System.Byte)\n  id: ToChar(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(Byte)\n  nameWithType: Convert.ToChar(Byte)\n  fullName: Convert.ToChar(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.\n  remarks: ''\n  example:\n  - \"The following example converts an array of unsigned bytes to <xref:System.Char> values.  \\n  \\n [!code-csharp[System.Convert.ToChar#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#1)]\\n [!code-vb[System.Convert.ToChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#1)]\"\n  syntax:\n    content: public static char ToChar (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.Char\n      description: A Unicode character that is equivalent to <code>value</code>.\n  overload: System.Convert.ToChar*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.Boolean)\n  commentId: M:System.Convert.ToChar(System.Boolean)\n  id: ToChar(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(Boolean)\n  nameWithType: Convert.ToChar(Boolean)\n  fullName: Convert.ToChar(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static char ToChar (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.Char\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToChar(System.Int32)\n  commentId: M:System.Convert.ToChar(System.Int32)\n  id: ToChar(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToChar(Int32)\n  nameWithType: Convert.ToChar(Int32)\n  fullName: Convert.ToChar(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.\n  remarks: ''\n  example:\n  - \"The following example converts an array of signed integers to <xref:System.Char> values.  \\n  \\n [!code-csharp[System.Convert.ToChar#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#3)]\\n [!code-vb[System.Convert.ToChar#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#3)]\"\n  syntax:\n    content: public static char ToChar (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.Char\n      description: A Unicode character that is equivalent to <code>value</code>.\n  overload: System.Convert.ToChar*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than <xref href=\"System.Char.MinValue\"></xref> or greater than <xref href=\"System.Char.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.Single)\n  commentId: M:System.Convert.ToDateTime(System.Single)\n  id: ToDateTime(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(Single)\n  nameWithType: Convert.ToDateTime(Single)\n  fullName: Convert.ToDateTime(Single)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static DateTime ToDateTime (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point value to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.String)\n  commentId: M:System.Convert.ToDateTime(System.String)\n  id: ToDateTime(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(String)\n  nameWithType: Convert.ToDateTime(String)\n  fullName: Convert.ToDateTime(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a date and time to an equivalent date and time value.\n  remarks: \"If `value` is not `null`, the return value is the result of invoking the <xref:System.DateTime.Parse%2A?displayProperty=fullName> method on `value` using the formatting information in a <xref:System.Globalization.DateTimeFormatInfo> object that is initialized for the current culture. The `value` argument must contain the representation of a date and time in one of the formats described in the <xref:System.Globalization.DateTimeFormatInfo> topic. If `value` is `null`, the method returns <xref:System.DateTime.MinValue?displayProperty=fullName>.  \\n  \\n This method tries to parse `value` completely and avoid throwing a <xref:System.FormatException>. It completes missing month, day, and year information with the current date. If `value` contains only a date and no time, this method assumes a time of midnight. Any leading, inner, or trailing white-space characters in `value` are ignored.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example uses the <xref:System.Convert.ToDateTime%2A> method to convert various string representations of dates and times to <xref:System.DateTime> values.  \\n  \\n [!code-csharp[System.Convert.ToDateTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime2.cs#2)]\\n [!code-vb[System.Convert.ToDateTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime2.vb#2)]\"\n  syntax:\n    content: public static DateTime ToDateTime (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string representation of a date and time.\n    return:\n      type: System.DateTime\n      description: The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <xref href=\"System.DateTime.MinValue\"></xref> if <code>value</code> is `null`.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not a properly formatted date and time string.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.UInt16)\n  commentId: M:System.Convert.ToDateTime(System.UInt16)\n  id: ToDateTime(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(UInt16)\n  nameWithType: Convert.ToDateTime(UInt16)\n  fullName: Convert.ToDateTime(UInt16)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static DateTime ToDateTime (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToDateTime(System.String,System.IFormatProvider)\n  id: ToDateTime(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(String, IFormatProvider)\n  nameWithType: Convert.ToDateTime(String, IFormatProvider)\n  fullName: Convert.ToDateTime(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method on `value`.  \\n  \\n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.DateTimeFormatInfo> object. The <xref:System.Globalization.DateTimeFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> for the current culture is used.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example converts string representations of date values with the `ToDateTime` method, using an <xref:System.IFormatProvider> object.  \\n  \\n [!code-csharp[System.Convert.ToDateTime#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime3.cs#3)]\\n [!code-vb[System.Convert.ToDateTime#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime3.vb#3)]\"\n  syntax:\n    content: public static DateTime ToDateTime (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains a date and time to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.DateTime\n      description: The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <xref href=\"System.DateTime.MinValue\"></xref> if <code>value</code> is `null`.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not a properly formatted date and time string.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.UInt64)\n  commentId: M:System.Convert.ToDateTime(System.UInt64)\n  id: ToDateTime(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(UInt64)\n  nameWithType: Convert.ToDateTime(UInt64)\n  fullName: Convert.ToDateTime(UInt64)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static DateTime ToDateTime (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)\n  id: ToDateTime(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(Object, IFormatProvider)\n  nameWithType: Convert.ToDateTime(Object, IFormatProvider)\n  fullName: Convert.ToDateTime(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a <xref href=\"System.DateTime\"></xref> object, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> method of the underlying type of `value`.  \\n  \\n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a date, `provider` could supply culture-specific information about the notation used to represent that date. `provider` is involved in the conversion of `value` if the runtime type of `value` is a <xref:System.String>, or if `value` is a user-defined type whose <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> implementation makes use of `provider`. If the runtime type of `value` is <xref:System.String> and `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.\"\n  example:\n  - \"The following example defines a custom format provider, `CustomProvider`, whose <xref:System.IFormatProvider.GetFormat%2A> method outputs a message to the console that it has been invoked, and then returns the <xref:System.Globalization.DateTimeFormatInfo> object of the culture whose name was passed as a parameter to its class constructor. Each of these `CustomProvider` objects is used to convert the elements in an object array to date and time values. The output indicates that the `CustomProvider` object is used in the conversion only when the type of the `value` parameter is a <xref:System.String>.  \\n  \\n [!code-csharp[System.Convert.ToDateTime#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/todatetime4.cs#4)]\\n [!code-vb[System.Convert.ToDateTime#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/todatetime4.vb#4)]\"\n  syntax:\n    content: public static DateTime ToDateTime (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.DateTime\n      description: The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <xref href=\"System.DateTime.MinValue\"></xref> if <code>value</code> is `null`.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not a valid date and time value.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.SByte)\n  commentId: M:System.Convert.ToDateTime(System.SByte)\n  id: ToDateTime(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(SByte)\n  nameWithType: Convert.ToDateTime(SByte)\n  fullName: Convert.ToDateTime(SByte)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static DateTime ToDateTime (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.UInt32)\n  commentId: M:System.Convert.ToDateTime(System.UInt32)\n  id: ToDateTime(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(UInt32)\n  nameWithType: Convert.ToDateTime(UInt32)\n  fullName: Convert.ToDateTime(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static DateTime ToDateTime (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.Object)\n  commentId: M:System.Convert.ToDateTime(System.Object)\n  id: ToDateTime(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(Object)\n  nameWithType: Convert.ToDateTime(Object)\n  fullName: Convert.ToDateTime(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a <xref href=\"System.DateTime\"></xref> object.\n  remarks: \"For the conversion to succeed, the runtime type of the `value` parameter must be either a <xref:System.DateTime> or a <xref:System.String>, or `value` must be `null`. Otherwise, the method throws an <xref:System.InvalidCastException>. In addition, if `value` is a string, it must contain a valid representation of a date and time value in the current culture or a <xref:System.FormatException> is thrown.  \\n  \\n The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> method of the underlying type of `value`.\"\n  example:\n  - \"The following example calls the <xref:System.Convert.ToDateTime%28System.Object%29> method with a variety of <xref:System.Object> variables.  \\n  \\n [!code-csharp[System.Convert.ToDateTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime1.cs#1)]\\n [!code-vb[System.Convert.ToDateTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime1.vb#1)]\"\n  syntax:\n    content: public static DateTime ToDateTime (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.DateTime\n      description: The date and time equivalent of the value of <code>value</code>, or a date and time equivalent of <xref href=\"System.DateTime.MinValue\"></xref> if <code>value</code> is `null`.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not a valid date and time value.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.Double)\n  commentId: M:System.Convert.ToDateTime(System.Double)\n  id: ToDateTime(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(Double)\n  nameWithType: Convert.ToDateTime(Double)\n  fullName: Convert.ToDateTime(Double)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static DateTime ToDateTime (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point value to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.Int32)\n  commentId: M:System.Convert.ToDateTime(System.Int32)\n  id: ToDateTime(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(Int32)\n  nameWithType: Convert.ToDateTime(Int32)\n  fullName: Convert.ToDateTime(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static DateTime ToDateTime (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.Boolean)\n  commentId: M:System.Convert.ToDateTime(System.Boolean)\n  id: ToDateTime(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(Boolean)\n  nameWithType: Convert.ToDateTime(Boolean)\n  fullName: Convert.ToDateTime(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static DateTime ToDateTime (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.Byte)\n  commentId: M:System.Convert.ToDateTime(System.Byte)\n  id: ToDateTime(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(Byte)\n  nameWithType: Convert.ToDateTime(Byte)\n  fullName: Convert.ToDateTime(Byte)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static DateTime ToDateTime (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.Char)\n  commentId: M:System.Convert.ToDateTime(System.Char)\n  id: ToDateTime(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(Char)\n  nameWithType: Convert.ToDateTime(Char)\n  fullName: Convert.ToDateTime(Char)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static DateTime ToDateTime (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.Int64)\n  commentId: M:System.Convert.ToDateTime(System.Int64)\n  id: ToDateTime(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(Int64)\n  nameWithType: Convert.ToDateTime(Int64)\n  fullName: Convert.ToDateTime(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static DateTime ToDateTime (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.Decimal)\n  commentId: M:System.Convert.ToDateTime(System.Decimal)\n  id: ToDateTime(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(Decimal)\n  nameWithType: Convert.ToDateTime(Decimal)\n  fullName: Convert.ToDateTime(Decimal)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static DateTime ToDateTime (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The number to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.Int16)\n  commentId: M:System.Convert.ToDateTime(System.Int16)\n  id: ToDateTime(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(Int16)\n  nameWithType: Convert.ToDateTime(Int16)\n  fullName: Convert.ToDateTime(Int16)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static DateTime ToDateTime (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.DateTime\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDateTime*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDateTime(System.DateTime)\n  commentId: M:System.Convert.ToDateTime(System.DateTime)\n  id: ToDateTime(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDateTime(DateTime)\n  nameWithType: Convert.ToDateTime(DateTime)\n  fullName: Convert.ToDateTime(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Returns the specified <xref href=\"System.DateTime\"></xref> object; no actual conversion is performed.\n  syntax:\n    content: public static DateTime ToDateTime (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: A date and time value.\n    return:\n      type: System.DateTime\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToDateTime*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToDecimal(System.String,System.IFormatProvider)\n  id: ToDecimal(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(String, IFormatProvider)\n  nameWithType: Convert.ToDecimal(String, IFormatProvider)\n  fullName: Convert.ToDecimal(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.Decimal.Parse%2A?displayProperty=fullName> method on `value`.  \\n  \\n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example attempts to convert an array of strings to <xref:System.Decimal> values by using <xref:System.Globalization.NumberFormatInfo> objects that represent two different cultures.  \\n  \\n [!code-csharp[System.Convert.ToDecimal2#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal3.cs#12)]\\n [!code-vb[System.Convert.ToDecimal2#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal3.vb#12)]\"\n  syntax:\n    content: public static decimal ToDecimal (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains a number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Decimal\n      description: A decimal number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToDecimal*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not a number in a valid format.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Decimal.MinValue\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)\n  id: ToDecimal(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(Object, IFormatProvider)\n  nameWithType: Convert.ToDecimal(Object, IFormatProvider)\n  fullName: Convert.ToDecimal(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> method of the underlying type of `value`.  \\n  \\n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.\"\n  example:\n  - \"The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface.  \\n  \\n [!code-csharp[System.Convert.ToDecimal2#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal2.cs#10)]\\n [!code-vb[System.Convert.ToDecimal2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal2.vb#10)]  \\n  \\n The following example shows that when a `Temperature` object is passed as a parameter to the <xref:System.Convert.ToDecimal%28System.Object%2CSystem.IFormatProvider%29> method, the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> implementation of the `Temperature` class is called to perform the conversion.  \\n  \\n [!code-csharp[System.Convert.ToDecimal2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal2.cs#11)]\\n [!code-vb[System.Convert.ToDecimal2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal2.vb#11)]\"\n  syntax:\n    content: public static decimal ToDecimal (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Decimal\n      description: A decimal number that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToDecimal*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format for a <xref href=\"System.Decimal\"></xref> type.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Decimal.MinValue\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.UInt64)\n  commentId: M:System.Convert.ToDecimal(System.UInt64)\n  id: ToDecimal(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(UInt64)\n  nameWithType: Convert.ToDecimal(UInt64)\n  fullName: Convert.ToDecimal(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.\n  remarks: ''\n  example:\n  - \"The following example converts an array of unsigned long integers to <xref:System.Decimal> values.  \\n  \\n [!code-csharp[System.Convert.ToDecimal2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#9)]\\n [!code-vb[System.Convert.ToDecimal2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static decimal ToDecimal (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.Decimal\n      description: A decimal number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDecimal*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.UInt32)\n  commentId: M:System.Convert.ToDecimal(System.UInt32)\n  id: ToDecimal(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(UInt32)\n  nameWithType: Convert.ToDecimal(UInt32)\n  fullName: Convert.ToDecimal(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.\n  remarks: ''\n  example:\n  - \"The following example converts an array of unsigned integers to <xref:System.Decimal> values.  \\n  \\n [!code-csharp[System.Convert.ToDecimal2#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#8)]\\n [!code-vb[System.Convert.ToDecimal2#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#8)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static decimal ToDecimal (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.Decimal\n      description: A decimal number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDecimal*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.UInt16)\n  commentId: M:System.Convert.ToDecimal(System.UInt16)\n  id: ToDecimal(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(UInt16)\n  nameWithType: Convert.ToDecimal(UInt16)\n  fullName: Convert.ToDecimal(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.\n  remarks: ''\n  example:\n  - \"The following example converts an array of 16-bit unsigned integers to <xref:System.Decimal> values.  \\n  \\n [!code-csharp[System.Convert.ToDecimal2#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#7)]\\n [!code-vb[System.Convert.ToDecimal2#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#7)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static decimal ToDecimal (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.Decimal\n      description: The decimal number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDecimal*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.String)\n  commentId: M:System.Convert.ToDecimal(System.String)\n  id: ToDecimal(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(String)\n  nameWithType: Convert.ToDecimal(String)\n  fullName: Convert.ToDecimal(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent decimal number.\n  remarks: \"Using the <xref:System.Convert.ToDecimal%28System.String%29> method is equivalent to passing `value` to the <xref:System.Decimal.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example illustrates the use of `ToDecimal`. It attempts to convert a <xref:System.String>to a <xref:System.Decimal>, and throws the possible exceptions that may arise during the conversion.  \\n  \\n [!code-cpp[System.Convert Snippets#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#15)]\\n [!code-csharp[System.Convert Snippets#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#15)]\\n [!code-vb[System.Convert Snippets#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#15)]\"\n  syntax:\n    content: public static decimal ToDecimal (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains a number to convert.\n    return:\n      type: System.Decimal\n      description: A decimal number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToDecimal*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not a number in a valid format.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Decimal.MinValue\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.SByte)\n  commentId: M:System.Convert.ToDecimal(System.SByte)\n  id: ToDecimal(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(SByte)\n  nameWithType: Convert.ToDecimal(SByte)\n  fullName: Convert.ToDecimal(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to the equivalent decimal number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of signed bytes to a <xref:System.Decimal> value.  \\n  \\n [!code-csharp[System.Convert.ToDecimal2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#5)]\\n [!code-vb[System.Convert.ToDecimal2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#5)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static decimal ToDecimal (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.Decimal\n      description: A decimal number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDecimal*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.Object)\n  commentId: M:System.Convert.ToDecimal(System.Object)\n  id: ToDecimal(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(Object)\n  nameWithType: Convert.ToDecimal(Object)\n  fullName: Convert.ToDecimal(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to an equivalent decimal number.\n  remarks: The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> method of the underlying type of `value`.\n  example:\n  - \"The following example tries to convert each element in an object array to a <xref:System.Decimal> value.  \\n  \\n [!code-csharp[System.Convert.ToDecimal2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#4)]\\n [!code-vb[System.Convert.ToDecimal2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#4)]\"\n  syntax:\n    content: public static decimal ToDecimal (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.Decimal\n      description: A decimal number that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToDecimal*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format for a <xref href=\"System.Decimal\"></xref> type.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Decimal.MinValue\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.Single)\n  commentId: M:System.Convert.ToDecimal(System.Single)\n  id: ToDecimal(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(Single)\n  nameWithType: Convert.ToDecimal(Single)\n  fullName: Convert.ToDecimal(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to the equivalent decimal number.\n  remarks: \"The <xref:System.Decimal> value returned by this method contains a maximum of seven significant digits. If the `value` parameter contains more than seven significant digits, it is rounded using rounding to nearest. The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Single%29> method uses rounding to nearest to return a <xref:System.Decimal> value with seven significant digits.  \\n  \\n [!code-csharp[System.Convert.ToDecimal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#1)]\\n [!code-vb[System.Convert.ToDecimal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#1)]\"\n  example:\n  - \"The following example tries to convert each element in an array of <xref:System.Single> values to a <xref:System.Decimal> value.  \\n  \\n [!code-csharp[System.Convert.ToDecimal2#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#6)]\\n [!code-vb[System.Convert.ToDecimal2#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#6)]\"\n  syntax:\n    content: public static decimal ToDecimal (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to convert.\n    return:\n      type: System.Decimal\n      description: A decimal number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDecimal*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Decimal.MaxValue\"></xref> or less than <xref href=\"System.Decimal.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.Int32)\n  commentId: M:System.Convert.ToDecimal(System.Int32)\n  id: ToDecimal(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(Int32)\n  nameWithType: Convert.ToDecimal(Int32)\n  fullName: Convert.ToDecimal(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to an equivalent decimal number.\n  remarks: ''\n  example:\n  - \"The following example converts an array of signed integers to <xref:System.Decimal> values.  \\n  \\n [!code-csharp[System.Convert.ToDecimal2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#3)]\\n [!code-vb[System.Convert.ToDecimal2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#3)]\"\n  syntax:\n    content: public static decimal ToDecimal (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.Decimal\n      description: A decimal number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDecimal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.Boolean)\n  commentId: M:System.Convert.ToDecimal(System.Boolean)\n  id: ToDecimal(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(Boolean)\n  nameWithType: Convert.ToDecimal(Boolean)\n  fullName: Convert.ToDecimal(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to the equivalent decimal number.\n  remarks: ''\n  example:\n  - \"The following example illustrates the conversion of <xref:System.Boolean> to <xref:System.Decimal> values.  \\n  \\n [!code-csharp[System.Convert.ToDecimal2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#1)]\\n [!code-vb[System.Convert.ToDecimal2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#1)]\"\n  syntax:\n    content: public static decimal ToDecimal (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.Decimal\n      description: The number 1 if <code>value</code> is `true`; otherwise, 0.\n  overload: System.Convert.ToDecimal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.Byte)\n  commentId: M:System.Convert.ToDecimal(System.Byte)\n  id: ToDecimal(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(Byte)\n  nameWithType: Convert.ToDecimal(Byte)\n  fullName: Convert.ToDecimal(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.\n  remarks: ''\n  example:\n  - \"The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> value.  \\n  \\n [!code-cpp[System.Convert Snippets#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)]\\n [!code-csharp[System.Convert Snippets#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)]\\n [!code-vb[System.Convert Snippets#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)]\"\n  syntax:\n    content: public static decimal ToDecimal (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.Decimal\n      description: The decimal number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDecimal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.Char)\n  commentId: M:System.Convert.ToDecimal(System.Char)\n  id: ToDecimal(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(Char)\n  nameWithType: Convert.ToDecimal(Char)\n  fullName: Convert.ToDecimal(Char)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert a <xref:System.Char> value to <xref:System.Decimal>, and throws <xref:System.InvalidCastException> upon failure.  \\n  \\n [!code-cpp[System.Convert Snippets#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#17)]\\n [!code-csharp[System.Convert Snippets#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#17)]\\n [!code-vb[System.Convert Snippets#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#17)]\"\n  syntax:\n    content: public static decimal ToDecimal (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.Decimal\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDecimal*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.Int64)\n  commentId: M:System.Convert.ToDecimal(System.Int64)\n  id: ToDecimal(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(Int64)\n  nameWithType: Convert.ToDecimal(Int64)\n  fullName: Convert.ToDecimal(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to an equivalent decimal number.\n  remarks: ''\n  example:\n  - \"The following example converts an <xref:System.Int64> value to a <xref:System.Decimal> value.  \\n  \\n [!code-cpp[System.Convert Snippets#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#10)]\\n [!code-csharp[System.Convert Snippets#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#10)]\\n [!code-vb[System.Convert Snippets#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#10)]\"\n  syntax:\n    content: public static decimal ToDecimal (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.Decimal\n      description: A decimal number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDecimal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.Decimal)\n  commentId: M:System.Convert.ToDecimal(System.Decimal)\n  id: ToDecimal(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(Decimal)\n  nameWithType: Convert.ToDecimal(Decimal)\n  fullName: Convert.ToDecimal(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified decimal number; no actual conversion is performed.\n  syntax:\n    content: public static decimal ToDecimal (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: A decimal number.\n    return:\n      type: System.Decimal\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToDecimal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.Double)\n  commentId: M:System.Convert.ToDecimal(System.Double)\n  id: ToDecimal(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(Double)\n  nameWithType: Convert.ToDecimal(Double)\n  fullName: Convert.ToDecimal(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to an equivalent decimal number.\n  remarks: \"The <xref:System.Decimal> value returned by this method contains a maximum of 15 significant digits. If the `value` parameter contains more than 15 significant digits, it is rounded using rounding to nearest. The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=fullName> method uses rounding to nearest to return a <xref:System.Decimal> value with 15 significant digits.  \\n  \\n [!code-csharp[System.Convert.ToDecimal#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#2)]\\n [!code-vb[System.Convert.ToDecimal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#2)]\"\n  example:\n  - \"The following example converts a <xref:System.Double> value to a <xref:System.Decimal> value.  \\n  \\n [!code-cpp[System.Convert Snippets#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#5)]\\n [!code-csharp[System.Convert Snippets#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#5)]\\n [!code-vb[System.Convert Snippets#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#5)]\"\n  syntax:\n    content: public static decimal ToDecimal (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.Decimal\n      description: A decimal number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDecimal*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Decimal.MaxValue\"></xref> or less than <xref href=\"System.Decimal.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.Int16)\n  commentId: M:System.Convert.ToDecimal(System.Int16)\n  id: ToDecimal(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(Int16)\n  nameWithType: Convert.ToDecimal(Int16)\n  fullName: Convert.ToDecimal(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to an equivalent decimal number.\n  remarks: ''\n  example:\n  - \"The following example converts an array of 16-bit signed integers to <xref:System.Decimal> values.  \\n  \\n [!code-csharp[System.Convert.ToDecimal2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#2)]\\n [!code-vb[System.Convert.ToDecimal2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#2)]\"\n  syntax:\n    content: public static decimal ToDecimal (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.Decimal\n      description: A decimal number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDecimal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDecimal(System.DateTime)\n  commentId: M:System.Convert.ToDecimal(System.DateTime)\n  id: ToDecimal(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDecimal(DateTime)\n  nameWithType: Convert.ToDecimal(DateTime)\n  fullName: Convert.ToDecimal(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static decimal ToDecimal (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.Decimal\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDecimal*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.SByte)\n  commentId: M:System.Convert.ToDouble(System.SByte)\n  id: ToDouble(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(SByte)\n  nameWithType: Convert.ToDouble(SByte)\n  fullName: Convert.ToDouble(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of <xref:System.SByte> values to a <xref:System.Double> value.  \\n  \\n [!code-csharp[System.Convert.ToDouble#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#4)]\\n [!code-vb[System.Convert.ToDouble#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#4)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static double ToDouble (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.Double\n      description: The 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDouble*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToDouble(System.Object,System.IFormatProvider)\n  id: ToDouble(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(Object, IFormatProvider)\n  nameWithType: Convert.ToDouble(Object, IFormatProvider)\n  fullName: Convert.ToDouble(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.IConvertible.ToDouble%2A?displayProperty=fullName> method of the underlying type of `value`.  \\n  \\n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \\n  \\n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.\"\n  example:\n  - \"The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToDouble` method. This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  \\n  \\n [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]\\n [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]\\n [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]\"\n  syntax:\n    content: public static double ToDouble (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToDouble*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format for a <xref href=\"System.Double\"></xref> type.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.UInt64)\n  commentId: M:System.Convert.ToDouble(System.UInt64)\n  id: ToDouble(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(UInt64)\n  nameWithType: Convert.ToDouble(UInt64)\n  fullName: Convert.ToDouble(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of <xref:System.UInt64> values to a <xref:System.Double> value.  \\n  \\n [!code-csharp[System.Convert.ToDouble#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#7)]\\n [!code-vb[System.Convert.ToDouble#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#7)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static double ToDouble (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDouble*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.UInt32)\n  commentId: M:System.Convert.ToDouble(System.UInt32)\n  id: ToDouble(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(UInt32)\n  nameWithType: Convert.ToDouble(UInt32)\n  fullName: Convert.ToDouble(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of <xref:System.UInt32> values to a <xref:System.Double> value.  \\n  \\n [!code-csharp[System.Convert.ToDouble#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#6)]\\n [!code-vb[System.Convert.ToDouble#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#6)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static double ToDouble (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDouble*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.UInt16)\n  commentId: M:System.Convert.ToDouble(System.UInt16)\n  id: ToDouble(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(UInt16)\n  nameWithType: Convert.ToDouble(UInt16)\n  fullName: Convert.ToDouble(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of <xref:System.UInt16> values to a <xref:System.Double> value.  \\n  \\n [!code-csharp[System.Convert.ToDouble#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#5)]\\n [!code-vb[System.Convert.ToDouble#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#5)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static double ToDouble (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDouble*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.String)\n  commentId: M:System.Convert.ToDouble(System.String)\n  id: ToDouble(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(String)\n  nameWithType: Convert.ToDouble(String)\n  fullName: Convert.ToDouble(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent double-precision floating-point number.\n  remarks: \"Using the <xref:System.Convert.ToDouble%28System.String%29> method is equivalent to passing `value` to the <xref:System.Double.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example attempts to convert each element in an array of numeric strings to a <xref:System.Double>. The example's output is from a system whose current culture is en-US.  \\n  \\n [!code-csharp[System.Convert.ToDouble#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/example8.cs#8)]\\n [!code-vb[System.Convert.ToDouble#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/example8.vb#8)]\"\n  syntax:\n    content: public static double ToDouble (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToDouble*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not a number in a valid format.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.Single)\n  commentId: M:System.Convert.ToDouble(System.Single)\n  id: ToDouble(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(Single)\n  nameWithType: Convert.ToDouble(Single)\n  fullName: Convert.ToDouble(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts a <xref:System.Single> value to a <xref:System.Double> value.  \\n  \\n [!code-cpp[System.Convert Snippets#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#6)]\\n [!code-csharp[System.Convert Snippets#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#6)]\\n [!code-vb[System.Convert Snippets#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#6)]\"\n  syntax:\n    content: public static double ToDouble (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDouble*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToDouble(System.String,System.IFormatProvider)\n  id: ToDouble(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(String, IFormatProvider)\n  nameWithType: Convert.ToDouble(String, IFormatProvider)\n  fullName: Convert.ToDouble(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.Double.Parse%2A?displayProperty=fullName> method on `value`.  \\n  \\n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example converts string representations of <xref:System.Double> values with the `ToDouble` method, using an <xref:System.IFormatProvider> object.  \\n  \\n [!code-csharp[System.Convert.ToReals_String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToReals_String/CS/todouble.cs#2)]\\n [!code-vb[System.Convert.ToReals_String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToReals_String/VB/todouble.vb#2)]\"\n  syntax:\n    content: public static double ToDouble (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToDouble*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not a number in a valid format.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.Object)\n  commentId: M:System.Convert.ToDouble(System.Object)\n  id: ToDouble(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(Object)\n  nameWithType: Convert.ToDouble(Object)\n  fullName: Convert.ToDouble(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a double-precision floating-point number.\n  remarks: If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToDouble%2A?displayProperty=fullName>implementation of the underlying type of `value`.\n  example:\n  - \"The following example attempts to convert each value in an object array to a <xref:System.Double>.  \\n  \\n [!code-csharp[System.Convert.ToDouble#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#3)]\\n [!code-vb[System.Convert.ToDouble#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#3)]\"\n  syntax:\n    content: public static double ToDouble (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToDouble*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format for a <xref href=\"System.Double\"></xref> type.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Double.MinValue\"></xref> or greater than <xref href=\"System.Double.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.Int32)\n  commentId: M:System.Convert.ToDouble(System.Int32)\n  id: ToDouble(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(Int32)\n  nameWithType: Convert.ToDouble(Int32)\n  fullName: Convert.ToDouble(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts an <xref:System.Int32> value to a <xref:System.Double> value.  \\n  \\n [!code-cpp[System.Convert Snippets#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#3)]\\n [!code-csharp[System.Convert Snippets#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#3)]\\n [!code-vb[System.Convert Snippets#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#3)]\"\n  syntax:\n    content: public static double ToDouble (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDouble*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.Boolean)\n  commentId: M:System.Convert.ToDouble(System.Boolean)\n  id: ToDouble(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(Boolean)\n  nameWithType: Convert.ToDouble(Boolean)\n  fullName: Convert.ToDouble(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to the equivalent double-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts a <xref:System.Boolean> value to a <xref:System.Double> value.  \\n  \\n [!code-cpp[System.Convert Snippets#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#1)]\\n [!code-csharp[System.Convert Snippets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#1)]\\n [!code-vb[System.Convert Snippets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#1)]\"\n  syntax:\n    content: public static double ToDouble (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.Double\n      description: The number 1 if <code>value</code> is `true`; otherwise, 0.\n  overload: System.Convert.ToDouble*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.Byte)\n  commentId: M:System.Convert.ToDouble(System.Byte)\n  id: ToDouble(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(Byte)\n  nameWithType: Convert.ToDouble(Byte)\n  fullName: Convert.ToDouble(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts a <xref:System.Byte> value to a <xref:System.Double> value.  \\n  \\n [!code-cpp[System.Convert Snippets#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#2)]\\n [!code-csharp[System.Convert Snippets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#2)]\\n [!code-vb[System.Convert Snippets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#2)]\"\n  syntax:\n    content: public static double ToDouble (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.Double\n      description: The double-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDouble*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.Char)\n  commentId: M:System.Convert.ToDouble(System.Char)\n  id: ToDouble(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(Char)\n  nameWithType: Convert.ToDouble(Char)\n  fullName: Convert.ToDouble(Char)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static double ToDouble (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.Double\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDouble*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.Int64)\n  commentId: M:System.Convert.ToDouble(System.Int64)\n  id: ToDouble(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(Int64)\n  nameWithType: Convert.ToDouble(Int64)\n  fullName: Convert.ToDouble(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of signed long integers to a <xref:System.Double> value.  \\n  \\n [!code-csharp[System.Convert.ToDouble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#2)]\\n [!code-vb[System.Convert.ToDouble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#2)]\"\n  syntax:\n    content: public static double ToDouble (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDouble*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.Decimal)\n  commentId: M:System.Convert.ToDouble(System.Decimal)\n  id: ToDouble(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(Decimal)\n  nameWithType: Convert.ToDouble(Decimal)\n  fullName: Convert.ToDouble(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to an equivalent double-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts a <xref:System.Decimal> value to a <xref:System.Double> value.  \\n  \\n [!code-cpp[System.Convert Snippets#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#5)]\\n [!code-csharp[System.Convert Snippets#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#5)]\\n [!code-vb[System.Convert Snippets#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#5)]\"\n  syntax:\n    content: public static double ToDouble (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal number to convert.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToDouble*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.Double)\n  commentId: M:System.Convert.ToDouble(System.Double)\n  id: ToDouble(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(Double)\n  nameWithType: Convert.ToDouble(Double)\n  fullName: Convert.ToDouble(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified double-precision floating-point number; no actual conversion is performed.\n  syntax:\n    content: public static double ToDouble (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to return.\n    return:\n      type: System.Double\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToDouble*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.Int16)\n  commentId: M:System.Convert.ToDouble(System.Int16)\n  id: ToDouble(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(Int16)\n  nameWithType: Convert.ToDouble(Int16)\n  fullName: Convert.ToDouble(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of 16-bit signed integers to a <xref:System.Double> value.  \\n  \\n [!code-csharp[System.Convert.ToDouble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#1)]\\n [!code-vb[System.Convert.ToDouble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#1)]\"\n  syntax:\n    content: public static double ToDouble (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number equivalent to <code>value</code>.\n  overload: System.Convert.ToDouble*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToDouble(System.DateTime)\n  commentId: M:System.Convert.ToDouble(System.DateTime)\n  id: ToDouble(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToDouble(DateTime)\n  nameWithType: Convert.ToDouble(DateTime)\n  fullName: Convert.ToDouble(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static double ToDouble (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.Double\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToDouble*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.SByte)\n  commentId: M:System.Convert.ToInt16(System.SByte)\n  id: ToInt16(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(SByte)\n  nameWithType: Convert.ToInt16(SByte)\n  fullName: Convert.ToInt16(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of signed bytes to a 16-bit signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt16#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#9)]\\n [!code-vb[System.Convert.ToInt16#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static short ToInt16 (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.Int16\n      description: A 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt16*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToInt16(System.String,System.IFormatProvider)\n  id: ToInt16(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(String, IFormatProvider)\n  nameWithType: Convert.ToInt16(String, IFormatProvider)\n  fullName: Convert.ToInt16(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.\n  remarks: \"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example converts string representations of 16-bit integers with the `ToInt16` method, using an <xref:System.IFormatProvider> object.  \\n  \\n [!code-cpp[System.Convert.ToSInts_String#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/toint16.cpp#3)]\\n [!code-csharp[System.Convert.ToSInts_String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/toint16.cs#3)]\\n [!code-vb[System.Convert.ToSInts_String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/toint16.vb#3)]\"\n  syntax:\n    content: public static short ToInt16 (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToInt16(System.Object,System.IFormatProvider)\n  id: ToInt16(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(Object, IFormatProvider)\n  nameWithType: Convert.ToInt16(Object, IFormatProvider)\n  fullName: Convert.ToInt16(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.\n  remarks: \"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \\n  \\n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.\"\n  example:\n  - \"The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToInt16` method. This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  \\n  \\n [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]\\n [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]\\n [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]\"\n  syntax:\n    content: public static short ToInt16 (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format for an <xref href=\"System.Int16\"></xref> type.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.UInt64)\n  commentId: M:System.Convert.ToInt16(System.UInt64)\n  id: ToInt16(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(UInt64)\n  nameWithType: Convert.ToInt16(UInt64)\n  fullName: Convert.ToInt16(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of unsigned long integers to a 16-bit signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt16#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#13)]\\n [!code-vb[System.Convert.ToInt16#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#13)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static short ToInt16 (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.UInt32)\n  commentId: M:System.Convert.ToInt16(System.UInt32)\n  id: ToInt16(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(UInt32)\n  nameWithType: Convert.ToInt16(UInt32)\n  fullName: Convert.ToInt16(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of unsigned integers to a 16-bit signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt16#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#12)]\\n [!code-vb[System.Convert.ToInt16#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#12)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static short ToInt16 (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.UInt16)\n  commentId: M:System.Convert.ToInt16(System.UInt16)\n  id: ToInt16(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(UInt16)\n  nameWithType: Convert.ToInt16(UInt16)\n  fullName: Convert.ToInt16(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of unsigned 16-bit integers to a 16-bit signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt16#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#11)]\\n [!code-vb[System.Convert.ToInt16#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#11)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static short ToInt16 (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.String)\n  commentId: M:System.Convert.ToInt16(System.String)\n  id: ToInt16(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(String)\n  nameWithType: Convert.ToInt16(String)\n  fullName: Convert.ToInt16(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 16-bit signed integer.\n  remarks: \"Using the <xref:System.Convert.ToInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int16.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example converts string representations of 16-bit integers with the `ToInt16` method, using default formatting.  \\n  \\n [!code-cpp[System.Convert.ToSInts_String#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/toint16.cpp#3)]\\n [!code-csharp[System.Convert.ToSInts_String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/toint16.cs#3)]\\n [!code-vb[System.Convert.ToSInts_String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/toint16.vb#3)]\"\n  syntax:\n    content: public static short ToInt16 (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.Single)\n  commentId: M:System.Convert.ToInt16(System.Single)\n  id: ToInt16(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(Single)\n  nameWithType: Convert.ToInt16(Single)\n  fullName: Convert.ToInt16(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Single> values to a 16-bit signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt16#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#10)]\\n [!code-vb[System.Convert.ToInt16#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#10)]\"\n  syntax:\n    content: public static short ToInt16 (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to convert.\n    return:\n      type: System.Int16\n      description: <code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.String,System.Int32)\n  commentId: M:System.Convert.ToInt16(System.String,System.Int32)\n  id: ToInt16(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(String, Int32)\n  nameWithType: Convert.ToInt16(String, Int32)\n  fullName: Convert.ToInt16(String, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.\n  remarks: \"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \\\"0x\\\" or \\\"0X\\\".  \\n  \\n Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int16> data type is converted to an <xref:System.Int16> value without the method throwing an exception. The following example increments <xref:System.Int16?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \\\"0x8000 converts to -32768.\\\"  \\n  \\n [!code-csharp[System.Convert.BaseConversion#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#5)]\\n [!code-vb[System.Convert.BaseConversion#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#5)]  \\n  \\n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.  \\n  \\n [!code-csharp[System.Convert.BaseConversion#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#6)]\\n [!code-vb[System.Convert.BaseConversion#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#6)]\"\n  example:\n  - \"The following example attempts to interpret each element in a string array as a hexadecimal string and to convert it to a 16-bit signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt16#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_2.cs#14)]\\n [!code-vb[System.Convert.ToInt16#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_2.vb#14)]\"\n  syntax:\n    content: public static short ToInt16 (string value, int fromBase);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: fromBase\n      type: System.Int32\n      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>fromBase</code> is not 2, 8, 10, or 16.  \\n  \\n -or-  \\n  \\n <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>value</code> is <xref href=\"System.String.Empty\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  \\n  \\n -or-  \\n  \\n <code>value</code> represents a number that is less than <xref href=\\\"System.Int16.MinValue\\\"></xref> or greater than <xref href=\\\"System.Int16.MaxValue\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.Object)\n  commentId: M:System.Convert.ToInt16(System.Object)\n  id: ToInt16(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(Object)\n  nameWithType: Convert.ToInt16(Object)\n  fullName: Convert.ToInt16(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a 16-bit signed integer.\n  remarks: If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt16%2A?displayProperty=fullName> implementation of the underlying type of `value`.\n  example:\n  - \"The following example attempts to convert each element in an object array to a 16-bit signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt16#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#8)]\\n [!code-vb[System.Convert.ToInt16#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#8)]\"\n  syntax:\n    content: public static short ToInt16 (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format for an <xref href=\"System.Int16\"></xref> type.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.Int32)\n  commentId: M:System.Convert.ToInt16(System.Int32)\n  id: ToInt16(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(Int32)\n  nameWithType: Convert.ToInt16(Int32)\n  fullName: Convert.ToInt16(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of integers to a 16-bit signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt16#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#6)]\\n [!code-vb[System.Convert.ToInt16#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#6)]\"\n  syntax:\n    content: public static short ToInt16 (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.Int16\n      description: The 16-bit signed integer equivalent of <code>value</code>.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.Int16)\n  commentId: M:System.Convert.ToInt16(System.Int16)\n  id: ToInt16(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(Int16)\n  nameWithType: Convert.ToInt16(Int16)\n  fullName: Convert.ToInt16(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 16-bit signed integer; no actual conversion is performed.\n  syntax:\n    content: public static short ToInt16 (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to return.\n    return:\n      type: System.Int16\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToInt16*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.Double)\n  commentId: M:System.Convert.ToInt16(System.Double)\n  id: ToInt16(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(Double)\n  nameWithType: Convert.ToInt16(Double)\n  fullName: Convert.ToInt16(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of <xref:System.Double> values to a 16-bit signed integer. The example illustrates that any fractional part of a <xref:System.Double> value is rounded before performing the conversion.  \\n  \\n [!code-csharp[System.Convert.ToInt16#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#5)]\\n [!code-vb[System.Convert.ToInt16#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#5)]\"\n  syntax:\n    content: public static short ToInt16 (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.Int16\n      description: <code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.Decimal)\n  commentId: M:System.Convert.ToInt16(System.Decimal)\n  id: ToInt16(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(Decimal)\n  nameWithType: Convert.ToInt16(Decimal)\n  fullName: Convert.ToInt16(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to an equivalent 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Decimal> values to a 16-bit signed integer. The example illustrates that any fractional part of a <xref:System.Decimal> value is rounded when performing the conversion.  \\n  \\n [!code-csharp[System.Convert.ToInt16#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#4)]\\n [!code-vb[System.Convert.ToInt16#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#4)]\"\n  syntax:\n    content: public static short ToInt16 (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal number to convert.\n    return:\n      type: System.Int16\n      description: <code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.DateTime)\n  commentId: M:System.Convert.ToInt16(System.DateTime)\n  id: ToInt16(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(DateTime)\n  nameWithType: Convert.ToInt16(DateTime)\n  fullName: Convert.ToInt16(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static short ToInt16 (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.Int16\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.Char)\n  commentId: M:System.Convert.ToInt16(System.Char)\n  id: ToInt16(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(Char)\n  nameWithType: Convert.ToInt16(Char)\n  fullName: Convert.ToInt16(Char)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Char> values to a 16-bit signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt16#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#3)]\\n [!code-vb[System.Convert.ToInt16#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#3)]\"\n  syntax:\n    content: public static short ToInt16 (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.Byte)\n  commentId: M:System.Convert.ToInt16(System.Byte)\n  id: ToInt16(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(Byte)\n  nameWithType: Convert.ToInt16(Byte)\n  fullName: Convert.ToInt16(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of <xref:System.Byte> values to a 16-bit signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt16#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#2)]\\n [!code-vb[System.Convert.ToInt16#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#2)]\"\n  syntax:\n    content: public static short ToInt16 (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt16*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.Boolean)\n  commentId: M:System.Convert.ToInt16(System.Boolean)\n  id: ToInt16(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(Boolean)\n  nameWithType: Convert.ToInt16(Boolean)\n  fullName: Convert.ToInt16(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to the equivalent 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts the Boolean values `true` and `false` to <xref:System.Int16> values.  \\n  \\n [!code-csharp[System.Convert.ToInt16#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#1)]\\n [!code-vb[System.Convert.ToInt16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#1)]\"\n  syntax:\n    content: public static short ToInt16 (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.Int16\n      description: The number 1 if <code>value</code> is `true`; otherwise, 0.\n  overload: System.Convert.ToInt16*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt16(System.Int64)\n  commentId: M:System.Convert.ToInt16(System.Int64)\n  id: ToInt16(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt16(Int64)\n  nameWithType: Convert.ToInt16(Int64)\n  fullName: Convert.ToInt16(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of long integers to a 16-bit signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt16#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#7)]\\n [!code-vb[System.Convert.ToInt16#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#7)]\"\n  syntax:\n    content: public static short ToInt16 (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int16.MaxValue\"></xref> or less than <xref href=\"System.Int16.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.Single)\n  commentId: M:System.Convert.ToInt32(System.Single)\n  id: ToInt32(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(Single)\n  nameWithType: Convert.ToInt32(Single)\n  fullName: Convert.ToInt32(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Single> values to an integer.  \\n  \\n [!code-csharp[System.Convert.ToInt32#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#10)]\\n [!code-vb[System.Convert.ToInt32#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#10)]\"\n  syntax:\n    content: public static int ToInt32 (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to convert.\n    return:\n      type: System.Int32\n      description: <code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref> or less than <xref href=\"System.Int32.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.UInt16)\n  commentId: M:System.Convert.ToInt32(System.UInt16)\n  id: ToInt32(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(UInt16)\n  nameWithType: Convert.ToInt32(UInt16)\n  fullName: Convert.ToInt32(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of 16-bit unsigned integers to an integer.  \\n  \\n [!code-csharp[System.Convert.ToInt32#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#12)]\\n [!code-vb[System.Convert.ToInt32#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#12)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static int ToInt32 (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt32*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.UInt32)\n  commentId: M:System.Convert.ToInt32(System.UInt32)\n  id: ToInt32(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(UInt32)\n  nameWithType: Convert.ToInt32(UInt32)\n  fullName: Convert.ToInt32(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of unsigned integers to a signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt32#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#13)]\\n [!code-vb[System.Convert.ToInt32#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#13)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static int ToInt32 (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.SByte)\n  commentId: M:System.Convert.ToInt32(System.SByte)\n  id: ToInt32(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(SByte)\n  nameWithType: Convert.ToInt32(SByte)\n  fullName: Convert.ToInt32(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of signed bytes to an integer.  \\n  \\n [!code-csharp[System.Convert.ToInt32#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#9)]\\n [!code-vb[System.Convert.ToInt32#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static int ToInt32 (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.Int32\n      description: A 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt32*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToInt32(System.Object,System.IFormatProvider)\n  id: ToInt32(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(Object, IFormatProvider)\n  nameWithType: Convert.ToInt32(Object, IFormatProvider)\n  fullName: Convert.ToInt32(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.IConvertible.ToInt32%2A?displayProperty=fullName> method of the underlying type of `value`.  \\n  \\n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \\n  \\n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.\"\n  example:\n  - \"The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToInt32` method. This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  \\n  \\n [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]\\n [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]\\n [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]\"\n  syntax:\n    content: public static int ToInt32 (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToInt32*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToInt32(System.String,System.IFormatProvider)\n  id: ToInt32(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(String, IFormatProvider)\n  nameWithType: Convert.ToInt32(String, IFormatProvider)\n  fullName: Convert.ToInt32(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.Int32.Parse%2A?displayProperty=fullName> method on `value`.  \\n  \\n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string \\\"pos\\\" as the positive sign and the string \\\"neg\\\" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  \\n  \\n [!code-csharp[System.Convert.ToInt32#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_2.cs#15)]\\n [!code-vb[System.Convert.ToInt32#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_2.vb#15)]\"\n  syntax:\n    content: public static int ToInt32 (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToInt32*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.String,System.Int32)\n  commentId: M:System.Convert.ToInt32(System.String,System.Int32)\n  id: ToInt32(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(String, Int32)\n  nameWithType: Convert.ToInt32(String, Int32)\n  fullName: Convert.ToInt32(String, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.\n  remarks: \"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \\\"0x\\\" or \\\"0X\\\".  \\n  \\n Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int32> data type is converted to an <xref:System.Int32> value without the method throwing an exception. The following example increments <xref:System.Int32?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \\\"0x80000000 converts to -2147483648.\\\"  \\n  \\n [!code-cpp[System.Convert.BaseConversion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#1)]\\n [!code-csharp[System.Convert.BaseConversion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#1)]\\n [!code-vb[System.Convert.BaseConversion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#1)]  \\n  \\n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.  \\n  \\n [!code-cpp[System.Convert.BaseConversion#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#2)]\\n [!code-csharp[System.Convert.BaseConversion#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#2)]\\n [!code-vb[System.Convert.BaseConversion#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#2)]\"\n  syntax:\n    content: public static int ToInt32 (string value, int fromBase);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: fromBase\n      type: System.Int32\n      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToInt32*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>fromBase</code> is not 2, 8, 10, or 16.  \\n  \\n -or-  \\n  \\n <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>value</code> is <xref href=\"System.String.Empty\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  \\n  \\n -or-  \\n  \\n <code>value</code> represents a number that is less than <xref href=\\\"System.Int32.MinValue\\\"></xref> or greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.UInt64)\n  commentId: M:System.Convert.ToInt32(System.UInt64)\n  id: ToInt32(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(UInt64)\n  nameWithType: Convert.ToInt32(UInt64)\n  fullName: Convert.ToInt32(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of unsigned long integers to a signed integer.  \\n  \\n [!code-csharp[System.Convert.ToInt32#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#14)]\\n [!code-vb[System.Convert.ToInt32#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#14)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static int ToInt32 (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.Object)\n  commentId: M:System.Convert.ToInt32(System.Object)\n  id: ToInt32(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(Object)\n  nameWithType: Convert.ToInt32(Object)\n  fullName: Convert.ToInt32(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a 32-bit signed integer.\n  remarks: If`value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt32%2A?displayProperty=fullName>implementation of the underlying type of `value`.\n  example:\n  - \"The following example attempts to convert each element in an object array to an integer.  \\n  \\n [!code-csharp[System.Convert.ToInt32#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#8)]\\n [!code-vb[System.Convert.ToInt32#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#8)]\"\n  syntax:\n    content: public static int ToInt32 (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToInt32*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the  <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.String)\n  commentId: M:System.Convert.ToInt32(System.String)\n  id: ToInt32(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(String)\n  nameWithType: Convert.ToInt32(String)\n  fullName: Convert.ToInt32(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 32-bit signed integer.\n  remarks: \"Using the <xref:System.Convert.ToInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int32.Parse%28System.String%29?displayProperty=fullName> method.`value` is interpreted by using the formatting conventions of the current thread culture.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example attempts to convert each element in a numeric string array to an integer.  \\n  \\n [!code-csharp[System.Convert.ToInt32#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#11)]\\n [!code-vb[System.Convert.ToInt32#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#11)]\"\n  syntax:\n    content: public static int ToInt32 (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToInt32*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.Int32)\n  commentId: M:System.Convert.ToInt32(System.Int32)\n  id: ToInt32(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(Int32)\n  nameWithType: Convert.ToInt32(Int32)\n  fullName: Convert.ToInt32(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 32-bit signed integer; no actual conversion is performed.\n  syntax:\n    content: public static int ToInt32 (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to return.\n    return:\n      type: System.Int32\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToInt32*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.Byte)\n  commentId: M:System.Convert.ToInt32(System.Byte)\n  id: ToInt32(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(Byte)\n  nameWithType: Convert.ToInt32(Byte)\n  fullName: Convert.ToInt32(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of bytes to an integer.  \\n  \\n [!code-csharp[System.Convert.ToInt32#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#2)]\\n [!code-vb[System.Convert.ToInt32#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#2)]\"\n  syntax:\n    content: public static int ToInt32 (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt32*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.Char)\n  commentId: M:System.Convert.ToInt32(System.Char)\n  id: ToInt32(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(Char)\n  nameWithType: Convert.ToInt32(Char)\n  fullName: Convert.ToInt32(Char)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.\n  remarks: The <xref:System.Convert.ToInt32%28System.Char%29> method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the `value` argument. If `value` is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value.\n  example:\n  - \"The following example converts each element in an array of <xref:System.Char> values to an integer.  \\n  \\n [!code-csharp[System.Convert.ToInt32#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#3)]\\n [!code-vb[System.Convert.ToInt32#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#3)]\"\n  syntax:\n    content: public static int ToInt32 (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt32*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.DateTime)\n  commentId: M:System.Convert.ToInt32(System.DateTime)\n  id: ToInt32(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(DateTime)\n  nameWithType: Convert.ToInt32(DateTime)\n  fullName: Convert.ToInt32(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static int ToInt32 (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.Int32\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToInt32*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.Boolean)\n  commentId: M:System.Convert.ToInt32(System.Boolean)\n  id: ToInt32(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(Boolean)\n  nameWithType: Convert.ToInt32(Boolean)\n  fullName: Convert.ToInt32(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to the equivalent 32-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts the <xref:System.Boolean> values `true` and `false` to integers.  \\n  \\n [!code-csharp[System.Convert.ToInt32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#1)]\\n [!code-vb[System.Convert.ToInt32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#1)]\"\n  syntax:\n    content: public static int ToInt32 (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.Int32\n      description: The number 1 if <code>value</code> is `true`; otherwise, 0.\n  overload: System.Convert.ToInt32*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.Double)\n  commentId: M:System.Convert.ToInt32(System.Double)\n  id: ToInt32(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(Double)\n  nameWithType: Convert.ToInt32(Double)\n  fullName: Convert.ToInt32(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Double> values to aninteger.  \\n  \\n [!code-csharp[System.Convert.ToInt32#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#5)]\\n [!code-vb[System.Convert.ToInt32#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#5)]\"\n  syntax:\n    content: public static int ToInt32 (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.Int32\n      description: <code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref> or less than <xref href=\"System.Int32.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.Int64)\n  commentId: M:System.Convert.ToInt32(System.Int64)\n  id: ToInt32(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(Int64)\n  nameWithType: Convert.ToInt32(Int64)\n  fullName: Convert.ToInt32(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of long integers to an integer.  \\n  \\n [!code-csharp[System.Convert.ToInt32#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#7)]\\n [!code-vb[System.Convert.ToInt32#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#7)]\"\n  syntax:\n    content: public static int ToInt32 (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref> or less than <xref href=\"System.Int32.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.Int16)\n  commentId: M:System.Convert.ToInt32(System.Int16)\n  id: ToInt32(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(Int16)\n  nameWithType: Convert.ToInt32(Int16)\n  fullName: Convert.ToInt32(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of 16-bit signed integers to an integer.  \\n  \\n [!code-csharp[System.Convert.ToInt32#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#6)]\\n [!code-vb[System.Convert.ToInt32#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#6)]\"\n  syntax:\n    content: public static int ToInt32 (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt32*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt32(System.Decimal)\n  commentId: M:System.Convert.ToInt32(System.Decimal)\n  id: ToInt32(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt32(Decimal)\n  nameWithType: Convert.ToInt32(Decimal)\n  fullName: Convert.ToInt32(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to an equivalent 32-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Decimal> values to an integer.  \\n  \\n [!code-csharp[System.Convert.ToInt32#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#4)]\\n [!code-vb[System.Convert.ToInt32#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#4)]\"\n  syntax:\n    content: public static int ToInt32 (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal number to convert.\n    return:\n      type: System.Int32\n      description: <code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref> or less than <xref href=\"System.Int32.MinValue\"></xref>.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.Single)\n  commentId: M:System.Convert.ToInt64(System.Single)\n  id: ToInt64(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(Single)\n  nameWithType: Convert.ToInt64(Single)\n  fullName: Convert.ToInt64(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Single> values to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#10)]\\n [!code-vb[System.Convert.ToInt64#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#10)]\"\n  syntax:\n    content: public static long ToInt64 (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to convert.\n    return:\n      type: System.Int64\n      description: <code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToInt64*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int64.MaxValue\"></xref> or less than <xref href=\"System.Int64.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.String,System.Int32)\n  commentId: M:System.Convert.ToInt64(System.String,System.Int32)\n  id: ToInt64(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(String, Int32)\n  nameWithType: Convert.ToInt64(String, Int32)\n  fullName: Convert.ToInt64(String, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.\n  remarks: \"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \\\"0x\\\" or \\\"0X\\\".  \\n  \\n Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int64> data type is converted to an <xref:System.Int64> value without the method throwing an exception. The following example converts <xref:System.UInt64.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \\\"0xFFFFFFFFFFFFFFFF converts to -1.\\\"  \\n  \\n [!code-csharp[System.Convert.BaseConversion#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#7)]\\n [!code-vb[System.Convert.BaseConversion#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#7)]  \\n  \\n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on.  \\n  \\n [!code-csharp[System.Convert.BaseConversion#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#8)]\\n [!code-vb[System.Convert.BaseConversion#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#8)]  \\n  \\n The following example attempts to interpret each element in a string array as a hexadecimal string and convert it to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_2.cs#15)]\\n [!code-vb[System.Convert.ToInt64#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_2.vb#15)]\"\n  syntax:\n    content: public static long ToInt64 (string value, int fromBase);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: fromBase\n      type: System.Int32\n      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToInt64*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>fromBase</code> is not 2, 8, 10, or 16.  \\n  \\n -or-  \\n  \\n <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>value</code> is <xref href=\"System.String.Empty\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  \\n  \\n -or-  \\n  \\n <code>value</code> represents a number that is less than <xref href=\\\"System.Int64.MinValue\\\"></xref> or greater than <xref href=\\\"System.Int64.MaxValue\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToInt64(System.String,System.IFormatProvider)\n  id: ToInt64(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(String, IFormatProvider)\n  nameWithType: Convert.ToInt64(String, IFormatProvider)\n  fullName: Convert.ToInt64(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.Int64.Parse%2A?displayProperty=fullName> method on `value`.  \\n  \\n `provider` is an `IFormatProvider` instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The `NumberFormatInfo` object provides culture-specific information about the format of `value`. If `provider` is `null`, the `NumberFormatInfo` for the current culture is used.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string \\\"pos\\\" as the positive sign and the string \\\"neg\\\" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  \\n  \\n [!code-csharp[System.Convert.ToInt64#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_3.cs#16)]\\n [!code-vb[System.Convert.ToInt64#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_3.vb#16)]\"\n  syntax:\n    content: public static long ToInt64 (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToInt64*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToInt64(System.Object,System.IFormatProvider)\n  id: ToInt64(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(Object, IFormatProvider)\n  nameWithType: Convert.ToInt64(Object, IFormatProvider)\n  fullName: Convert.ToInt64(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.IConvertible.ToInt64%2A?displayProperty=fullName> method of the underlying type of `value`.  \\n  \\n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \\n  \\n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.\"\n  example:\n  - \"The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToInt64` method. This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  \\n  \\n [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]\\n [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]\\n [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]\"\n  syntax:\n    content: public static long ToInt64 (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToInt64*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.UInt64)\n  commentId: M:System.Convert.ToInt64(System.UInt64)\n  id: ToInt64(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(UInt64)\n  nameWithType: Convert.ToInt64(UInt64)\n  fullName: Convert.ToInt64(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of unsigned long integers to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#14)]\\n [!code-vb[System.Convert.ToInt64#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#14)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static long ToInt64 (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt64*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int64.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.UInt32)\n  commentId: M:System.Convert.ToInt64(System.UInt32)\n  id: ToInt64(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(UInt32)\n  nameWithType: Convert.ToInt64(UInt32)\n  fullName: Convert.ToInt64(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of unsigned integers to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#13)]\\n [!code-vb[System.Convert.ToInt64#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#13)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static long ToInt64 (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt64*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.UInt16)\n  commentId: M:System.Convert.ToInt64(System.UInt16)\n  id: ToInt64(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(UInt16)\n  nameWithType: Convert.ToInt64(UInt16)\n  fullName: Convert.ToInt64(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of 16-bit unsigned integers to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#12)]\\n [!code-vb[System.Convert.ToInt64#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#12)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static long ToInt64 (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt64*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.String)\n  commentId: M:System.Convert.ToInt64(System.String)\n  id: ToInt64(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(String)\n  nameWithType: Convert.ToInt64(String)\n  fullName: Convert.ToInt64(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 64-bit signed integer.\n  remarks: \"Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example attempts to convert each element in an array of numeric strings to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#11)]\\n [!code-vb[System.Convert.ToInt64#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#11)]\"\n  syntax:\n    content: public static long ToInt64 (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains a number to convert.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToInt64*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.SByte)\n  commentId: M:System.Convert.ToInt64(System.SByte)\n  id: ToInt64(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(SByte)\n  nameWithType: Convert.ToInt64(SByte)\n  fullName: Convert.ToInt64(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in a signed byte array to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#9)]\\n [!code-vb[System.Convert.ToInt64#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static long ToInt64 (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt64*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.Object)\n  commentId: M:System.Convert.ToInt64(System.Object)\n  id: ToInt64(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(Object)\n  nameWithType: Convert.ToInt64(Object)\n  fullName: Convert.ToInt64(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a 64-bit signed integer.\n  remarks: If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt64%2A?displayProperty=fullName> implementation of the underlying type of `value`.\n  example:\n  - \"The following example attempts to convert each element in an object array to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#8)]\\n [!code-vb[System.Convert.ToInt64#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#8)]\"\n  syntax:\n    content: public static long ToInt64 (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToInt64*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.Int64)\n  commentId: M:System.Convert.ToInt64(System.Int64)\n  id: ToInt64(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(Int64)\n  nameWithType: Convert.ToInt64(Int64)\n  fullName: Convert.ToInt64(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 64-bit signed integer; no actual conversion is performed.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of integers to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#7)]\\n [!code-vb[System.Convert.ToInt64#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#7)]\"\n  syntax:\n    content: public static long ToInt64 (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: A 64-bit signed integer.\n    return:\n      type: System.Int64\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToInt64*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.Byte)\n  commentId: M:System.Convert.ToInt64(System.Byte)\n  id: ToInt64(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(Byte)\n  nameWithType: Convert.ToInt64(Byte)\n  fullName: Convert.ToInt64(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of bytes to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#2)]\\n [!code-vb[System.Convert.ToInt64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#2)]\"\n  syntax:\n    content: public static long ToInt64 (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt64*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.Char)\n  commentId: M:System.Convert.ToInt64(System.Char)\n  id: ToInt64(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(Char)\n  nameWithType: Convert.ToInt64(Char)\n  fullName: Convert.ToInt64(Char)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in a <xref:System.Char> array to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#3)]\\n [!code-vb[System.Convert.ToInt64#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#3)]\"\n  syntax:\n    content: public static long ToInt64 (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt64*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.DateTime)\n  commentId: M:System.Convert.ToInt64(System.DateTime)\n  id: ToInt64(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(DateTime)\n  nameWithType: Convert.ToInt64(DateTime)\n  fullName: Convert.ToInt64(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static long ToInt64 (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.Int64\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToInt64*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.Boolean)\n  commentId: M:System.Convert.ToInt64(System.Boolean)\n  id: ToInt64(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(Boolean)\n  nameWithType: Convert.ToInt64(Boolean)\n  fullName: Convert.ToInt64(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to the equivalent 64-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts the <xref:System.Boolean> values `true` and `false` to long integers.  \\n  \\n [!code-csharp[System.Convert.ToInt64#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#1)]\\n [!code-vb[System.Convert.ToInt64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#1)]\"\n  syntax:\n    content: public static long ToInt64 (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.Int64\n      description: The number 1 if <code>value</code> is `true`; otherwise, 0.\n  overload: System.Convert.ToInt64*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.Double)\n  commentId: M:System.Convert.ToInt64(System.Double)\n  id: ToInt64(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(Double)\n  nameWithType: Convert.ToInt64(Double)\n  fullName: Convert.ToInt64(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Double> values to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#5)]\\n [!code-vb[System.Convert.ToInt64#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#5)]\"\n  syntax:\n    content: public static long ToInt64 (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.Int64\n      description: <code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToInt64*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int64.MaxValue\"></xref> or less than <xref href=\"System.Int64.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.Int16)\n  commentId: M:System.Convert.ToInt64(System.Int16)\n  id: ToInt64(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(Int16)\n  nameWithType: Convert.ToInt64(Int16)\n  fullName: Convert.ToInt64(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of 16-bit integers to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#6)]\\n [!code-vb[System.Convert.ToInt64#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#6)]\"\n  syntax:\n    content: public static long ToInt64 (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt64*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.Int32)\n  commentId: M:System.Convert.ToInt64(System.Int32)\n  id: ToInt64(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(Int32)\n  nameWithType: Convert.ToInt64(Int32)\n  fullName: Convert.ToInt64(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.\n  syntax:\n    content: public static long ToInt64 (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToInt64*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToInt64(System.Decimal)\n  commentId: M:System.Convert.ToInt64(System.Decimal)\n  id: ToInt64(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToInt64(Decimal)\n  nameWithType: Convert.ToInt64(Decimal)\n  fullName: Convert.ToInt64(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to an equivalent 64-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Decimal> values to a long integer.  \\n  \\n [!code-csharp[System.Convert.ToInt64#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#4)]\\n [!code-vb[System.Convert.ToInt64#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#4)]\"\n  syntax:\n    content: public static long ToInt64 (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal number to convert.\n    return:\n      type: System.Int64\n      description: <code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToInt64*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.Int64.MaxValue\"></xref> or less than <xref href=\"System.Int64.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.SByte)\n  commentId: M:System.Convert.ToSByte(System.SByte)\n  id: ToSByte(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(SByte)\n  nameWithType: Convert.ToSByte(SByte)\n  fullName: Convert.ToSByte(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 8-bit signed integer; no actual conversion is performed.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to return.\n    return:\n      type: System.SByte\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToSByte*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.String,System.Int32)\n  commentId: M:System.Convert.ToSByte(System.String,System.Int32)\n  id: ToSByte(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(String, Int32)\n  nameWithType: Convert.ToSByte(String, Int32)\n  fullName: Convert.ToSByte(String, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.\n  remarks: \"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \\\"0x\\\" or \\\"0X\\\".  \\n  \\n Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.SByte> data type is converted to an <xref:System.SByte> value without the method throwing an exception. The following example converts <xref:System.Byte.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \\\"0xff converts to -1.\\\"  \\n  \\n [!code-csharp[System.Convert.BaseConversion#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#9)]\\n [!code-vb[System.Convert.BaseConversion#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#9)]  \\n  \\n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on.  \\n  \\n [!code-csharp[System.Convert.BaseConversion#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#10)]\\n [!code-vb[System.Convert.BaseConversion#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#10)]\"\n  example:\n  - \"The following example attempts to interpret the elements in a string array as the binary, octal, and hexadecimal representation of numeric values in order to convert them to unsigned bytes.  \\n  \\n [!code-csharp[System.Convert.ToSByte#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte3.cs#16)]\\n [!code-vb[System.Convert.ToSByte#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte3.vb#16)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (string value, int fromBase);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: fromBase\n      type: System.Int32\n      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>fromBase</code> is not 2, 8, 10, or 16.  \\n  \\n -or-  \\n  \\n <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>value</code> is <xref href=\"System.String.Empty\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  \\n  \\n -or-  \\n  \\n <code>value</code> represents a number that is less than <xref href=\\\"System.SByte.MinValue\\\"></xref> or greater than <xref href=\\\"System.SByte.MaxValue\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToSByte(System.String,System.IFormatProvider)\n  id: ToSByte(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(String, IFormatProvider)\n  nameWithType: Convert.ToSByte(String, IFormatProvider)\n  fullName: Convert.ToSByte(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.\n  remarks: \"`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example converts string representations of <xref:System.SByte> values with the `ToSByte` method, using an <xref:System.IFormatProvider> object.  \\n  \\n [!code-cpp[System.Convert.ToSInts_String#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/tosbyte.cpp#4)]\\n [!code-csharp[System.Convert.ToSInts_String#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/tosbyte.cs#4)]\\n [!code-vb[System.Convert.ToSInts_String#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/tosbyte.vb#4)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToSByte(System.Object,System.IFormatProvider)\n  id: ToSByte(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(Object, IFormatProvider)\n  nameWithType: Convert.ToSByte(Object, IFormatProvider)\n  fullName: Convert.ToSByte(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.\n  remarks: \"`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \\n  \\n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.\"\n  example:\n  - \"The following example defines a `ByteString` class that stores both signed and unsigned bytes as hexadecimal strings along with a field that indicates the sign of the byte. The `ByteString` class implements the <xref:System.IConvertible> interface. Its <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName> method calls the <xref:System.SByte.Parse%28System.String%2CSystem.IFormatProvider%29> method to perform the conversion. If it fails, it throws an <xref:System.OverflowException>.  \\n  \\n [!code-csharp[System.Convert.ToSByte#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte2.cs#14)]\\n [!code-vb[System.Convert.ToSByte#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte2.vb#14)]  \\n  \\n The following example shows how the <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName> implementation of the `ByteString` class is called by the <xref:System.Convert.ToSByte%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName> method.  \\n  \\n [!code-csharp[System.Convert.ToSByte#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte2.cs#15)]\\n [!code-vb[System.Convert.ToSByte#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte2.vb#15)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.UInt64)\n  commentId: M:System.Convert.ToSByte(System.UInt64)\n  id: ToSByte(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(UInt64)\n  nameWithType: Convert.ToSByte(UInt64)\n  fullName: Convert.ToSByte(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of long integers to a signed byte.  \\n  \\n [!code-csharp[System.Convert.ToSByte#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#13)]\\n [!code-vb[System.Convert.ToSByte#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#13)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.UInt32)\n  commentId: M:System.Convert.ToSByte(System.UInt32)\n  id: ToSByte(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(UInt32)\n  nameWithType: Convert.ToSByte(UInt32)\n  fullName: Convert.ToSByte(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an integer array to a signed byte.  \\n  \\n [!code-csharp[System.Convert.ToSByte#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#12)]\\n [!code-vb[System.Convert.ToSByte#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#12)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.String)\n  commentId: M:System.Convert.ToSByte(System.String)\n  id: ToSByte(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(String)\n  nameWithType: Convert.ToSByte(String)\n  fullName: Convert.ToSByte(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 8-bit signed integer.\n  remarks: \"Using the <xref:System.Convert.ToSByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.SByte.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example converts string representations of <xref:System.SByte> values with the `ToSByte` method, using default formatting.  \\n  \\n [!code-cpp[System.Convert.ToSInts_String#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/tosbyte.cpp#4)]\\n [!code-csharp[System.Convert.ToSInts_String#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/tosbyte.cs#4)]\\n [!code-vb[System.Convert.ToSInts_String#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/tosbyte.vb#4)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if value is `null`.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.Single)\n  commentId: M:System.Convert.ToSByte(System.Single)\n  id: ToSByte(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(Single)\n  nameWithType: Convert.ToSByte(Single)\n  fullName: Convert.ToSByte(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Single> values to a signed byte.  \\n  \\n [!code-csharp[System.Convert.ToSByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#9)]\\n [!code-vb[System.Convert.ToSByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to convert.\n    return:\n      type: System.SByte\n      description: <code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.Object)\n  commentId: M:System.Convert.ToSByte(System.Object)\n  id: ToSByte(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(Object)\n  nameWithType: Convert.ToSByte(Object)\n  fullName: Convert.ToSByte(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to an 8-bit signed integer.\n  remarks: The return value is the result of invoking the <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName> method of the underlying type of `value`.\n  example:\n  - \"The following example attempts to convert each element in an object array to a signed byte.  \\n  \\n [!code-csharp[System.Convert.ToSByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#9)]\\n [!code-vb[System.Convert.ToSByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.UInt16)\n  commentId: M:System.Convert.ToSByte(System.UInt16)\n  id: ToSByte(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(UInt16)\n  nameWithType: Convert.ToSByte(UInt16)\n  fullName: Convert.ToSByte(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of unsigned 16-bit integers to a signed byte.  \\n  \\n [!code-csharp[System.Convert.ToSByte#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#11)]\\n [!code-vb[System.Convert.ToSByte#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#11)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.Int32)\n  commentId: M:System.Convert.ToSByte(System.Int32)\n  id: ToSByte(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(Int32)\n  nameWithType: Convert.ToSByte(Int32)\n  fullName: Convert.ToSByte(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of signed integers to a signed byte.  \\n  \\n [!code-csharp[System.Convert.ToSByte#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#7)]\\n [!code-vb[System.Convert.ToSByte#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#7)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.Int64)\n  commentId: M:System.Convert.ToSByte(System.Int64)\n  id: ToSByte(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(Int64)\n  nameWithType: Convert.ToSByte(Int64)\n  fullName: Convert.ToSByte(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of long integers to a signed byte.  \\n  \\n [!code-csharp[System.Convert.ToSByte#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#8)]\\n [!code-vb[System.Convert.ToSByte#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#8)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.Byte)\n  commentId: M:System.Convert.ToSByte(System.Byte)\n  id: ToSByte(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(Byte)\n  nameWithType: Convert.ToSByte(Byte)\n  fullName: Convert.ToSByte(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in a byte array to a signed byte.  \\n  \\n [!code-csharp[System.Convert.ToSByte#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#2)]\\n [!code-vb[System.Convert.ToSByte#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#2)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.Char)\n  commentId: M:System.Convert.ToSByte(System.Char)\n  id: ToSByte(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(Char)\n  nameWithType: Convert.ToSByte(Char)\n  fullName: Convert.ToSByte(Char)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Char> values to a signed byte.  \\n  \\n [!code-csharp[System.Convert.ToSByte#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#3)]\\n [!code-vb[System.Convert.ToSByte#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#3)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.DateTime)\n  commentId: M:System.Convert.ToSByte(System.DateTime)\n  id: ToSByte(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(DateTime)\n  nameWithType: Convert.ToSByte(DateTime)\n  fullName: Convert.ToSByte(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.SByte\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.Boolean)\n  commentId: M:System.Convert.ToSByte(System.Boolean)\n  id: ToSByte(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(Boolean)\n  nameWithType: Convert.ToSByte(Boolean)\n  fullName: Convert.ToSByte(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to the equivalent 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example converts the Boolean values `true` and `false` to signed byte values.  \\n  \\n [!code-csharp[System.Convert.ToSByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#1)]\\n [!code-vb[System.Convert.ToSByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.SByte\n      description: The number 1 if <code>value</code> is `true`; otherwise, 0.\n  overload: System.Convert.ToSByte*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.Double)\n  commentId: M:System.Convert.ToSByte(System.Double)\n  id: ToSByte(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(Double)\n  nameWithType: Convert.ToSByte(Double)\n  fullName: Convert.ToSByte(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Double> values to a signed byte.  \\n  \\n [!code-csharp[System.Convert.ToSByte#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#5)]\\n [!code-vb[System.Convert.ToSByte#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#5)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.SByte\n      description: <code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.Int16)\n  commentId: M:System.Convert.ToSByte(System.Int16)\n  id: ToSByte(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(Int16)\n  nameWithType: Convert.ToSByte(Int16)\n  fullName: Convert.ToSByte(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of signed 16-bit integers to a signed byte.  \\n  \\n [!code-csharp[System.Convert.ToSByte#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#6)]\\n [!code-vb[System.Convert.ToSByte#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#6)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSByte(System.Decimal)\n  commentId: M:System.Convert.ToSByte(System.Decimal)\n  id: ToSByte(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSByte(Decimal)\n  nameWithType: Convert.ToSByte(Decimal)\n  fullName: Convert.ToSByte(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to an equivalent 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Decimal> values to a signed byte.  \\n  \\n [!code-csharp[System.Convert.ToSByte#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#4)]\\n [!code-vb[System.Convert.ToSByte#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#4)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte ToSByte (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal number to convert.\n    return:\n      type: System.SByte\n      description: <code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToSByte*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.SByte.MaxValue\"></xref> or less than <xref href=\"System.SByte.MinValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToSingle(System.String,System.IFormatProvider)\n  id: ToSingle(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(String, IFormatProvider)\n  nameWithType: Convert.ToSingle(String, IFormatProvider)\n  fullName: Convert.ToSingle(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.Single.Parse%2A?displayProperty=fullName> method on `value`.  \\n  \\n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example uses <xref:System.IFormatProvider> objects that represent the en-US and fr-FR cultures when it converts the elements in an array of numeric strings to <xref:System.Single> values.  \\n  \\n [!code-csharp[System.Convert.ToSingle#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle3.cs#16)]\\n [!code-vb[System.Convert.ToSingle#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle3.vb#16)]\"\n  syntax:\n    content: public static float ToSingle (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Single\n      description: A single-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToSingle*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not a number in a valid format.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Single.MinValue\"></xref> or greater than <xref href=\"System.Single.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.SByte)\n  commentId: M:System.Convert.ToSingle(System.SByte)\n  id: ToSingle(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(SByte)\n  nameWithType: Convert.ToSingle(SByte)\n  fullName: Convert.ToSingle(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in a signed byte array to a <xref:System.Single> value.  \\n  \\n [!code-csharp[System.Convert.ToSingle#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#9)]\\n [!code-vb[System.Convert.ToSingle#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static float ToSingle (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.Single\n      description: An 8-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSingle*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToSingle(System.Object,System.IFormatProvider)\n  id: ToSingle(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(Object, IFormatProvider)\n  nameWithType: Convert.ToSingle(Object, IFormatProvider)\n  fullName: Convert.ToSingle(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method of the underlying type of `value`.  \\n  \\n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \\n  \\n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.\"\n  example:\n  - \"The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface. Its implementation of the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method returns the internal value of a private <xref:System.Single> variable that represents the temperature.  \\n  \\n [!code-csharp[System.Convert.ToSingle#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle2.cs#14)]\\n [!code-vb[System.Convert.ToSingle#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle2.vb#14)]  \\n  \\n The following example illustrates how a call to the <xref:System.Convert.ToSingle%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName> method, in turn, calls the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> implementation of the `Temperature` class.  \\n  \\n [!code-csharp[System.Convert.ToSingle#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle2.cs#15)]\\n [!code-vb[System.Convert.ToSingle#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle2.vb#15)]\"\n  syntax:\n    content: public static float ToSingle (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.Single\n      description: A single-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToSingle*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Single.MinValue\"></xref> or greater than <xref href=\"System.Single.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.UInt64)\n  commentId: M:System.Convert.ToSingle(System.UInt64)\n  id: ToSingle(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(UInt64)\n  nameWithType: Convert.ToSingle(UInt64)\n  fullName: Convert.ToSingle(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of unsigned long integers to a <xref:System.Single> value.  \\n  \\n [!code-csharp[System.Convert.ToSingle#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#13)]\\n [!code-vb[System.Convert.ToSingle#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#13)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static float ToSingle (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.Single\n      description: A single-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSingle*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.UInt32)\n  commentId: M:System.Convert.ToSingle(System.UInt32)\n  id: ToSingle(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(UInt32)\n  nameWithType: Convert.ToSingle(UInt32)\n  fullName: Convert.ToSingle(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of unsigned integers to a <xref:System.Single> value.  \\n  \\n [!code-csharp[System.Convert.ToSingle#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#12)]\\n [!code-vb[System.Convert.ToSingle#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#12)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static float ToSingle (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.Single\n      description: A single-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSingle*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.String)\n  commentId: M:System.Convert.ToSingle(System.String)\n  id: ToSingle(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(String)\n  nameWithType: Convert.ToSingle(String)\n  fullName: Convert.ToSingle(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent single-precision floating-point number.\n  remarks: \"Using the <xref:System.Convert.ToSingle%28System.String%29> method is equivalent to passing `value` to the <xref:System.Single.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example attempts to convert each element in an array of numeric strings to a <xref:System.Single> value.  \\n  \\n [!code-csharp[System.Convert.ToSingle#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#10)]\\n [!code-vb[System.Convert.ToSingle#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#10)]\"\n  syntax:\n    content: public static float ToSingle (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    return:\n      type: System.Single\n      description: A single-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToSingle*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not a number in a valid format.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Single.MinValue\"></xref> or greater than <xref href=\"System.Single.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.Single)\n  commentId: M:System.Convert.ToSingle(System.Single)\n  id: ToSingle(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(Single)\n  nameWithType: Convert.ToSingle(Single)\n  fullName: Convert.ToSingle(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified single-precision floating-point number; no actual conversion is performed.\n  syntax:\n    content: public static float ToSingle (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to return.\n    return:\n      type: System.Single\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToSingle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.Object)\n  commentId: M:System.Convert.ToSingle(System.Object)\n  id: ToSingle(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(Object)\n  nameWithType: Convert.ToSingle(Object)\n  fullName: Convert.ToSingle(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a single-precision floating-point number.\n  remarks: The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method of the underlying type of `value`.\n  example:\n  - \"The following example attempts to convert each element in an object array to a <xref:System.Single> value.  \\n  \\n [!code-csharp[System.Convert.ToSingle#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#8)]\\n [!code-vb[System.Convert.ToSingle#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#8)]\"\n  syntax:\n    content: public static float ToSingle (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.Single\n      description: A single-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToSingle*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.Single.MinValue\"></xref> or greater than <xref href=\"System.Single.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.UInt16)\n  commentId: M:System.Convert.ToSingle(System.UInt16)\n  id: ToSingle(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(UInt16)\n  nameWithType: Convert.ToSingle(UInt16)\n  fullName: Convert.ToSingle(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of unsigned 16-bit integers to a <xref:System.Single> value.  \\n  \\n [!code-csharp[System.Convert.ToSingle#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#11)]\\n [!code-vb[System.Convert.ToSingle#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#11)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static float ToSingle (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.Single\n      description: A single-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSingle*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.Int32)\n  commentId: M:System.Convert.ToSingle(System.Int32)\n  id: ToSingle(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(Int32)\n  nameWithType: Convert.ToSingle(Int32)\n  fullName: Convert.ToSingle(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an integer array to a <xref:System.Single> value.  \\n  \\n [!code-csharp[System.Convert.ToSingle#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#6)]\\n [!code-vb[System.Convert.ToSingle#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#6)]\"\n  syntax:\n    content: public static float ToSingle (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.Single\n      description: A single-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSingle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.Int16)\n  commentId: M:System.Convert.ToSingle(System.Int16)\n  id: ToSingle(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(Int16)\n  nameWithType: Convert.ToSingle(Int16)\n  fullName: Convert.ToSingle(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of 16-bit integers to a <xref:System.Single> value.  \\n  \\n [!code-csharp[System.Convert.ToSingle#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#5)]\\n [!code-vb[System.Convert.ToSingle#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#5)]\"\n  syntax:\n    content: public static float ToSingle (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.Single\n      description: A single-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSingle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.Double)\n  commentId: M:System.Convert.ToSingle(System.Double)\n  id: ToSingle(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(Double)\n  nameWithType: Convert.ToSingle(Double)\n  fullName: Convert.ToSingle(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of <xref:System.Double> values to a <xref:System.Single> value.  \\n  \\n [!code-csharp[System.Convert.ToSingle#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#4)]\\n [!code-vb[System.Convert.ToSingle#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#4)]\"\n  syntax:\n    content: public static float ToSingle (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.Single\n      description: \"A single-precision floating-point number that is equivalent to <code>value</code>.  \\n  \\n <code>value</code> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.\"\n  overload: System.Convert.ToSingle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.Decimal)\n  commentId: M:System.Convert.ToSingle(System.Decimal)\n  id: ToSingle(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(Decimal)\n  nameWithType: Convert.ToSingle(Decimal)\n  fullName: Convert.ToSingle(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to an equivalent single-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of <xref:System.Decimal> values to a <xref:System.Single> value.  \\n  \\n [!code-csharp[System.Convert.ToSingle#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#3)]\\n [!code-vb[System.Convert.ToSingle#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#3)]\"\n  syntax:\n    content: public static float ToSingle (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal number to convert.\n    return:\n      type: System.Single\n      description: \"A single-precision floating-point number that is equivalent to <code>value</code>.  \\n  \\n <code>value</code> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.\"\n  overload: System.Convert.ToSingle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.DateTime)\n  commentId: M:System.Convert.ToSingle(System.DateTime)\n  id: ToSingle(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(DateTime)\n  nameWithType: Convert.ToSingle(DateTime)\n  fullName: Convert.ToSingle(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static float ToSingle (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.Single\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToSingle*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.Char)\n  commentId: M:System.Convert.ToSingle(System.Char)\n  id: ToSingle(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(Char)\n  nameWithType: Convert.ToSingle(Char)\n  fullName: Convert.ToSingle(Char)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: public static float ToSingle (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.Single\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToSingle*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.Byte)\n  commentId: M:System.Convert.ToSingle(System.Byte)\n  id: ToSingle(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(Byte)\n  nameWithType: Convert.ToSingle(Byte)\n  fullName: Convert.ToSingle(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of byte values to a <xref:System.Single> value.  \\n  \\n [!code-csharp[System.Convert.ToSingle#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#2)]\\n [!code-vb[System.Convert.ToSingle#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#2)]\"\n  syntax:\n    content: public static float ToSingle (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.Single\n      description: A single-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSingle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.Boolean)\n  commentId: M:System.Convert.ToSingle(System.Boolean)\n  id: ToSingle(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(Boolean)\n  nameWithType: Convert.ToSingle(Boolean)\n  fullName: Convert.ToSingle(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to the equivalent single-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts the Boolean values `true` and `false` to <xref:System.Single> values.  \\n  \\n [!code-csharp[System.Convert.ToSingle#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#1)]\\n [!code-vb[System.Convert.ToSingle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#1)]\"\n  syntax:\n    content: public static float ToSingle (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.Single\n      description: The number 1 if <code>value</code> is `true`; otherwise, 0.\n  overload: System.Convert.ToSingle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToSingle(System.Int64)\n  commentId: M:System.Convert.ToSingle(System.Int64)\n  id: ToSingle(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToSingle(Int64)\n  nameWithType: Convert.ToSingle(Int64)\n  fullName: Convert.ToSingle(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of long integers to a <xref:System.Single> value.  \\n  \\n [!code-csharp[System.Convert.ToSingle#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#7)]\\n [!code-vb[System.Convert.ToSingle#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#7)]\"\n  syntax:\n    content: public static float ToSingle (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.Single\n      description: A single-precision floating-point number that is equivalent to <code>value</code>.\n  overload: System.Convert.ToSingle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Int16,System.Int32)\n  commentId: M:System.Convert.ToString(System.Int16,System.Int32)\n  id: ToString(System.Int16,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Int16, Int32)\n  nameWithType: Convert.ToString(Int16, Int32)\n  fullName: Convert.ToString(Int16, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.\n  remarks: If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation. This means that the high-order bit of the high-order byte (bit 15) is interpreted as the sign bit. If the <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in an array of 16-bit signed integers to its equivalent binary, octal, decimal, and hexadecimal string representations.  \\n  \\n [!code-csharp[System.Convert.ToString2#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#10)]\\n [!code-vb[System.Convert.ToString2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#10)]\"\n  syntax:\n    content: public static string ToString (short value, int toBase);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    - id: toBase\n      type: System.Int32\n      description: The base of the return value, which must be 2, 8, 10, or 16.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code> in base <code>toBase</code>.\n  overload: System.Convert.ToString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>toBase</code> is not 2, 8, 10, or 16.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Int16,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Int16,System.IFormatProvider)\n  id: ToString(System.Int16,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Int16, IFormatProvider)\n  nameWithType: Convert.ToString(Int16, IFormatProvider)\n  fullName: Convert.ToString(Int16, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.\n  remarks: This implementation is identical to <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName>.\n  example:\n  - \"The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \\\"~\\\" and its positive sign as the string \\\"!\\\". It then calls the <xref:System.Convert.ToString%28System.Int16%2CSystem.IFormatProvider%29> method to convert each element in an array of 16-bit integers to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.  \\n  \\n [!code-csharp[System.Convert.ToString2#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#19)]\\n [!code-vb[System.Convert.ToString2#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#19)]\"\n  syntax:\n    content: public static string ToString (short value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.DateTime,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.DateTime,System.IFormatProvider)\n  id: ToString(System.DateTime,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(DateTime, IFormatProvider)\n  nameWithType: Convert.ToString(DateTime, IFormatProvider)\n  fullName: Convert.ToString(DateTime, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified <xref href=\"System.DateTime\"></xref> to its equivalent string representation, using the specified culture-specific formatting information.\n  remarks: This implementation is identical to <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=fullName>.\n  example:\n  - \"The following example converts a <xref:System.DateTime> value to its equivalent string representation in eight different cultures.  \\n  \\n [!code-csharp[System.Convert.ToString2#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#13)]\\n [!code-vb[System.Convert.ToString2#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#13)]\"\n  syntax:\n    content: public static string ToString (DateTime value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.UInt64,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.UInt64,System.IFormatProvider)\n  id: ToString(System.UInt64,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(UInt64, IFormatProvider)\n  nameWithType: Convert.ToString(UInt64, IFormatProvider)\n  fullName: Convert.ToString(UInt64, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.\n  remarks: This implementation is identical to <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName>.\n  example:\n  - \"The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \\\"~\\\" and its positive sign as the string \\\"!\\\". It then calls the <xref:System.Convert.ToString%28System.UInt64%2CSystem.IFormatProvider%29> method to convert an unsigned long integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object. The output indicates that this formatting information is not used, because by default the \\\"G\\\" format specifier does not include a positive sign with positive values.  \\n  \\n [!code-csharp[System.Convert.ToString2#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#24)]\\n [!code-vb[System.Convert.ToString2#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#24)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string ToString (ulong value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Decimal,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Decimal,System.IFormatProvider)\n  id: ToString(System.Decimal,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Decimal, IFormatProvider)\n  nameWithType: Convert.ToString(Decimal, IFormatProvider)\n  fullName: Convert.ToString(Decimal, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.\n  remarks: This implementation is identical to <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in an array of <xref:System.Decimal> values to its equivalent string representation in four different cultures.  \\n  \\n [!code-csharp[System.Convert.ToString2#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#14)]\\n [!code-vb[System.Convert.ToString2#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#14)]\"\n  syntax:\n    content: public static string ToString (decimal value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Int32,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Int32,System.IFormatProvider)\n  id: ToString(System.Int32,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Int32, IFormatProvider)\n  nameWithType: Convert.ToString(Int32, IFormatProvider)\n  fullName: Convert.ToString(Int32, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.\n  remarks: This implementation is identical to <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName>.\n  example:\n  - \"The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \\\"~\\\" and its positive sign as the string \\\"!\\\". It then calls the <xref:System.Convert.ToString%28System.Int32%2CSystem.IFormatProvider%29> method to convert each element in an array of integers to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.  \\n  \\n [!code-csharp[System.Convert.ToString2#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#20)]\\n [!code-vb[System.Convert.ToString2#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#20)]\"\n  syntax:\n    content: public static string ToString (int value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Double,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Double,System.IFormatProvider)\n  id: ToString(System.Double,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Double, IFormatProvider)\n  nameWithType: Convert.ToString(Double, IFormatProvider)\n  fullName: Convert.ToString(Double, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName>\n  example:\n  - \"The following example converts each element in an array of <xref:System.Double> values to its equivalent string representation in four different cultures.  \\n  \\n [!code-csharp[System.Convert.ToString2#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#15)]\\n [!code-vb[System.Convert.ToString2#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#15)]\"\n  syntax:\n    content: public static string ToString (double value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Int32,System.Int32)\n  commentId: M:System.Convert.ToString(System.Int32,System.Int32)\n  id: ToString(System.Int32,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Int32, Int32)\n  nameWithType: Convert.ToString(Int32, Int32)\n  fullName: Convert.ToString(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.\n  remarks: If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation. This means that the high-order bit of the highest-order byte (bit 31) is interpreted as the sign bit. If the <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in an integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.  \\n  \\n [!code-csharp[System.Convert.ToString2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#11)]\\n [!code-vb[System.Convert.ToString2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#11)]\"\n  syntax:\n    content: public static string ToString (int value, int toBase);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    - id: toBase\n      type: System.Int32\n      description: The base of the return value, which must be 2, 8, 10, or 16.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code> in base <code>toBase</code>.\n  overload: System.Convert.ToString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>toBase</code> is not 2, 8, 10, or 16.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.SByte,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.SByte,System.IFormatProvider)\n  id: ToString(System.SByte,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(SByte, IFormatProvider)\n  nameWithType: Convert.ToString(SByte, IFormatProvider)\n  fullName: Convert.ToString(SByte, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.\n  remarks: This implementation is identical to <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName>.\n  example:\n  - \"The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \\\"~\\\" and its positive sign as the string \\\"!\\\". It then calls the <xref:System.Convert.ToString%28System.SByte%2CSystem.IFormatProvider%29?displayProperty=fullName> method to convert each element in signed byte array to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.  \\n  \\n [!code-csharp[System.Convert.ToString2#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#17)]\\n [!code-vb[System.Convert.ToString2#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#17)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string ToString (sbyte value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Int64,System.Int32)\n  commentId: M:System.Convert.ToString(System.Int64,System.Int32)\n  id: ToString(System.Int64,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Int64, Int32)\n  nameWithType: Convert.ToString(Int64, Int32)\n  fullName: Convert.ToString(Int64, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.\n  remarks: If `value` is positive and `toBase` is not 10, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is not 10, the returned string uses two's complement representation. This means that the high-order bit of the highest-order byte (bit 63) is interpreted as the sign bit. If the <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in a long integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.  \\n  \\n [!code-csharp[System.Convert.ToString2#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#12)]\\n [!code-vb[System.Convert.ToString2#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#12)]\"\n  syntax:\n    content: public static string ToString (long value, int toBase);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    - id: toBase\n      type: System.Int32\n      description: The base of the return value, which must be 2, 8, 10, or 16.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code> in base <code>toBase</code>.\n  overload: System.Convert.ToString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>toBase</code> is not 2, 8, 10, or 16.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Object,System.IFormatProvider)\n  id: ToString(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Object, IFormatProvider)\n  nameWithType: Convert.ToString(Object, IFormatProvider)\n  fullName: Convert.ToString(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.\n  remarks: \"If the `value` parameter implements the <xref:System.IConvertible> interface, the method calls the <xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=fullName>implementation of `value`. Otherwise, if the `value` parameter implements the <xref:System.IFormattable> interface, the method calls its <xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>implementation. If `value` implements neither interface, the method calls the `value` parameter's `ToString()` method, and the `provider` parameter is ignored.  \\n  \\n The `provider` parameter is used if the `value` parameter implements the <xref:System.IConvertible> or <xref:System.IFormattable> interface. The most common use of the `provider` parameter is to specify culture-specific information used in the conversion of `value`. For example, if the `value` parameter is a negative decimal number, the `provider` parameter can supply culture-specific information about the notation used for the negative sign and decimal separator. The second example in the next section illustrates a format provider that does not supply culture-sensitive formatting information.\"\n  example:\n  - \"The following example defines a `Temperature` class that overrides the <xref:System.Object.ToString%2A?displayProperty=fullName> method but does not implement the <xref:System.IConvertible> interface. The example illustrates how calls to the <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName> method, in turn, call the `Temperature.ToString` method.  \\n  \\n [!code-csharp[System.Convert.ToString2#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring5.cs#26)]\\n [!code-vb[System.Convert.ToString2#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring5.vb#26)]  \\n  \\n The following example defines a `Temperature` class that implements the <xref:System.IFormattable> interface but does not implement the <xref:System.IConvertible> interface. Its <xref:System.IFormattable.ToString%2A?displayProperty=fullName>implementation represents the `Temperature` value in Celsius, Fahrenheit, or Kelvin, depending on the format  string. The example also defines a `TemperatureProvider` class that implements <xref:System.IFormatProvider> and provides a randomly generated format string that is used by the <xref:System.IFormattable> implementation of the `Temperature` class.  \\n  \\n [!code-csharp[System.Convert.ToString2#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring_obj30.cs#30)]\\n [!code-vb[System.Convert.ToString2#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring_obj30.vb#30)]\"\n  syntax:\n    content: public static string ToString (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that supplies the value to convert, or `null`.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>, or <xref href=\"System.String.Empty\"></xref> if <code>value</code> is an object whose value is `null`. If <code>value</code> is `null`, the method returns `null`.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Single,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Single,System.IFormatProvider)\n  id: ToString(System.Single,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Single, IFormatProvider)\n  nameWithType: Convert.ToString(Single, IFormatProvider)\n  fullName: Convert.ToString(Single, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.\n  remarks: This implementation is identical to <xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in an array of <xref:System.Single> values to its equivalent string representation in four different cultures.  \\n  \\n [!code-csharp[System.Convert.ToString2#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#18)]\\n [!code-vb[System.Convert.ToString2#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#18)]\"\n  syntax:\n    content: public static string ToString (float value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(String, IFormatProvider)\n  nameWithType: Convert.ToString(String, IFormatProvider)\n  fullName: Convert.ToString(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Returns the specified string instance; no actual conversion is performed.\n  remarks: ''\n  example:\n  - \"The following example calls the `ToString` method with a <xref:System.String> parameter. The method returns the unmodified <xref:System.String> without referencing the <xref:System.IFormatProvider> object.  \\n  \\n [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]\\n [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]\\n [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]\"\n  syntax:\n    content: public static string ToString (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to return.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information. This parameter is ignored.\n    return:\n      type: System.String\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.UInt16,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.UInt16,System.IFormatProvider)\n  id: ToString(System.UInt16,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(UInt16, IFormatProvider)\n  nameWithType: Convert.ToString(UInt16, IFormatProvider)\n  fullName: Convert.ToString(UInt16, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.\n  remarks: This implementation is identical to <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName>.\n  example:\n  - \"The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \\\"~\\\" and its positive sign as the string \\\"!\\\". It then calls the <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> method to convert a 16-bit unsigned integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object. The output indicates that this formatting information is not used, because by default the \\\"G\\\" format specifier does not include a positive sign with positive values.  \\n  \\n [!code-csharp[System.Convert.ToString2#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#22)]\\n [!code-vb[System.Convert.ToString2#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#22)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string ToString (ushort value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.UInt32,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.UInt32,System.IFormatProvider)\n  id: ToString(System.UInt32,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(UInt32, IFormatProvider)\n  nameWithType: Convert.ToString(UInt32, IFormatProvider)\n  fullName: Convert.ToString(UInt32, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.\n  remarks: This implementation is identical to <xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=fullName>.\n  example:\n  - \"The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \\\"~\\\" and its positive sign as the string \\\"!\\\". It then calls the <xref:System.Convert.ToString%28System.UInt32%2CSystem.IFormatProvider%29> method to convert an unsigned integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object. The output indicates that this formatting information is not used, because by default the \\\"G\\\" format specifier does not include a positive sign with positive values.  \\n  \\n [!code-csharp[System.Convert.ToString2#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#23)]\\n [!code-vb[System.Convert.ToString2#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#23)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string ToString (uint value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Char,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Char,System.IFormatProvider)\n  id: ToString(System.Char,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Char, IFormatProvider)\n  nameWithType: Convert.ToString(Char, IFormatProvider)\n  fullName: Convert.ToString(Char, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.\n  remarks: This implementation is identical to <xref:System.Char.ToString?displayProperty=fullName>. The `provider` parameter is ignored.\n  example:\n  - \"The following example converts a <xref:System.Char> value to a <xref:System.String> with the `ToString` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called. The example shows that the <xref:System.IFormatProvider> object is not referenced.  \\n  \\n [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]\\n [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]\\n [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]\"\n  syntax:\n    content: public static string ToString (char value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information. This parameter is ignored.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Int64,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Int64,System.IFormatProvider)\n  id: ToString(System.Int64,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Int64, IFormatProvider)\n  nameWithType: Convert.ToString(Int64, IFormatProvider)\n  fullName: Convert.ToString(Int64, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.\n  remarks: This implementation is identical to <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName>.\n  example:\n  - \"The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \\\"~\\\" and its positive sign as the string \\\"!\\\". It then calls the <xref:System.Convert.ToString%28System.Int64%2CSystem.IFormatProvider%29> method to convert each element in a long integer array to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.  \\n  \\n [!code-csharp[System.Convert.ToString2#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#21)]\\n [!code-vb[System.Convert.ToString2#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#21)]\"\n  syntax:\n    content: public static string ToString (long value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Byte,System.Int32)\n  commentId: M:System.Convert.ToString(System.Byte,System.Int32)\n  id: ToString(System.Byte,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Byte, Int32)\n  nameWithType: Convert.ToString(Byte, Int32)\n  fullName: Convert.ToString(Byte, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.\n  remarks: If `toBase` does not equal 10, the string that is returned by the <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=fullName> method represents `value` by its magnitude only. If the method is called to create a string that will later be converted back to a number, a corresponding method that assumes a magnitude-only numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=fullName> or <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in a byte array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.  \\n  \\n [!code-csharp[System.Convert.ToString2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#9)]\\n [!code-vb[System.Convert.ToString2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#9)]\"\n  syntax:\n    content: public static string ToString (byte value, int toBase);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    - id: toBase\n      type: System.Int32\n      description: The base of the return value, which must be 2, 8, 10, or 16.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code> in base <code>toBase</code>.\n  overload: System.Convert.ToString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>toBase</code> is not 2, 8, 10, or 16.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.UInt16)\n  commentId: M:System.Convert.ToString(System.UInt16)\n  id: ToString(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(UInt16)\n  nameWithType: Convert.ToString(UInt16)\n  fullName: Convert.ToString(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.UInt16.ToString?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in an array of unsigned 16-bit integer values to its equivalent string representation.  \\n  \\n [!code-csharp[System.Convert.ToString2#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#6)]\\n [!code-vb[System.Convert.ToString2#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#6)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string ToString (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Boolean,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Boolean,System.IFormatProvider)\n  id: ToString(System.Boolean,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Boolean, IFormatProvider)\n  nameWithType: Convert.ToString(Boolean, IFormatProvider)\n  fullName: Convert.ToString(Boolean, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=fullName>. It returns <xref:System.Boolean.TrueString?displayProperty=fullName> for `true` values and <xref:System.Boolean.FalseString?displayProperty=fullName> for `false` values.\n  example:\n  - \"The following example converts a <xref:System.Boolean> value to a <xref:System.String> with the `ToString` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called. The example shows that the <xref:System.IFormatProvider> object is not referenced.  \\n  \\n [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]\\n [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]\\n [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]\"\n  syntax:\n    content: public static string ToString (bool value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An instance of an object. This parameter is ignored.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Byte,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Byte,System.IFormatProvider)\n  id: ToString(System.Byte,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Byte, IFormatProvider)\n  nameWithType: Convert.ToString(Byte, IFormatProvider)\n  fullName: Convert.ToString(Byte, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.\n  remarks: This implementation is identical to <xref:System.Byte.ToString%2A?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in an unsigned byte array to its equivalent string representation using the formatting conventions of the en-US and fr-FR cultures. Because the \\\"G\\\" specifier by default outputs only decimal digits in a byte value's string representation, the `provider` parameter does not affect the formatting of the returned string.  \\n  \\n [!code-csharp[System.Convert.ToString2#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#16)]\\n [!code-vb[System.Convert.ToString2#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#16)]\"\n  syntax:\n    content: public static string ToString (byte value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Boolean)\n  commentId: M:System.Convert.ToString(System.Boolean)\n  id: ToString(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Boolean)\n  nameWithType: Convert.ToString(Boolean)\n  fullName: Convert.ToString(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=fullName>. It returns <xref:System.Boolean.TrueString?displayProperty=fullName> for `true` values and <xref:System.Boolean.FalseString?displayProperty=fullName> for `false` values.\n  example:\n  - \"The following example illustrates the conversion of a <xref:System.Boolean> to a <xref:System.String>, using `ToString`. It also illustrates that the string returned by the conversion equals either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Convert.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/ToString_Bool1.cs#1)]\\n [!code-vb[System.Convert.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/ToString_Bool1.vb#1)]\"\n  syntax:\n    content: public static string ToString (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Byte)\n  commentId: M:System.Convert.ToString(System.Byte)\n  id: ToString(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Byte)\n  nameWithType: Convert.ToString(Byte)\n  fullName: Convert.ToString(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.Byte.ToString?displayProperty=fullName>.\n  example:\n  - \"The following example converts each value in a <xref:System.Byte> array to a string.  \\n  \\n [!code-csharp[System.Convert.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/ToString.Byte1.cs#3)]\\n [!code-vb[System.Convert.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/ToString.Byte1.vb#3)]\"\n  syntax:\n    content: public static string ToString (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Char)\n  commentId: M:System.Convert.ToString(System.Char)\n  id: ToString(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Char)\n  nameWithType: Convert.ToString(Char)\n  fullName: Convert.ToString(Char)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified Unicode character to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.Char.ToString%2A?displayProperty=fullName>.\n  example:\n  - \"The following example converts a <xref:System.Char> to a <xref:System.String>.  \\n  \\n [!code-cpp[System.Convert Snippets#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#14)]\\n [!code-csharp[System.Convert Snippets#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#14)]\\n [!code-vb[System.Convert Snippets#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#14)]\"\n  syntax:\n    content: public static string ToString (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Decimal)\n  commentId: M:System.Convert.ToString(System.Decimal)\n  id: ToString(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Decimal)\n  nameWithType: Convert.ToString(Decimal)\n  fullName: Convert.ToString(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.Decimal.ToString?displayProperty=fullName>.\n  example:\n  - \"The following example converts a <xref:System.Decimal> to a <xref:System.String>.  \\n  \\n [!code-cpp[System.Convert Snippets#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#15)]\\n [!code-csharp[System.Convert Snippets#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#15)]\\n [!code-vb[System.Convert Snippets#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#15)]\"\n  syntax:\n    content: public static string ToString (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal number to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Double)\n  commentId: M:System.Convert.ToString(System.Double)\n  id: ToString(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Double)\n  nameWithType: Convert.ToString(Double)\n  fullName: Convert.ToString(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.Double.ToString?displayProperty=fullName>.\n  example:\n  - \"The following example converts a <xref:System.Double> to a <xref:System.String>.  \\n  \\n [!code-cpp[System.Convert Snippets#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#7)]\\n [!code-csharp[System.Convert Snippets#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#7)]\\n [!code-vb[System.Convert Snippets#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#7)]\"\n  syntax:\n    content: public static string ToString (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Int16)\n  commentId: M:System.Convert.ToString(System.Int16)\n  id: ToString(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Int16)\n  nameWithType: Convert.ToString(Int16)\n  fullName: Convert.ToString(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.Int16.ToString?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in an array of 16-bit integers to its equivalent string representation.  \\n  \\n [!code-csharp[System.Convert.ToString2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#2)]\\n [!code-vb[System.Convert.ToString2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#2)]\"\n  syntax:\n    content: public static string ToString (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.DateTime)\n  commentId: M:System.Convert.ToString(System.DateTime)\n  id: ToString(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(DateTime)\n  nameWithType: Convert.ToString(DateTime)\n  fullName: Convert.ToString(DateTime)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified <xref href=\"System.DateTime\"></xref> to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.DateTime.ToString?displayProperty=fullName>. It uses the formatting conventions of the current culture and the \"G\" format specifier to convert a <xref:System.DateTime> value to its string representation.\n  example:\n  - \"The following example converts each element in an array of a <xref:System.DateTime> value to a <xref:System.String> value.  \\n  \\n [!code-csharp[System.Convert.ToString2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#1)]\\n [!code-vb[System.Convert.ToString2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#1)]\"\n  syntax:\n    content: public static string ToString (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Int64)\n  commentId: M:System.Convert.ToString(System.Int64)\n  id: ToString(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Int64)\n  nameWithType: Convert.ToString(Int64)\n  fullName: Convert.ToString(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.Int64.ToString?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in a long integer array to its equivalent string representation.  \\n  \\n [!code-csharp[System.Convert.ToString2#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring6.cs#28)]\\n [!code-vb[System.Convert.ToString2#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring6.vb#28)]\"\n  syntax:\n    content: public static string ToString (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Object)\n  commentId: M:System.Convert.ToString(System.Object)\n  id: ToString(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Object)\n  nameWithType: Convert.ToString(Object)\n  fullName: Convert.ToString(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to its equivalent string representation.\n  remarks: To convert `value` to its string representation, the method tries to call the <xref:System.IConvertible.ToString%2A?displayProperty=fullName> implementation of `value`. If `value` does not implement the <xref:System.IConvertible> interface, the method tries to call the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> implementation of `value`. If value does not implement the <xref:System.IFormattable> interface, the method calls the `ToString` method of the underlying type of `value`.\n  example:\n  - \"The following example converts each element in an object array to its equivalent string representation.  \\n  \\n [!code-csharp[System.Convert.ToString2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#3)]\\n [!code-vb[System.Convert.ToString2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#3)]\"\n  syntax:\n    content: public static string ToString (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that supplies the value to convert, or `null`.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>, or <xref href=\"System.String.Empty\"></xref> if <code>value</code> is `null`.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.SByte)\n  commentId: M:System.Convert.ToString(System.SByte)\n  id: ToString(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(SByte)\n  nameWithType: Convert.ToString(SByte)\n  fullName: Convert.ToString(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.SByte.ToString?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in a signed byte array to its equivalent string representation.  \\n  \\n [!code-csharp[System.Convert.ToString2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#4)]\\n [!code-vb[System.Convert.ToString2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#4)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string ToString (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Single)\n  commentId: M:System.Convert.ToString(System.Single)\n  id: ToString(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Single)\n  nameWithType: Convert.ToString(Single)\n  fullName: Convert.ToString(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.Single.ToString?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in an array of <xref:System.Single> values to its equivalent string representation.  \\n  \\n [!code-csharp[System.Convert.ToString2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#5)]\\n [!code-vb[System.Convert.ToString2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#5)]\"\n  syntax:\n    content: public static string ToString (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.String)\n  commentId: M:System.Convert.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(String)\n  nameWithType: Convert.ToString(String)\n  fullName: Convert.ToString(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Returns the specified string instance; no actual conversion is performed.\n  remarks: ''\n  example:\n  - \"The following example passes a string to the <xref:System.Convert.ToString%28System.String%29> method and calls the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to confirm that the method returns the original string. The example also calls the <xref:System.String.IsInterned%2A?displayProperty=fullName> method to ensure that the two strings are not identical because the original string is interned.  \\n  \\n [!code-csharp[System.Convert.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/tostring_string1.cs#2)]\\n [!code-vb[System.Convert.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/tostring_string1.vb#2)]\"\n  syntax:\n    content: public static string ToString (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to return.\n    return:\n      type: System.String\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.UInt32)\n  commentId: M:System.Convert.ToString(System.UInt32)\n  id: ToString(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(UInt32)\n  nameWithType: Convert.ToString(UInt32)\n  fullName: Convert.ToString(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.UInt32.ToString?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in an unsigned integer array to its equivalent string representation.  \\n  \\n [!code-csharp[System.Convert.ToString2#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#7)]\\n [!code-vb[System.Convert.ToString2#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#7)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string ToString (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.UInt64)\n  commentId: M:System.Convert.ToString(System.UInt64)\n  id: ToString(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(UInt64)\n  nameWithType: Convert.ToString(UInt64)\n  fullName: Convert.ToString(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.UInt64.ToString?displayProperty=fullName>.\n  example:\n  - \"The following example converts each element in an unsigned long integer array to its equivalent string representation.  \\n  \\n [!code-csharp[System.Convert.ToString2#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#8)]\\n [!code-vb[System.Convert.ToString2#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#8)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string ToString (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToString(System.Int32)\n  commentId: M:System.Convert.ToString(System.Int32)\n  id: ToString(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToString(Int32)\n  nameWithType: Convert.ToString(Int32)\n  fullName: Convert.ToString(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to its equivalent string representation.\n  remarks: This implementation is identical to <xref:System.Int32.ToString?displayProperty=fullName>. It formats `value` by using the formatting conventions of the current thread culture.\n  example:\n  - \"The following example compares the <xref:System.Convert.ToString%28System.Int32%29> method with the <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> method. It defines a custom <xref:System.Globalization.NumberFormatInfo> object that uses the sting \\\"minus\\\" to represent the negative sign. It converts each element in an integer array to its equivalent string representation using default formatting (the formatting conventions of the current culture) and the custom format provider.  \\n  \\n [!code-csharp[System.Convert.ToString2#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring7.cs#27)]\\n [!code-vb[System.Convert.ToString2#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring7.vb#27)]\"\n  syntax:\n    content: public static string ToString (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.String\n      description: The string representation of <code>value</code>.\n  overload: System.Convert.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.String)\n  commentId: M:System.Convert.ToUInt16(System.String)\n  id: ToUInt16(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(String)\n  nameWithType: Convert.ToUInt16(String)\n  fullName: Convert.ToUInt16(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.\n  remarks: \"Using the <xref:System.Convert.ToUInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt16.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example attempts to convert each element in a numeric string array to a 16-bit unsigned integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#12)]\\n [!code-vb[System.Convert.ToUInt16#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#12)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.UInt16)\n  commentId: M:System.Convert.ToUInt16(System.UInt16)\n  id: ToUInt16(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(UInt16)\n  nameWithType: Convert.ToUInt16(UInt16)\n  fullName: Convert.ToUInt16(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 16-bit unsigned integer; no actual conversion is performed.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to return.\n    return:\n      type: System.UInt16\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToUInt16*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.UInt32)\n  commentId: M:System.Convert.ToUInt16(System.UInt32)\n  id: ToUInt16(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(UInt32)\n  nameWithType: Convert.ToUInt16(UInt32)\n  fullName: Convert.ToUInt16(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of unsigned integers to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#13)]\\n [!code-vb[System.Convert.ToUInt16#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#13)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.UInt16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.String,System.Int32)\n  commentId: M:System.Convert.ToUInt16(System.String,System.Int32)\n  id: ToUInt16(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(String, Int32)\n  nameWithType: Convert.ToUInt16(String, Int32)\n  fullName: Convert.ToUInt16(String, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.\n  remarks: \"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \\\"0x\\\" or \\\"0X\\\".  \\n  \\n Because the <xref:System.UInt16> data type supports unsigned values only, the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all 16 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt16> data type is converted to a <xref:System.UInt16> value without the method throwing an exception. The following example converts <xref:System.Int16.MinValue?displayProperty=fullName> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \\\"0x8000 converts to 32768.\\\"  \\n  \\n [!code-csharp[System.Convert.BaseConversion#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#11)]\\n [!code-vb[System.Convert.BaseConversion#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#11)]  \\n  \\n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt16> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt16> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  \\n  \\n [!code-csharp[System.Convert.BaseConversion#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#12)]\\n [!code-vb[System.Convert.BaseConversion#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#12)]\"\n  example:\n  - \"The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_2.cs#15)]\\n [!code-vb[System.Convert.ToUInt16#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_2.vb#15)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (string value, int fromBase);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: fromBase\n      type: System.Int32\n      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>fromBase</code> is not 2, 8, 10, or 16.  \\n  \\n -or-  \\n  \\n <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>value</code> is <xref href=\"System.String.Empty\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  \\n  \\n -or-  \\n  \\n <code>value</code> represents a number that is less than <xref href=\\\"System.UInt16.MinValue\\\"></xref> or greater than <xref href=\\\"System.UInt16.MaxValue\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)\n  id: ToUInt16(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(Object, IFormatProvider)\n  nameWithType: Convert.ToUInt16(Object, IFormatProvider)\n  fullName: Convert.ToUInt16(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> method of the underlying type of `value`.  \\n  \\n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \\n  \\n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.\"\n  example:\n  - \"The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 16-bit signed and 16-bit unsigned values. The class includes a `Sign` property that indicates the sign of its hexadecimal value.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_3.cs#16)]\\n [!code-vb[System.Convert.ToUInt16#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_3.vb#16)]  \\n  \\n The following example shows that a call to the <xref:System.Convert.ToUInt16%28System.Object%2CSystem.IFormatProvider%29> method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> implementation of the `HexString` class.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_3.cs#17)]\\n [!code-vb[System.Convert.ToUInt16#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_3.vb#17)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the  <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToUInt16(System.String,System.IFormatProvider)\n  id: ToUInt16(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(String, IFormatProvider)\n  nameWithType: Convert.ToUInt16(String, IFormatProvider)\n  fullName: Convert.ToUInt16(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking <xref:System.UInt16.Parse%2A?displayProperty=fullName> on `value`.  \\n  \\n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string \\\"pos\\\" as the positive sign and the string \\\"neg\\\" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_4.cs#18)]\\n [!code-vb[System.Convert.ToUInt16#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_4.vb#18)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.Single)\n  commentId: M:System.Convert.ToUInt16(System.Single)\n  id: ToUInt16(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(Single)\n  nameWithType: Convert.ToUInt16(Single)\n  fullName: Convert.ToUInt16(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of <xref:System.String> values to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#11)]\\n [!code-vb[System.Convert.ToUInt16#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#11)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to convert.\n    return:\n      type: System.UInt16\n      description: <code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.UInt64)\n  commentId: M:System.Convert.ToUInt16(System.UInt64)\n  id: ToUInt16(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(UInt64)\n  nameWithType: Convert.ToUInt16(UInt64)\n  fullName: Convert.ToUInt16(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of unsigned long integers to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#14)]\\n [!code-vb[System.Convert.ToUInt16#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#14)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.UInt16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.SByte)\n  commentId: M:System.Convert.ToUInt16(System.SByte)\n  id: ToUInt16(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(SByte)\n  nameWithType: Convert.ToUInt16(SByte)\n  fullName: Convert.ToUInt16(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in a signed byte array to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#10)]\\n [!code-vb[System.Convert.ToUInt16#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#10)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.Double)\n  commentId: M:System.Convert.ToUInt16(System.Double)\n  id: ToUInt16(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(Double)\n  nameWithType: Convert.ToUInt16(Double)\n  fullName: Convert.ToUInt16(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of <xref:System.Double> values to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#5)]\\n [!code-vb[System.Convert.ToUInt16#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#5)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.UInt16\n      description: <code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.Int64)\n  commentId: M:System.Convert.ToUInt16(System.Int64)\n  id: ToUInt16(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(Int64)\n  nameWithType: Convert.ToUInt16(Int64)\n  fullName: Convert.ToUInt16(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in a long integer array to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#8)]\\n [!code-vb[System.Convert.ToUInt16#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#8)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.Object)\n  commentId: M:System.Convert.ToUInt16(System.Object)\n  id: ToUInt16(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(Object)\n  nameWithType: Convert.ToUInt16(Object)\n  fullName: Convert.ToUInt16(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a 16-bit unsigned integer.\n  remarks: The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> method of the underlying type of `value`.\n  example:\n  - \"The following example attempts to convert each element in an object array to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#9)]\\n [!code-vb[System.Convert.ToUInt16#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the  <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.Byte)\n  commentId: M:System.Convert.ToUInt16(System.Byte)\n  id: ToUInt16(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(Byte)\n  nameWithType: Convert.ToUInt16(Byte)\n  fullName: Convert.ToUInt16(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in a byte array to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#2)]\\n [!code-vb[System.Convert.ToUInt16#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#2)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt16*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.Char)\n  commentId: M:System.Convert.ToUInt16(System.Char)\n  id: ToUInt16(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(Char)\n  nameWithType: Convert.ToUInt16(Char)\n  fullName: Convert.ToUInt16(Char)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in a character array to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#3)]\\n [!code-vb[System.Convert.ToUInt16#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#3)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.UInt16\n      description: The 16-bit unsigned integer equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt16*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.DateTime)\n  commentId: M:System.Convert.ToUInt16(System.DateTime)\n  id: ToUInt16(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(DateTime)\n  nameWithType: Convert.ToUInt16(DateTime)\n  fullName: Convert.ToUInt16(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.UInt16\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.Boolean)\n  commentId: M:System.Convert.ToUInt16(System.Boolean)\n  id: ToUInt16(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(Boolean)\n  nameWithType: Convert.ToUInt16(Boolean)\n  fullName: Convert.ToUInt16(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to the equivalent 16-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts the Boolean values `true` and `false` to unsigned 16-bit integers.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#1)]\\n [!code-vb[System.Convert.ToUInt16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.UInt16\n      description: The number 1 if <code>value</code> is `true`; otherwise, 0.\n  overload: System.Convert.ToUInt16*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.Int16)\n  commentId: M:System.Convert.ToUInt16(System.Int16)\n  id: ToUInt16(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(Int16)\n  nameWithType: Convert.ToUInt16(Int16)\n  fullName: Convert.ToUInt16(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in a 16-bit integer array to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#6)]\\n [!code-vb[System.Convert.ToUInt16#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#6)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.Int32)\n  commentId: M:System.Convert.ToUInt16(System.Int32)\n  id: ToUInt16(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(Int32)\n  nameWithType: Convert.ToUInt16(Int32)\n  fullName: Convert.ToUInt16(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an integer array to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#7)]\\n [!code-vb[System.Convert.ToUInt16#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#7)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt16(System.Decimal)\n  commentId: M:System.Convert.ToUInt16(System.Decimal)\n  id: ToUInt16(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt16(Decimal)\n  nameWithType: Convert.ToUInt16(Decimal)\n  fullName: Convert.ToUInt16(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of <xref:System.Decimal> values to an unsigned 16-bit integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt16#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#4)]\\n [!code-vb[System.Convert.ToUInt16#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#4)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal number to convert.\n    return:\n      type: System.UInt16\n      description: <code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToUInt16*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.Single)\n  commentId: M:System.Convert.ToUInt32(System.Single)\n  id: ToUInt32(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(Single)\n  nameWithType: Convert.ToUInt32(Single)\n  fullName: Convert.ToUInt32(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Single> values to an unsigned integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#11)]\\n [!code-vb[System.Convert.ToUInt32#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#11)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to convert.\n    return:\n      type: System.UInt32\n      description: <code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.String,System.Int32)\n  commentId: M:System.Convert.ToUInt32(System.String,System.Int32)\n  id: ToUInt32(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(String, Int32)\n  nameWithType: Convert.ToUInt32(String, Int32)\n  fullName: Convert.ToUInt32(String, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.\n  remarks: \"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \\\"0x\\\" or \\\"0X\\\".  \\n  \\n Because the <xref:System.UInt32> data type supports unsigned values only, the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all 32 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt32> data type is converted to a <xref:System.UInt32> value without the method throwing an exception. The following example converts <xref:System.Int32.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \\\"0x80000000 converts to 2147483648.\\\"  \\n  \\n [!code-csharp[System.Convert.BaseConversion#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#13)]\\n [!code-vb[System.Convert.BaseConversion#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#13)]  \\n  \\n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt32> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt32> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  \\n  \\n [!code-csharp[System.Convert.BaseConversion#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#14)]\\n [!code-vb[System.Convert.BaseConversion#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#14)]\"\n  example:\n  - \"The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_3.cs#16)]\\n [!code-vb[System.Convert.ToUInt32#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_3.vb#16)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (string value, int fromBase);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: fromBase\n      type: System.Int32\n      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>fromBase</code> is not 2, 8, 10, or 16.  \\n  \\n -or-  \\n  \\n <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>value</code> is <xref href=\"System.String.Empty\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  \\n  \\n -or-  \\n  \\n <code>value</code> represents a number that is less than <xref href=\\\"System.UInt32.MinValue\\\"></xref> or greater than <xref href=\\\"System.UInt32.MaxValue\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToUInt32(System.String,System.IFormatProvider)\n  id: ToUInt32(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(String, IFormatProvider)\n  nameWithType: Convert.ToUInt32(String, IFormatProvider)\n  fullName: Convert.ToUInt32(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking <xref:System.UInt32.Parse%2A?displayProperty=fullName> on `value`.  \\n  \\n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string \\\"pos\\\" as the positive sign and the string \\\"neg\\\" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_2.cs#15)]\\n [!code-vb[System.Convert.ToUInt32#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_2.vb#15)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)\n  id: ToUInt32(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(Object, IFormatProvider)\n  nameWithType: Convert.ToUInt32(Object, IFormatProvider)\n  fullName: Convert.ToUInt32(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> method of the underlying type of `value`.  \\n  \\n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \\n  \\n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.\"\n  example:\n  - \"The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 32-bit signed and 32-bit unsigned values. The class includes a `Sign` property that indicates the sign of its hexadecimal value.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_4.cs#17)]\\n [!code-vb[System.Convert.ToUInt32#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_4.vb#17)]  \\n  \\n The following example shows that a call to the <xref:System.Convert.ToUInt32%28System.Object%2CSystem.IFormatProvider%29> method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> implementation of the `HexString` class.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_4.cs#18)]\\n [!code-vb[System.Convert.ToUInt32#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_4.vb#18)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.UInt64)\n  commentId: M:System.Convert.ToUInt32(System.UInt64)\n  id: ToUInt32(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(UInt64)\n  nameWithType: Convert.ToUInt32(UInt64)\n  fullName: Convert.ToUInt32(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an unsigned long integer array to an unsigned integer value.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#14)]\\n [!code-vb[System.Convert.ToUInt32#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#14)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to convert.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is greater than <xref href=\"System.UInt32.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.UInt32)\n  commentId: M:System.Convert.ToUInt32(System.UInt32)\n  id: ToUInt32(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(UInt32)\n  nameWithType: Convert.ToUInt32(UInt32)\n  fullName: Convert.ToUInt32(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 32-bit unsigned integer; no actual conversion is performed.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to return.\n    return:\n      type: System.UInt32\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToUInt32*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.UInt16)\n  commentId: M:System.Convert.ToUInt32(System.UInt16)\n  id: ToUInt32(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(UInt16)\n  nameWithType: Convert.ToUInt32(UInt16)\n  fullName: Convert.ToUInt32(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an unsigned 16-bit integer array to an unsigned integer value.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#13)]\\n [!code-vb[System.Convert.ToUInt32#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#13)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt32*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.String)\n  commentId: M:System.Convert.ToUInt32(System.String)\n  id: ToUInt32(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(String)\n  nameWithType: Convert.ToUInt32(String)\n  fullName: Convert.ToUInt32(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.\n  remarks: \"Using the <xref:System.Convert.ToUInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt32.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example interprets the elements in a string array as numeric strings and attempts to convert them to unsigned integers.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#12)]\\n [!code-vb[System.Convert.ToUInt32#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#12)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.SByte)\n  commentId: M:System.Convert.ToUInt32(System.SByte)\n  id: ToUInt32(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(SByte)\n  nameWithType: Convert.ToUInt32(SByte)\n  fullName: Convert.ToUInt32(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in a signed byte array to an unsigned integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#10)]\\n [!code-vb[System.Convert.ToUInt32#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#10)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.Boolean)\n  commentId: M:System.Convert.ToUInt32(System.Boolean)\n  id: ToUInt32(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(Boolean)\n  nameWithType: Convert.ToUInt32(Boolean)\n  fullName: Convert.ToUInt32(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to the equivalent 32-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts the Boolean values `true` and `false` to unsigned integers.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#1)]\\n [!code-vb[System.Convert.ToUInt32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.UInt32\n      description: The number 1 if <code>value</code> is `true`; otherwise, 0.\n  overload: System.Convert.ToUInt32*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.Int64)\n  commentId: M:System.Convert.ToUInt32(System.Int64)\n  id: ToUInt32(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(Int64)\n  nameWithType: Convert.ToUInt32(Int64)\n  fullName: Convert.ToUInt32(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in a long integer array to an unsigned integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#8)]\\n [!code-vb[System.Convert.ToUInt32#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#8)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.Int32)\n  commentId: M:System.Convert.ToUInt32(System.Int32)\n  id: ToUInt32(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(Int32)\n  nameWithType: Convert.ToUInt32(Int32)\n  fullName: Convert.ToUInt32(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an integer array to an unsigned integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#7)]\\n [!code-vb[System.Convert.ToUInt32#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#7)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.Int16)\n  commentId: M:System.Convert.ToUInt32(System.Int16)\n  id: ToUInt32(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(Int16)\n  nameWithType: Convert.ToUInt32(Int16)\n  fullName: Convert.ToUInt32(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in a 16-bit integer array to an unsigned integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#6)]\\n [!code-vb[System.Convert.ToUInt32#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#6)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.Double)\n  commentId: M:System.Convert.ToUInt32(System.Double)\n  id: ToUInt32(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(Double)\n  nameWithType: Convert.ToUInt32(Double)\n  fullName: Convert.ToUInt32(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Double> values to an unsigned integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#5)]\\n [!code-vb[System.Convert.ToUInt32#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#5)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.UInt32\n      description: <code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.Decimal)\n  commentId: M:System.Convert.ToUInt32(System.Decimal)\n  id: ToUInt32(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(Decimal)\n  nameWithType: Convert.ToUInt32(Decimal)\n  fullName: Convert.ToUInt32(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Decimal> values to an unsigned integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#4)]\\n [!code-vb[System.Convert.ToUInt32#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#4)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal number to convert.\n    return:\n      type: System.UInt32\n      description: <code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.DateTime)\n  commentId: M:System.Convert.ToUInt32(System.DateTime)\n  id: ToUInt32(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(DateTime)\n  nameWithType: Convert.ToUInt32(DateTime)\n  fullName: Convert.ToUInt32(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.UInt32\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.Char)\n  commentId: M:System.Convert.ToUInt32(System.Char)\n  id: ToUInt32(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(Char)\n  nameWithType: Convert.ToUInt32(Char)\n  fullName: Convert.ToUInt32(Char)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in a character array to an unsigned integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#3)]\\n [!code-vb[System.Convert.ToUInt32#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#3)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt32*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.Byte)\n  commentId: M:System.Convert.ToUInt32(System.Byte)\n  id: ToUInt32(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(Byte)\n  nameWithType: Convert.ToUInt32(Byte)\n  fullName: Convert.ToUInt32(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in a byte array to an unsigned integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#2)]\\n [!code-vb[System.Convert.ToUInt32#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#2)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt32*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt32(System.Object)\n  commentId: M:System.Convert.ToUInt32(System.Object)\n  id: ToUInt32(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt32(Object)\n  nameWithType: Convert.ToUInt32(Object)\n  fullName: Convert.ToUInt32(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a 32-bit unsigned integer.\n  remarks: The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> method of the underlying type of `value`.\n  example:\n  - \"The following example attempts to convert each element in an object array to an unsigned integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt32#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#9)]\\n [!code-vb[System.Convert.ToUInt32#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt32*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.Single)\n  commentId: M:System.Convert.ToUInt64(System.Single)\n  id: ToUInt64(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(Single)\n  nameWithType: Convert.ToUInt64(Single)\n  fullName: Convert.ToUInt64(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Single> values to an unsigned long integer. The output shows that fractional values are rounded before the conversion is performed.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#11)]\\n [!code-vb[System.Convert.ToUInt64#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#11)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The single-precision floating-point number to convert.\n    return:\n      type: System.UInt64\n      description: <code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.String)\n  commentId: M:System.Convert.ToUInt64(System.String)\n  id: ToUInt64(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(String)\n  nameWithType: Convert.ToUInt64(String)\n  fullName: Convert.ToUInt64(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.\n  remarks: \"Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example interprets the elements of a string array as numeric strings and attempts to convert them to unsigned long integers.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#12)]\\n [!code-vb[System.Convert.ToUInt64#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#12)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    return:\n      type: System.UInt64\n      description: A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)\n  id: ToUInt64(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(Object, IFormatProvider)\n  nameWithType: Convert.ToUInt64(Object, IFormatProvider)\n  fullName: Convert.ToUInt64(Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> method of the underlying type of `value`.  \\n  \\n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \\n  \\n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.\"\n  example:\n  - \"The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 64-bit signed and 64-bit unsigned values. The class includes a `Sign` property that indicates the sign of its hexadecimal value.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_4.cs#17)]\\n [!code-vb[System.Convert.ToUInt64#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_4.vb#17)]  \\n  \\n The following example shows that a call to the <xref:System.Convert.ToUInt64%28System.Object%2CSystem.IFormatProvider%29> method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> implementation of the `HexString` class.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_4.cs#18)]\\n [!code-vb[System.Convert.ToUInt64#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_4.vb#18)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (object value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.UInt64\n      description: A 64-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.UInt32)\n  commentId: M:System.Convert.ToUInt64(System.UInt32)\n  id: ToUInt64(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(UInt32)\n  nameWithType: Convert.ToUInt64(UInt32)\n  fullName: Convert.ToUInt64(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an unsigned integer array to an unsigned long integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#14)]\\n [!code-vb[System.Convert.ToUInt64#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#14)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The 32-bit unsigned integer to convert.\n    return:\n      type: System.UInt64\n      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt64*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.UInt64)\n  commentId: M:System.Convert.ToUInt64(System.UInt64)\n  id: ToUInt64(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(UInt64)\n  nameWithType: Convert.ToUInt64(UInt64)\n  fullName: Convert.ToUInt64(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 64-bit unsigned integer; no actual conversion is performed.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The 64-bit unsigned integer to return.\n    return:\n      type: System.UInt64\n      description: <code>value</code> is returned unchanged.\n  overload: System.Convert.ToUInt64*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.SByte)\n  commentId: M:System.Convert.ToUInt64(System.SByte)\n  id: ToUInt64(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(SByte)\n  nameWithType: Convert.ToUInt64(SByte)\n  fullName: Convert.ToUInt64(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in a signed byte array to an unsigned long integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#10)]\\n [!code-vb[System.Convert.ToUInt64#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#10)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The 8-bit signed integer to convert.\n    return:\n      type: System.UInt64\n      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.UInt16)\n  commentId: M:System.Convert.ToUInt64(System.UInt16)\n  id: ToUInt64(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(UInt16)\n  nameWithType: Convert.ToUInt64(UInt16)\n  fullName: Convert.ToUInt64(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in an array of unsigned 16-bit integers to an unsigned long integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#13)]\\n [!code-vb[System.Convert.ToUInt64#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#13)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The 16-bit unsigned integer to convert.\n    return:\n      type: System.UInt64\n      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt64*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.Object)\n  commentId: M:System.Convert.ToUInt64(System.Object)\n  id: ToUInt64(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(Object)\n  nameWithType: Convert.ToUInt64(Object)\n  fullName: Convert.ToUInt64(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified object to a 64-bit unsigned integer.\n  remarks: The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> method of the underlying type of `value`.\n  example:\n  - \"The following example attempts to convert each element in an object array to an unsigned long integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#9)]\\n [!code-vb[System.Convert.ToUInt64#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that implements the <xref href=\"System.IConvertible\"></xref> interface, or `null`.\n    return:\n      type: System.UInt64\n      description: A 64-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in an appropriate format.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"<code>value</code> does not implement the <xref href=\\\"System.IConvertible\\\"></xref> interface.  \\n  \\n -or-  \\n  \\n The conversion is not supported.\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.Decimal)\n  commentId: M:System.Convert.ToUInt64(System.Decimal)\n  id: ToUInt64(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(Decimal)\n  nameWithType: Convert.ToUInt64(Decimal)\n  fullName: Convert.ToUInt64(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Decimal> values to an unsigned long integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#4)]\\n [!code-vb[System.Convert.ToUInt64#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#4)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The decimal number to convert.\n    return:\n      type: System.UInt64\n      description: <code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.Int32)\n  commentId: M:System.Convert.ToUInt64(System.Int32)\n  id: ToUInt64(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(Int32)\n  nameWithType: Convert.ToUInt64(Int32)\n  fullName: Convert.ToUInt64(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of integers to an unsigned long integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#7)]\\n [!code-vb[System.Convert.ToUInt64#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#7)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The 32-bit signed integer to convert.\n    return:\n      type: System.UInt64\n      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.Int16)\n  commentId: M:System.Convert.ToUInt64(System.Int16)\n  id: ToUInt64(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(Int16)\n  nameWithType: Convert.ToUInt64(Int16)\n  fullName: Convert.ToUInt64(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of 16-bit integers to an unsigned long integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#6)]\\n [!code-vb[System.Convert.ToUInt64#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#6)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The 16-bit signed integer to convert.\n    return:\n      type: System.UInt64\n      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.Double)\n  commentId: M:System.Convert.ToUInt64(System.Double)\n  id: ToUInt64(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(Double)\n  nameWithType: Convert.ToUInt64(Double)\n  fullName: Convert.ToUInt64(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of <xref:System.Double> values to an unsigned long integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#5)]\\n [!code-vb[System.Convert.ToUInt64#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#5)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The double-precision floating-point number to convert.\n    return:\n      type: System.UInt64\n      description: <code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.DateTime)\n  commentId: M:System.Convert.ToUInt64(System.DateTime)\n  id: ToUInt64(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(DateTime)\n  nameWithType: Convert.ToUInt64(DateTime)\n  fullName: Convert.ToUInt64(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calling this method always throws <xref href=\"System.InvalidCastException\"></xref>.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (DateTime value);\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: The date and time value to convert.\n    return:\n      type: System.UInt64\n      description: This conversion is not supported. No value is returned.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: This conversion is not supported.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.Char)\n  commentId: M:System.Convert.ToUInt64(System.Char)\n  id: ToUInt64(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(Char)\n  nameWithType: Convert.ToUInt64(Char)\n  fullName: Convert.ToUInt64(Char)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in a character array to an unsigned long integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#3)]\\n [!code-vb[System.Convert.ToUInt64#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#3)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The Unicode character to convert.\n    return:\n      type: System.UInt64\n      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt64*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.Byte)\n  commentId: M:System.Convert.ToUInt64(System.Byte)\n  id: ToUInt64(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(Byte)\n  nameWithType: Convert.ToUInt64(Byte)\n  fullName: Convert.ToUInt64(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts each element in a byte array to an unsigned long integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#2)]\\n [!code-vb[System.Convert.ToUInt64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#2)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The 8-bit unsigned integer to convert.\n    return:\n      type: System.UInt64\n      description: A 64-bit signed integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt64*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.Boolean)\n  commentId: M:System.Convert.ToUInt64(System.Boolean)\n  id: ToUInt64(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(Boolean)\n  nameWithType: Convert.ToUInt64(Boolean)\n  fullName: Convert.ToUInt64(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified Boolean value to the equivalent 64-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example converts Boolean `true` and `false` values to unsigned long integers.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#1)]\\n [!code-vb[System.Convert.ToUInt64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to convert.\n    return:\n      type: System.UInt64\n      description: The number 1 if <code>value</code> is `true`; otherwise, 0.\n  overload: System.Convert.ToUInt64*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToUInt64(System.String,System.IFormatProvider)\n  id: ToUInt64(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(String, IFormatProvider)\n  nameWithType: Convert.ToUInt64(String, IFormatProvider)\n  fullName: Convert.ToUInt64(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.\n  remarks: \"The return value is the result of invoking <xref:System.UInt64.Parse%2A?displayProperty=fullName> on `value`.  \\n  \\n `provider` is an <xref:System.IFormatProvider> implementation that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.  \\n  \\n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.\"\n  example:\n  - \"The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string \\\"pos\\\" as the positive sign and the string \\\"neg\\\" as the negative sign. It then attempts to convert each element of a numeric string array to an unsigned long integer. The conversion uses both the custom provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_2.cs#15)]\\n [!code-vb[System.Convert.ToUInt64#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_2.vb#15)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.UInt64\n      description: A 64-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.Int64)\n  commentId: M:System.Convert.ToUInt64(System.Int64)\n  id: ToUInt64(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(Int64)\n  nameWithType: Convert.ToUInt64(Int64)\n  fullName: Convert.ToUInt64(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.\n  remarks: ''\n  example:\n  - \"The following example attempts to convert each element in an array of long integers to an unsigned long integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#8)]\\n [!code-vb[System.Convert.ToUInt64#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#8)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The 64-bit signed integer to convert.\n    return:\n      type: System.UInt64\n      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> is less than zero.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Convert.ToUInt64(System.String,System.Int32)\n  commentId: M:System.Convert.ToUInt64(System.String,System.Int32)\n  id: ToUInt64(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  name: ToUInt64(String, Int32)\n  nameWithType: Convert.ToUInt64(String, Int32)\n  fullName: Convert.ToUInt64(String, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.\n  remarks: \"If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \\\"0x\\\" or \\\"0X\\\".  \\n  \\n Because the <xref:System.UInt64> data type supports unsigned values only, the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all 64 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed long integer value that is out of the range of the <xref:System.UInt64> data type is converted to a <xref:System.UInt64> value without the method throwing an exception. The following example converts <xref:System.Int64.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \\\"0x8000000000000000 converts to 9223372036854775808.\\\"  \\n  \\n [!code-csharp[System.Convert.BaseConversion#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#15)]\\n [!code-vb[System.Convert.BaseConversion#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#15)]  \\n  \\n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt64> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt64> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  \\n  \\n [!code-csharp[System.Convert.BaseConversion#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#16)]\\n [!code-vb[System.Convert.BaseConversion#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#16)]\"\n  example:\n  - \"The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned long integer.  \\n  \\n [!code-csharp[System.Convert.ToUInt64#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_3.cs#16)]\\n [!code-vb[System.Convert.ToUInt64#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_3.vb#16)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (string value, int fromBase);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    - id: fromBase\n      type: System.Int32\n      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.\n    return:\n      type: System.UInt64\n      description: A 64-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.\n  overload: System.Convert.ToUInt64*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>fromBase</code> is not 2, 8, 10, or 16.  \\n  \\n -or-  \\n  \\n <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>value</code> is <xref href=\"System.String.Empty\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  \\n  \\n -or-  \\n  \\n <code>value</code> represents a number that is less than <xref href=\\\"System.UInt64.MinValue\\\"></xref> or greater than <xref href=\\\"System.UInt64.MaxValue\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  nameWithType: FormatException\n  fullName: System.FormatException\n- uid: System.OverflowException\n  parent: System\n  isExternal: false\n  name: OverflowException\n  nameWithType: OverflowException\n  fullName: System.OverflowException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Convert.ChangeType(System.Object,System.Type)\n  parent: System.Convert\n  isExternal: false\n  name: ChangeType(Object, Type)\n  nameWithType: Convert.ChangeType(Object, Type)\n  fullName: Convert.ChangeType(Object, Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Convert.ChangeType(System.Object,System.TypeCode)\n  parent: System.Convert\n  isExternal: false\n  name: ChangeType(Object, TypeCode)\n  nameWithType: Convert.ChangeType(Object, TypeCode)\n  fullName: Convert.ChangeType(Object, TypeCode)\n- uid: System.TypeCode\n  parent: System\n  isExternal: false\n  name: TypeCode\n  nameWithType: TypeCode\n  fullName: System.TypeCode\n- uid: System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ChangeType(Object, Type, IFormatProvider)\n  nameWithType: Convert.ChangeType(Object, Type, IFormatProvider)\n  fullName: Convert.ChangeType(Object, Type, IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ChangeType(Object, TypeCode, IFormatProvider)\n  nameWithType: Convert.ChangeType(Object, TypeCode, IFormatProvider)\n  fullName: Convert.ChangeType(Object, TypeCode, IFormatProvider)\n- uid: System.Convert.DBNull\n  parent: System.Convert\n  isExternal: false\n  name: DBNull\n  nameWithType: Convert.DBNull\n  fullName: Convert.DBNull\n- uid: System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: FromBase64CharArray(Char[], Int32, Int32)\n  nameWithType: Convert.FromBase64CharArray(Char[], Int32, Int32)\n  fullName: Convert.FromBase64CharArray(Char[], Int32, Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Convert.FromBase64String(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: FromBase64String(String)\n  nameWithType: Convert.FromBase64String(String)\n  fullName: Convert.FromBase64String(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Convert.GetTypeCode(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: GetTypeCode(Object)\n  nameWithType: Convert.GetTypeCode(Object)\n  fullName: Convert.GetTypeCode(Object)\n- uid: System.Convert.IsDBNull(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: IsDBNull(Object)\n  nameWithType: Convert.IsDBNull(Object)\n  fullName: Convert.IsDBNull(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)\n  fullName: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)\n- uid: System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)\n  parent: System.Convert\n  isExternal: false\n  name: ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32, Base64FormattingOptions)\n  nameWithType: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32, Base64FormattingOptions)\n  fullName: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32, Base64FormattingOptions)\n- uid: System.Base64FormattingOptions\n  parent: System\n  isExternal: false\n  name: Base64FormattingOptions\n  nameWithType: Base64FormattingOptions\n  fullName: System.Base64FormattingOptions\n- uid: System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)\n  parent: System.Convert\n  isExternal: false\n  name: ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions)\n  nameWithType: Convert.ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions)\n  fullName: Convert.ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions)\n- uid: System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToBase64String(Byte[], Int32, Int32)\n  nameWithType: Convert.ToBase64String(Byte[], Int32, Int32)\n  fullName: Convert.ToBase64String(Byte[], Int32, Int32)\n- uid: System.Convert.ToBase64String(System.Byte[])\n  parent: System.Convert\n  isExternal: false\n  name: ToBase64String(Byte[])\n  nameWithType: Convert.ToBase64String(Byte[])\n  fullName: Convert.ToBase64String(Byte[])\n- uid: System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)\n  parent: System.Convert\n  isExternal: false\n  name: ToBase64String(Byte[], Base64FormattingOptions)\n  nameWithType: Convert.ToBase64String(Byte[], Base64FormattingOptions)\n  fullName: Convert.ToBase64String(Byte[], Base64FormattingOptions)\n- uid: System.Convert.ToBoolean(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(SByte)\n  nameWithType: Convert.ToBoolean(SByte)\n  fullName: Convert.ToBoolean(SByte)\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  nameWithType: SByte\n  fullName: System.SByte\n- uid: System.Convert.ToBoolean(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(String, IFormatProvider)\n  nameWithType: Convert.ToBoolean(String, IFormatProvider)\n  fullName: Convert.ToBoolean(String, IFormatProvider)\n- uid: System.Convert.ToBoolean(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(Object, IFormatProvider)\n  nameWithType: Convert.ToBoolean(Object, IFormatProvider)\n  fullName: Convert.ToBoolean(Object, IFormatProvider)\n- uid: System.Convert.ToBoolean(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(UInt64)\n  nameWithType: Convert.ToBoolean(UInt64)\n  fullName: Convert.ToBoolean(UInt64)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.Convert.ToBoolean(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(UInt32)\n  nameWithType: Convert.ToBoolean(UInt32)\n  fullName: Convert.ToBoolean(UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Convert.ToBoolean(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(UInt16)\n  nameWithType: Convert.ToBoolean(UInt16)\n  fullName: Convert.ToBoolean(UInt16)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  nameWithType: UInt16\n  fullName: System.UInt16\n- uid: System.Convert.ToBoolean(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(String)\n  nameWithType: Convert.ToBoolean(String)\n  fullName: Convert.ToBoolean(String)\n- uid: System.Convert.ToBoolean(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(Single)\n  nameWithType: Convert.ToBoolean(Single)\n  fullName: Convert.ToBoolean(Single)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Convert.ToBoolean(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(Object)\n  nameWithType: Convert.ToBoolean(Object)\n  fullName: Convert.ToBoolean(Object)\n- uid: System.Convert.ToBoolean(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(Double)\n  nameWithType: Convert.ToBoolean(Double)\n  fullName: Convert.ToBoolean(Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Convert.ToBoolean(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(Int32)\n  nameWithType: Convert.ToBoolean(Int32)\n  fullName: Convert.ToBoolean(Int32)\n- uid: System.Convert.ToBoolean(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(Int16)\n  nameWithType: Convert.ToBoolean(Int16)\n  fullName: Convert.ToBoolean(Int16)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Convert.ToBoolean(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(Decimal)\n  nameWithType: Convert.ToBoolean(Decimal)\n  fullName: Convert.ToBoolean(Decimal)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: System.Convert.ToBoolean(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(DateTime)\n  nameWithType: Convert.ToBoolean(DateTime)\n  fullName: Convert.ToBoolean(DateTime)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Convert.ToBoolean(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(Char)\n  nameWithType: Convert.ToBoolean(Char)\n  fullName: Convert.ToBoolean(Char)\n- uid: System.Convert.ToBoolean(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(Byte)\n  nameWithType: Convert.ToBoolean(Byte)\n  fullName: Convert.ToBoolean(Byte)\n- uid: System.Convert.ToBoolean(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(Boolean)\n  nameWithType: Convert.ToBoolean(Boolean)\n  fullName: Convert.ToBoolean(Boolean)\n- uid: System.Convert.ToBoolean(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean(Int64)\n  nameWithType: Convert.ToBoolean(Int64)\n  fullName: Convert.ToBoolean(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Convert.ToByte(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(String)\n  nameWithType: Convert.ToByte(String)\n  fullName: Convert.ToByte(String)\n- uid: System.Convert.ToByte(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(UInt16)\n  nameWithType: Convert.ToByte(UInt16)\n  fullName: Convert.ToByte(UInt16)\n- uid: System.Convert.ToByte(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(UInt32)\n  nameWithType: Convert.ToByte(UInt32)\n  fullName: Convert.ToByte(UInt32)\n- uid: System.Convert.ToByte(System.String,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(String, Int32)\n  nameWithType: Convert.ToByte(String, Int32)\n  fullName: Convert.ToByte(String, Int32)\n- uid: System.Convert.ToByte(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(Object, IFormatProvider)\n  nameWithType: Convert.ToByte(Object, IFormatProvider)\n  fullName: Convert.ToByte(Object, IFormatProvider)\n- uid: System.Convert.ToByte(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(String, IFormatProvider)\n  nameWithType: Convert.ToByte(String, IFormatProvider)\n  fullName: Convert.ToByte(String, IFormatProvider)\n- uid: System.Convert.ToByte(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(Single)\n  nameWithType: Convert.ToByte(Single)\n  fullName: Convert.ToByte(Single)\n- uid: System.Convert.ToByte(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(UInt64)\n  nameWithType: Convert.ToByte(UInt64)\n  fullName: Convert.ToByte(UInt64)\n- uid: System.Convert.ToByte(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(SByte)\n  nameWithType: Convert.ToByte(SByte)\n  fullName: Convert.ToByte(SByte)\n- uid: System.Convert.ToByte(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(Int16)\n  nameWithType: Convert.ToByte(Int16)\n  fullName: Convert.ToByte(Int16)\n- uid: System.Convert.ToByte(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(Int64)\n  nameWithType: Convert.ToByte(Int64)\n  fullName: Convert.ToByte(Int64)\n- uid: System.Convert.ToByte(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(Byte)\n  nameWithType: Convert.ToByte(Byte)\n  fullName: Convert.ToByte(Byte)\n- uid: System.Convert.ToByte(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(Char)\n  nameWithType: Convert.ToByte(Char)\n  fullName: Convert.ToByte(Char)\n- uid: System.Convert.ToByte(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(DateTime)\n  nameWithType: Convert.ToByte(DateTime)\n  fullName: Convert.ToByte(DateTime)\n- uid: System.Convert.ToByte(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(Boolean)\n  nameWithType: Convert.ToByte(Boolean)\n  fullName: Convert.ToByte(Boolean)\n- uid: System.Convert.ToByte(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(Double)\n  nameWithType: Convert.ToByte(Double)\n  fullName: Convert.ToByte(Double)\n- uid: System.Convert.ToByte(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(Int32)\n  nameWithType: Convert.ToByte(Int32)\n  fullName: Convert.ToByte(Int32)\n- uid: System.Convert.ToByte(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(Decimal)\n  nameWithType: Convert.ToByte(Decimal)\n  fullName: Convert.ToByte(Decimal)\n- uid: System.Convert.ToByte(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToByte(Object)\n  nameWithType: Convert.ToByte(Object)\n  fullName: Convert.ToByte(Object)\n- uid: System.Convert.ToChar(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(String, IFormatProvider)\n  nameWithType: Convert.ToChar(String, IFormatProvider)\n  fullName: Convert.ToChar(String, IFormatProvider)\n- uid: System.Convert.ToChar(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(Object)\n  nameWithType: Convert.ToChar(Object)\n  fullName: Convert.ToChar(Object)\n- uid: System.Convert.ToChar(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(Object, IFormatProvider)\n  nameWithType: Convert.ToChar(Object, IFormatProvider)\n  fullName: Convert.ToChar(Object, IFormatProvider)\n- uid: System.Convert.ToChar(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(UInt64)\n  nameWithType: Convert.ToChar(UInt64)\n  fullName: Convert.ToChar(UInt64)\n- uid: System.Convert.ToChar(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(UInt32)\n  nameWithType: Convert.ToChar(UInt32)\n  fullName: Convert.ToChar(UInt32)\n- uid: System.Convert.ToChar(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(UInt16)\n  nameWithType: Convert.ToChar(UInt16)\n  fullName: Convert.ToChar(UInt16)\n- uid: System.Convert.ToChar(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(String)\n  nameWithType: Convert.ToChar(String)\n  fullName: Convert.ToChar(String)\n- uid: System.Convert.ToChar(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(Single)\n  nameWithType: Convert.ToChar(Single)\n  fullName: Convert.ToChar(Single)\n- uid: System.Convert.ToChar(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(SByte)\n  nameWithType: Convert.ToChar(SByte)\n  fullName: Convert.ToChar(SByte)\n- uid: System.Convert.ToChar(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(Int64)\n  nameWithType: Convert.ToChar(Int64)\n  fullName: Convert.ToChar(Int64)\n- uid: System.Convert.ToChar(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(Int16)\n  nameWithType: Convert.ToChar(Int16)\n  fullName: Convert.ToChar(Int16)\n- uid: System.Convert.ToChar(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(Double)\n  nameWithType: Convert.ToChar(Double)\n  fullName: Convert.ToChar(Double)\n- uid: System.Convert.ToChar(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(Decimal)\n  nameWithType: Convert.ToChar(Decimal)\n  fullName: Convert.ToChar(Decimal)\n- uid: System.Convert.ToChar(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(DateTime)\n  nameWithType: Convert.ToChar(DateTime)\n  fullName: Convert.ToChar(DateTime)\n- uid: System.Convert.ToChar(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(Char)\n  nameWithType: Convert.ToChar(Char)\n  fullName: Convert.ToChar(Char)\n- uid: System.Convert.ToChar(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(Byte)\n  nameWithType: Convert.ToChar(Byte)\n  fullName: Convert.ToChar(Byte)\n- uid: System.Convert.ToChar(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(Boolean)\n  nameWithType: Convert.ToChar(Boolean)\n  fullName: Convert.ToChar(Boolean)\n- uid: System.Convert.ToChar(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToChar(Int32)\n  nameWithType: Convert.ToChar(Int32)\n  fullName: Convert.ToChar(Int32)\n- uid: System.Convert.ToDateTime(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(Single)\n  nameWithType: Convert.ToDateTime(Single)\n  fullName: Convert.ToDateTime(Single)\n- uid: System.Convert.ToDateTime(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(String)\n  nameWithType: Convert.ToDateTime(String)\n  fullName: Convert.ToDateTime(String)\n- uid: System.Convert.ToDateTime(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(UInt16)\n  nameWithType: Convert.ToDateTime(UInt16)\n  fullName: Convert.ToDateTime(UInt16)\n- uid: System.Convert.ToDateTime(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(String, IFormatProvider)\n  nameWithType: Convert.ToDateTime(String, IFormatProvider)\n  fullName: Convert.ToDateTime(String, IFormatProvider)\n- uid: System.Convert.ToDateTime(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(UInt64)\n  nameWithType: Convert.ToDateTime(UInt64)\n  fullName: Convert.ToDateTime(UInt64)\n- uid: System.Convert.ToDateTime(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(Object, IFormatProvider)\n  nameWithType: Convert.ToDateTime(Object, IFormatProvider)\n  fullName: Convert.ToDateTime(Object, IFormatProvider)\n- uid: System.Convert.ToDateTime(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(SByte)\n  nameWithType: Convert.ToDateTime(SByte)\n  fullName: Convert.ToDateTime(SByte)\n- uid: System.Convert.ToDateTime(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(UInt32)\n  nameWithType: Convert.ToDateTime(UInt32)\n  fullName: Convert.ToDateTime(UInt32)\n- uid: System.Convert.ToDateTime(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(Object)\n  nameWithType: Convert.ToDateTime(Object)\n  fullName: Convert.ToDateTime(Object)\n- uid: System.Convert.ToDateTime(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(Double)\n  nameWithType: Convert.ToDateTime(Double)\n  fullName: Convert.ToDateTime(Double)\n- uid: System.Convert.ToDateTime(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(Int32)\n  nameWithType: Convert.ToDateTime(Int32)\n  fullName: Convert.ToDateTime(Int32)\n- uid: System.Convert.ToDateTime(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(Boolean)\n  nameWithType: Convert.ToDateTime(Boolean)\n  fullName: Convert.ToDateTime(Boolean)\n- uid: System.Convert.ToDateTime(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(Byte)\n  nameWithType: Convert.ToDateTime(Byte)\n  fullName: Convert.ToDateTime(Byte)\n- uid: System.Convert.ToDateTime(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(Char)\n  nameWithType: Convert.ToDateTime(Char)\n  fullName: Convert.ToDateTime(Char)\n- uid: System.Convert.ToDateTime(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(Int64)\n  nameWithType: Convert.ToDateTime(Int64)\n  fullName: Convert.ToDateTime(Int64)\n- uid: System.Convert.ToDateTime(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(Decimal)\n  nameWithType: Convert.ToDateTime(Decimal)\n  fullName: Convert.ToDateTime(Decimal)\n- uid: System.Convert.ToDateTime(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(Int16)\n  nameWithType: Convert.ToDateTime(Int16)\n  fullName: Convert.ToDateTime(Int16)\n- uid: System.Convert.ToDateTime(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime(DateTime)\n  nameWithType: Convert.ToDateTime(DateTime)\n  fullName: Convert.ToDateTime(DateTime)\n- uid: System.Convert.ToDecimal(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(String, IFormatProvider)\n  nameWithType: Convert.ToDecimal(String, IFormatProvider)\n  fullName: Convert.ToDecimal(String, IFormatProvider)\n- uid: System.Convert.ToDecimal(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(Object, IFormatProvider)\n  nameWithType: Convert.ToDecimal(Object, IFormatProvider)\n  fullName: Convert.ToDecimal(Object, IFormatProvider)\n- uid: System.Convert.ToDecimal(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(UInt64)\n  nameWithType: Convert.ToDecimal(UInt64)\n  fullName: Convert.ToDecimal(UInt64)\n- uid: System.Convert.ToDecimal(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(UInt32)\n  nameWithType: Convert.ToDecimal(UInt32)\n  fullName: Convert.ToDecimal(UInt32)\n- uid: System.Convert.ToDecimal(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(UInt16)\n  nameWithType: Convert.ToDecimal(UInt16)\n  fullName: Convert.ToDecimal(UInt16)\n- uid: System.Convert.ToDecimal(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(String)\n  nameWithType: Convert.ToDecimal(String)\n  fullName: Convert.ToDecimal(String)\n- uid: System.Convert.ToDecimal(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(SByte)\n  nameWithType: Convert.ToDecimal(SByte)\n  fullName: Convert.ToDecimal(SByte)\n- uid: System.Convert.ToDecimal(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(Object)\n  nameWithType: Convert.ToDecimal(Object)\n  fullName: Convert.ToDecimal(Object)\n- uid: System.Convert.ToDecimal(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(Single)\n  nameWithType: Convert.ToDecimal(Single)\n  fullName: Convert.ToDecimal(Single)\n- uid: System.Convert.ToDecimal(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(Int32)\n  nameWithType: Convert.ToDecimal(Int32)\n  fullName: Convert.ToDecimal(Int32)\n- uid: System.Convert.ToDecimal(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(Boolean)\n  nameWithType: Convert.ToDecimal(Boolean)\n  fullName: Convert.ToDecimal(Boolean)\n- uid: System.Convert.ToDecimal(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(Byte)\n  nameWithType: Convert.ToDecimal(Byte)\n  fullName: Convert.ToDecimal(Byte)\n- uid: System.Convert.ToDecimal(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(Char)\n  nameWithType: Convert.ToDecimal(Char)\n  fullName: Convert.ToDecimal(Char)\n- uid: System.Convert.ToDecimal(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(Int64)\n  nameWithType: Convert.ToDecimal(Int64)\n  fullName: Convert.ToDecimal(Int64)\n- uid: System.Convert.ToDecimal(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(Decimal)\n  nameWithType: Convert.ToDecimal(Decimal)\n  fullName: Convert.ToDecimal(Decimal)\n- uid: System.Convert.ToDecimal(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(Double)\n  nameWithType: Convert.ToDecimal(Double)\n  fullName: Convert.ToDecimal(Double)\n- uid: System.Convert.ToDecimal(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(Int16)\n  nameWithType: Convert.ToDecimal(Int16)\n  fullName: Convert.ToDecimal(Int16)\n- uid: System.Convert.ToDecimal(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal(DateTime)\n  nameWithType: Convert.ToDecimal(DateTime)\n  fullName: Convert.ToDecimal(DateTime)\n- uid: System.Convert.ToDouble(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(SByte)\n  nameWithType: Convert.ToDouble(SByte)\n  fullName: Convert.ToDouble(SByte)\n- uid: System.Convert.ToDouble(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(Object, IFormatProvider)\n  nameWithType: Convert.ToDouble(Object, IFormatProvider)\n  fullName: Convert.ToDouble(Object, IFormatProvider)\n- uid: System.Convert.ToDouble(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(UInt64)\n  nameWithType: Convert.ToDouble(UInt64)\n  fullName: Convert.ToDouble(UInt64)\n- uid: System.Convert.ToDouble(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(UInt32)\n  nameWithType: Convert.ToDouble(UInt32)\n  fullName: Convert.ToDouble(UInt32)\n- uid: System.Convert.ToDouble(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(UInt16)\n  nameWithType: Convert.ToDouble(UInt16)\n  fullName: Convert.ToDouble(UInt16)\n- uid: System.Convert.ToDouble(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(String)\n  nameWithType: Convert.ToDouble(String)\n  fullName: Convert.ToDouble(String)\n- uid: System.Convert.ToDouble(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(Single)\n  nameWithType: Convert.ToDouble(Single)\n  fullName: Convert.ToDouble(Single)\n- uid: System.Convert.ToDouble(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(String, IFormatProvider)\n  nameWithType: Convert.ToDouble(String, IFormatProvider)\n  fullName: Convert.ToDouble(String, IFormatProvider)\n- uid: System.Convert.ToDouble(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(Object)\n  nameWithType: Convert.ToDouble(Object)\n  fullName: Convert.ToDouble(Object)\n- uid: System.Convert.ToDouble(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(Int32)\n  nameWithType: Convert.ToDouble(Int32)\n  fullName: Convert.ToDouble(Int32)\n- uid: System.Convert.ToDouble(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(Boolean)\n  nameWithType: Convert.ToDouble(Boolean)\n  fullName: Convert.ToDouble(Boolean)\n- uid: System.Convert.ToDouble(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(Byte)\n  nameWithType: Convert.ToDouble(Byte)\n  fullName: Convert.ToDouble(Byte)\n- uid: System.Convert.ToDouble(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(Char)\n  nameWithType: Convert.ToDouble(Char)\n  fullName: Convert.ToDouble(Char)\n- uid: System.Convert.ToDouble(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(Int64)\n  nameWithType: Convert.ToDouble(Int64)\n  fullName: Convert.ToDouble(Int64)\n- uid: System.Convert.ToDouble(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(Decimal)\n  nameWithType: Convert.ToDouble(Decimal)\n  fullName: Convert.ToDouble(Decimal)\n- uid: System.Convert.ToDouble(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(Double)\n  nameWithType: Convert.ToDouble(Double)\n  fullName: Convert.ToDouble(Double)\n- uid: System.Convert.ToDouble(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(Int16)\n  nameWithType: Convert.ToDouble(Int16)\n  fullName: Convert.ToDouble(Int16)\n- uid: System.Convert.ToDouble(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble(DateTime)\n  nameWithType: Convert.ToDouble(DateTime)\n  fullName: Convert.ToDouble(DateTime)\n- uid: System.Convert.ToInt16(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(SByte)\n  nameWithType: Convert.ToInt16(SByte)\n  fullName: Convert.ToInt16(SByte)\n- uid: System.Convert.ToInt16(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(String, IFormatProvider)\n  nameWithType: Convert.ToInt16(String, IFormatProvider)\n  fullName: Convert.ToInt16(String, IFormatProvider)\n- uid: System.Convert.ToInt16(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(Object, IFormatProvider)\n  nameWithType: Convert.ToInt16(Object, IFormatProvider)\n  fullName: Convert.ToInt16(Object, IFormatProvider)\n- uid: System.Convert.ToInt16(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(UInt64)\n  nameWithType: Convert.ToInt16(UInt64)\n  fullName: Convert.ToInt16(UInt64)\n- uid: System.Convert.ToInt16(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(UInt32)\n  nameWithType: Convert.ToInt16(UInt32)\n  fullName: Convert.ToInt16(UInt32)\n- uid: System.Convert.ToInt16(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(UInt16)\n  nameWithType: Convert.ToInt16(UInt16)\n  fullName: Convert.ToInt16(UInt16)\n- uid: System.Convert.ToInt16(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(String)\n  nameWithType: Convert.ToInt16(String)\n  fullName: Convert.ToInt16(String)\n- uid: System.Convert.ToInt16(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(Single)\n  nameWithType: Convert.ToInt16(Single)\n  fullName: Convert.ToInt16(Single)\n- uid: System.Convert.ToInt16(System.String,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(String, Int32)\n  nameWithType: Convert.ToInt16(String, Int32)\n  fullName: Convert.ToInt16(String, Int32)\n- uid: System.Convert.ToInt16(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(Object)\n  nameWithType: Convert.ToInt16(Object)\n  fullName: Convert.ToInt16(Object)\n- uid: System.Convert.ToInt16(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(Int32)\n  nameWithType: Convert.ToInt16(Int32)\n  fullName: Convert.ToInt16(Int32)\n- uid: System.Convert.ToInt16(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(Int16)\n  nameWithType: Convert.ToInt16(Int16)\n  fullName: Convert.ToInt16(Int16)\n- uid: System.Convert.ToInt16(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(Double)\n  nameWithType: Convert.ToInt16(Double)\n  fullName: Convert.ToInt16(Double)\n- uid: System.Convert.ToInt16(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(Decimal)\n  nameWithType: Convert.ToInt16(Decimal)\n  fullName: Convert.ToInt16(Decimal)\n- uid: System.Convert.ToInt16(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(DateTime)\n  nameWithType: Convert.ToInt16(DateTime)\n  fullName: Convert.ToInt16(DateTime)\n- uid: System.Convert.ToInt16(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(Char)\n  nameWithType: Convert.ToInt16(Char)\n  fullName: Convert.ToInt16(Char)\n- uid: System.Convert.ToInt16(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(Byte)\n  nameWithType: Convert.ToInt16(Byte)\n  fullName: Convert.ToInt16(Byte)\n- uid: System.Convert.ToInt16(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(Boolean)\n  nameWithType: Convert.ToInt16(Boolean)\n  fullName: Convert.ToInt16(Boolean)\n- uid: System.Convert.ToInt16(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16(Int64)\n  nameWithType: Convert.ToInt16(Int64)\n  fullName: Convert.ToInt16(Int64)\n- uid: System.Convert.ToInt32(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(Single)\n  nameWithType: Convert.ToInt32(Single)\n  fullName: Convert.ToInt32(Single)\n- uid: System.Convert.ToInt32(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(UInt16)\n  nameWithType: Convert.ToInt32(UInt16)\n  fullName: Convert.ToInt32(UInt16)\n- uid: System.Convert.ToInt32(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(UInt32)\n  nameWithType: Convert.ToInt32(UInt32)\n  fullName: Convert.ToInt32(UInt32)\n- uid: System.Convert.ToInt32(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(SByte)\n  nameWithType: Convert.ToInt32(SByte)\n  fullName: Convert.ToInt32(SByte)\n- uid: System.Convert.ToInt32(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(Object, IFormatProvider)\n  nameWithType: Convert.ToInt32(Object, IFormatProvider)\n  fullName: Convert.ToInt32(Object, IFormatProvider)\n- uid: System.Convert.ToInt32(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(String, IFormatProvider)\n  nameWithType: Convert.ToInt32(String, IFormatProvider)\n  fullName: Convert.ToInt32(String, IFormatProvider)\n- uid: System.Convert.ToInt32(System.String,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(String, Int32)\n  nameWithType: Convert.ToInt32(String, Int32)\n  fullName: Convert.ToInt32(String, Int32)\n- uid: System.Convert.ToInt32(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(UInt64)\n  nameWithType: Convert.ToInt32(UInt64)\n  fullName: Convert.ToInt32(UInt64)\n- uid: System.Convert.ToInt32(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(Object)\n  nameWithType: Convert.ToInt32(Object)\n  fullName: Convert.ToInt32(Object)\n- uid: System.Convert.ToInt32(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(String)\n  nameWithType: Convert.ToInt32(String)\n  fullName: Convert.ToInt32(String)\n- uid: System.Convert.ToInt32(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(Int32)\n  nameWithType: Convert.ToInt32(Int32)\n  fullName: Convert.ToInt32(Int32)\n- uid: System.Convert.ToInt32(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(Byte)\n  nameWithType: Convert.ToInt32(Byte)\n  fullName: Convert.ToInt32(Byte)\n- uid: System.Convert.ToInt32(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(Char)\n  nameWithType: Convert.ToInt32(Char)\n  fullName: Convert.ToInt32(Char)\n- uid: System.Convert.ToInt32(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(DateTime)\n  nameWithType: Convert.ToInt32(DateTime)\n  fullName: Convert.ToInt32(DateTime)\n- uid: System.Convert.ToInt32(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(Boolean)\n  nameWithType: Convert.ToInt32(Boolean)\n  fullName: Convert.ToInt32(Boolean)\n- uid: System.Convert.ToInt32(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(Double)\n  nameWithType: Convert.ToInt32(Double)\n  fullName: Convert.ToInt32(Double)\n- uid: System.Convert.ToInt32(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(Int64)\n  nameWithType: Convert.ToInt32(Int64)\n  fullName: Convert.ToInt32(Int64)\n- uid: System.Convert.ToInt32(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(Int16)\n  nameWithType: Convert.ToInt32(Int16)\n  fullName: Convert.ToInt32(Int16)\n- uid: System.Convert.ToInt32(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32(Decimal)\n  nameWithType: Convert.ToInt32(Decimal)\n  fullName: Convert.ToInt32(Decimal)\n- uid: System.Convert.ToInt64(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(Single)\n  nameWithType: Convert.ToInt64(Single)\n  fullName: Convert.ToInt64(Single)\n- uid: System.Convert.ToInt64(System.String,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(String, Int32)\n  nameWithType: Convert.ToInt64(String, Int32)\n  fullName: Convert.ToInt64(String, Int32)\n- uid: System.Convert.ToInt64(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(String, IFormatProvider)\n  nameWithType: Convert.ToInt64(String, IFormatProvider)\n  fullName: Convert.ToInt64(String, IFormatProvider)\n- uid: System.Convert.ToInt64(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(Object, IFormatProvider)\n  nameWithType: Convert.ToInt64(Object, IFormatProvider)\n  fullName: Convert.ToInt64(Object, IFormatProvider)\n- uid: System.Convert.ToInt64(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(UInt64)\n  nameWithType: Convert.ToInt64(UInt64)\n  fullName: Convert.ToInt64(UInt64)\n- uid: System.Convert.ToInt64(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(UInt32)\n  nameWithType: Convert.ToInt64(UInt32)\n  fullName: Convert.ToInt64(UInt32)\n- uid: System.Convert.ToInt64(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(UInt16)\n  nameWithType: Convert.ToInt64(UInt16)\n  fullName: Convert.ToInt64(UInt16)\n- uid: System.Convert.ToInt64(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(String)\n  nameWithType: Convert.ToInt64(String)\n  fullName: Convert.ToInt64(String)\n- uid: System.Convert.ToInt64(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(SByte)\n  nameWithType: Convert.ToInt64(SByte)\n  fullName: Convert.ToInt64(SByte)\n- uid: System.Convert.ToInt64(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(Object)\n  nameWithType: Convert.ToInt64(Object)\n  fullName: Convert.ToInt64(Object)\n- uid: System.Convert.ToInt64(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(Int64)\n  nameWithType: Convert.ToInt64(Int64)\n  fullName: Convert.ToInt64(Int64)\n- uid: System.Convert.ToInt64(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(Byte)\n  nameWithType: Convert.ToInt64(Byte)\n  fullName: Convert.ToInt64(Byte)\n- uid: System.Convert.ToInt64(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(Char)\n  nameWithType: Convert.ToInt64(Char)\n  fullName: Convert.ToInt64(Char)\n- uid: System.Convert.ToInt64(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(DateTime)\n  nameWithType: Convert.ToInt64(DateTime)\n  fullName: Convert.ToInt64(DateTime)\n- uid: System.Convert.ToInt64(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(Boolean)\n  nameWithType: Convert.ToInt64(Boolean)\n  fullName: Convert.ToInt64(Boolean)\n- uid: System.Convert.ToInt64(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(Double)\n  nameWithType: Convert.ToInt64(Double)\n  fullName: Convert.ToInt64(Double)\n- uid: System.Convert.ToInt64(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(Int16)\n  nameWithType: Convert.ToInt64(Int16)\n  fullName: Convert.ToInt64(Int16)\n- uid: System.Convert.ToInt64(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(Int32)\n  nameWithType: Convert.ToInt64(Int32)\n  fullName: Convert.ToInt64(Int32)\n- uid: System.Convert.ToInt64(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64(Decimal)\n  nameWithType: Convert.ToInt64(Decimal)\n  fullName: Convert.ToInt64(Decimal)\n- uid: System.Convert.ToSByte(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(SByte)\n  nameWithType: Convert.ToSByte(SByte)\n  fullName: Convert.ToSByte(SByte)\n- uid: System.Convert.ToSByte(System.String,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(String, Int32)\n  nameWithType: Convert.ToSByte(String, Int32)\n  fullName: Convert.ToSByte(String, Int32)\n- uid: System.Convert.ToSByte(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(String, IFormatProvider)\n  nameWithType: Convert.ToSByte(String, IFormatProvider)\n  fullName: Convert.ToSByte(String, IFormatProvider)\n- uid: System.Convert.ToSByte(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(Object, IFormatProvider)\n  nameWithType: Convert.ToSByte(Object, IFormatProvider)\n  fullName: Convert.ToSByte(Object, IFormatProvider)\n- uid: System.Convert.ToSByte(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(UInt64)\n  nameWithType: Convert.ToSByte(UInt64)\n  fullName: Convert.ToSByte(UInt64)\n- uid: System.Convert.ToSByte(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(UInt32)\n  nameWithType: Convert.ToSByte(UInt32)\n  fullName: Convert.ToSByte(UInt32)\n- uid: System.Convert.ToSByte(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(String)\n  nameWithType: Convert.ToSByte(String)\n  fullName: Convert.ToSByte(String)\n- uid: System.Convert.ToSByte(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(Single)\n  nameWithType: Convert.ToSByte(Single)\n  fullName: Convert.ToSByte(Single)\n- uid: System.Convert.ToSByte(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(Object)\n  nameWithType: Convert.ToSByte(Object)\n  fullName: Convert.ToSByte(Object)\n- uid: System.Convert.ToSByte(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(UInt16)\n  nameWithType: Convert.ToSByte(UInt16)\n  fullName: Convert.ToSByte(UInt16)\n- uid: System.Convert.ToSByte(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(Int32)\n  nameWithType: Convert.ToSByte(Int32)\n  fullName: Convert.ToSByte(Int32)\n- uid: System.Convert.ToSByte(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(Int64)\n  nameWithType: Convert.ToSByte(Int64)\n  fullName: Convert.ToSByte(Int64)\n- uid: System.Convert.ToSByte(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(Byte)\n  nameWithType: Convert.ToSByte(Byte)\n  fullName: Convert.ToSByte(Byte)\n- uid: System.Convert.ToSByte(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(Char)\n  nameWithType: Convert.ToSByte(Char)\n  fullName: Convert.ToSByte(Char)\n- uid: System.Convert.ToSByte(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(DateTime)\n  nameWithType: Convert.ToSByte(DateTime)\n  fullName: Convert.ToSByte(DateTime)\n- uid: System.Convert.ToSByte(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(Boolean)\n  nameWithType: Convert.ToSByte(Boolean)\n  fullName: Convert.ToSByte(Boolean)\n- uid: System.Convert.ToSByte(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(Double)\n  nameWithType: Convert.ToSByte(Double)\n  fullName: Convert.ToSByte(Double)\n- uid: System.Convert.ToSByte(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(Int16)\n  nameWithType: Convert.ToSByte(Int16)\n  fullName: Convert.ToSByte(Int16)\n- uid: System.Convert.ToSByte(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte(Decimal)\n  nameWithType: Convert.ToSByte(Decimal)\n  fullName: Convert.ToSByte(Decimal)\n- uid: System.Convert.ToSingle(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(String, IFormatProvider)\n  nameWithType: Convert.ToSingle(String, IFormatProvider)\n  fullName: Convert.ToSingle(String, IFormatProvider)\n- uid: System.Convert.ToSingle(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(SByte)\n  nameWithType: Convert.ToSingle(SByte)\n  fullName: Convert.ToSingle(SByte)\n- uid: System.Convert.ToSingle(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(Object, IFormatProvider)\n  nameWithType: Convert.ToSingle(Object, IFormatProvider)\n  fullName: Convert.ToSingle(Object, IFormatProvider)\n- uid: System.Convert.ToSingle(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(UInt64)\n  nameWithType: Convert.ToSingle(UInt64)\n  fullName: Convert.ToSingle(UInt64)\n- uid: System.Convert.ToSingle(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(UInt32)\n  nameWithType: Convert.ToSingle(UInt32)\n  fullName: Convert.ToSingle(UInt32)\n- uid: System.Convert.ToSingle(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(String)\n  nameWithType: Convert.ToSingle(String)\n  fullName: Convert.ToSingle(String)\n- uid: System.Convert.ToSingle(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(Single)\n  nameWithType: Convert.ToSingle(Single)\n  fullName: Convert.ToSingle(Single)\n- uid: System.Convert.ToSingle(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(Object)\n  nameWithType: Convert.ToSingle(Object)\n  fullName: Convert.ToSingle(Object)\n- uid: System.Convert.ToSingle(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(UInt16)\n  nameWithType: Convert.ToSingle(UInt16)\n  fullName: Convert.ToSingle(UInt16)\n- uid: System.Convert.ToSingle(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(Int32)\n  nameWithType: Convert.ToSingle(Int32)\n  fullName: Convert.ToSingle(Int32)\n- uid: System.Convert.ToSingle(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(Int16)\n  nameWithType: Convert.ToSingle(Int16)\n  fullName: Convert.ToSingle(Int16)\n- uid: System.Convert.ToSingle(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(Double)\n  nameWithType: Convert.ToSingle(Double)\n  fullName: Convert.ToSingle(Double)\n- uid: System.Convert.ToSingle(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(Decimal)\n  nameWithType: Convert.ToSingle(Decimal)\n  fullName: Convert.ToSingle(Decimal)\n- uid: System.Convert.ToSingle(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(DateTime)\n  nameWithType: Convert.ToSingle(DateTime)\n  fullName: Convert.ToSingle(DateTime)\n- uid: System.Convert.ToSingle(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(Char)\n  nameWithType: Convert.ToSingle(Char)\n  fullName: Convert.ToSingle(Char)\n- uid: System.Convert.ToSingle(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(Byte)\n  nameWithType: Convert.ToSingle(Byte)\n  fullName: Convert.ToSingle(Byte)\n- uid: System.Convert.ToSingle(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(Boolean)\n  nameWithType: Convert.ToSingle(Boolean)\n  fullName: Convert.ToSingle(Boolean)\n- uid: System.Convert.ToSingle(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle(Int64)\n  nameWithType: Convert.ToSingle(Int64)\n  fullName: Convert.ToSingle(Int64)\n- uid: System.Convert.ToString(System.Int16,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Int16, Int32)\n  nameWithType: Convert.ToString(Int16, Int32)\n  fullName: Convert.ToString(Int16, Int32)\n- uid: System.Convert.ToString(System.Int16,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Int16, IFormatProvider)\n  nameWithType: Convert.ToString(Int16, IFormatProvider)\n  fullName: Convert.ToString(Int16, IFormatProvider)\n- uid: System.Convert.ToString(System.DateTime,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(DateTime, IFormatProvider)\n  nameWithType: Convert.ToString(DateTime, IFormatProvider)\n  fullName: Convert.ToString(DateTime, IFormatProvider)\n- uid: System.Convert.ToString(System.UInt64,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(UInt64, IFormatProvider)\n  nameWithType: Convert.ToString(UInt64, IFormatProvider)\n  fullName: Convert.ToString(UInt64, IFormatProvider)\n- uid: System.Convert.ToString(System.Decimal,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Decimal, IFormatProvider)\n  nameWithType: Convert.ToString(Decimal, IFormatProvider)\n  fullName: Convert.ToString(Decimal, IFormatProvider)\n- uid: System.Convert.ToString(System.Int32,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Int32, IFormatProvider)\n  nameWithType: Convert.ToString(Int32, IFormatProvider)\n  fullName: Convert.ToString(Int32, IFormatProvider)\n- uid: System.Convert.ToString(System.Double,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Double, IFormatProvider)\n  nameWithType: Convert.ToString(Double, IFormatProvider)\n  fullName: Convert.ToString(Double, IFormatProvider)\n- uid: System.Convert.ToString(System.Int32,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Int32, Int32)\n  nameWithType: Convert.ToString(Int32, Int32)\n  fullName: Convert.ToString(Int32, Int32)\n- uid: System.Convert.ToString(System.SByte,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(SByte, IFormatProvider)\n  nameWithType: Convert.ToString(SByte, IFormatProvider)\n  fullName: Convert.ToString(SByte, IFormatProvider)\n- uid: System.Convert.ToString(System.Int64,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Int64, Int32)\n  nameWithType: Convert.ToString(Int64, Int32)\n  fullName: Convert.ToString(Int64, Int32)\n- uid: System.Convert.ToString(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Object, IFormatProvider)\n  nameWithType: Convert.ToString(Object, IFormatProvider)\n  fullName: Convert.ToString(Object, IFormatProvider)\n- uid: System.Convert.ToString(System.Single,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Single, IFormatProvider)\n  nameWithType: Convert.ToString(Single, IFormatProvider)\n  fullName: Convert.ToString(Single, IFormatProvider)\n- uid: System.Convert.ToString(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(String, IFormatProvider)\n  nameWithType: Convert.ToString(String, IFormatProvider)\n  fullName: Convert.ToString(String, IFormatProvider)\n- uid: System.Convert.ToString(System.UInt16,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(UInt16, IFormatProvider)\n  nameWithType: Convert.ToString(UInt16, IFormatProvider)\n  fullName: Convert.ToString(UInt16, IFormatProvider)\n- uid: System.Convert.ToString(System.UInt32,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(UInt32, IFormatProvider)\n  nameWithType: Convert.ToString(UInt32, IFormatProvider)\n  fullName: Convert.ToString(UInt32, IFormatProvider)\n- uid: System.Convert.ToString(System.Char,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Char, IFormatProvider)\n  nameWithType: Convert.ToString(Char, IFormatProvider)\n  fullName: Convert.ToString(Char, IFormatProvider)\n- uid: System.Convert.ToString(System.Int64,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Int64, IFormatProvider)\n  nameWithType: Convert.ToString(Int64, IFormatProvider)\n  fullName: Convert.ToString(Int64, IFormatProvider)\n- uid: System.Convert.ToString(System.Byte,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Byte, Int32)\n  nameWithType: Convert.ToString(Byte, Int32)\n  fullName: Convert.ToString(Byte, Int32)\n- uid: System.Convert.ToString(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(UInt16)\n  nameWithType: Convert.ToString(UInt16)\n  fullName: Convert.ToString(UInt16)\n- uid: System.Convert.ToString(System.Boolean,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Boolean, IFormatProvider)\n  nameWithType: Convert.ToString(Boolean, IFormatProvider)\n  fullName: Convert.ToString(Boolean, IFormatProvider)\n- uid: System.Convert.ToString(System.Byte,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Byte, IFormatProvider)\n  nameWithType: Convert.ToString(Byte, IFormatProvider)\n  fullName: Convert.ToString(Byte, IFormatProvider)\n- uid: System.Convert.ToString(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Boolean)\n  nameWithType: Convert.ToString(Boolean)\n  fullName: Convert.ToString(Boolean)\n- uid: System.Convert.ToString(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Byte)\n  nameWithType: Convert.ToString(Byte)\n  fullName: Convert.ToString(Byte)\n- uid: System.Convert.ToString(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Char)\n  nameWithType: Convert.ToString(Char)\n  fullName: Convert.ToString(Char)\n- uid: System.Convert.ToString(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Decimal)\n  nameWithType: Convert.ToString(Decimal)\n  fullName: Convert.ToString(Decimal)\n- uid: System.Convert.ToString(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Double)\n  nameWithType: Convert.ToString(Double)\n  fullName: Convert.ToString(Double)\n- uid: System.Convert.ToString(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Int16)\n  nameWithType: Convert.ToString(Int16)\n  fullName: Convert.ToString(Int16)\n- uid: System.Convert.ToString(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(DateTime)\n  nameWithType: Convert.ToString(DateTime)\n  fullName: Convert.ToString(DateTime)\n- uid: System.Convert.ToString(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Int64)\n  nameWithType: Convert.ToString(Int64)\n  fullName: Convert.ToString(Int64)\n- uid: System.Convert.ToString(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Object)\n  nameWithType: Convert.ToString(Object)\n  fullName: Convert.ToString(Object)\n- uid: System.Convert.ToString(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(SByte)\n  nameWithType: Convert.ToString(SByte)\n  fullName: Convert.ToString(SByte)\n- uid: System.Convert.ToString(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Single)\n  nameWithType: Convert.ToString(Single)\n  fullName: Convert.ToString(Single)\n- uid: System.Convert.ToString(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(String)\n  nameWithType: Convert.ToString(String)\n  fullName: Convert.ToString(String)\n- uid: System.Convert.ToString(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(UInt32)\n  nameWithType: Convert.ToString(UInt32)\n  fullName: Convert.ToString(UInt32)\n- uid: System.Convert.ToString(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(UInt64)\n  nameWithType: Convert.ToString(UInt64)\n  fullName: Convert.ToString(UInt64)\n- uid: System.Convert.ToString(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToString(Int32)\n  nameWithType: Convert.ToString(Int32)\n  fullName: Convert.ToString(Int32)\n- uid: System.Convert.ToUInt16(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(String)\n  nameWithType: Convert.ToUInt16(String)\n  fullName: Convert.ToUInt16(String)\n- uid: System.Convert.ToUInt16(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(UInt16)\n  nameWithType: Convert.ToUInt16(UInt16)\n  fullName: Convert.ToUInt16(UInt16)\n- uid: System.Convert.ToUInt16(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(UInt32)\n  nameWithType: Convert.ToUInt16(UInt32)\n  fullName: Convert.ToUInt16(UInt32)\n- uid: System.Convert.ToUInt16(System.String,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(String, Int32)\n  nameWithType: Convert.ToUInt16(String, Int32)\n  fullName: Convert.ToUInt16(String, Int32)\n- uid: System.Convert.ToUInt16(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(Object, IFormatProvider)\n  nameWithType: Convert.ToUInt16(Object, IFormatProvider)\n  fullName: Convert.ToUInt16(Object, IFormatProvider)\n- uid: System.Convert.ToUInt16(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(String, IFormatProvider)\n  nameWithType: Convert.ToUInt16(String, IFormatProvider)\n  fullName: Convert.ToUInt16(String, IFormatProvider)\n- uid: System.Convert.ToUInt16(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(Single)\n  nameWithType: Convert.ToUInt16(Single)\n  fullName: Convert.ToUInt16(Single)\n- uid: System.Convert.ToUInt16(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(UInt64)\n  nameWithType: Convert.ToUInt16(UInt64)\n  fullName: Convert.ToUInt16(UInt64)\n- uid: System.Convert.ToUInt16(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(SByte)\n  nameWithType: Convert.ToUInt16(SByte)\n  fullName: Convert.ToUInt16(SByte)\n- uid: System.Convert.ToUInt16(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(Double)\n  nameWithType: Convert.ToUInt16(Double)\n  fullName: Convert.ToUInt16(Double)\n- uid: System.Convert.ToUInt16(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(Int64)\n  nameWithType: Convert.ToUInt16(Int64)\n  fullName: Convert.ToUInt16(Int64)\n- uid: System.Convert.ToUInt16(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(Object)\n  nameWithType: Convert.ToUInt16(Object)\n  fullName: Convert.ToUInt16(Object)\n- uid: System.Convert.ToUInt16(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(Byte)\n  nameWithType: Convert.ToUInt16(Byte)\n  fullName: Convert.ToUInt16(Byte)\n- uid: System.Convert.ToUInt16(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(Char)\n  nameWithType: Convert.ToUInt16(Char)\n  fullName: Convert.ToUInt16(Char)\n- uid: System.Convert.ToUInt16(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(DateTime)\n  nameWithType: Convert.ToUInt16(DateTime)\n  fullName: Convert.ToUInt16(DateTime)\n- uid: System.Convert.ToUInt16(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(Boolean)\n  nameWithType: Convert.ToUInt16(Boolean)\n  fullName: Convert.ToUInt16(Boolean)\n- uid: System.Convert.ToUInt16(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(Int16)\n  nameWithType: Convert.ToUInt16(Int16)\n  fullName: Convert.ToUInt16(Int16)\n- uid: System.Convert.ToUInt16(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(Int32)\n  nameWithType: Convert.ToUInt16(Int32)\n  fullName: Convert.ToUInt16(Int32)\n- uid: System.Convert.ToUInt16(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16(Decimal)\n  nameWithType: Convert.ToUInt16(Decimal)\n  fullName: Convert.ToUInt16(Decimal)\n- uid: System.Convert.ToUInt32(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(Single)\n  nameWithType: Convert.ToUInt32(Single)\n  fullName: Convert.ToUInt32(Single)\n- uid: System.Convert.ToUInt32(System.String,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(String, Int32)\n  nameWithType: Convert.ToUInt32(String, Int32)\n  fullName: Convert.ToUInt32(String, Int32)\n- uid: System.Convert.ToUInt32(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(String, IFormatProvider)\n  nameWithType: Convert.ToUInt32(String, IFormatProvider)\n  fullName: Convert.ToUInt32(String, IFormatProvider)\n- uid: System.Convert.ToUInt32(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(Object, IFormatProvider)\n  nameWithType: Convert.ToUInt32(Object, IFormatProvider)\n  fullName: Convert.ToUInt32(Object, IFormatProvider)\n- uid: System.Convert.ToUInt32(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(UInt64)\n  nameWithType: Convert.ToUInt32(UInt64)\n  fullName: Convert.ToUInt32(UInt64)\n- uid: System.Convert.ToUInt32(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(UInt32)\n  nameWithType: Convert.ToUInt32(UInt32)\n  fullName: Convert.ToUInt32(UInt32)\n- uid: System.Convert.ToUInt32(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(UInt16)\n  nameWithType: Convert.ToUInt32(UInt16)\n  fullName: Convert.ToUInt32(UInt16)\n- uid: System.Convert.ToUInt32(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(String)\n  nameWithType: Convert.ToUInt32(String)\n  fullName: Convert.ToUInt32(String)\n- uid: System.Convert.ToUInt32(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(SByte)\n  nameWithType: Convert.ToUInt32(SByte)\n  fullName: Convert.ToUInt32(SByte)\n- uid: System.Convert.ToUInt32(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(Boolean)\n  nameWithType: Convert.ToUInt32(Boolean)\n  fullName: Convert.ToUInt32(Boolean)\n- uid: System.Convert.ToUInt32(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(Int64)\n  nameWithType: Convert.ToUInt32(Int64)\n  fullName: Convert.ToUInt32(Int64)\n- uid: System.Convert.ToUInt32(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(Int32)\n  nameWithType: Convert.ToUInt32(Int32)\n  fullName: Convert.ToUInt32(Int32)\n- uid: System.Convert.ToUInt32(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(Int16)\n  nameWithType: Convert.ToUInt32(Int16)\n  fullName: Convert.ToUInt32(Int16)\n- uid: System.Convert.ToUInt32(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(Double)\n  nameWithType: Convert.ToUInt32(Double)\n  fullName: Convert.ToUInt32(Double)\n- uid: System.Convert.ToUInt32(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(Decimal)\n  nameWithType: Convert.ToUInt32(Decimal)\n  fullName: Convert.ToUInt32(Decimal)\n- uid: System.Convert.ToUInt32(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(DateTime)\n  nameWithType: Convert.ToUInt32(DateTime)\n  fullName: Convert.ToUInt32(DateTime)\n- uid: System.Convert.ToUInt32(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(Char)\n  nameWithType: Convert.ToUInt32(Char)\n  fullName: Convert.ToUInt32(Char)\n- uid: System.Convert.ToUInt32(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(Byte)\n  nameWithType: Convert.ToUInt32(Byte)\n  fullName: Convert.ToUInt32(Byte)\n- uid: System.Convert.ToUInt32(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32(Object)\n  nameWithType: Convert.ToUInt32(Object)\n  fullName: Convert.ToUInt32(Object)\n- uid: System.Convert.ToUInt64(System.Single)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(Single)\n  nameWithType: Convert.ToUInt64(Single)\n  fullName: Convert.ToUInt64(Single)\n- uid: System.Convert.ToUInt64(System.String)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(String)\n  nameWithType: Convert.ToUInt64(String)\n  fullName: Convert.ToUInt64(String)\n- uid: System.Convert.ToUInt64(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(Object, IFormatProvider)\n  nameWithType: Convert.ToUInt64(Object, IFormatProvider)\n  fullName: Convert.ToUInt64(Object, IFormatProvider)\n- uid: System.Convert.ToUInt64(System.UInt32)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(UInt32)\n  nameWithType: Convert.ToUInt64(UInt32)\n  fullName: Convert.ToUInt64(UInt32)\n- uid: System.Convert.ToUInt64(System.UInt64)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(UInt64)\n  nameWithType: Convert.ToUInt64(UInt64)\n  fullName: Convert.ToUInt64(UInt64)\n- uid: System.Convert.ToUInt64(System.SByte)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(SByte)\n  nameWithType: Convert.ToUInt64(SByte)\n  fullName: Convert.ToUInt64(SByte)\n- uid: System.Convert.ToUInt64(System.UInt16)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(UInt16)\n  nameWithType: Convert.ToUInt64(UInt16)\n  fullName: Convert.ToUInt64(UInt16)\n- uid: System.Convert.ToUInt64(System.Object)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(Object)\n  nameWithType: Convert.ToUInt64(Object)\n  fullName: Convert.ToUInt64(Object)\n- uid: System.Convert.ToUInt64(System.Decimal)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(Decimal)\n  nameWithType: Convert.ToUInt64(Decimal)\n  fullName: Convert.ToUInt64(Decimal)\n- uid: System.Convert.ToUInt64(System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(Int32)\n  nameWithType: Convert.ToUInt64(Int32)\n  fullName: Convert.ToUInt64(Int32)\n- uid: System.Convert.ToUInt64(System.Int16)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(Int16)\n  nameWithType: Convert.ToUInt64(Int16)\n  fullName: Convert.ToUInt64(Int16)\n- uid: System.Convert.ToUInt64(System.Double)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(Double)\n  nameWithType: Convert.ToUInt64(Double)\n  fullName: Convert.ToUInt64(Double)\n- uid: System.Convert.ToUInt64(System.DateTime)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(DateTime)\n  nameWithType: Convert.ToUInt64(DateTime)\n  fullName: Convert.ToUInt64(DateTime)\n- uid: System.Convert.ToUInt64(System.Char)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(Char)\n  nameWithType: Convert.ToUInt64(Char)\n  fullName: Convert.ToUInt64(Char)\n- uid: System.Convert.ToUInt64(System.Byte)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(Byte)\n  nameWithType: Convert.ToUInt64(Byte)\n  fullName: Convert.ToUInt64(Byte)\n- uid: System.Convert.ToUInt64(System.Boolean)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(Boolean)\n  nameWithType: Convert.ToUInt64(Boolean)\n  fullName: Convert.ToUInt64(Boolean)\n- uid: System.Convert.ToUInt64(System.String,System.IFormatProvider)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(String, IFormatProvider)\n  nameWithType: Convert.ToUInt64(String, IFormatProvider)\n  fullName: Convert.ToUInt64(String, IFormatProvider)\n- uid: System.Convert.ToUInt64(System.Int64)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(Int64)\n  nameWithType: Convert.ToUInt64(Int64)\n  fullName: Convert.ToUInt64(Int64)\n- uid: System.Convert.ToUInt64(System.String,System.Int32)\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64(String, Int32)\n  nameWithType: Convert.ToUInt64(String, Int32)\n  fullName: Convert.ToUInt64(String, Int32)\n- uid: System.Convert.ChangeType*\n  parent: System.Convert\n  isExternal: false\n  name: ChangeType\n  nameWithType: Convert.ChangeType\n  fullName: Convert.ChangeType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.FromBase64CharArray*\n  parent: System.Convert\n  isExternal: false\n  name: FromBase64CharArray\n  nameWithType: Convert.FromBase64CharArray\n  fullName: Convert.FromBase64CharArray\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.FromBase64String*\n  parent: System.Convert\n  isExternal: false\n  name: FromBase64String\n  nameWithType: Convert.FromBase64String\n  fullName: Convert.FromBase64String\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.GetTypeCode*\n  parent: System.Convert\n  isExternal: false\n  name: GetTypeCode\n  nameWithType: Convert.GetTypeCode\n  fullName: Convert.GetTypeCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.IsDBNull*\n  parent: System.Convert\n  isExternal: false\n  name: IsDBNull\n  nameWithType: Convert.IsDBNull\n  fullName: Convert.IsDBNull\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToBase64CharArray*\n  parent: System.Convert\n  isExternal: false\n  name: ToBase64CharArray\n  nameWithType: Convert.ToBase64CharArray\n  fullName: Convert.ToBase64CharArray\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToBase64String*\n  parent: System.Convert\n  isExternal: false\n  name: ToBase64String\n  nameWithType: Convert.ToBase64String\n  fullName: Convert.ToBase64String\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToBoolean*\n  parent: System.Convert\n  isExternal: false\n  name: ToBoolean\n  nameWithType: Convert.ToBoolean\n  fullName: Convert.ToBoolean\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToByte*\n  parent: System.Convert\n  isExternal: false\n  name: ToByte\n  nameWithType: Convert.ToByte\n  fullName: Convert.ToByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToChar*\n  parent: System.Convert\n  isExternal: false\n  name: ToChar\n  nameWithType: Convert.ToChar\n  fullName: Convert.ToChar\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToDateTime*\n  parent: System.Convert\n  isExternal: false\n  name: ToDateTime\n  nameWithType: Convert.ToDateTime\n  fullName: Convert.ToDateTime\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToDecimal*\n  parent: System.Convert\n  isExternal: false\n  name: ToDecimal\n  nameWithType: Convert.ToDecimal\n  fullName: Convert.ToDecimal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToDouble*\n  parent: System.Convert\n  isExternal: false\n  name: ToDouble\n  nameWithType: Convert.ToDouble\n  fullName: Convert.ToDouble\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToInt16*\n  parent: System.Convert\n  isExternal: false\n  name: ToInt16\n  nameWithType: Convert.ToInt16\n  fullName: Convert.ToInt16\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToInt32*\n  parent: System.Convert\n  isExternal: false\n  name: ToInt32\n  nameWithType: Convert.ToInt32\n  fullName: Convert.ToInt32\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToInt64*\n  parent: System.Convert\n  isExternal: false\n  name: ToInt64\n  nameWithType: Convert.ToInt64\n  fullName: Convert.ToInt64\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToSByte*\n  parent: System.Convert\n  isExternal: false\n  name: ToSByte\n  nameWithType: Convert.ToSByte\n  fullName: Convert.ToSByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToSingle*\n  parent: System.Convert\n  isExternal: false\n  name: ToSingle\n  nameWithType: Convert.ToSingle\n  fullName: Convert.ToSingle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToString*\n  parent: System.Convert\n  isExternal: false\n  name: ToString\n  nameWithType: Convert.ToString\n  fullName: Convert.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToUInt16*\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt16\n  nameWithType: Convert.ToUInt16\n  fullName: Convert.ToUInt16\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToUInt32*\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt32\n  nameWithType: Convert.ToUInt32\n  fullName: Convert.ToUInt32\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Convert.ToUInt64*\n  parent: System.Convert\n  isExternal: false\n  name: ToUInt64\n  nameWithType: Convert.ToUInt64\n  fullName: Convert.ToUInt64\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}