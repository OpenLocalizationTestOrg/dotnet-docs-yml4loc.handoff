{"nodes":[{"content":"Defines static convenience methods for scoping.","nodes":[{"pos":[0,47],"content":"Defines static convenience methods for scoping.","nodes":[{"content":"Defines static convenience methods for scoping.","pos":[0,47]}]}],"pos":[1623,1671],"yaml":true},{"content":"Gets a value that indicates whether the specified part contains metadata that has the specified key and value.","nodes":[{"pos":[0,110],"content":"Gets a value that indicates whether the specified part contains metadata that has the specified key and value.","nodes":[{"content":"Gets a value that indicates whether the specified part contains metadata that has the specified key and value.","pos":[0,110]}]}],"pos":[3725,3836],"yaml":true},{"content":"The part to search.","nodes":[{"pos":[0,19],"content":"The part to search.","nodes":[{"content":"The part to search.","pos":[0,19]}]}],"pos":[4138,4158],"yaml":true},{"content":"The metadata key.","nodes":[{"pos":[0,17],"content":"The metadata key.","nodes":[{"content":"The metadata key.","pos":[0,17]}]}],"pos":[4217,4235],"yaml":true},{"content":"The metadata value.","nodes":[{"pos":[0,19],"content":"The metadata value.","nodes":[{"content":"The metadata value.","pos":[0,19]}]}],"pos":[4284,4304],"yaml":true},{"content":"The type of the metadata value.","nodes":[{"pos":[0,31],"content":"The type of the metadata value.","nodes":[{"content":"The type of the metadata value.","pos":[0,31]}]}],"pos":[4355,4387],"yaml":true},{"content":"`true` if <code>part</code> contains metadata that has the specified key, value type, and value; otherwise, `false`.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">part</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains metadata that has the specified key, value type, and value; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>part</code> contains metadata that has the specified key, value type, and value; otherwise, `false`."}],"pos":[4445,4564],"yaml":true},{"content":"Gets a value that indicates whether the specified part contains metadata that has the specified key.","nodes":[{"pos":[0,100],"content":"Gets a value that indicates whether the specified part contains metadata that has the specified key.","nodes":[{"content":"Gets a value that indicates whether the specified part contains metadata that has the specified key.","pos":[0,100]}]}],"pos":[6330,6431],"yaml":true},{"content":"The part to search.","nodes":[{"pos":[0,19],"content":"The part to search.","nodes":[{"content":"The part to search.","pos":[0,19]}]}],"pos":[6728,6748],"yaml":true},{"content":"The metadata key.","nodes":[{"pos":[0,17],"content":"The metadata key.","nodes":[{"content":"The metadata key.","pos":[0,17]}]}],"pos":[6807,6825],"yaml":true},{"content":"`true` if <code>part</code> contains metadata that has the specified key; otherwise, `false`.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">part</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains metadata that has the specified key; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>part</code> contains metadata that has the specified key; otherwise, `false`."}],"pos":[6883,6979],"yaml":true},{"content":"Gets a value that indicates whether the specified part exports the specified contract.","nodes":[{"pos":[0,86],"content":"Gets a value that indicates whether the specified part exports the specified contract.","nodes":[{"content":"Gets a value that indicates whether the specified part exports the specified contract.","pos":[0,86]}]}],"pos":[8629,8716],"yaml":true},{"content":"The part to search.","nodes":[{"pos":[0,19],"content":"The part to search.","nodes":[{"content":"The part to search.","pos":[0,19]}]}],"pos":[9002,9022],"yaml":true},{"content":"The name of the contract.","nodes":[{"pos":[0,25],"content":"The name of the contract.","nodes":[{"content":"The name of the contract.","pos":[0,25]}]}],"pos":[9090,9116],"yaml":true},{"content":"`true` if <code>part</code> exports the specified contract; otherwise, `false`.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">part</ph><ept id=\"p1\">&lt;/code&gt;</ept> exports the specified contract; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>part</code> exports the specified contract; otherwise, `false`."}],"pos":[9174,9256],"yaml":true},{"content":"Filters the specified catalog with the specified filter function.","nodes":[{"pos":[0,65],"content":"Filters the specified catalog with the specified filter function.","nodes":[{"content":"Filters the specified catalog with the specified filter function.","pos":[0,65]}]}],"pos":[11210,11276],"yaml":true},{"content":"The catalog to filter.","nodes":[{"pos":[0,22],"content":"The catalog to filter.","nodes":[{"content":"The catalog to filter.","pos":[0,22]}]}],"pos":[11682,11705],"yaml":true},{"content":"The filter function.","nodes":[{"pos":[0,20],"content":"The filter function.","nodes":[{"content":"The filter function.","pos":[0,20]}]}],"pos":[11851,11872],"yaml":true},{"content":"A new catalog filtered by using the specified filter.","nodes":[{"pos":[0,53],"content":"A new catalog filtered by using the specified filter.","nodes":[{"content":"A new catalog filtered by using the specified filter.","pos":[0,53]}]}],"pos":[11973,12027],"yaml":true},{"content":"Determines whether the specified part imports the specified contract.","nodes":[{"pos":[0,69],"content":"Determines whether the specified part imports the specified contract.","nodes":[{"content":"Determines whether the specified part imports the specified contract.","pos":[0,69]}]}],"pos":[13656,13726],"yaml":true},{"content":"The part to search.","nodes":[{"pos":[0,19],"content":"The part to search.","nodes":[{"content":"The part to search.","pos":[0,19]}]}],"pos":[14012,14032],"yaml":true},{"content":"The name of the contract.","nodes":[{"pos":[0,25],"content":"The name of the contract.","nodes":[{"content":"The name of the contract.","pos":[0,25]}]}],"pos":[14100,14126],"yaml":true},{"content":"`true` if <code>part</code> imports the specified contract; otherwise, `false`.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">part</ph><ept id=\"p1\">&lt;/code&gt;</ept> imports the specified contract; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>part</code> imports the specified contract; otherwise, `false`."}],"pos":[14184,14266],"yaml":true},{"content":"Determines whether the specified part imports the specified contract with the specified cardinality.","nodes":[{"pos":[0,100],"content":"Determines whether the specified part imports the specified contract with the specified cardinality.","nodes":[{"content":"Determines whether the specified part imports the specified contract with the specified cardinality.","pos":[0,100]}]}],"pos":[16142,16243],"yaml":true},{"content":"The part to search.","nodes":[{"pos":[0,19],"content":"The part to search.","nodes":[{"content":"The part to search.","pos":[0,19]}]}],"pos":[16611,16631],"yaml":true},{"content":"The name of the contract.","nodes":[{"pos":[0,25],"content":"The name of the contract.","nodes":[{"content":"The name of the contract.","pos":[0,25]}]}],"pos":[16699,16725],"yaml":true},{"content":"The cardinality of the contract.","nodes":[{"pos":[0,32],"content":"The cardinality of the contract.","nodes":[{"content":"The cardinality of the contract.","pos":[0,32]}]}],"pos":[16847,16880],"yaml":true},{"content":"`true` if <code>part</code> imports a contract that has the specified name and cardinality; otherwise, `false`.","nodes":[{"pos":[0,111],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">part</ph><ept id=\"p1\">&lt;/code&gt;</ept> imports a contract that has the specified name and cardinality; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>part</code> imports a contract that has the specified name and cardinality; otherwise, `false`."}],"pos":[16938,17052],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  commentId: T:System.ComponentModel.Composition.Hosting.ScopingExtensions\n  id: ScopingExtensions\n  children:\n  - System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,``0)\n  - System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  - System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  - System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})\n  - System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  - System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)\n  langs:\n  - csharp\n  name: ScopingExtensions\n  nameWithType: ScopingExtensions\n  fullName: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  type: Class\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Defines static convenience methods for scoping.\n  syntax:\n    content: public static class ScopingExtensions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Hosting/ScopingExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,``0)\n  commentId: M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,``0)\n  id: ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,``0)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  langs:\n  - csharp\n  name: ContainsPartMetadata<T>(ComposablePartDefinition, String, T)\n  nameWithType: ScopingExtensions.ContainsPartMetadata<T>(ComposablePartDefinition, String, T)\n  fullName: ScopingExtensions.ContainsPartMetadata<T>(ComposablePartDefinition, String, T)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Gets a value that indicates whether the specified part contains metadata that has the specified key and value.\n  syntax:\n    content: public static bool ContainsPartMetadata<T> (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string key, T value);\n    parameters:\n    - id: part\n      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n      description: The part to search.\n    - id: key\n      type: System.String\n      description: The metadata key.\n    - id: value\n      type: T\n      description: The metadata value.\n    typeParameters:\n    - id: T\n      description: The type of the metadata value.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>part</code> contains metadata that has the specified key, value type, and value; otherwise, `false`.'\n  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Hosting/ScopingExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  commentId: M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  id: ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  langs:\n  - csharp\n  name: ContainsPartMetadataWithKey(ComposablePartDefinition, String)\n  nameWithType: ScopingExtensions.ContainsPartMetadataWithKey(ComposablePartDefinition, String)\n  fullName: ScopingExtensions.ContainsPartMetadataWithKey(ComposablePartDefinition, String)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Gets a value that indicates whether the specified part contains metadata that has the specified key.\n  syntax:\n    content: public static bool ContainsPartMetadataWithKey (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string key);\n    parameters:\n    - id: part\n      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n      description: The part to search.\n    - id: key\n      type: System.String\n      description: The metadata key.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>part</code> contains metadata that has the specified key; otherwise, `false`.'\n  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Hosting/ScopingExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  commentId: M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  id: Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  langs:\n  - csharp\n  name: Exports(ComposablePartDefinition, String)\n  nameWithType: ScopingExtensions.Exports(ComposablePartDefinition, String)\n  fullName: ScopingExtensions.Exports(ComposablePartDefinition, String)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Gets a value that indicates whether the specified part exports the specified contract.\n  syntax:\n    content: public static bool Exports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName);\n    parameters:\n    - id: part\n      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n      description: The part to search.\n    - id: contractName\n      type: System.String\n      description: The name of the contract.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>part</code> exports the specified contract; otherwise, `false`.'\n  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Hosting/ScopingExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})\n  commentId: M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})\n  id: Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  langs:\n  - csharp\n  name: Filter(ComposablePartCatalog, Func<ComposablePartDefinition,Boolean>)\n  nameWithType: ScopingExtensions.Filter(ComposablePartCatalog, Func<ComposablePartDefinition,Boolean>)\n  fullName: ScopingExtensions.Filter(ComposablePartCatalog, Func<ComposablePartDefinition,Boolean>)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Filters the specified catalog with the specified filter function.\n  syntax:\n    content: public static System.ComponentModel.Composition.Hosting.FilteredCatalog Filter (this System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,bool> filter);\n    parameters:\n    - id: catalog\n      type: System.ComponentModel.Composition.Primitives.ComposablePartCatalog\n      description: The catalog to filter.\n    - id: filter\n      type: System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean}\n      description: The filter function.\n    return:\n      type: System.ComponentModel.Composition.Hosting.FilteredCatalog\n      description: A new catalog filtered by using the specified filter.\n  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Hosting/ScopingExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  commentId: M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  id: Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  langs:\n  - csharp\n  name: Imports(ComposablePartDefinition, String)\n  nameWithType: ScopingExtensions.Imports(ComposablePartDefinition, String)\n  fullName: ScopingExtensions.Imports(ComposablePartDefinition, String)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Determines whether the specified part imports the specified contract.\n  syntax:\n    content: public static bool Imports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName);\n    parameters:\n    - id: part\n      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n      description: The part to search.\n    - id: contractName\n      type: System.String\n      description: The name of the contract.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>part</code> imports the specified contract; otherwise, `false`.'\n  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Hosting/ScopingExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)\n  commentId: M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)\n  id: Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  langs:\n  - csharp\n  name: Imports(ComposablePartDefinition, String, ImportCardinality)\n  nameWithType: ScopingExtensions.Imports(ComposablePartDefinition, String, ImportCardinality)\n  fullName: ScopingExtensions.Imports(ComposablePartDefinition, String, ImportCardinality)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Determines whether the specified part imports the specified contract with the specified cardinality.\n  syntax:\n    content: public static bool Imports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName, System.ComponentModel.Composition.Primitives.ImportCardinality importCardinality);\n    parameters:\n    - id: part\n      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n      description: The part to search.\n    - id: contractName\n      type: System.String\n      description: The name of the contract.\n    - id: importCardinality\n      type: System.ComponentModel.Composition.Primitives.ImportCardinality\n      description: The cardinality of the contract.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>part</code> imports a contract that has the specified name and cardinality; otherwise, `false`.'\n  overload: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Hosting/ScopingExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,``0)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: ContainsPartMetadata<T>(ComposablePartDefinition, String, T)\n  nameWithType: ScopingExtensions.ContainsPartMetadata<T>(ComposablePartDefinition, String, T)\n  fullName: ScopingExtensions.ContainsPartMetadata<T>(ComposablePartDefinition, String, T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n  parent: System.ComponentModel.Composition.Primitives\n  isExternal: false\n  name: ComposablePartDefinition\n  nameWithType: ComposablePartDefinition\n  fullName: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: ContainsPartMetadataWithKey(ComposablePartDefinition, String)\n  nameWithType: ScopingExtensions.ContainsPartMetadataWithKey(ComposablePartDefinition, String)\n  fullName: ScopingExtensions.ContainsPartMetadataWithKey(ComposablePartDefinition, String)\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Exports(ComposablePartDefinition, String)\n  nameWithType: ScopingExtensions.Exports(ComposablePartDefinition, String)\n  fullName: ScopingExtensions.Exports(ComposablePartDefinition, String)\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Filter(ComposablePartCatalog, Func<ComposablePartDefinition,Boolean>)\n  nameWithType: ScopingExtensions.Filter(ComposablePartCatalog, Func<ComposablePartDefinition,Boolean>)\n  fullName: ScopingExtensions.Filter(ComposablePartCatalog, Func<ComposablePartDefinition,Boolean>)\n- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog\n  parent: System.ComponentModel.Composition.Hosting\n  isExternal: false\n  name: FilteredCatalog\n  nameWithType: FilteredCatalog\n  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog\n- uid: System.ComponentModel.Composition.Primitives.ComposablePartCatalog\n  parent: System.ComponentModel.Composition.Primitives\n  isExternal: false\n  name: ComposablePartCatalog\n  nameWithType: ComposablePartCatalog\n  fullName: System.ComponentModel.Composition.Primitives.ComposablePartCatalog\n- uid: System.Func`2\n  name: Func<T,TResult>\n  nameWithType: Func<T,TResult>\n  fullName: System.Func<T,TResult>\n- uid: System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean}\n  parent: System\n  isExternal: false\n  name: Func<ComposablePartDefinition,Boolean>\n  nameWithType: Func<ComposablePartDefinition,Boolean>\n  fullName: System.Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n    name: ComposablePartDefinition\n    nameWithType: ComposablePartDefinition\n    fullName: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Imports(ComposablePartDefinition, String)\n  nameWithType: ScopingExtensions.Imports(ComposablePartDefinition, String)\n  fullName: ScopingExtensions.Imports(ComposablePartDefinition, String)\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Imports(ComposablePartDefinition, String, ImportCardinality)\n  nameWithType: ScopingExtensions.Imports(ComposablePartDefinition, String, ImportCardinality)\n  fullName: ScopingExtensions.Imports(ComposablePartDefinition, String, ImportCardinality)\n- uid: System.ComponentModel.Composition.Primitives.ImportCardinality\n  parent: System.ComponentModel.Composition.Primitives\n  isExternal: false\n  name: ImportCardinality\n  nameWithType: ImportCardinality\n  fullName: System.ComponentModel.Composition.Primitives.ImportCardinality\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1*\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: ContainsPartMetadata<T>\n  nameWithType: ScopingExtensions.ContainsPartMetadata<T>\n  fullName: ScopingExtensions.ContainsPartMetadata<T>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Hosting/ScopingExtensions.xml\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey*\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: ContainsPartMetadataWithKey\n  nameWithType: ScopingExtensions.ContainsPartMetadataWithKey\n  fullName: ScopingExtensions.ContainsPartMetadataWithKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Hosting/ScopingExtensions.xml\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports*\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Exports\n  nameWithType: ScopingExtensions.Exports\n  fullName: ScopingExtensions.Exports\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Hosting/ScopingExtensions.xml\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter*\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Filter\n  nameWithType: ScopingExtensions.Filter\n  fullName: ScopingExtensions.Filter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Hosting/ScopingExtensions.xml\n- uid: System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports*\n  parent: System.ComponentModel.Composition.Hosting.ScopingExtensions\n  isExternal: false\n  name: Imports\n  nameWithType: ScopingExtensions.Imports\n  fullName: ScopingExtensions.Imports\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Hosting/ScopingExtensions.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}