{"nodes":[{"content":"Represents the abstract class from which all implementations of cryptographic random number generators derive.","nodes":[{"pos":[0,110],"content":"Represents the abstract class from which all implementations of cryptographic random number generators derive.","nodes":[{"content":"Represents the abstract class from which all implementations of cryptographic random number generators derive.","pos":[0,110]}]}],"pos":[1117,1228],"yaml":true},{"content":"Cryptographic random number generators create cryptographically strong random values.  \n  \n Application code does not directly use this class. This abstract class is provided as the base class for all cryptographic random number generators.  \n  \n For an implementation of a cryptographic random number generator, use the derived class <xref:System.Security.Cryptography.RNGCryptoServiceProvider>.","nodes":[{"pos":[0,85],"content":"Cryptographic random number generators create cryptographically strong random values.","nodes":[{"content":"Cryptographic random number generators create cryptographically strong random values.","pos":[0,85]}]},{"pos":[92,240],"content":"Application code does not directly use this class. This abstract class is provided as the base class for all cryptographic random number generators.","nodes":[{"content":"Application code does not directly use this class. This abstract class is provided as the base class for all cryptographic random number generators.","pos":[0,148],"nodes":[{"content":"Application code does not directly use this class.","pos":[0,50]},{"content":"This abstract class is provided as the base class for all cryptographic random number generators.","pos":[51,148]}]}]},{"pos":[247,396],"content":"For an implementation of a cryptographic random number generator, use the derived class <xref:System.Security.Cryptography.RNGCryptoServiceProvider>.","nodes":[{"content":"For an implementation of a cryptographic random number generator, use the derived class <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider&gt;</ph>.","pos":[0,149],"source":"For an implementation of a cryptographic random number generator, use the derived class <xref:System.Security.Cryptography.RNGCryptoServiceProvider>."}]}],"pos":[1239,1642],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of <xref href=\"System.Security.Cryptography.RandomNumberGenerator\"></xref>.","nodes":[{"pos":[0,102],"content":"Initializes a new instance of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RandomNumberGenerator\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of <xref href=\"System.Security.Cryptography.RandomNumberGenerator\"></xref>."}],"pos":[3775,3878],"yaml":true},{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class. For an implementation of a cryptographic random number generator, use the derived class <xref:System.Security.Cryptography.RNGCryptoServiceProvider>.","nodes":[{"pos":[0,265],"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class. For an implementation of a cryptographic random number generator, use the derived class <xref:System.Security.Cryptography.RNGCryptoServiceProvider>.","nodes":[{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class. For an implementation of a cryptographic random number generator, use the derived class <xref:System.Security.Cryptography.RNGCryptoServiceProvider>.","pos":[0,265],"nodes":[{"content":"You cannot create an instance of an abstract class.","pos":[0,51]},{"content":"Application code will create a new instance of a derived class.","pos":[52,115]},{"content":"For an implementation of a cryptographic random number generator, use the derived class <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider&gt;</ph>.","pos":[116,265],"source":" For an implementation of a cryptographic random number generator, use the derived class <xref:System.Security.Cryptography.RNGCryptoServiceProvider>."}]}]}],"pos":[3889,4155],"yaml":true,"extradata":"MT"},{"content":"When overridden in a derived class, creates an instance of the default implementation of a cryptographic random number generator that can be used to generate random data.","nodes":[{"pos":[0,170],"content":"When overridden in a derived class, creates an instance of the default implementation of a cryptographic random number generator that can be used to generate random data.","nodes":[{"content":"When overridden in a derived class, creates an instance of the default implementation of a cryptographic random number generator that can be used to generate random data.","pos":[0,170]}]}],"pos":[5742,5913],"yaml":true},{"content":"A new instance of a cryptographic random number generator.","nodes":[{"pos":[0,58],"content":"A new instance of a cryptographic random number generator.","nodes":[{"content":"A new instance of a cryptographic random number generator.","pos":[0,58]}]}],"pos":[6125,6184],"yaml":true},{"content":"When overridden in a derived class, creates an instance of the specified implementation of a cryptographic random number generator.","nodes":[{"pos":[0,131],"content":"When overridden in a derived class, creates an instance of the specified implementation of a cryptographic random number generator.","nodes":[{"content":"When overridden in a derived class, creates an instance of the specified implementation of a cryptographic random number generator.","pos":[0,131]}]}],"pos":[7757,7889],"yaml":true},{"content":"The name of the random number generator implementation to use.","nodes":[{"pos":[0,62],"content":"The name of the random number generator implementation to use.","nodes":[{"content":"The name of the random number generator implementation to use.","pos":[0,62]}]}],"pos":[8081,8144],"yaml":true},{"content":"A new instance of a cryptographic random number generator.","nodes":[{"pos":[0,58],"content":"A new instance of a cryptographic random number generator.","nodes":[{"content":"A new instance of a cryptographic random number generator.","pos":[0,58]}]}],"pos":[8238,8297],"yaml":true},{"content":"When overridden in a derived class, releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\"></xref> class.","nodes":[{"pos":[0,173],"content":"When overridden in a derived class, releases all resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RandomNumberGenerator\"&gt;&lt;/xref&gt;</ph> class.","source":"When overridden in a derived class, releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\"></xref> class."}],"pos":[9629,9803],"yaml":true},{"content":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.RandomNumberGenerator>. The `Dispose` method leaves the <xref:System.Security.Cryptography.RandomNumberGenerator> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.RandomNumberGenerator> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.RandomNumberGenerator> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.RandomNumberGenerator>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.RandomNumberGenerator> object's `Finalize` method.","nodes":[{"pos":[0,469],"content":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.RandomNumberGenerator>. The `Dispose` method leaves the <xref:System.Security.Cryptography.RandomNumberGenerator> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.RandomNumberGenerator> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.RandomNumberGenerator> was occupying.","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.","pos":[0,105],"source":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.RandomNumberGenerator>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> in an unusable state.","pos":[106,217],"source":" The `Dispose` method leaves the <xref:System.Security.Cryptography.RandomNumberGenerator> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> was occupying.","pos":[218,469],"source":" After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.RandomNumberGenerator> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.RandomNumberGenerator> was occupying."}]},{"pos":[476,681],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[689,1005],"content":"[!NOTE]\n Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.RandomNumberGenerator>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.RandomNumberGenerator> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.RandomNumberGenerator>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.RandomNumberGenerator> object's `Finalize` method.","pos":[8,314],"nodes":[{"content":"Always call <ph id=\"ph1\">`Dispose`</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.","pos":[1,127],"source":" Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.RandomNumberGenerator>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[128,306],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.RandomNumberGenerator> object's `Finalize` method."}]}]}],"pos":[9814,10827],"yaml":true,"extradata":"MT"},{"content":"When overridden in a derived class, releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,199],"content":"When overridden in a derived class, releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RandomNumberGenerator\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"When overridden in a derived class, releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\"></xref> and optionally releases the managed resources."}],"pos":[12479,12679],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.RandomNumberGenerator> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,249],"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">`Finalize`</ph> method.","pos":[0,81],"source":"This method is called by the public `Dispose()` method and the `Finalize` method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[82,187],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[188,249],"source":"`Finalize` invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[256,510],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.RandomNumberGenerator> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> references.","pos":[0,184],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.RandomNumberGenerator> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[185,254],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[12690,13205],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[13359,13462],"yaml":true},{"content":"When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of values.","nodes":[{"pos":[0,118],"content":"When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of values.","nodes":[{"content":"When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of values.","pos":[0,118]}]}],"pos":[15048,15167],"yaml":true},{"content":"The length of the byte array determines how many random bytes are produced.","nodes":[{"pos":[0,75],"content":"The length of the byte array determines how many random bytes are produced.","nodes":[{"content":"The length of the byte array determines how many random bytes are produced.","pos":[0,75]}]}],"pos":[15178,15254],"yaml":true,"extradata":"MT"},{"content":"The array to fill with cryptographically strong random bytes.","nodes":[{"pos":[0,61],"content":"The array to fill with cryptographically strong random bytes.","nodes":[{"content":"The array to fill with cryptographically strong random bytes.","pos":[0,61]}]}],"pos":[16048,16110],"yaml":true},{"content":"Fills the specified byte array with a cryptographically strong random sequence of values.","nodes":[{"pos":[0,89],"content":"Fills the specified byte array with a cryptographically strong random sequence of values.","nodes":[{"content":"Fills the specified byte array with a cryptographically strong random sequence of values.","pos":[0,89]}]}],"pos":[17817,17907],"yaml":true},{"content":"The array to fill with cryptographically strong random bytes.","nodes":[{"pos":[0,61],"content":"The array to fill with cryptographically strong random bytes.","nodes":[{"content":"The array to fill with cryptographically strong random bytes.","pos":[0,61]}]}],"pos":[18073,18135],"yaml":true},{"content":"The index of the array to start the fill operation.","nodes":[{"pos":[0,51],"content":"The index of the array to start the fill operation.","nodes":[{"content":"The index of the array to start the fill operation.","pos":[0,51]}]}],"pos":[18196,18248],"yaml":true},{"content":"The number of bytes to fill.","nodes":[{"pos":[0,28],"content":"The number of bytes to fill.","nodes":[{"content":"The number of bytes to fill.","pos":[0,28]}]}],"pos":[18308,18337],"yaml":true},{"content":"<code>data</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."}],"pos":[18526,18555],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is less than 0","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0","source":"<code>offset</code> or <code>count</code> is less than 0"}],"pos":[18669,18726],"yaml":true},{"content":"<code>offset</code> plus <code>count</code> exceeds the length of <code>data</code>.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> exceeds the length of <ph id=\"ph3\">&lt;code&gt;data&lt;/code&gt;</ph>.","source":"<code>offset</code> plus <code>count</code> exceeds the length of <code>data</code>."}],"pos":[18820,18905],"yaml":true},{"content":"When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of nonzero values.","nodes":[{"pos":[0,126],"content":"When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of nonzero values.","nodes":[{"content":"When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of nonzero values.","pos":[0,126]}]}],"pos":[20126,20253],"yaml":true},{"content":"The length of the byte array determines how many random bytes are produced.","nodes":[{"pos":[0,75],"content":"The length of the byte array determines how many random bytes are produced.","nodes":[{"content":"The length of the byte array determines how many random bytes are produced.","pos":[0,75]}]}],"pos":[20264,20340],"yaml":true,"extradata":"MT"},{"content":"The array to fill with cryptographically strong random nonzero bytes.","nodes":[{"pos":[0,69],"content":"The array to fill with cryptographically strong random nonzero bytes.","nodes":[{"content":"The array to fill with cryptographically strong random nonzero bytes.","pos":[0,69]}]}],"pos":[21188,21258],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.RandomNumberGenerator\n  commentId: T:System.Security.Cryptography.RandomNumberGenerator\n  id: RandomNumberGenerator\n  children:\n  - System.Security.Cryptography.RandomNumberGenerator.#ctor\n  - System.Security.Cryptography.RandomNumberGenerator.Create\n  - System.Security.Cryptography.RandomNumberGenerator.Create(System.String)\n  - System.Security.Cryptography.RandomNumberGenerator.Dispose\n  - System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)\n  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])\n  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])\n  langs:\n  - csharp\n  name: RandomNumberGenerator\n  nameWithType: RandomNumberGenerator\n  fullName: System.Security.Cryptography.RandomNumberGenerator\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Represents the abstract class from which all implementations of cryptographic random number generators derive.\n  remarks: \"Cryptographic random number generators create cryptographically strong random values.  \\n  \\n Application code does not directly use this class. This abstract class is provided as the base class for all cryptographic random number generators.  \\n  \\n For an implementation of a cryptographic random number generator, use the derived class <xref:System.Security.Cryptography.RNGCryptoServiceProvider>.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class RandomNumberGenerator : IDisposable\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Security.Cryptography.RNGCryptoServiceProvider\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor\n  commentId: M:System.Security.Cryptography.RandomNumberGenerator.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  langs:\n  - csharp\n  name: RandomNumberGenerator()\n  nameWithType: RandomNumberGenerator.RandomNumberGenerator()\n  fullName: RandomNumberGenerator.RandomNumberGenerator()\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of <xref href=\"System.Security.Cryptography.RandomNumberGenerator\"></xref>.\n  remarks: You cannot create an instance of an abstract class. Application code will create a new instance of a derived class. For an implementation of a cryptographic random number generator, use the derived class <xref:System.Security.Cryptography.RNGCryptoServiceProvider>.\n  syntax:\n    content: protected RandomNumberGenerator ();\n    parameters: []\n  overload: System.Security.Cryptography.RandomNumberGenerator.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RandomNumberGenerator.Create\n  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Create\n  id: Create\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: RandomNumberGenerator.Create()\n  fullName: RandomNumberGenerator.Create()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, creates an instance of the default implementation of a cryptographic random number generator that can be used to generate random data.\n  syntax:\n    content: public static System.Security.Cryptography.RandomNumberGenerator Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.RandomNumberGenerator\n      description: A new instance of a cryptographic random number generator.\n  overload: System.Security.Cryptography.RandomNumberGenerator.Create*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RandomNumberGenerator.Create(System.String)\n  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: RandomNumberGenerator.Create(String)\n  fullName: RandomNumberGenerator.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, creates an instance of the specified implementation of a cryptographic random number generator.\n  syntax:\n    content: public static System.Security.Cryptography.RandomNumberGenerator Create (string rngName);\n    parameters:\n    - id: rngName\n      type: System.String\n      description: The name of the random number generator implementation to use.\n    return:\n      type: System.Security.Cryptography.RandomNumberGenerator\n      description: A new instance of a cryptographic random number generator.\n  overload: System.Security.Cryptography.RandomNumberGenerator.Create*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose\n  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: RandomNumberGenerator.Dispose()\n  fullName: RandomNumberGenerator.Dispose()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.RandomNumberGenerator>. The `Dispose` method leaves the <xref:System.Security.Cryptography.RandomNumberGenerator> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.RandomNumberGenerator> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.RandomNumberGenerator> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.RandomNumberGenerator>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.RandomNumberGenerator> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.RandomNumberGenerator.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: RandomNumberGenerator.Dispose(Boolean)\n  fullName: RandomNumberGenerator.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.RandomNumberGenerator> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Security.Cryptography.RandomNumberGenerator.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])\n  commentId: M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])\n  id: GetBytes(System.Byte[])\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  langs:\n  - csharp\n  name: GetBytes(Byte[])\n  nameWithType: RandomNumberGenerator.GetBytes(Byte[])\n  fullName: RandomNumberGenerator.GetBytes(Byte[])\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of values.\n  remarks: The length of the byte array determines how many random bytes are produced.\n  example:\n  - \"The following example creates a random sequence 100 bytes long and stores it in `random`.  \\n  \\n [!code-cpp[Classic RandomNumberGenerator.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetBytes Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic RandomNumberGenerator.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetBytes Example/CS/source.cs#1)]\\n [!code-vb[Classic RandomNumberGenerator.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetBytes Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract void GetBytes (byte[] data);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The array to fill with cryptographically strong random bytes.\n  overload: System.Security.Cryptography.RandomNumberGenerator.GetBytes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)\n  id: GetBytes(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  langs:\n  - csharp\n  name: GetBytes(Byte[], Int32, Int32)\n  nameWithType: RandomNumberGenerator.GetBytes(Byte[], Int32, Int32)\n  fullName: RandomNumberGenerator.GetBytes(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Fills the specified byte array with a cryptographically strong random sequence of values.\n  syntax:\n    content: public virtual void GetBytes (byte[] data, int offset, int count);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The array to fill with cryptographically strong random bytes.\n    - id: offset\n      type: System.Int32\n      description: The index of the array to start the fill operation.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to fill.\n  overload: System.Security.Cryptography.RandomNumberGenerator.GetBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is less than 0\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>offset</code> plus <code>count</code> exceeds the length of <code>data</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])\n  commentId: M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])\n  id: GetNonZeroBytes(System.Byte[])\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  langs:\n  - csharp\n  name: GetNonZeroBytes(Byte[])\n  nameWithType: RandomNumberGenerator.GetNonZeroBytes(Byte[])\n  fullName: RandomNumberGenerator.GetNonZeroBytes(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of nonzero values.\n  remarks: The length of the byte array determines how many random bytes are produced.\n  example:\n  - \"The following example creates a random sequence of 100 nonzero bytes and stores it in `random`.  \\n  \\n [!code-cpp[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetNonZeroBytes Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetNonZeroBytes Example/CS/source.cs#1)]\\n [!code-vb[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetNonZeroBytes Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void GetNonZeroBytes (byte[] data);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The array to fill with cryptographically strong random nonzero bytes.\n  overload: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: RandomNumberGenerator()\n  nameWithType: RandomNumberGenerator.RandomNumberGenerator()\n  fullName: RandomNumberGenerator.RandomNumberGenerator()\n- uid: System.Security.Cryptography.RandomNumberGenerator.Create\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: Create()\n  nameWithType: RandomNumberGenerator.Create()\n  fullName: RandomNumberGenerator.Create()\n- uid: System.Security.Cryptography.RandomNumberGenerator\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RandomNumberGenerator\n  nameWithType: RandomNumberGenerator\n  fullName: System.Security.Cryptography.RandomNumberGenerator\n- uid: System.Security.Cryptography.RandomNumberGenerator.Create(System.String)\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: Create(String)\n  nameWithType: RandomNumberGenerator.Create(String)\n  fullName: RandomNumberGenerator.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: Dispose()\n  nameWithType: RandomNumberGenerator.Dispose()\n  fullName: RandomNumberGenerator.Dispose()\n- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: RandomNumberGenerator.Dispose(Boolean)\n  fullName: RandomNumberGenerator.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: GetBytes(Byte[])\n  nameWithType: RandomNumberGenerator.GetBytes(Byte[])\n  fullName: RandomNumberGenerator.GetBytes(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: GetBytes(Byte[], Int32, Int32)\n  nameWithType: RandomNumberGenerator.GetBytes(Byte[], Int32, Int32)\n  fullName: RandomNumberGenerator.GetBytes(Byte[], Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: GetNonZeroBytes(Byte[])\n  nameWithType: RandomNumberGenerator.GetNonZeroBytes(Byte[])\n  fullName: RandomNumberGenerator.GetNonZeroBytes(Byte[])\n- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor*\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: RandomNumberGenerator\n  nameWithType: RandomNumberGenerator.RandomNumberGenerator\n  fullName: RandomNumberGenerator.RandomNumberGenerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n- uid: System.Security.Cryptography.RandomNumberGenerator.Create*\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: Create\n  nameWithType: RandomNumberGenerator.Create\n  fullName: RandomNumberGenerator.Create\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose*\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: Dispose\n  nameWithType: RandomNumberGenerator.Dispose\n  fullName: RandomNumberGenerator.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes*\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: GetBytes\n  nameWithType: RandomNumberGenerator.GetBytes\n  fullName: RandomNumberGenerator.GetBytes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes*\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: GetNonZeroBytes\n  nameWithType: RandomNumberGenerator.GetNonZeroBytes\n  fullName: RandomNumberGenerator.GetNonZeroBytes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}