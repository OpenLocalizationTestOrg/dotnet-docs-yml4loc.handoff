{"nodes":[{"content":"Provides the functionality to restore the migration, or flow, of the execution context between threads.","nodes":[{"pos":[0,103],"content":"Provides the functionality to restore the migration, or flow, of the execution context between threads.","nodes":[{"content":"Provides the functionality to restore the migration, or flow, of the execution context between threads.","pos":[0,103]}]}],"pos":[924,1028],"yaml":true},{"content":"An execution context contains all execution-related information for a logical thread. The flow of the execution context to other threads can be prevented by using the <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method, which returns an <xref:System.Threading.AsyncFlowControl> structure. The <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the returned <xref:System.Threading.AsyncFlowControl> structure can be used to undo the flow suppression. The <xref:System.Threading.AsyncFlowControl> structure must be used on the same thread on which it was created.","nodes":[{"pos":[0,606],"content":"An execution context contains all execution-related information for a logical thread. The flow of the execution context to other threads can be prevented by using the <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method, which returns an <xref:System.Threading.AsyncFlowControl> structure. The <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the returned <xref:System.Threading.AsyncFlowControl> structure can be used to undo the flow suppression. The <xref:System.Threading.AsyncFlowControl> structure must be used on the same thread on which it was created.","nodes":[{"content":"An execution context contains all execution-related information for a logical thread. The flow of the execution context to other threads can be prevented by using the <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method, which returns an <xref:System.Threading.AsyncFlowControl> structure. The <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the returned <xref:System.Threading.AsyncFlowControl> structure can be used to undo the flow suppression. The <xref:System.Threading.AsyncFlowControl> structure must be used on the same thread on which it was created.","pos":[0,606],"nodes":[{"content":"An execution context contains all execution-related information for a logical thread.","pos":[0,85]},{"content":"The flow of the execution context to other threads can be prevented by using the <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName&gt;</ph> method, which returns an <ph id=\"ph2\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure.","pos":[86,325],"source":" The flow of the execution context to other threads can be prevented by using the <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method, which returns an <xref:System.Threading.AsyncFlowControl> structure."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method of the returned <ph id=\"ph2\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure can be used to undo the flow suppression.","pos":[326,494],"source":" The <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the returned <xref:System.Threading.AsyncFlowControl> structure can be used to undo the flow suppression."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure must be used on the same thread on which it was created.","pos":[495,606],"source":" The <xref:System.Threading.AsyncFlowControl> structure must be used on the same thread on which it was created."}]}]}],"pos":[1039,1646],"yaml":true,"extradata":"MT"},{"content":"Releases all resources used by the current instance of the <xref href=\"System.Threading.AsyncFlowControl\"></xref> class.","nodes":[{"pos":[0,120],"content":"Releases all resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> class.","source":"Releases all resources used by the current instance of the <xref href=\"System.Threading.AsyncFlowControl\"></xref> class."}],"pos":[2941,3062],"yaml":true},{"content":"Call `Dispose` when you are finished using the <xref:System.Threading.AsyncFlowControl>. The `Dispose` method leaves the <xref:System.Threading.AsyncFlowControl> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.AsyncFlowControl> so the garbage collector can reclaim the memory that the <xref:System.Threading.AsyncFlowControl> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.AsyncFlowControl>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.AsyncFlowControl> object's `Finalize` method.","nodes":[{"pos":[0,401],"content":"Call `Dispose` when you are finished using the <xref:System.Threading.AsyncFlowControl>. The `Dispose` method leaves the <xref:System.Threading.AsyncFlowControl> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.AsyncFlowControl> so the garbage collector can reclaim the memory that the <xref:System.Threading.AsyncFlowControl> was occupying.","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph>.","pos":[0,88],"source":"Call `Dispose` when you are finished using the <xref:System.Threading.AsyncFlowControl>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> in an unusable state.","pos":[89,183],"source":" The `Dispose` method leaves the <xref:System.Threading.AsyncFlowControl> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> was occupying.","pos":[184,401],"source":" After calling `Dispose`, you must release all references to the <xref:System.Threading.AsyncFlowControl> so the garbage collector can reclaim the memory that the <xref:System.Threading.AsyncFlowControl> was occupying."}]},{"pos":[408,613],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[621,903],"content":"[!NOTE]\n Always call `Dispose` before you release your last reference to the <xref:System.Threading.AsyncFlowControl>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.AsyncFlowControl> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call `Dispose` before you release your last reference to the <xref:System.Threading.AsyncFlowControl>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.AsyncFlowControl> object's `Finalize` method.","pos":[8,280],"nodes":[{"content":"Always call <ph id=\"ph1\">`Dispose`</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph>.","pos":[1,110],"source":" Always call `Dispose` before you release your last reference to the <xref:System.Threading.AsyncFlowControl>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[111,272],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.AsyncFlowControl> object's `Finalize` method."}]}]}],"pos":[3073,3984],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is not used on the thread where it was created.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure has already been used to call <xref href=\"System.Threading.AsyncFlowControl.Dispose\"></xref> or <xref href=\"System.Threading.AsyncFlowControl.Undo\"></xref>.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure is not used on the thread where it was created.","source":"The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is not used on the thread where it was created."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,359],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure has already been used to call <ph id=\"ph2\">&lt;xref href=\"System.Threading.AsyncFlowControl.Dispose\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Threading.AsyncFlowControl.Undo\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure has already been used to call <xref href=\"System.Threading.AsyncFlowControl.Dispose\"></xref> or <xref href=\"System.Threading.AsyncFlowControl.Undo\"></xref>."}],"pos":[4229,4603],"yaml":true},{"content":"Determines whether the specified object is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.","nodes":[{"pos":[0,129],"content":"Determines whether the specified object is equal to the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure.","source":"Determines whether the specified object is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."}],"pos":[5794,5924],"yaml":true},{"content":"An object to compare with the current structure.","nodes":[{"pos":[0,48],"content":"An object to compare with the current structure.","nodes":[{"content":"An object to compare with the current structure.","pos":[0,48]}]}],"pos":[6064,6113],"yaml":true},{"content":"`true` if <code>obj</code> is an <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure and is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure; otherwise, `false`.","nodes":[{"pos":[0,211],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an <ph id=\"ph3\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure and is equal to the current <ph id=\"ph4\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure; otherwise, <ph id=\"ph5\">`false`</ph>.","source":"`true` if <code>obj</code> is an <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure and is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure; otherwise, `false`."}],"pos":[6171,6385],"yaml":true},{"content":"Determines whether the specified <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.","nodes":[{"pos":[0,187],"content":"Determines whether the specified <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure is equal to the current <ph id=\"ph2\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure.","source":"Determines whether the specified <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."}],"pos":[7737,7925],"yaml":true},{"content":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure to compare with the current structure.","nodes":[{"pos":[0,106],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure to compare with the current structure.","source":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure to compare with the current structure."}],"pos":[8103,8210],"yaml":true},{"content":"`true` if <code>obj</code> is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure; otherwise, `false`.","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to the current <ph id=\"ph3\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>obj</code> is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure; otherwise, `false`."}],"pos":[8268,8407],"yaml":true},{"content":"Gets a hash code for the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.","nodes":[{"pos":[0,98],"content":"Gets a hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure.","source":"Gets a hash code for the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."}],"pos":[9636,9735],"yaml":true},{"content":"A hash code for the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.","nodes":[{"pos":[0,93],"content":"A hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure.","source":"A hash code for the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."}],"pos":[9869,9963],"yaml":true},{"content":"Compares two <xref href=\"System.Threading.AsyncFlowControl\"></xref> structures to determine whether they are equal.","nodes":[{"pos":[0,115],"content":"Compares two <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structures to determine whether they are equal.","source":"Compares two <xref href=\"System.Threading.AsyncFlowControl\"></xref> structures to determine whether they are equal."}],"pos":[11508,11624],"yaml":true},{"content":"The equivalent method for this operator is <xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%2CSystem.Threading.AsyncFlowControl%29?displayProperty=fullName>","nodes":[{"pos":[0,190],"content":"The equivalent method for this operator is <xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%2CSystem.Threading.AsyncFlowControl%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%2CSystem.Threading.AsyncFlowControl%29?displayProperty=fullName&gt;</ph>","pos":[0,190],"source":"The equivalent method for this operator is <xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%2CSystem.Threading.AsyncFlowControl%29?displayProperty=fullName>"}]}],"pos":[11635,11826],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.","nodes":[{"pos":[0,68],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure.","source":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."}],"pos":[12049,12118],"yaml":true},{"content":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.","nodes":[{"pos":[0,68],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure.","source":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."}],"pos":[12195,12264],"yaml":true},{"content":"`true` if the two structures are equal; otherwise, `false`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">`true`</ph> if the two structures are equal; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two structures are equal; otherwise, `false`."}],"pos":[12322,12384],"yaml":true},{"content":"Compares two <xref href=\"System.Threading.AsyncFlowControl\"></xref> structures to determine whether they are not equal.","nodes":[{"pos":[0,119],"content":"Compares two <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structures to determine whether they are not equal.","source":"Compares two <xref href=\"System.Threading.AsyncFlowControl\"></xref> structures to determine whether they are not equal."}],"pos":[13941,14061],"yaml":true},{"content":"The equivalent method for this operator is <xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%2CSystem.Threading.AsyncFlowControl%29?displayProperty=fullName>","nodes":[{"pos":[0,190],"content":"The equivalent method for this operator is <xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%2CSystem.Threading.AsyncFlowControl%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%2CSystem.Threading.AsyncFlowControl%29?displayProperty=fullName&gt;</ph>","pos":[0,190],"source":"The equivalent method for this operator is <xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%2CSystem.Threading.AsyncFlowControl%29?displayProperty=fullName>"}]}],"pos":[14072,14263],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.","nodes":[{"pos":[0,68],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure.","source":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."}],"pos":[14488,14557],"yaml":true},{"content":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.","nodes":[{"pos":[0,68],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure.","source":"An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure."}],"pos":[14634,14703],"yaml":true},{"content":"`true` if the structures are not equal; otherwise, `false`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">`true`</ph> if the structures are not equal; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the structures are not equal; otherwise, `false`."}],"pos":[14761,14823],"yaml":true},{"content":"Restores the flow of the execution context between threads.","nodes":[{"pos":[0,59],"content":"Restores the flow of the execution context between threads.","nodes":[{"content":"Restores the flow of the execution context between threads.","pos":[0,59]}]}],"pos":[16017,16077],"yaml":true},{"content":"The <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method returns an <xref:System.Threading.AsyncFlowControl> structure that is used to restore the flow.  \n  \n The <xref:System.Threading.AsyncFlowControl.Undo%2A> method must be called only on the <xref:System.Threading.AsyncFlowControl> structure returned by its associated <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.","nodes":[{"pos":[0,188],"content":"The <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method returns an <xref:System.Threading.AsyncFlowControl> structure that is used to restore the flow.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName&gt;</ph> method returns an <ph id=\"ph2\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure that is used to restore the flow.","pos":[0,188],"source":"The <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method returns an <xref:System.Threading.AsyncFlowControl> structure that is used to restore the flow."}]},{"pos":[195,424],"content":"The <xref:System.Threading.AsyncFlowControl.Undo%2A> method must be called only on the <xref:System.Threading.AsyncFlowControl> structure returned by its associated <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method must be called only on the <ph id=\"ph2\">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure returned by its associated <ph id=\"ph3\">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A&gt;</ph> method.","pos":[0,229],"source":"The <xref:System.Threading.AsyncFlowControl.Undo%2A> method must be called only on the <xref:System.Threading.AsyncFlowControl> structure returned by its associated <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method."}]}],"pos":[16088,16517],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is not used on the thread where it was created.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure has already been used to call <xref href=\"System.Threading.AsyncFlowControl.Dispose\"></xref> or <xref href=\"System.Threading.AsyncFlowControl.Undo\"></xref>.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure is not used on the thread where it was created.","source":"The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is not used on the thread where it was created."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,359],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.AsyncFlowControl\"&gt;&lt;/xref&gt;</ph> structure has already been used to call <ph id=\"ph2\">&lt;xref href=\"System.Threading.AsyncFlowControl.Dispose\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Threading.AsyncFlowControl.Undo\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure has already been used to call <xref href=\"System.Threading.AsyncFlowControl.Dispose\"></xref> or <xref href=\"System.Threading.AsyncFlowControl.Undo\"></xref>."}],"pos":[16756,17130],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.AsyncFlowControl\n  commentId: T:System.Threading.AsyncFlowControl\n  id: AsyncFlowControl\n  children:\n  - System.Threading.AsyncFlowControl.Dispose\n  - System.Threading.AsyncFlowControl.Equals(System.Object)\n  - System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)\n  - System.Threading.AsyncFlowControl.GetHashCode\n  - System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  - System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  - System.Threading.AsyncFlowControl.Undo\n  langs:\n  - csharp\n  name: AsyncFlowControl\n  nameWithType: AsyncFlowControl\n  fullName: System.Threading.AsyncFlowControl\n  type: Struct\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Provides the functionality to restore the migration, or flow, of the execution context between threads.\n  remarks: An execution context contains all execution-related information for a logical thread. The flow of the execution context to other threads can be prevented by using the <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method, which returns an <xref:System.Threading.AsyncFlowControl> structure. The <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the returned <xref:System.Threading.AsyncFlowControl> structure can be used to undo the flow suppression. The <xref:System.Threading.AsyncFlowControl> structure must be used on the same thread on which it was created.\n  syntax:\n    content: 'public struct AsyncFlowControl : IDisposable'\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements:\n  - System.IDisposable\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.AsyncFlowControl.Dispose\n  commentId: M:System.Threading.AsyncFlowControl.Dispose\n  id: Dispose\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: AsyncFlowControl.Dispose()\n  fullName: AsyncFlowControl.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Threading.AsyncFlowControl\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Threading.AsyncFlowControl>. The `Dispose` method leaves the <xref:System.Threading.AsyncFlowControl> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.AsyncFlowControl> so the garbage collector can reclaim the memory that the <xref:System.Threading.AsyncFlowControl> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.AsyncFlowControl>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.AsyncFlowControl> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Threading.AsyncFlowControl.Dispose*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Threading.AsyncFlowControl\\\"></xref> structure is not used on the thread where it was created.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.AsyncFlowControl\\\"></xref> structure has already been used to call <xref href=\\\"System.Threading.AsyncFlowControl.Dispose\\\"></xref> or <xref href=\\\"System.Threading.AsyncFlowControl.Undo\\\"></xref>.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.AsyncFlowControl.Equals(System.Object)\n  commentId: M:System.Threading.AsyncFlowControl.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: AsyncFlowControl.Equals(Object)\n  fullName: AsyncFlowControl.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Determines whether the specified object is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An object to compare with the current structure.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> is an <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure and is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure; otherwise, `false`.'\n  overload: System.Threading.AsyncFlowControl.Equals*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)\n  commentId: M:System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)\n  id: Equals(System.Threading.AsyncFlowControl)\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: Equals(AsyncFlowControl)\n  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)\n  fullName: AsyncFlowControl.Equals(AsyncFlowControl)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Determines whether the specified <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n  syntax:\n    content: public bool Equals (System.Threading.AsyncFlowControl obj);\n    parameters:\n    - id: obj\n      type: System.Threading.AsyncFlowControl\n      description: An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure to compare with the current structure.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> is equal to the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure; otherwise, `false`.'\n  overload: System.Threading.AsyncFlowControl.Equals*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.AsyncFlowControl.GetHashCode\n  commentId: M:System.Threading.AsyncFlowControl.GetHashCode\n  id: GetHashCode\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: AsyncFlowControl.GetHashCode()\n  fullName: AsyncFlowControl.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Gets a hash code for the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n  overload: System.Threading.AsyncFlowControl.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  commentId: M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  id: op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: op_Equality(AsyncFlowControl, AsyncFlowControl)\n  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl, AsyncFlowControl)\n  fullName: AsyncFlowControl.op_Equality(AsyncFlowControl, AsyncFlowControl)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Compares two <xref href=\"System.Threading.AsyncFlowControl\"></xref> structures to determine whether they are equal.\n  remarks: The equivalent method for this operator is <xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%2CSystem.Threading.AsyncFlowControl%29?displayProperty=fullName>\n  syntax:\n    content: public static bool op_Equality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);\n    parameters:\n    - id: a\n      type: System.Threading.AsyncFlowControl\n      description: An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n    - id: b\n      type: System.Threading.AsyncFlowControl\n      description: An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n    return:\n      type: System.Boolean\n      description: '`true` if the two structures are equal; otherwise, `false`.'\n  overload: System.Threading.AsyncFlowControl.op_Equality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  commentId: M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  id: op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: op_Inequality(AsyncFlowControl, AsyncFlowControl)\n  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl, AsyncFlowControl)\n  fullName: AsyncFlowControl.op_Inequality(AsyncFlowControl, AsyncFlowControl)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Compares two <xref href=\"System.Threading.AsyncFlowControl\"></xref> structures to determine whether they are not equal.\n  remarks: The equivalent method for this operator is <xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%2CSystem.Threading.AsyncFlowControl%29?displayProperty=fullName>\n  syntax:\n    content: public static bool op_Inequality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);\n    parameters:\n    - id: a\n      type: System.Threading.AsyncFlowControl\n      description: An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n    - id: b\n      type: System.Threading.AsyncFlowControl\n      description: An <xref href=\"System.Threading.AsyncFlowControl\"></xref> structure.\n    return:\n      type: System.Boolean\n      description: '`true` if the structures are not equal; otherwise, `false`.'\n  overload: System.Threading.AsyncFlowControl.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.AsyncFlowControl.Undo\n  commentId: M:System.Threading.AsyncFlowControl.Undo\n  id: Undo\n  parent: System.Threading.AsyncFlowControl\n  langs:\n  - csharp\n  name: Undo()\n  nameWithType: AsyncFlowControl.Undo()\n  fullName: AsyncFlowControl.Undo()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Restores the flow of the execution context between threads.\n  remarks: \"The <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> method returns an <xref:System.Threading.AsyncFlowControl> structure that is used to restore the flow.  \\n  \\n The <xref:System.Threading.AsyncFlowControl.Undo%2A> method must be called only on the <xref:System.Threading.AsyncFlowControl> structure returned by its associated <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.\"\n  syntax:\n    content: public void Undo ();\n    parameters: []\n  overload: System.Threading.AsyncFlowControl.Undo*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Threading.AsyncFlowControl\\\"></xref> structure is not used on the thread where it was created.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.AsyncFlowControl\\\"></xref> structure has already been used to call <xref href=\\\"System.Threading.AsyncFlowControl.Dispose\\\"></xref> or <xref href=\\\"System.Threading.AsyncFlowControl.Undo\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Threading.AsyncFlowControl.Dispose\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Dispose()\n  nameWithType: AsyncFlowControl.Dispose()\n  fullName: AsyncFlowControl.Dispose()\n- uid: System.Threading.AsyncFlowControl.Equals(System.Object)\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: AsyncFlowControl.Equals(Object)\n  fullName: AsyncFlowControl.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Equals(AsyncFlowControl)\n  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)\n  fullName: AsyncFlowControl.Equals(AsyncFlowControl)\n- uid: System.Threading.AsyncFlowControl\n  parent: System.Threading\n  isExternal: false\n  name: AsyncFlowControl\n  nameWithType: AsyncFlowControl\n  fullName: System.Threading.AsyncFlowControl\n- uid: System.Threading.AsyncFlowControl.GetHashCode\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: AsyncFlowControl.GetHashCode()\n  fullName: AsyncFlowControl.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: op_Equality(AsyncFlowControl, AsyncFlowControl)\n  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl, AsyncFlowControl)\n  fullName: AsyncFlowControl.op_Equality(AsyncFlowControl, AsyncFlowControl)\n- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: op_Inequality(AsyncFlowControl, AsyncFlowControl)\n  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl, AsyncFlowControl)\n  fullName: AsyncFlowControl.op_Inequality(AsyncFlowControl, AsyncFlowControl)\n- uid: System.Threading.AsyncFlowControl.Undo\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Undo()\n  nameWithType: AsyncFlowControl.Undo()\n  fullName: AsyncFlowControl.Undo()\n- uid: System.Threading.AsyncFlowControl.Dispose*\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Dispose\n  nameWithType: AsyncFlowControl.Dispose\n  fullName: AsyncFlowControl.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n- uid: System.Threading.AsyncFlowControl.Equals*\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Equals\n  nameWithType: AsyncFlowControl.Equals\n  fullName: AsyncFlowControl.Equals\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n- uid: System.Threading.AsyncFlowControl.GetHashCode*\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: GetHashCode\n  nameWithType: AsyncFlowControl.GetHashCode\n  fullName: AsyncFlowControl.GetHashCode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n- uid: System.Threading.AsyncFlowControl.op_Equality*\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: op_Equality\n  nameWithType: AsyncFlowControl.op_Equality\n  fullName: AsyncFlowControl.op_Equality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n- uid: System.Threading.AsyncFlowControl.op_Inequality*\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: op_Inequality\n  nameWithType: AsyncFlowControl.op_Inequality\n  fullName: AsyncFlowControl.op_Inequality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n- uid: System.Threading.AsyncFlowControl.Undo*\n  parent: System.Threading.AsyncFlowControl\n  isExternal: false\n  name: Undo\n  nameWithType: AsyncFlowControl.Undo\n  fullName: AsyncFlowControl.Undo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncFlowControl.xml\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}