{"nodes":[{"content":"Provides a set of methods and properties that you can use to accurately measure elapsed time.","nodes":[{"pos":[0,93],"content":"Provides a set of methods and properties that you can use to accurately measure elapsed time.","nodes":[{"content":"Provides a set of methods and properties that you can use to accurately measure elapsed time.","pos":[0,93]}]}],"pos":[937,1031],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Stopwatch.cs#ceb0ba9cc88de82e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n A <xref:System.Diagnostics.Stopwatch> instance can measure elapsed time for one interval, or the total of elapsed time across multiple intervals. In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.  \n  \n A <xref:System.Diagnostics.Stopwatch> instance is either running or stopped; use <xref:System.Diagnostics.Stopwatch.IsRunning%2A> to determine the current state of a <xref:System.Diagnostics.Stopwatch>. Use <xref:System.Diagnostics.Stopwatch.Start%2A> to begin measuring elapsed time; use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop measuring elapsed time. Query the elapsed time value through the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, or <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>. You can query the elapsed time properties while the instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.  \n  \n By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.  \n  \n The <xref:System.Diagnostics.Stopwatch> measures elapsed time by counting timer ticks in the underlying timer mechanism. If the installed hardware and operating system support a high-resolution performance counter, then the <xref:System.Diagnostics.Stopwatch> class uses that counter to measure elapsed time. Otherwise, the <xref:System.Diagnostics.Stopwatch> class uses the system timer to measure elapsed time. Use the <xref:System.Diagnostics.Stopwatch.Frequency> and <xref:System.Diagnostics.Stopwatch.IsHighResolution> fields to determine the precision and resolution of the <xref:System.Diagnostics.Stopwatch> timing implementation.  \n  \n The <xref:System.Diagnostics.Stopwatch> class assists the manipulation of timing-related performance counters within managed code. Specifically, the <xref:System.Diagnostics.Stopwatch.Frequency> field and <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> method can be used in place of the unmanaged Win32 APIs `QueryPerformanceFrequency` and `QueryPerformanceCounter`.  \n  \n> [!NOTE]\n>  On a multiprocessor computer, it does not matter which processor the thread runs on. However, because of bugs in the BIOS or the Hardware Abstraction Layer (HAL), you can get different timing results on different processors. To specify processor affinity for a thread, use the <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=fullName> method.","nodes":[{"pos":[2,439],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Stopwatch.cs#ceb0ba9cc88de82e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Stopwatch.cs#ceb0ba9cc88de82e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,435],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Stopwatch.cs#ceb0ba9cc88de82e)</ept>.","pos":[1,198],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Stopwatch.cs#ceb0ba9cc88de82e)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[199,427],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[446,892],"content":"A <xref:System.Diagnostics.Stopwatch> instance can measure elapsed time for one interval, or the total of elapsed time across multiple intervals. In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.","nodes":[{"content":"A <xref:System.Diagnostics.Stopwatch> instance can measure elapsed time for one interval, or the total of elapsed time across multiple intervals. In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.","pos":[0,446],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance can measure elapsed time for one interval, or the total of elapsed time across multiple intervals.","pos":[0,145],"source":"A <xref:System.Diagnostics.Stopwatch> instance can measure elapsed time for one interval, or the total of elapsed time across multiple intervals."},{"content":"In a typical <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> scenario, you call the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> method, then eventually call the <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> method, and then you check elapsed time using the <ph id=\"ph4\">&lt;xref:System.Diagnostics.Stopwatch.Elapsed%2A&gt;</ph> property.","pos":[146,446],"source":" In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property."}]}]},{"pos":[899,1718],"content":"A <xref:System.Diagnostics.Stopwatch> instance is either running or stopped; use <xref:System.Diagnostics.Stopwatch.IsRunning%2A> to determine the current state of a <xref:System.Diagnostics.Stopwatch>. Use <xref:System.Diagnostics.Stopwatch.Start%2A> to begin measuring elapsed time; use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop measuring elapsed time. Query the elapsed time value through the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, or <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>. You can query the elapsed time properties while the instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.","nodes":[{"content":"A <xref:System.Diagnostics.Stopwatch> instance is either running or stopped; use <xref:System.Diagnostics.Stopwatch.IsRunning%2A> to determine the current state of a <xref:System.Diagnostics.Stopwatch>. Use <xref:System.Diagnostics.Stopwatch.Start%2A> to begin measuring elapsed time; use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop measuring elapsed time. Query the elapsed time value through the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, or <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>. You can query the elapsed time properties while the instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.","pos":[0,819],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance is either running or stopped; use <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.IsRunning%2A&gt;</ph> to determine the current state of a <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph>.","pos":[0,202],"source":"A <xref:System.Diagnostics.Stopwatch> instance is either running or stopped; use <xref:System.Diagnostics.Stopwatch.IsRunning%2A> to determine the current state of a <xref:System.Diagnostics.Stopwatch>."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> to begin measuring elapsed time; use <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> to stop measuring elapsed time.","pos":[203,364],"source":" Use <xref:System.Diagnostics.Stopwatch.Start%2A> to begin measuring elapsed time; use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop measuring elapsed time."},{"content":"Query the elapsed time value through the properties <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Elapsed%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A&gt;</ph>.","pos":[365,580],"source":" Query the elapsed time value through the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, or <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>."},{"content":"You can query the elapsed time properties while the instance is running or stopped.","pos":[581,664]},{"content":"The elapsed time properties steadily increase while the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> is running; they remain constant when the instance is stopped.","pos":[665,819],"source":" The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped."}]}]},{"pos":[1725,2264],"content":"By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.","nodes":[{"content":"By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.","pos":[0,539],"nodes":[{"content":"By default, the elapsed time value of a <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance equals the total of all measured time intervals.","pos":[0,133],"source":"By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals."},{"content":"Each call to <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> begins counting at the cumulative elapsed time; each call to <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> ends the current interval measurement and freezes the cumulative elapsed time value.","pos":[134,381],"source":" Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Reset%2A&gt;</ph> method to clear the cumulative elapsed time in an existing <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance.","pos":[382,539],"source":" Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance."}]}]},{"pos":[2271,2909],"content":"The <xref:System.Diagnostics.Stopwatch> measures elapsed time by counting timer ticks in the underlying timer mechanism. If the installed hardware and operating system support a high-resolution performance counter, then the <xref:System.Diagnostics.Stopwatch> class uses that counter to measure elapsed time. Otherwise, the <xref:System.Diagnostics.Stopwatch> class uses the system timer to measure elapsed time. Use the <xref:System.Diagnostics.Stopwatch.Frequency> and <xref:System.Diagnostics.Stopwatch.IsHighResolution> fields to determine the precision and resolution of the <xref:System.Diagnostics.Stopwatch> timing implementation.","nodes":[{"content":"The <xref:System.Diagnostics.Stopwatch> measures elapsed time by counting timer ticks in the underlying timer mechanism. If the installed hardware and operating system support a high-resolution performance counter, then the <xref:System.Diagnostics.Stopwatch> class uses that counter to measure elapsed time. Otherwise, the <xref:System.Diagnostics.Stopwatch> class uses the system timer to measure elapsed time. Use the <xref:System.Diagnostics.Stopwatch.Frequency> and <xref:System.Diagnostics.Stopwatch.IsHighResolution> fields to determine the precision and resolution of the <xref:System.Diagnostics.Stopwatch> timing implementation.","pos":[0,638],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> measures elapsed time by counting timer ticks in the underlying timer mechanism.","pos":[0,120],"source":"The <xref:System.Diagnostics.Stopwatch> measures elapsed time by counting timer ticks in the underlying timer mechanism."},{"content":"If the installed hardware and operating system support a high-resolution performance counter, then the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> class uses that counter to measure elapsed time.","pos":[121,308],"source":" If the installed hardware and operating system support a high-resolution performance counter, then the <xref:System.Diagnostics.Stopwatch> class uses that counter to measure elapsed time."},{"content":"Otherwise, the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> class uses the system timer to measure elapsed time.","pos":[309,412],"source":" Otherwise, the <xref:System.Diagnostics.Stopwatch> class uses the system timer to measure elapsed time."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Frequency&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.IsHighResolution&gt;</ph> fields to determine the precision and resolution of the <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> timing implementation.","pos":[413,638],"source":" Use the <xref:System.Diagnostics.Stopwatch.Frequency> and <xref:System.Diagnostics.Stopwatch.IsHighResolution> fields to determine the precision and resolution of the <xref:System.Diagnostics.Stopwatch> timing implementation."}]}]},{"pos":[2916,3287],"content":"The <xref:System.Diagnostics.Stopwatch> class assists the manipulation of timing-related performance counters within managed code. Specifically, the <xref:System.Diagnostics.Stopwatch.Frequency> field and <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> method can be used in place of the unmanaged Win32 APIs `QueryPerformanceFrequency` and `QueryPerformanceCounter`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> class assists the manipulation of timing-related performance counters within managed code.","pos":[0,130],"source":"The <xref:System.Diagnostics.Stopwatch> class assists the manipulation of timing-related performance counters within managed code."},{"content":"Specifically, the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Frequency&gt;</ph> field and <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.GetTimestamp%2A&gt;</ph> method can be used in place of the unmanaged Win32 APIs <ph id=\"ph3\">`QueryPerformanceFrequency`</ph> and <ph id=\"ph4\">`QueryPerformanceCounter`</ph>.","pos":[131,371],"source":" Specifically, the <xref:System.Diagnostics.Stopwatch.Frequency> field and <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> method can be used in place of the unmanaged Win32 APIs `QueryPerformanceFrequency` and `QueryPerformanceCounter`."}]},{"pos":[3295,3676],"content":"[!NOTE]\n On a multiprocessor computer, it does not matter which processor the thread runs on. However, because of bugs in the BIOS or the Hardware Abstraction Layer (HAL), you can get different timing results on different processors. To specify processor affinity for a thread, use the <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=fullName> method.","leadings":["","> "],"nodes":[{"content":" On a multiprocessor computer, it does not matter which processor the thread runs on. However, because of bugs in the BIOS or the Hardware Abstraction Layer (HAL), you can get different timing results on different processors. To specify processor affinity for a thread, use the <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=fullName> method.","pos":[8,379],"nodes":[{"content":"On a multiprocessor computer, it does not matter which processor the thread runs on.","pos":[1,85]},{"content":"However, because of bugs in the BIOS or the Hardware Abstraction Layer (HAL), you can get different timing results on different processors.","pos":[86,225]},{"content":"To specify processor affinity for a thread, use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=fullName&gt;</ph> method.","pos":[226,371],"source":" To specify processor affinity for a thread, use the <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=fullName> method."}]}]}],"pos":[1042,4735],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.Stopwatch\"></xref> class.","nodes":[{"pos":[0,90],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Stopwatch\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Stopwatch\"></xref> class."}],"pos":[7524,7615],"yaml":true},{"content":"The returned <xref:System.Diagnostics.Stopwatch> instance is stopped, and the elapsed time property of the instance is zero.  \n  \n Use the <xref:System.Diagnostics.Stopwatch.Start%2A> method to begin measuring elapsed time with the new <xref:System.Diagnostics.Stopwatch> instance. Use the <xref:System.Diagnostics.Stopwatch.StartNew%2A> method to initialize a new <xref:System.Diagnostics.Stopwatch> instance and immediately start it.","nodes":[{"pos":[0,124],"content":"The returned <xref:System.Diagnostics.Stopwatch> instance is stopped, and the elapsed time property of the instance is zero.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance is stopped, and the elapsed time property of the instance is zero.","pos":[0,124],"source":"The returned <xref:System.Diagnostics.Stopwatch> instance is stopped, and the elapsed time property of the instance is zero."}]},{"pos":[131,435],"content":"Use the <xref:System.Diagnostics.Stopwatch.Start%2A> method to begin measuring elapsed time with the new <xref:System.Diagnostics.Stopwatch> instance. Use the <xref:System.Diagnostics.Stopwatch.StartNew%2A> method to initialize a new <xref:System.Diagnostics.Stopwatch> instance and immediately start it.","nodes":[{"content":"Use the <xref:System.Diagnostics.Stopwatch.Start%2A> method to begin measuring elapsed time with the new <xref:System.Diagnostics.Stopwatch> instance. Use the <xref:System.Diagnostics.Stopwatch.StartNew%2A> method to initialize a new <xref:System.Diagnostics.Stopwatch> instance and immediately start it.","pos":[0,304],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> method to begin measuring elapsed time with the new <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance.","pos":[0,150],"source":"Use the <xref:System.Diagnostics.Stopwatch.Start%2A> method to begin measuring elapsed time with the new <xref:System.Diagnostics.Stopwatch> instance."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.StartNew%2A&gt;</ph> method to initialize a new <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance and immediately start it.","pos":[151,304],"source":" Use the <xref:System.Diagnostics.Stopwatch.StartNew%2A> method to initialize a new <xref:System.Diagnostics.Stopwatch> instance and immediately start it."}]}]}],"pos":[7626,8066],"yaml":true,"extradata":"MT"},{"content":"Gets the total elapsed time measured by the current instance.","nodes":[{"pos":[0,61],"content":"Gets the total elapsed time measured by the current instance.","nodes":[{"content":"Gets the total elapsed time measured by the current instance.","pos":[0,61]}]}],"pos":[10068,10130],"yaml":true},{"content":"In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.  \n  \n Use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property to retrieve the elapsed time value using <xref:System.TimeSpan> methods and properties. For example, you can format the returned <xref:System.TimeSpan> instance into a text representation, or pass it to another class that requires a <xref:System.TimeSpan> parameter.  \n  \n You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.  \n  \n By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.","nodes":[{"pos":[0,300],"content":"In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.","nodes":[{"content":"In a typical <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> scenario, you call the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> method, then eventually call the <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> method, and then you check elapsed time using the <ph id=\"ph4\">&lt;xref:System.Diagnostics.Stopwatch.Elapsed%2A&gt;</ph> property.","pos":[0,300],"source":"In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property."}]},{"pos":[307,637],"content":"Use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property to retrieve the elapsed time value using <xref:System.TimeSpan> methods and properties. For example, you can format the returned <xref:System.TimeSpan> instance into a text representation, or pass it to another class that requires a <xref:System.TimeSpan> parameter.","nodes":[{"content":"Use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property to retrieve the elapsed time value using <xref:System.TimeSpan> methods and properties. For example, you can format the returned <xref:System.TimeSpan> instance into a text representation, or pass it to another class that requires a <xref:System.TimeSpan> parameter.","pos":[0,330],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Elapsed%2A&gt;</ph> property to retrieve the elapsed time value using <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph> methods and properties.","pos":[0,151],"source":"Use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property to retrieve the elapsed time value using <xref:System.TimeSpan> methods and properties."},{"content":"For example, you can format the returned <ph id=\"ph1\">&lt;xref:System.TimeSpan&gt;</ph> instance into a text representation, or pass it to another class that requires a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph> parameter.","pos":[152,330],"source":" For example, you can format the returned <xref:System.TimeSpan> instance into a text representation, or pass it to another class that requires a <xref:System.TimeSpan> parameter."}]}]},{"pos":[644,1069],"content":"You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.","nodes":[{"content":"You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.","pos":[0,425],"nodes":[{"content":"You can query the properties <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Elapsed%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A&gt;</ph> while the <ph id=\"ph4\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance is running or stopped.","pos":[0,270],"source":"You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped."},{"content":"The elapsed time properties steadily increase while the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> is running; they remain constant when the instance is stopped.","pos":[271,425],"source":" The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped."}]}]},{"pos":[1076,1615],"content":"By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.","nodes":[{"content":"By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.","pos":[0,539],"nodes":[{"content":"By default, the elapsed time value of a <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance equals the total of all measured time intervals.","pos":[0,133],"source":"By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals."},{"content":"Each call to <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> begins counting at the cumulative elapsed time; each call to <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> ends the current interval measurement and freezes the cumulative elapsed time value.","pos":[134,381],"source":" Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Reset%2A&gt;</ph> method to clear the cumulative elapsed time in an existing <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance.","pos":[382,539],"source":" Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance."}]}]}],"pos":[10141,11765],"yaml":true,"extradata":"MT"},{"content":"A read-only <xref href=\"System.TimeSpan\"></xref> representing the total elapsed time measured by the current instance.","nodes":[{"pos":[0,118],"content":"A read-only <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> representing the total elapsed time measured by the current instance.","source":"A read-only <xref href=\"System.TimeSpan\"></xref> representing the total elapsed time measured by the current instance."}],"pos":[12348,12467],"yaml":true},{"content":"Gets the total elapsed time measured by the current instance, in milliseconds.","nodes":[{"pos":[0,78],"content":"Gets the total elapsed time measured by the current instance, in milliseconds.","nodes":[{"content":"Gets the total elapsed time measured by the current instance, in milliseconds.","pos":[0,78]}]}],"pos":[14052,14131],"yaml":true},{"content":"This property represents elapsed time rounded down to the nearest whole millisecond value. For higher precision measurements, use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> or <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> properties.  \n  \n You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.  \n  \n By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.","nodes":[{"pos":[0,247],"content":"This property represents elapsed time rounded down to the nearest whole millisecond value. For higher precision measurements, use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> or <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> properties.","nodes":[{"content":"This property represents elapsed time rounded down to the nearest whole millisecond value. For higher precision measurements, use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> or <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> properties.","pos":[0,247],"nodes":[{"content":"This property represents elapsed time rounded down to the nearest whole millisecond value.","pos":[0,90]},{"content":"For higher precision measurements, use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Elapsed%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A&gt;</ph> properties.","pos":[91,247],"source":" For higher precision measurements, use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> or <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> properties."}]}]},{"pos":[254,679],"content":"You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.","nodes":[{"content":"You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.","pos":[0,425],"nodes":[{"content":"You can query the properties <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Elapsed%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A&gt;</ph> while the <ph id=\"ph4\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance is running or stopped.","pos":[0,270],"source":"You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped."},{"content":"The elapsed time properties steadily increase while the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> is running; they remain constant when the instance is stopped.","pos":[271,425],"source":" The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped."}]}]},{"pos":[686,1225],"content":"By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.","nodes":[{"content":"By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.","pos":[0,539],"nodes":[{"content":"By default, the elapsed time value of a <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance equals the total of all measured time intervals.","pos":[0,133],"source":"By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals."},{"content":"Each call to <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> begins counting at the cumulative elapsed time; each call to <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> ends the current interval measurement and freezes the cumulative elapsed time value.","pos":[134,381],"source":" Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Reset%2A&gt;</ph> method to clear the cumulative elapsed time in an existing <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance.","pos":[382,539],"source":" Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance."}]}]}],"pos":[14142,15374],"yaml":true,"extradata":"MT"},{"content":"A read-only long integer representing the total number of milliseconds measured by the current instance.","nodes":[{"pos":[0,104],"content":"A read-only long integer representing the total number of milliseconds measured by the current instance.","nodes":[{"content":"A read-only long integer representing the total number of milliseconds measured by the current instance.","pos":[0,104]}]}],"pos":[16146,16251],"yaml":true},{"content":"Gets the total elapsed time measured by the current instance, in timer ticks.","nodes":[{"pos":[0,77],"content":"Gets the total elapsed time measured by the current instance, in timer ticks.","nodes":[{"content":"Gets the total elapsed time measured by the current instance, in timer ticks.","pos":[0,77]}]}],"pos":[17806,17884],"yaml":true},{"content":"This property represents the number of elapsed ticks in the underlying timer mechanism. A tick is the smallest unit of time that the <xref:System.Diagnostics.Stopwatch> timer can measure. Use the <xref:System.Diagnostics.Stopwatch.Frequency> field to convert the <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> value into a number of seconds.  \n  \n You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.  \n  \n By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.  \n  \n> [!NOTE]\n>  <xref:System.Diagnostics.Stopwatch> ticks are different from <xref:System.DateTime.Ticks%2A?displayProperty=fullName>. Each tick in the <xref:System.DateTime.Ticks%2A?displayProperty=fullName> value represents one 100-nanosecond interval. Each tick in the <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> value represents the time interval equal to 1 second divided by the <xref:System.Diagnostics.Stopwatch.Frequency>.","nodes":[{"pos":[0,346],"content":"This property represents the number of elapsed ticks in the underlying timer mechanism. A tick is the smallest unit of time that the <xref:System.Diagnostics.Stopwatch> timer can measure. Use the <xref:System.Diagnostics.Stopwatch.Frequency> field to convert the <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> value into a number of seconds.","nodes":[{"content":"This property represents the number of elapsed ticks in the underlying timer mechanism. A tick is the smallest unit of time that the <xref:System.Diagnostics.Stopwatch> timer can measure. Use the <xref:System.Diagnostics.Stopwatch.Frequency> field to convert the <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> value into a number of seconds.","pos":[0,346],"nodes":[{"content":"This property represents the number of elapsed ticks in the underlying timer mechanism.","pos":[0,87]},{"content":"A tick is the smallest unit of time that the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> timer can measure.","pos":[88,187],"source":" A tick is the smallest unit of time that the <xref:System.Diagnostics.Stopwatch> timer can measure."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Frequency&gt;</ph> field to convert the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A&gt;</ph> value into a number of seconds.","pos":[188,346],"source":" Use the <xref:System.Diagnostics.Stopwatch.Frequency> field to convert the <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> value into a number of seconds."}]}]},{"pos":[353,778],"content":"You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.","nodes":[{"content":"You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.","pos":[0,425],"nodes":[{"content":"You can query the properties <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Elapsed%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A&gt;</ph> while the <ph id=\"ph4\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance is running or stopped.","pos":[0,270],"source":"You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped."},{"content":"The elapsed time properties steadily increase while the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> is running; they remain constant when the instance is stopped.","pos":[271,425],"source":" The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped."}]}]},{"pos":[785,1324],"content":"By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.","nodes":[{"content":"By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.","pos":[0,539],"nodes":[{"content":"By default, the elapsed time value of a <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance equals the total of all measured time intervals.","pos":[0,133],"source":"By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals."},{"content":"Each call to <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> begins counting at the cumulative elapsed time; each call to <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> ends the current interval measurement and freezes the cumulative elapsed time value.","pos":[134,381],"source":" Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Reset%2A&gt;</ph> method to clear the cumulative elapsed time in an existing <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance.","pos":[382,539],"source":" Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance."}]}]},{"pos":[1332,1765],"content":"[!NOTE]\n <xref:System.Diagnostics.Stopwatch> ticks are different from <xref:System.DateTime.Ticks%2A?displayProperty=fullName>. Each tick in the <xref:System.DateTime.Ticks%2A?displayProperty=fullName> value represents one 100-nanosecond interval. Each tick in the <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> value represents the time interval equal to 1 second divided by the <xref:System.Diagnostics.Stopwatch.Frequency>.","leadings":["","> "],"nodes":[{"content":" <xref:System.Diagnostics.Stopwatch> ticks are different from <xref:System.DateTime.Ticks%2A?displayProperty=fullName>. Each tick in the <xref:System.DateTime.Ticks%2A?displayProperty=fullName> value represents one 100-nanosecond interval. Each tick in the <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> value represents the time interval equal to 1 second divided by the <xref:System.Diagnostics.Stopwatch.Frequency>.","pos":[8,431],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> ticks are different from <ph id=\"ph2\">&lt;xref:System.DateTime.Ticks%2A?displayProperty=fullName&gt;</ph>.","pos":[1,119],"source":" <xref:System.Diagnostics.Stopwatch> ticks are different from <xref:System.DateTime.Ticks%2A?displayProperty=fullName>."},{"content":"Each tick in the <ph id=\"ph1\">&lt;xref:System.DateTime.Ticks%2A?displayProperty=fullName&gt;</ph> value represents one 100-nanosecond interval.","pos":[120,239],"source":" Each tick in the <xref:System.DateTime.Ticks%2A?displayProperty=fullName> value represents one 100-nanosecond interval."},{"content":"Each tick in the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A&gt;</ph> value represents the time interval equal to 1 second divided by the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Frequency&gt;</ph>.","pos":[240,423],"source":" Each tick in the <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> value represents the time interval equal to 1 second divided by the <xref:System.Diagnostics.Stopwatch.Frequency>."}]}]}],"pos":[17895,19670],"yaml":true,"extradata":"MT"},{"content":"A read-only long integer representing the total number of timer ticks measured by the current instance.","nodes":[{"pos":[0,103],"content":"A read-only long integer representing the total number of timer ticks measured by the current instance.","nodes":[{"content":"A read-only long integer representing the total number of timer ticks measured by the current instance.","pos":[0,103]}]}],"pos":[20435,20539],"yaml":true},{"content":"Gets the frequency of the timer as the number of ticks per second. This field is read-only.","nodes":[{"pos":[0,91],"content":"Gets the frequency of the timer as the number of ticks per second. This field is read-only.","nodes":[{"content":"Gets the frequency of the timer as the number of ticks per second. This field is read-only.","pos":[0,91],"nodes":[{"content":"Gets the frequency of the timer as the number of ticks per second.","pos":[0,66]},{"content":"This field is read-only.","pos":[67,91]}]}]}],"pos":[22066,22158],"yaml":true},{"content":"The timer frequency indicates the timer precision and resolution. For example, a timer frequency of 2 million ticks per second equals a timer resolution of 500 nanoseconds per tick. In other words, because one second equals 1 billion nanoseconds, a timer frequency of 2 million ticks per second is equivalent to 2 million ticks per 1 billion nanoseconds, which can be further simplified to 1 tick per 500 nanoseconds.  \n  \n The <xref:System.Diagnostics.Stopwatch.Frequency> value depends on the resolution of the underlying timing mechanism. If the installed hardware and operating system support a high-resolution performance counter, then the <xref:System.Diagnostics.Stopwatch.Frequency> value reflects the frequency of that counter. Otherwise, the <xref:System.Diagnostics.Stopwatch.Frequency> value is based on the system timer frequency.  \n  \n Because the <xref:System.Diagnostics.Stopwatch> frequency depends on the installed hardware and operating system, the <xref:System.Diagnostics.Stopwatch.Frequency> value remains constant while the system is running.","nodes":[{"pos":[0,417],"content":"The timer frequency indicates the timer precision and resolution. For example, a timer frequency of 2 million ticks per second equals a timer resolution of 500 nanoseconds per tick. In other words, because one second equals 1 billion nanoseconds, a timer frequency of 2 million ticks per second is equivalent to 2 million ticks per 1 billion nanoseconds, which can be further simplified to 1 tick per 500 nanoseconds.","nodes":[{"content":"The timer frequency indicates the timer precision and resolution. For example, a timer frequency of 2 million ticks per second equals a timer resolution of 500 nanoseconds per tick. In other words, because one second equals 1 billion nanoseconds, a timer frequency of 2 million ticks per second is equivalent to 2 million ticks per 1 billion nanoseconds, which can be further simplified to 1 tick per 500 nanoseconds.","pos":[0,417],"nodes":[{"content":"The timer frequency indicates the timer precision and resolution.","pos":[0,65]},{"content":"For example, a timer frequency of 2 million ticks per second equals a timer resolution of 500 nanoseconds per tick.","pos":[66,181]},{"content":"In other words, because one second equals 1 billion nanoseconds, a timer frequency of 2 million ticks per second is equivalent to 2 million ticks per 1 billion nanoseconds, which can be further simplified to 1 tick per 500 nanoseconds.","pos":[182,417]}]}]},{"pos":[424,843],"content":"The <xref:System.Diagnostics.Stopwatch.Frequency> value depends on the resolution of the underlying timing mechanism. If the installed hardware and operating system support a high-resolution performance counter, then the <xref:System.Diagnostics.Stopwatch.Frequency> value reflects the frequency of that counter. Otherwise, the <xref:System.Diagnostics.Stopwatch.Frequency> value is based on the system timer frequency.","nodes":[{"content":"The <xref:System.Diagnostics.Stopwatch.Frequency> value depends on the resolution of the underlying timing mechanism. If the installed hardware and operating system support a high-resolution performance counter, then the <xref:System.Diagnostics.Stopwatch.Frequency> value reflects the frequency of that counter. Otherwise, the <xref:System.Diagnostics.Stopwatch.Frequency> value is based on the system timer frequency.","pos":[0,419],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Frequency&gt;</ph> value depends on the resolution of the underlying timing mechanism.","pos":[0,117],"source":"The <xref:System.Diagnostics.Stopwatch.Frequency> value depends on the resolution of the underlying timing mechanism."},{"content":"If the installed hardware and operating system support a high-resolution performance counter, then the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Frequency&gt;</ph> value reflects the frequency of that counter.","pos":[118,312],"source":" If the installed hardware and operating system support a high-resolution performance counter, then the <xref:System.Diagnostics.Stopwatch.Frequency> value reflects the frequency of that counter."},{"content":"Otherwise, the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Frequency&gt;</ph> value is based on the system timer frequency.","pos":[313,419],"source":" Otherwise, the <xref:System.Diagnostics.Stopwatch.Frequency> value is based on the system timer frequency."}]}]},{"pos":[850,1065],"content":"Because the <xref:System.Diagnostics.Stopwatch> frequency depends on the installed hardware and operating system, the <xref:System.Diagnostics.Stopwatch.Frequency> value remains constant while the system is running.","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> frequency depends on the installed hardware and operating system, the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Frequency&gt;</ph> value remains constant while the system is running.","pos":[0,215],"source":"Because the <xref:System.Diagnostics.Stopwatch> frequency depends on the installed hardware and operating system, the <xref:System.Diagnostics.Stopwatch.Frequency> value remains constant while the system is running."}]}],"pos":[22169,23241],"yaml":true,"extradata":"MT"},{"content":"Gets the current number of ticks in the timer mechanism.","nodes":[{"pos":[0,56],"content":"Gets the current number of ticks in the timer mechanism.","nodes":[{"content":"Gets the current number of ticks in the timer mechanism.","pos":[0,56]}]}],"pos":[25447,25504],"yaml":true},{"content":"If the <xref:System.Diagnostics.Stopwatch> class uses a high-resolution performance counter, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current value of that counter. If the <xref:System.Diagnostics.Stopwatch> class uses the system timer, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current <xref:System.DateTime.Ticks%2A?displayProperty=fullName> property of the <xref:System.DateTime.Now%2A?displayProperty=fullName> instance.","nodes":[{"pos":[0,469],"content":"If the <xref:System.Diagnostics.Stopwatch> class uses a high-resolution performance counter, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current value of that counter. If the <xref:System.Diagnostics.Stopwatch> class uses the system timer, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current <xref:System.DateTime.Ticks%2A?displayProperty=fullName> property of the <xref:System.DateTime.Now%2A?displayProperty=fullName> instance.","nodes":[{"content":"If the <xref:System.Diagnostics.Stopwatch> class uses a high-resolution performance counter, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current value of that counter. If the <xref:System.Diagnostics.Stopwatch> class uses the system timer, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current <xref:System.DateTime.Ticks%2A?displayProperty=fullName> property of the <xref:System.DateTime.Now%2A?displayProperty=fullName> instance.","pos":[0,469],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> class uses a high-resolution performance counter, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.GetTimestamp%2A&gt;</ph> returns the current value of that counter.","pos":[0,187],"source":"If the <xref:System.Diagnostics.Stopwatch> class uses a high-resolution performance counter, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current value of that counter."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> class uses the system timer, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.GetTimestamp%2A&gt;</ph> returns the current <ph id=\"ph3\">&lt;xref:System.DateTime.Ticks%2A?displayProperty=fullName&gt;</ph> property of the <ph id=\"ph4\">&lt;xref:System.DateTime.Now%2A?displayProperty=fullName&gt;</ph> instance.","pos":[188,469],"source":" If the <xref:System.Diagnostics.Stopwatch> class uses the system timer, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current <xref:System.DateTime.Ticks%2A?displayProperty=fullName> property of the <xref:System.DateTime.Now%2A?displayProperty=fullName> instance."}]}]}],"pos":[25515,25985],"yaml":true,"extradata":"MT"},{"content":"A long integer representing the tick counter value of the underlying timer mechanism.","nodes":[{"pos":[0,85],"content":"A long integer representing the tick counter value of the underlying timer mechanism.","nodes":[{"content":"A long integer representing the tick counter value of the underlying timer mechanism.","pos":[0,85]}]}],"pos":[26739,26825],"yaml":true},{"content":"Indicates whether the timer is based on a high-resolution performance counter. This field is read-only.","nodes":[{"pos":[0,103],"content":"Indicates whether the timer is based on a high-resolution performance counter. This field is read-only.","nodes":[{"content":"Indicates whether the timer is based on a high-resolution performance counter. This field is read-only.","pos":[0,103],"nodes":[{"content":"Indicates whether the timer is based on a high-resolution performance counter.","pos":[0,78]},{"content":"This field is read-only.","pos":[79,103]}]}]}],"pos":[28394,28498],"yaml":true},{"content":"The timer used by the <xref:System.Diagnostics.Stopwatch> class depends on the system hardware and operating system. <xref:System.Diagnostics.Stopwatch.IsHighResolution> is `true` if the <xref:System.Diagnostics.Stopwatch> timer is based on a high-resolution performance counter. Otherwise, <xref:System.Diagnostics.Stopwatch.IsHighResolution> is `false`, which indicates that the <xref:System.Diagnostics.Stopwatch> timer is based on the system timer.","nodes":[{"pos":[0,452],"content":"The timer used by the <xref:System.Diagnostics.Stopwatch> class depends on the system hardware and operating system. <xref:System.Diagnostics.Stopwatch.IsHighResolution> is `true` if the <xref:System.Diagnostics.Stopwatch> timer is based on a high-resolution performance counter. Otherwise, <xref:System.Diagnostics.Stopwatch.IsHighResolution> is `false`, which indicates that the <xref:System.Diagnostics.Stopwatch> timer is based on the system timer.","nodes":[{"content":"The timer used by the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> class depends on the system hardware and operating system.","pos":[0,116],"source":"The timer used by the <xref:System.Diagnostics.Stopwatch> class depends on the system hardware and operating system."},{"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.IsHighResolution&gt;</ph> is <ph id=\"ph2\">`true`</ph> if the <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> timer is based on a high-resolution performance counter.","pos":[117,279],"source":" <xref:System.Diagnostics.Stopwatch.IsHighResolution> is `true` if the <xref:System.Diagnostics.Stopwatch> timer is based on a high-resolution performance counter."},{"content":"Otherwise, <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.IsHighResolution&gt;</ph> is <ph id=\"ph2\">`false`</ph>, which indicates that the <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> timer is based on the system timer.","pos":[280,452],"source":" Otherwise, <xref:System.Diagnostics.Stopwatch.IsHighResolution> is `false`, which indicates that the <xref:System.Diagnostics.Stopwatch> timer is based on the system timer."}]}],"pos":[28509,28962],"yaml":true,"extradata":"MT"},{"content":"Gets a value indicating whether the <xref href=\"System.Diagnostics.Stopwatch\"></xref> timer is running.","nodes":[{"pos":[0,103],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Stopwatch\"&gt;&lt;/xref&gt;</ph> timer is running.","source":"Gets a value indicating whether the <xref href=\"System.Diagnostics.Stopwatch\"></xref> timer is running."}],"pos":[31155,31259],"yaml":true},{"content":"A <xref:System.Diagnostics.Stopwatch> instance begins running with a call to <xref:System.Diagnostics.Stopwatch.Start%2A> or <xref:System.Diagnostics.Stopwatch.StartNew%2A>. The instance stops running with a call to <xref:System.Diagnostics.Stopwatch.Stop%2A> or <xref:System.Diagnostics.Stopwatch.Reset%2A>.","nodes":[{"pos":[0,308],"content":"A <xref:System.Diagnostics.Stopwatch> instance begins running with a call to <xref:System.Diagnostics.Stopwatch.Start%2A> or <xref:System.Diagnostics.Stopwatch.StartNew%2A>. The instance stops running with a call to <xref:System.Diagnostics.Stopwatch.Stop%2A> or <xref:System.Diagnostics.Stopwatch.Reset%2A>.","nodes":[{"content":"A <xref:System.Diagnostics.Stopwatch> instance begins running with a call to <xref:System.Diagnostics.Stopwatch.Start%2A> or <xref:System.Diagnostics.Stopwatch.StartNew%2A>. The instance stops running with a call to <xref:System.Diagnostics.Stopwatch.Stop%2A> or <xref:System.Diagnostics.Stopwatch.Reset%2A>.","pos":[0,308],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance begins running with a call to <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch.StartNew%2A&gt;</ph>.","pos":[0,173],"source":"A <xref:System.Diagnostics.Stopwatch> instance begins running with a call to <xref:System.Diagnostics.Stopwatch.Start%2A> or <xref:System.Diagnostics.Stopwatch.StartNew%2A>."},{"content":"The instance stops running with a call to <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Reset%2A&gt;</ph>.","pos":[174,308],"source":" The instance stops running with a call to <xref:System.Diagnostics.Stopwatch.Stop%2A> or <xref:System.Diagnostics.Stopwatch.Reset%2A>."}]}]}],"pos":[31270,31579],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Diagnostics.Stopwatch\"></xref> instance is currently running and measuring elapsed time for an interval; otherwise, `false`.","nodes":[{"pos":[0,157],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Diagnostics.Stopwatch\"&gt;&lt;/xref&gt;</ph> instance is currently running and measuring elapsed time for an interval; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Diagnostics.Stopwatch\"></xref> instance is currently running and measuring elapsed time for an interval; otherwise, `false`."}],"pos":[31691,31851],"yaml":true},{"content":"Stops time interval measurement and resets the elapsed time to zero.","nodes":[{"pos":[0,68],"content":"Stops time interval measurement and resets the elapsed time to zero.","nodes":[{"content":"Stops time interval measurement and resets the elapsed time to zero.","pos":[0,68]}]}],"pos":[33358,33427],"yaml":true},{"content":"A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset. Use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop the current interval measurement and retain the cumulative elapsed time value. Use <xref:System.Diagnostics.Stopwatch.Reset%2A> to stop any interval measurement in progress and clear the elapsed time value.","nodes":[{"pos":[0,421],"content":"A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset. Use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop the current interval measurement and retain the cumulative elapsed time value. Use <xref:System.Diagnostics.Stopwatch.Reset%2A> to stop any interval measurement in progress and clear the elapsed time value.","nodes":[{"content":"A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset. Use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop the current interval measurement and retain the cumulative elapsed time value. Use <xref:System.Diagnostics.Stopwatch.Reset%2A> to stop any interval measurement in progress and clear the elapsed time value.","pos":[0,421],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset.","pos":[0,158],"source":"A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> to stop the current interval measurement and retain the cumulative elapsed time value.","pos":[159,293],"source":" Use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop the current interval measurement and retain the cumulative elapsed time value."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Reset%2A&gt;</ph> to stop any interval measurement in progress and clear the elapsed time value.","pos":[294,421],"source":" Use <xref:System.Diagnostics.Stopwatch.Reset%2A> to stop any interval measurement in progress and clear the elapsed time value."}]}]}],"pos":[33438,33860],"yaml":true,"extradata":"MT"},{"content":"Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.","nodes":[{"pos":[0,100],"content":"Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.","nodes":[{"content":"Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.","pos":[0,100]}]}],"pos":[35439,35540],"yaml":true},{"content":"A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset or restarted. Use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop the current interval measurement and retain the cumulative elapsed time value. Use <xref:System.Diagnostics.Stopwatch.Reset%2A> to stop any interval measurement in progress and clear the elapsed time value. Use <xref:System.Diagnostics.Stopwatch.Restart%2A> to stop current interval measurement and start a new interval measurement.","nodes":[{"pos":[0,560],"content":"A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset or restarted. Use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop the current interval measurement and retain the cumulative elapsed time value. Use <xref:System.Diagnostics.Stopwatch.Reset%2A> to stop any interval measurement in progress and clear the elapsed time value. Use <xref:System.Diagnostics.Stopwatch.Restart%2A> to stop current interval measurement and start a new interval measurement.","nodes":[{"content":"A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset or restarted. Use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop the current interval measurement and retain the cumulative elapsed time value. Use <xref:System.Diagnostics.Stopwatch.Reset%2A> to stop any interval measurement in progress and clear the elapsed time value. Use <xref:System.Diagnostics.Stopwatch.Restart%2A> to stop current interval measurement and start a new interval measurement.","pos":[0,560],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset or restarted.","pos":[0,171],"source":"A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset or restarted."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> to stop the current interval measurement and retain the cumulative elapsed time value.","pos":[172,306],"source":" Use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop the current interval measurement and retain the cumulative elapsed time value."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Reset%2A&gt;</ph> to stop any interval measurement in progress and clear the elapsed time value.","pos":[307,434],"source":" Use <xref:System.Diagnostics.Stopwatch.Reset%2A> to stop any interval measurement in progress and clear the elapsed time value."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Restart%2A&gt;</ph> to stop current interval measurement and start a new interval measurement.","pos":[435,560],"source":" Use <xref:System.Diagnostics.Stopwatch.Restart%2A> to stop current interval measurement and start a new interval measurement."}]}]}],"pos":[35551,36112],"yaml":true,"extradata":"MT"},{"content":"Starts, or resumes, measuring elapsed time for an interval.","nodes":[{"pos":[0,59],"content":"Starts, or resumes, measuring elapsed time for an interval.","nodes":[{"content":"Starts, or resumes, measuring elapsed time for an interval.","pos":[0,59]}]}],"pos":[37683,37743],"yaml":true},{"content":"In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.  \n  \n Once started, a <xref:System.Diagnostics.Stopwatch> timer measures the current interval, in elapsed timer ticks, until the instance is stopped or reset. Starting a <xref:System.Diagnostics.Stopwatch> that is already running does not change the timer state or reset the elapsed time properties.  \n  \n When a <xref:System.Diagnostics.Stopwatch> instance measures more than one interval, the <xref:System.Diagnostics.Stopwatch.Start%2A> method resumes measuring time from the current elapsed time value. A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method before calling <xref:System.Diagnostics.Stopwatch.Start%2A> to clear the cumulative elapsed time in a <xref:System.Diagnostics.Stopwatch> instance. Use the <xref:System.Diagnostics.Stopwatch.Restart%2A> method to <xref:System.Diagnostics.Stopwatch.Reset%2A> and <xref:System.Diagnostics.Stopwatch.Start%2A> the <xref:System.Diagnostics.Stopwatch> with a single command.","nodes":[{"pos":[0,300],"content":"In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.","nodes":[{"content":"In a typical <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> scenario, you call the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> method, then eventually call the <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> method, and then you check elapsed time using the <ph id=\"ph4\">&lt;xref:System.Diagnostics.Stopwatch.Elapsed%2A&gt;</ph> property.","pos":[0,300],"source":"In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property."}]},{"pos":[307,600],"content":"Once started, a <xref:System.Diagnostics.Stopwatch> timer measures the current interval, in elapsed timer ticks, until the instance is stopped or reset. Starting a <xref:System.Diagnostics.Stopwatch> that is already running does not change the timer state or reset the elapsed time properties.","nodes":[{"content":"Once started, a <xref:System.Diagnostics.Stopwatch> timer measures the current interval, in elapsed timer ticks, until the instance is stopped or reset. Starting a <xref:System.Diagnostics.Stopwatch> that is already running does not change the timer state or reset the elapsed time properties.","pos":[0,293],"nodes":[{"content":"Once started, a <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> timer measures the current interval, in elapsed timer ticks, until the instance is stopped or reset.","pos":[0,152],"source":"Once started, a <xref:System.Diagnostics.Stopwatch> timer measures the current interval, in elapsed timer ticks, until the instance is stopped or reset."},{"content":"Starting a <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> that is already running does not change the timer state or reset the elapsed time properties.","pos":[153,293],"source":" Starting a <xref:System.Diagnostics.Stopwatch> that is already running does not change the timer state or reset the elapsed time properties."}]}]},{"pos":[607,1396],"content":"When a <xref:System.Diagnostics.Stopwatch> instance measures more than one interval, the <xref:System.Diagnostics.Stopwatch.Start%2A> method resumes measuring time from the current elapsed time value. A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method before calling <xref:System.Diagnostics.Stopwatch.Start%2A> to clear the cumulative elapsed time in a <xref:System.Diagnostics.Stopwatch> instance. Use the <xref:System.Diagnostics.Stopwatch.Restart%2A> method to <xref:System.Diagnostics.Stopwatch.Reset%2A> and <xref:System.Diagnostics.Stopwatch.Start%2A> the <xref:System.Diagnostics.Stopwatch> with a single command.","nodes":[{"content":"When a <xref:System.Diagnostics.Stopwatch> instance measures more than one interval, the <xref:System.Diagnostics.Stopwatch.Start%2A> method resumes measuring time from the current elapsed time value. A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method before calling <xref:System.Diagnostics.Stopwatch.Start%2A> to clear the cumulative elapsed time in a <xref:System.Diagnostics.Stopwatch> instance. Use the <xref:System.Diagnostics.Stopwatch.Restart%2A> method to <xref:System.Diagnostics.Stopwatch.Reset%2A> and <xref:System.Diagnostics.Stopwatch.Start%2A> the <xref:System.Diagnostics.Stopwatch> with a single command.","pos":[0,789],"nodes":[{"content":"When a <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance measures more than one interval, the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> method resumes measuring time from the current elapsed time value.","pos":[0,200],"source":"When a <xref:System.Diagnostics.Stopwatch> instance measures more than one interval, the <xref:System.Diagnostics.Stopwatch.Start%2A> method resumes measuring time from the current elapsed time value."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset.","pos":[201,359],"source":" A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Reset%2A&gt;</ph> method before calling <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> to clear the cumulative elapsed time in a <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance.","pos":[360,567],"source":" Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method before calling <xref:System.Diagnostics.Stopwatch.Start%2A> to clear the cumulative elapsed time in a <xref:System.Diagnostics.Stopwatch> instance."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Restart%2A&gt;</ph> method to <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Reset%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> the <ph id=\"ph4\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> with a single command.","pos":[568,789],"source":" Use the <xref:System.Diagnostics.Stopwatch.Restart%2A> method to <xref:System.Diagnostics.Stopwatch.Reset%2A> and <xref:System.Diagnostics.Stopwatch.Start%2A> the <xref:System.Diagnostics.Stopwatch> with a single command."}]}]}],"pos":[37754,39157],"yaml":true,"extradata":"MT"},{"content":"Initializes a new <xref href=\"System.Diagnostics.Stopwatch\"></xref> instance, sets the elapsed time property to zero, and starts measuring elapsed time.","nodes":[{"pos":[0,152],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Stopwatch\"&gt;&lt;/xref&gt;</ph> instance, sets the elapsed time property to zero, and starts measuring elapsed time.","source":"Initializes a new <xref href=\"System.Diagnostics.Stopwatch\"></xref> instance, sets the elapsed time property to zero, and starts measuring elapsed time."}],"pos":[41223,41376],"yaml":true},{"content":"This method is equivalent to calling the <xref:System.Diagnostics.Stopwatch> constructor and then calling <xref:System.Diagnostics.Stopwatch.Start%2A> on the new instance.","nodes":[{"pos":[0,171],"content":"This method is equivalent to calling the <xref:System.Diagnostics.Stopwatch> constructor and then calling <xref:System.Diagnostics.Stopwatch.Start%2A> on the new instance.","nodes":[{"content":"This method is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> constructor and then calling <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> on the new instance.","pos":[0,171],"source":"This method is equivalent to calling the <xref:System.Diagnostics.Stopwatch> constructor and then calling <xref:System.Diagnostics.Stopwatch.Start%2A> on the new instance."}]}],"pos":[41387,41559],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Diagnostics.Stopwatch\"></xref> that has just begun measuring elapsed time.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Stopwatch\"&gt;&lt;/xref&gt;</ph> that has just begun measuring elapsed time.","source":"A <xref href=\"System.Diagnostics.Stopwatch\"></xref> that has just begun measuring elapsed time."}],"pos":[42381,42477],"yaml":true},{"content":"Stops measuring elapsed time for an interval.","nodes":[{"pos":[0,45],"content":"Stops measuring elapsed time for an interval.","nodes":[{"content":"Stops measuring elapsed time for an interval.","pos":[0,45]}]}],"pos":[43977,44023],"yaml":true},{"content":"In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.  \n  \n The <xref:System.Diagnostics.Stopwatch.Stop%2A> method ends the current time interval measurement. Stopping a <xref:System.Diagnostics.Stopwatch> that is not running does not change the timer state or reset the elapsed time properties.  \n  \n When a <xref:System.Diagnostics.Stopwatch> instance measures more than one interval, the <xref:System.Diagnostics.Stopwatch.Stop%2A> method is equivalent to pausing the elapsed time measurement. A subsequent call to <xref:System.Diagnostics.Stopwatch.Start%2A> resumes measuring time from the current elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in a <xref:System.Diagnostics.Stopwatch> instance.","nodes":[{"pos":[0,300],"content":"In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.","nodes":[{"content":"In a typical <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> scenario, you call the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> method, then eventually call the <ph id=\"ph3\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> method, and then you check elapsed time using the <ph id=\"ph4\">&lt;xref:System.Diagnostics.Stopwatch.Elapsed%2A&gt;</ph> property.","pos":[0,300],"source":"In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property."}]},{"pos":[307,542],"content":"The <xref:System.Diagnostics.Stopwatch.Stop%2A> method ends the current time interval measurement. Stopping a <xref:System.Diagnostics.Stopwatch> that is not running does not change the timer state or reset the elapsed time properties.","nodes":[{"content":"The <xref:System.Diagnostics.Stopwatch.Stop%2A> method ends the current time interval measurement. Stopping a <xref:System.Diagnostics.Stopwatch> that is not running does not change the timer state or reset the elapsed time properties.","pos":[0,235],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> method ends the current time interval measurement.","pos":[0,98],"source":"The <xref:System.Diagnostics.Stopwatch.Stop%2A> method ends the current time interval measurement."},{"content":"Stopping a <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> that is not running does not change the timer state or reset the elapsed time properties.","pos":[99,235],"source":" Stopping a <xref:System.Diagnostics.Stopwatch> that is not running does not change the timer state or reset the elapsed time properties."}]}]},{"pos":[549,1017],"content":"When a <xref:System.Diagnostics.Stopwatch> instance measures more than one interval, the <xref:System.Diagnostics.Stopwatch.Stop%2A> method is equivalent to pausing the elapsed time measurement. A subsequent call to <xref:System.Diagnostics.Stopwatch.Start%2A> resumes measuring time from the current elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in a <xref:System.Diagnostics.Stopwatch> instance.","nodes":[{"content":"When a <xref:System.Diagnostics.Stopwatch> instance measures more than one interval, the <xref:System.Diagnostics.Stopwatch.Stop%2A> method is equivalent to pausing the elapsed time measurement. A subsequent call to <xref:System.Diagnostics.Stopwatch.Start%2A> resumes measuring time from the current elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in a <xref:System.Diagnostics.Stopwatch> instance.","pos":[0,468],"nodes":[{"content":"When a <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance measures more than one interval, the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch.Stop%2A&gt;</ph> method is equivalent to pausing the elapsed time measurement.","pos":[0,194],"source":"When a <xref:System.Diagnostics.Stopwatch> instance measures more than one interval, the <xref:System.Diagnostics.Stopwatch.Stop%2A> method is equivalent to pausing the elapsed time measurement."},{"content":"A subsequent call to <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Start%2A&gt;</ph> resumes measuring time from the current elapsed time value.","pos":[195,320],"source":" A subsequent call to <xref:System.Diagnostics.Stopwatch.Start%2A> resumes measuring time from the current elapsed time value."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch.Reset%2A&gt;</ph> method to clear the cumulative elapsed time in a <ph id=\"ph2\">&lt;xref:System.Diagnostics.Stopwatch&gt;</ph> instance.","pos":[321,468],"source":" Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in a <xref:System.Diagnostics.Stopwatch> instance."}]}]}],"pos":[44034,45058],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.Stopwatch\n  commentId: T:System.Diagnostics.Stopwatch\n  id: Stopwatch\n  children:\n  - System.Diagnostics.Stopwatch.#ctor\n  - System.Diagnostics.Stopwatch.Elapsed\n  - System.Diagnostics.Stopwatch.ElapsedMilliseconds\n  - System.Diagnostics.Stopwatch.ElapsedTicks\n  - System.Diagnostics.Stopwatch.Frequency\n  - System.Diagnostics.Stopwatch.GetTimestamp\n  - System.Diagnostics.Stopwatch.IsHighResolution\n  - System.Diagnostics.Stopwatch.IsRunning\n  - System.Diagnostics.Stopwatch.Reset\n  - System.Diagnostics.Stopwatch.Restart\n  - System.Diagnostics.Stopwatch.Start\n  - System.Diagnostics.Stopwatch.StartNew\n  - System.Diagnostics.Stopwatch.Stop\n  langs:\n  - csharp\n  name: Stopwatch\n  nameWithType: Stopwatch\n  fullName: System.Diagnostics.Stopwatch\n  type: Class\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Provides a set of methods and properties that you can use to accurately measure elapsed time.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Stopwatch.cs#ceb0ba9cc88de82e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n A <xref:System.Diagnostics.Stopwatch> instance can measure elapsed time for one interval, or the total of elapsed time across multiple intervals. In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.  \\n  \\n A <xref:System.Diagnostics.Stopwatch> instance is either running or stopped; use <xref:System.Diagnostics.Stopwatch.IsRunning%2A> to determine the current state of a <xref:System.Diagnostics.Stopwatch>. Use <xref:System.Diagnostics.Stopwatch.Start%2A> to begin measuring elapsed time; use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop measuring elapsed time. Query the elapsed time value through the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, or <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>. You can query the elapsed time properties while the instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.  \\n  \\n By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.  \\n  \\n The <xref:System.Diagnostics.Stopwatch> measures elapsed time by counting timer ticks in the underlying timer mechanism. If the installed hardware and operating system support a high-resolution performance counter, then the <xref:System.Diagnostics.Stopwatch> class uses that counter to measure elapsed time. Otherwise, the <xref:System.Diagnostics.Stopwatch> class uses the system timer to measure elapsed time. Use the <xref:System.Diagnostics.Stopwatch.Frequency> and <xref:System.Diagnostics.Stopwatch.IsHighResolution> fields to determine the precision and resolution of the <xref:System.Diagnostics.Stopwatch> timing implementation.  \\n  \\n The <xref:System.Diagnostics.Stopwatch> class assists the manipulation of timing-related performance counters within managed code. Specifically, the <xref:System.Diagnostics.Stopwatch.Frequency> field and <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> method can be used in place of the unmanaged Win32 APIs `QueryPerformanceFrequency` and `QueryPerformanceCounter`.  \\n  \\n> [!NOTE]\\n>  On a multiprocessor computer, it does not matter which processor the thread runs on. However, because of bugs in the BIOS or the Hardware Abstraction Layer (HAL), you can get different timing results on different processors. To specify processor affinity for a thread, use the <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Diagnostics.Stopwatch> class to determine the execution time for an application.  \\n  \\n [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]\\n [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  \\n  \\n The following example demonstrates the use of the <xref:System.Diagnostics.Stopwatch> class to calculate performance data.  \\n  \\n [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]\\n [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]\\n [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]\"\n  syntax:\n    content: public class Stopwatch\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.#ctor\n  commentId: M:System.Diagnostics.Stopwatch.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: Stopwatch()\n  nameWithType: Stopwatch.Stopwatch()\n  fullName: Stopwatch.Stopwatch()\n  type: Constructor\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Stopwatch\"></xref> class.\n  remarks: \"The returned <xref:System.Diagnostics.Stopwatch> instance is stopped, and the elapsed time property of the instance is zero.  \\n  \\n Use the <xref:System.Diagnostics.Stopwatch.Start%2A> method to begin measuring elapsed time with the new <xref:System.Diagnostics.Stopwatch> instance. Use the <xref:System.Diagnostics.Stopwatch.StartNew%2A> method to initialize a new <xref:System.Diagnostics.Stopwatch> instance and immediately start it.\"\n  example:\n  - \"The following example initializes a <xref:System.Diagnostics.Stopwatch> instance by using a simple class constructor.  \\n  \\n [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]\\n [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]\"\n  syntax:\n    content: public Stopwatch ();\n    parameters: []\n  overload: System.Diagnostics.Stopwatch.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.Elapsed\n  commentId: P:System.Diagnostics.Stopwatch.Elapsed\n  id: Elapsed\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: Elapsed\n  nameWithType: Stopwatch.Elapsed\n  fullName: Stopwatch.Elapsed\n  type: Property\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Gets the total elapsed time measured by the current instance.\n  remarks: \"In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.  \\n  \\n Use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property to retrieve the elapsed time value using <xref:System.TimeSpan> methods and properties. For example, you can format the returned <xref:System.TimeSpan> instance into a text representation, or pass it to another class that requires a <xref:System.TimeSpan> parameter.  \\n  \\n You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.  \\n  \\n By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property to determine the execution time for an application.  \\n  \\n [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]\\n [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]\"\n  syntax:\n    content: public TimeSpan Elapsed { get; }\n    return:\n      type: System.TimeSpan\n      description: A read-only <xref href=\"System.TimeSpan\"></xref> representing the total elapsed time measured by the current instance.\n  overload: System.Diagnostics.Stopwatch.Elapsed*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.ElapsedMilliseconds\n  commentId: P:System.Diagnostics.Stopwatch.ElapsedMilliseconds\n  id: ElapsedMilliseconds\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: ElapsedMilliseconds\n  nameWithType: Stopwatch.ElapsedMilliseconds\n  fullName: Stopwatch.ElapsedMilliseconds\n  type: Property\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Gets the total elapsed time measured by the current instance, in milliseconds.\n  remarks: \"This property represents elapsed time rounded down to the nearest whole millisecond value. For higher precision measurements, use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> or <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> properties.  \\n  \\n You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.  \\n  \\n By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.\"\n  example:\n  - \"The following example uses the <xref:System.Diagnostics.Stopwatch> class to measure the performance of four different implementations for parsing an integer from a string. This code example is part of a larger example provided for the <xref:System.Diagnostics.Stopwatch> class.  \\n  \\n [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]\\n [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]\\n [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]\"\n  syntax:\n    content: public long ElapsedMilliseconds { get; }\n    return:\n      type: System.Int64\n      description: A read-only long integer representing the total number of milliseconds measured by the current instance.\n  overload: System.Diagnostics.Stopwatch.ElapsedMilliseconds*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.ElapsedTicks\n  commentId: P:System.Diagnostics.Stopwatch.ElapsedTicks\n  id: ElapsedTicks\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: ElapsedTicks\n  nameWithType: Stopwatch.ElapsedTicks\n  fullName: Stopwatch.ElapsedTicks\n  type: Property\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Gets the total elapsed time measured by the current instance, in timer ticks.\n  remarks: \"This property represents the number of elapsed ticks in the underlying timer mechanism. A tick is the smallest unit of time that the <xref:System.Diagnostics.Stopwatch> timer can measure. Use the <xref:System.Diagnostics.Stopwatch.Frequency> field to convert the <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> value into a number of seconds.  \\n  \\n You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped. The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.  \\n  \\n By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals. Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.  \\n  \\n> [!NOTE]\\n>  <xref:System.Diagnostics.Stopwatch> ticks are different from <xref:System.DateTime.Ticks%2A?displayProperty=fullName>. Each tick in the <xref:System.DateTime.Ticks%2A?displayProperty=fullName> value represents one 100-nanosecond interval. Each tick in the <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> value represents the time interval equal to 1 second divided by the <xref:System.Diagnostics.Stopwatch.Frequency>.\"\n  example:\n  - \"The following example uses the <xref:System.Diagnostics.Stopwatch> class to measure the performance of four different implementations for parsing an integer from a string. This code example is part of a larger example provided for the <xref:System.Diagnostics.Stopwatch> class.  \\n  \\n [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]\\n [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]\\n [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]\"\n  syntax:\n    content: public long ElapsedTicks { get; }\n    return:\n      type: System.Int64\n      description: A read-only long integer representing the total number of timer ticks measured by the current instance.\n  overload: System.Diagnostics.Stopwatch.ElapsedTicks*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.Frequency\n  commentId: F:System.Diagnostics.Stopwatch.Frequency\n  id: Frequency\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: Frequency\n  nameWithType: Stopwatch.Frequency\n  fullName: Stopwatch.Frequency\n  type: Field\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Gets the frequency of the timer as the number of ticks per second. This field is read-only.\n  remarks: \"The timer frequency indicates the timer precision and resolution. For example, a timer frequency of 2 million ticks per second equals a timer resolution of 500 nanoseconds per tick. In other words, because one second equals 1 billion nanoseconds, a timer frequency of 2 million ticks per second is equivalent to 2 million ticks per 1 billion nanoseconds, which can be further simplified to 1 tick per 500 nanoseconds.  \\n  \\n The <xref:System.Diagnostics.Stopwatch.Frequency> value depends on the resolution of the underlying timing mechanism. If the installed hardware and operating system support a high-resolution performance counter, then the <xref:System.Diagnostics.Stopwatch.Frequency> value reflects the frequency of that counter. Otherwise, the <xref:System.Diagnostics.Stopwatch.Frequency> value is based on the system timer frequency.  \\n  \\n Because the <xref:System.Diagnostics.Stopwatch> frequency depends on the installed hardware and operating system, the <xref:System.Diagnostics.Stopwatch.Frequency> value remains constant while the system is running.\"\n  example:\n  - \"The following example displays the frequency and resolution of a <xref:System.Diagnostics.Stopwatch> timer. This code example is part of a larger example provided for the <xref:System.Diagnostics.Stopwatch> class.  \\n  \\n [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]\\n [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]\\n [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]\"\n  syntax:\n    content: public static readonly long Frequency;\n    return:\n      type: System.Int64\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.GetTimestamp\n  commentId: M:System.Diagnostics.Stopwatch.GetTimestamp\n  id: GetTimestamp\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: GetTimestamp()\n  nameWithType: Stopwatch.GetTimestamp()\n  fullName: Stopwatch.GetTimestamp()\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Gets the current number of ticks in the timer mechanism.\n  remarks: If the <xref:System.Diagnostics.Stopwatch> class uses a high-resolution performance counter, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current value of that counter. If the <xref:System.Diagnostics.Stopwatch> class uses the system timer, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current <xref:System.DateTime.Ticks%2A?displayProperty=fullName> property of the <xref:System.DateTime.Now%2A?displayProperty=fullName> instance.\n  example:\n  - \"The following example illustrates the use of the <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> method to update a performance counter.  \\n  \\n [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]\\n [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]\\n [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]\"\n  syntax:\n    content: public static long GetTimestamp ();\n    parameters: []\n    return:\n      type: System.Int64\n      description: A long integer representing the tick counter value of the underlying timer mechanism.\n  overload: System.Diagnostics.Stopwatch.GetTimestamp*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.IsHighResolution\n  commentId: F:System.Diagnostics.Stopwatch.IsHighResolution\n  id: IsHighResolution\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: IsHighResolution\n  nameWithType: Stopwatch.IsHighResolution\n  fullName: Stopwatch.IsHighResolution\n  type: Field\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Indicates whether the timer is based on a high-resolution performance counter. This field is read-only.\n  remarks: The timer used by the <xref:System.Diagnostics.Stopwatch> class depends on the system hardware and operating system. <xref:System.Diagnostics.Stopwatch.IsHighResolution> is `true` if the <xref:System.Diagnostics.Stopwatch> timer is based on a high-resolution performance counter. Otherwise, <xref:System.Diagnostics.Stopwatch.IsHighResolution> is `false`, which indicates that the <xref:System.Diagnostics.Stopwatch> timer is based on the system timer.\n  example:\n  - \"The following example displays the frequency and resolution of a <xref:System.Diagnostics.Stopwatch> timer. This code example is part of a larger example provided for the <xref:System.Diagnostics.Stopwatch> class.  \\n  \\n [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]\\n [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]\\n [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]\"\n  syntax:\n    content: public static readonly bool IsHighResolution;\n    return:\n      type: System.Boolean\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.IsRunning\n  commentId: P:System.Diagnostics.Stopwatch.IsRunning\n  id: IsRunning\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: IsRunning\n  nameWithType: Stopwatch.IsRunning\n  fullName: Stopwatch.IsRunning\n  type: Property\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Gets a value indicating whether the <xref href=\"System.Diagnostics.Stopwatch\"></xref> timer is running.\n  remarks: A <xref:System.Diagnostics.Stopwatch> instance begins running with a call to <xref:System.Diagnostics.Stopwatch.Start%2A> or <xref:System.Diagnostics.Stopwatch.StartNew%2A>. The instance stops running with a call to <xref:System.Diagnostics.Stopwatch.Stop%2A> or <xref:System.Diagnostics.Stopwatch.Reset%2A>.\n  syntax:\n    content: public bool IsRunning { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Diagnostics.Stopwatch\"></xref> instance is currently running and measuring elapsed time for an interval; otherwise, `false`.'\n  overload: System.Diagnostics.Stopwatch.IsRunning*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.Reset\n  commentId: M:System.Diagnostics.Stopwatch.Reset\n  id: Reset\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: Stopwatch.Reset()\n  fullName: Stopwatch.Reset()\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Stops time interval measurement and resets the elapsed time to zero.\n  remarks: A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset. Use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop the current interval measurement and retain the cumulative elapsed time value. Use <xref:System.Diagnostics.Stopwatch.Reset%2A> to stop any interval measurement in progress and clear the elapsed time value.\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Diagnostics.Stopwatch.Reset*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.Restart\n  commentId: M:System.Diagnostics.Stopwatch.Restart\n  id: Restart\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: Restart()\n  nameWithType: Stopwatch.Restart()\n  fullName: Stopwatch.Restart()\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.\n  remarks: A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset or restarted. Use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop the current interval measurement and retain the cumulative elapsed time value. Use <xref:System.Diagnostics.Stopwatch.Reset%2A> to stop any interval measurement in progress and clear the elapsed time value. Use <xref:System.Diagnostics.Stopwatch.Restart%2A> to stop current interval measurement and start a new interval measurement.\n  syntax:\n    content: public void Restart ();\n    parameters: []\n  overload: System.Diagnostics.Stopwatch.Restart*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.Start\n  commentId: M:System.Diagnostics.Stopwatch.Start\n  id: Start\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: Start()\n  nameWithType: Stopwatch.Start()\n  fullName: Stopwatch.Start()\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Starts, or resumes, measuring elapsed time for an interval.\n  remarks: \"In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.  \\n  \\n Once started, a <xref:System.Diagnostics.Stopwatch> timer measures the current interval, in elapsed timer ticks, until the instance is stopped or reset. Starting a <xref:System.Diagnostics.Stopwatch> that is already running does not change the timer state or reset the elapsed time properties.  \\n  \\n When a <xref:System.Diagnostics.Stopwatch> instance measures more than one interval, the <xref:System.Diagnostics.Stopwatch.Start%2A> method resumes measuring time from the current elapsed time value. A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method before calling <xref:System.Diagnostics.Stopwatch.Start%2A> to clear the cumulative elapsed time in a <xref:System.Diagnostics.Stopwatch> instance. Use the <xref:System.Diagnostics.Stopwatch.Restart%2A> method to <xref:System.Diagnostics.Stopwatch.Reset%2A> and <xref:System.Diagnostics.Stopwatch.Start%2A> the <xref:System.Diagnostics.Stopwatch> with a single command.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Diagnostics.Stopwatch.Start%2A> method to start a timer that measures the execution time of an application.  \\n  \\n [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]\\n [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]\"\n  syntax:\n    content: public void Start ();\n    parameters: []\n  overload: System.Diagnostics.Stopwatch.Start*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.StartNew\n  commentId: M:System.Diagnostics.Stopwatch.StartNew\n  id: StartNew\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: StartNew()\n  nameWithType: Stopwatch.StartNew()\n  fullName: Stopwatch.StartNew()\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Initializes a new <xref href=\"System.Diagnostics.Stopwatch\"></xref> instance, sets the elapsed time property to zero, and starts measuring elapsed time.\n  remarks: This method is equivalent to calling the <xref:System.Diagnostics.Stopwatch> constructor and then calling <xref:System.Diagnostics.Stopwatch.Start%2A> on the new instance.\n  example:\n  - \"The following example uses the <xref:System.Diagnostics.Stopwatch> class to measure the performance of four different implementations for parsing an integer from a string. This code example is part of a larger example provided for the <xref:System.Diagnostics.Stopwatch> class.  \\n  \\n [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]\\n [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]\\n [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]\"\n  syntax:\n    content: public static System.Diagnostics.Stopwatch StartNew ();\n    parameters: []\n    return:\n      type: System.Diagnostics.Stopwatch\n      description: A <xref href=\"System.Diagnostics.Stopwatch\"></xref> that has just begun measuring elapsed time.\n  overload: System.Diagnostics.Stopwatch.StartNew*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Stopwatch.Stop\n  commentId: M:System.Diagnostics.Stopwatch.Stop\n  id: Stop\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: Stopwatch.Stop()\n  fullName: Stopwatch.Stop()\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - System\n  - netstandard\n  namespace: System.Diagnostics\n  summary: Stops measuring elapsed time for an interval.\n  remarks: \"In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.  \\n  \\n The <xref:System.Diagnostics.Stopwatch.Stop%2A> method ends the current time interval measurement. Stopping a <xref:System.Diagnostics.Stopwatch> that is not running does not change the timer state or reset the elapsed time properties.  \\n  \\n When a <xref:System.Diagnostics.Stopwatch> instance measures more than one interval, the <xref:System.Diagnostics.Stopwatch.Stop%2A> method is equivalent to pausing the elapsed time measurement. A subsequent call to <xref:System.Diagnostics.Stopwatch.Start%2A> resumes measuring time from the current elapsed time value. Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in a <xref:System.Diagnostics.Stopwatch> instance.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Diagnostics.Stopwatch.Stop%2A> method to stop a timer that measures the execution time of an application.  \\n  \\n [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]\\n [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]\"\n  syntax:\n    content: public void Stop ();\n    parameters: []\n  overload: System.Diagnostics.Stopwatch.Stop*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Diagnostics.Stopwatch.#ctor\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Stopwatch()\n  nameWithType: Stopwatch.Stopwatch()\n  fullName: Stopwatch.Stopwatch()\n- uid: System.Diagnostics.Stopwatch.Elapsed\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Elapsed\n  nameWithType: Stopwatch.Elapsed\n  fullName: Stopwatch.Elapsed\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Diagnostics.Stopwatch.ElapsedMilliseconds\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: ElapsedMilliseconds\n  nameWithType: Stopwatch.ElapsedMilliseconds\n  fullName: Stopwatch.ElapsedMilliseconds\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Diagnostics.Stopwatch.ElapsedTicks\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: ElapsedTicks\n  nameWithType: Stopwatch.ElapsedTicks\n  fullName: Stopwatch.ElapsedTicks\n- uid: System.Diagnostics.Stopwatch.Frequency\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Frequency\n  nameWithType: Stopwatch.Frequency\n  fullName: Stopwatch.Frequency\n- uid: System.Diagnostics.Stopwatch.GetTimestamp\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: GetTimestamp()\n  nameWithType: Stopwatch.GetTimestamp()\n  fullName: Stopwatch.GetTimestamp()\n- uid: System.Diagnostics.Stopwatch.IsHighResolution\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: IsHighResolution\n  nameWithType: Stopwatch.IsHighResolution\n  fullName: Stopwatch.IsHighResolution\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Stopwatch.IsRunning\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: IsRunning\n  nameWithType: Stopwatch.IsRunning\n  fullName: Stopwatch.IsRunning\n- uid: System.Diagnostics.Stopwatch.Reset\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Reset()\n  nameWithType: Stopwatch.Reset()\n  fullName: Stopwatch.Reset()\n- uid: System.Diagnostics.Stopwatch.Restart\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Restart()\n  nameWithType: Stopwatch.Restart()\n  fullName: Stopwatch.Restart()\n- uid: System.Diagnostics.Stopwatch.Start\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Start()\n  nameWithType: Stopwatch.Start()\n  fullName: Stopwatch.Start()\n- uid: System.Diagnostics.Stopwatch.StartNew\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: StartNew()\n  nameWithType: Stopwatch.StartNew()\n  fullName: Stopwatch.StartNew()\n- uid: System.Diagnostics.Stopwatch\n  parent: System.Diagnostics\n  isExternal: false\n  name: Stopwatch\n  nameWithType: Stopwatch\n  fullName: System.Diagnostics.Stopwatch\n- uid: System.Diagnostics.Stopwatch.Stop\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Stop()\n  nameWithType: Stopwatch.Stop()\n  fullName: Stopwatch.Stop()\n- uid: System.Diagnostics.Stopwatch.#ctor*\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Stopwatch\n  nameWithType: Stopwatch.Stopwatch\n  fullName: Stopwatch.Stopwatch\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n- uid: System.Diagnostics.Stopwatch.Elapsed*\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Elapsed\n  nameWithType: Stopwatch.Elapsed\n  fullName: Stopwatch.Elapsed\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n- uid: System.Diagnostics.Stopwatch.ElapsedMilliseconds*\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: ElapsedMilliseconds\n  nameWithType: Stopwatch.ElapsedMilliseconds\n  fullName: Stopwatch.ElapsedMilliseconds\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n- uid: System.Diagnostics.Stopwatch.ElapsedTicks*\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: ElapsedTicks\n  nameWithType: Stopwatch.ElapsedTicks\n  fullName: Stopwatch.ElapsedTicks\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n- uid: System.Diagnostics.Stopwatch.GetTimestamp*\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: GetTimestamp\n  nameWithType: Stopwatch.GetTimestamp\n  fullName: Stopwatch.GetTimestamp\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n- uid: System.Diagnostics.Stopwatch.IsRunning*\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: IsRunning\n  nameWithType: Stopwatch.IsRunning\n  fullName: Stopwatch.IsRunning\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n- uid: System.Diagnostics.Stopwatch.Reset*\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Reset\n  nameWithType: Stopwatch.Reset\n  fullName: Stopwatch.Reset\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n- uid: System.Diagnostics.Stopwatch.Restart*\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Restart\n  nameWithType: Stopwatch.Restart\n  fullName: Stopwatch.Restart\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n- uid: System.Diagnostics.Stopwatch.Start*\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Start\n  nameWithType: Stopwatch.Start\n  fullName: Stopwatch.Start\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n- uid: System.Diagnostics.Stopwatch.StartNew*\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: StartNew\n  nameWithType: Stopwatch.StartNew\n  fullName: Stopwatch.StartNew\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n- uid: System.Diagnostics.Stopwatch.Stop*\n  parent: System.Diagnostics.Stopwatch\n  isExternal: false\n  name: Stop\n  nameWithType: Stopwatch.Stop\n  fullName: Stopwatch.Stop\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Stopwatch.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}