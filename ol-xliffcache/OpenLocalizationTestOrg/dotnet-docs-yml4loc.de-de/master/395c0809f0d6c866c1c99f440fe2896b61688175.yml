### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.SecurityPermission
  commentId: T:System.Security.Permissions.SecurityPermission
  id: SecurityPermission
  children:
  - System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)
  - System.Security.Permissions.SecurityPermission.Copy
  - System.Security.Permissions.SecurityPermission.Flags
  - System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.SecurityPermission.IsUnrestricted
  - System.Security.Permissions.SecurityPermission.ToXml
  - System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: SecurityPermission
  nameWithType: SecurityPermission
  fullName: System.Security.Permissions.SecurityPermission
  type: Class
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security.Permissions
  summary: Describes a set of security permissions applied to code. This class cannot be inherited.
  remarks: This permission uses the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration. The values for this enumeration can be found in its documentation.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class SecurityPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.System#Security#IPermission#Demand
  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert
  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand
  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny
  - System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly
  - System.Security.CodeAccessPermission.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)
  commentId: M:System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: SecurityPermission(PermissionState)
  nameWithType: SecurityPermission.SecurityPermission(PermissionState)
  fullName: SecurityPermission.SecurityPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security.Permissions
  summary: Initializes a new instance of the <xref href="System.Security.Permissions.SecurityPermission"></xref> class with either restricted or unrestricted permission as specified.
  remarks: Creates either fully restricted (`None`) or `Unrestricted` access to all security permissions.
  syntax:
    content: public SecurityPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: One of the <xref href="System.Security.Permissions.PermissionState"></xref> values.
  overload: System.Security.Permissions.SecurityPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>state</code> parameter is not a valid value of <xref href="System.Security.Permissions.PermissionState"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)
  commentId: M:System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)
  id: '#ctor(System.Security.Permissions.SecurityPermissionFlag)'
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: SecurityPermission(SecurityPermissionFlag)
  nameWithType: SecurityPermission.SecurityPermission(SecurityPermissionFlag)
  fullName: SecurityPermission.SecurityPermission(SecurityPermissionFlag)
  type: Constructor
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security.Permissions
  summary: Initializes a new instance of the <xref href="System.Security.Permissions.SecurityPermission"></xref> class with the specified initial set state of the flags.
  remarks: ''
  example:
  - "The following code example shows the use of the <xref:System.Security.Permissions.SecurityPermission.%23ctor%2A> constructor to create instances of the <xref:System.Security.Permissions.SecurityPermission> class that are used to demand security permissions.  For the complete code example, see the <xref:System.Security.Permissions.SecurityPermissionAttribute.%23ctor%28System.Security.Permissions.SecurityAction%29> constructor.  \n  \n [!code-cpp[System.Security.Permissions.SecurityPermissionAttribute#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.SecurityPermissionAttribute/CPP/securitypermissionattribute.cpp#18)]\n [!code-csharp[System.Security.Permissions.SecurityPermissionAttribute#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.SecurityPermissionAttribute/CS/securitypermissionattribute.cs#18)]\n [!code-vb[System.Security.Permissions.SecurityPermissionAttribute#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.SecurityPermissionAttribute/VB/securitypermissionattribute.vb#18)]"
  syntax:
    content: public SecurityPermission (System.Security.Permissions.SecurityPermissionFlag flag);
    parameters:
    - id: flag
      type: System.Security.Permissions.SecurityPermissionFlag
      description: The initial state of the permission, represented by a bitwise OR combination of any permission bits defined by <xref href="System.Security.Permissions.SecurityPermissionFlag"></xref>.
  overload: System.Security.Permissions.SecurityPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>flag</code> parameter is not a valid value of <xref href="System.Security.Permissions.SecurityPermissionFlag"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Permissions.SecurityPermission.Copy
  commentId: M:System.Security.Permissions.SecurityPermission.Copy
  id: Copy
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: SecurityPermission.Copy()
  fullName: SecurityPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security.Permissions
  summary: Creates and returns an identical copy of the current permission.
  remarks: A copy of a permission represents the same access to resources as the original permission.
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: A copy of the current permission.
  overload: System.Security.Permissions.SecurityPermission.Copy*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Permissions.SecurityPermission.Flags
  commentId: P:System.Security.Permissions.SecurityPermission.Flags
  id: Flags
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: Flags
  nameWithType: SecurityPermission.Flags
  fullName: SecurityPermission.Flags
  type: Property
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security.Permissions
  summary: Gets or sets the security permission flags.
  remarks: Individual permission bits can be determined by performing an AND operation against this value and checking for nonzero.
  syntax:
    content: public System.Security.Permissions.SecurityPermissionFlag Flags { get; set; }
    return:
      type: System.Security.Permissions.SecurityPermissionFlag
      description: The state of the current permission, represented by a bitwise OR combination of any permission bits defined by <xref href="System.Security.Permissions.SecurityPermissionFlag"></xref>.
  overload: System.Security.Permissions.SecurityPermission.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An attempt is made to set this property to an invalid value. See <xref href="System.Security.Permissions.SecurityPermissionFlag"></xref> for the valid values.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)
  commentId: M:System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: SecurityPermission.FromXml(SecurityElement)
  fullName: SecurityPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security.Permissions
  summary: Reconstructs a permission with a specified state from an XML encoding.
  syntax:
    content: public override void FromXml (System.Security.SecurityElement esd);
    parameters:
    - id: esd
      type: System.Security.SecurityElement
      description: The XML encoding to use to reconstruct the permission.
  overload: System.Security.Permissions.SecurityPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>esd</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>esd</code> parameter is not a valid permission element.  \n  \n -or-  \n  \n The <code>esd</code> parameter's version number is not supported."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)
  commentId: M:System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: SecurityPermission.Intersect(IPermission)
  fullName: SecurityPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security.Permissions
  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.
  remarks: The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will pass the intersection.
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: A permission to intersect with the current permission. It must be of the same type as the current permission.
    return:
      type: System.Security.IPermission
      description: A new permission object that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.
  overload: System.Security.Permissions.SecurityPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>target</code> parameter is not `null` and is not of the same type as the current permission.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)
  commentId: M:System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: SecurityPermission.IsSubsetOf(IPermission)
  fullName: SecurityPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security.Permissions
  summary: Determines whether the current permission is a subset of the specified permission.
  remarks: The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\example.txt is a subset of a permission that represents access to C:\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.
    return:
      type: System.Boolean
      description: '`true` if the current permission is a subset of the specified permission; otherwise, `false`.'
  overload: System.Security.Permissions.SecurityPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>target</code> parameter is not `null` and is not of the same type as the current permission.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted
  commentId: M:System.Security.Permissions.SecurityPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: SecurityPermission.IsUnrestricted()
  fullName: SecurityPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security.Permissions
  summary: Returns a value indicating whether the current permission is unrestricted.
  remarks: An unrestricted permission represents access to any and all resources protected by the permission.
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the current permission is unrestricted; otherwise, `false`.'
  overload: System.Security.Permissions.SecurityPermission.IsUnrestricted*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Permissions.SecurityPermission.ToXml
  commentId: M:System.Security.Permissions.SecurityPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: SecurityPermission.ToXml()
  fullName: SecurityPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security.Permissions
  summary: Creates an XML encoding of the permission and its current state.
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: An XML encoding of the permission, including any state information.
  overload: System.Security.Permissions.SecurityPermission.ToXml*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)
  commentId: M:System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: SecurityPermission.Union(IPermission)
  fullName: SecurityPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security.Permissions
  summary: Creates a permission that is the union of the current permission and the specified permission.
  remarks: The result of a call to <xref:System.Security.Permissions.SecurityPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: A permission to combine with the current permission. It must be of the same type as the current permission.
    return:
      type: System.Security.IPermission
      description: A new permission that represents the union of the current permission and the specified permission.
  overload: System.Security.Permissions.SecurityPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>target</code> parameter is not `null` and is not of the same type as the current permission.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Security.CodeAccessPermission
  parent: System.Security
  isExternal: false
  name: CodeAccessPermission
  nameWithType: CodeAccessPermission
  fullName: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: SecurityPermission(PermissionState)
  nameWithType: SecurityPermission.SecurityPermission(PermissionState)
  fullName: SecurityPermission.SecurityPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: SecurityPermission(SecurityPermissionFlag)
  nameWithType: SecurityPermission.SecurityPermission(SecurityPermissionFlag)
  fullName: SecurityPermission.SecurityPermission(SecurityPermissionFlag)
- uid: System.Security.Permissions.SecurityPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityPermissionFlag
  nameWithType: SecurityPermissionFlag
  fullName: System.Security.Permissions.SecurityPermissionFlag
- uid: System.Security.Permissions.SecurityPermission.Copy
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Copy()
  nameWithType: SecurityPermission.Copy()
  fullName: SecurityPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.SecurityPermission.Flags
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Flags
  nameWithType: SecurityPermission.Flags
  fullName: SecurityPermission.Flags
- uid: System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: SecurityPermission.FromXml(SecurityElement)
  fullName: SecurityPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: SecurityPermission.Intersect(IPermission)
  fullName: SecurityPermission.Intersect(IPermission)
- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: SecurityPermission.IsSubsetOf(IPermission)
  fullName: SecurityPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: SecurityPermission.IsUnrestricted()
  fullName: SecurityPermission.IsUnrestricted()
- uid: System.Security.Permissions.SecurityPermission.ToXml
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: ToXml()
  nameWithType: SecurityPermission.ToXml()
  fullName: SecurityPermission.ToXml()
- uid: System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: SecurityPermission.Union(IPermission)
  fullName: SecurityPermission.Union(IPermission)
- uid: System.Security.Permissions.SecurityPermission.#ctor*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: SecurityPermission
  nameWithType: SecurityPermission.SecurityPermission
  fullName: SecurityPermission.SecurityPermission
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
- uid: System.Security.Permissions.SecurityPermission.Copy*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Copy
  nameWithType: SecurityPermission.Copy
  fullName: SecurityPermission.Copy
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
- uid: System.Security.Permissions.SecurityPermission.Flags*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Flags
  nameWithType: SecurityPermission.Flags
  fullName: SecurityPermission.Flags
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
- uid: System.Security.Permissions.SecurityPermission.FromXml*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: FromXml
  nameWithType: SecurityPermission.FromXml
  fullName: SecurityPermission.FromXml
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
- uid: System.Security.Permissions.SecurityPermission.Intersect*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Intersect
  nameWithType: SecurityPermission.Intersect
  fullName: SecurityPermission.Intersect
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: SecurityPermission.IsSubsetOf
  fullName: SecurityPermission.IsSubsetOf
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: SecurityPermission.IsUnrestricted
  fullName: SecurityPermission.IsUnrestricted
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
- uid: System.Security.Permissions.SecurityPermission.ToXml*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: ToXml
  nameWithType: SecurityPermission.ToXml
  fullName: SecurityPermission.ToXml
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
- uid: System.Security.Permissions.SecurityPermission.Union*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Union
  nameWithType: SecurityPermission.Union
  fullName: SecurityPermission.Union
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermission.xml
- uid: System.Security.CodeAccessPermission.Equals(System.Object)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: CodeAccessPermission.Equals(Object)
  fullName: CodeAccessPermission.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Security.CodeAccessPermission.GetHashCode
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: CodeAccessPermission.GetHashCode()
  fullName: CodeAccessPermission.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Security.CodeAccessPermission.ToString
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToString()
  nameWithType: CodeAccessPermission.ToString()
  fullName: CodeAccessPermission.ToString()
- uid: System.Security.CodeAccessPermission.Assert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Assert()
  nameWithType: CodeAccessPermission.Assert()
  fullName: CodeAccessPermission.Assert()
- uid: System.Security.CodeAccessPermission.Demand
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Demand()
  nameWithType: CodeAccessPermission.Demand()
  fullName: CodeAccessPermission.Demand()
- uid: System.Security.CodeAccessPermission.Deny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Deny()
  nameWithType: CodeAccessPermission.Deny()
  fullName: CodeAccessPermission.Deny()
- uid: System.Security.CodeAccessPermission.PermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: PermitOnly()
  nameWithType: CodeAccessPermission.PermitOnly()
  fullName: CodeAccessPermission.PermitOnly()
- uid: System.Security.CodeAccessPermission.RevertAll
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAll()
  nameWithType: CodeAccessPermission.RevertAll()
  fullName: CodeAccessPermission.RevertAll()
- uid: System.Security.CodeAccessPermission.RevertAssert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAssert()
  nameWithType: CodeAccessPermission.RevertAssert()
  fullName: CodeAccessPermission.RevertAssert()
- uid: System.Security.CodeAccessPermission.RevertDeny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertDeny()
  nameWithType: CodeAccessPermission.RevertDeny()
  fullName: CodeAccessPermission.RevertDeny()
- uid: System.Security.CodeAccessPermission.RevertPermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertPermitOnly()
  nameWithType: CodeAccessPermission.RevertPermitOnly()
  fullName: CodeAccessPermission.RevertPermitOnly()
- uid: System.Security.CodeAccessPermission.System#Security#IPermission#Demand
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IPermission.Demand()
  nameWithType: CodeAccessPermission.IPermission.Demand()
  fullName: CodeAccessPermission.IPermission.Demand()
- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IStackWalk.Assert()
  nameWithType: CodeAccessPermission.IStackWalk.Assert()
  fullName: CodeAccessPermission.IStackWalk.Assert()
- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IStackWalk.Demand()
  nameWithType: CodeAccessPermission.IStackWalk.Demand()
  fullName: CodeAccessPermission.IStackWalk.Demand()
- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IStackWalk.Deny()
  nameWithType: CodeAccessPermission.IStackWalk.Deny()
  fullName: CodeAccessPermission.IStackWalk.Deny()
- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IStackWalk.PermitOnly()
  nameWithType: CodeAccessPermission.IStackWalk.PermitOnly()
  fullName: CodeAccessPermission.IStackWalk.PermitOnly()
- uid: System.Security.Permissions.IUnrestrictedPermission
  parent: System.Security.Permissions
  isExternal: false
  name: IUnrestrictedPermission
  nameWithType: IUnrestrictedPermission
  fullName: System.Security.Permissions.IUnrestrictedPermission
