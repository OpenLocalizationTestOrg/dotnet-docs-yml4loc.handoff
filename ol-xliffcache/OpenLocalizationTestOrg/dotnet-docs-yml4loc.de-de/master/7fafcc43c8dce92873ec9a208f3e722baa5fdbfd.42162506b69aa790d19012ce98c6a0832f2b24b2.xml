{"nodes":[{"content":"Provides an Internet Protocol (IP) address.","nodes":[{"pos":[0,43],"content":"Provides an Internet Protocol (IP) address.","nodes":[{"content":"Provides an Internet Protocol (IP) address.","pos":[0,43]}]}],"pos":[1786,1830],"yaml":true},{"content":"The <xref:System.Net.IPAddress> class contains the address of a computer on an IP network.","nodes":[{"pos":[0,90],"content":"The <xref:System.Net.IPAddress> class contains the address of a computer on an IP network.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress&gt;</ph> class contains the address of a computer on an IP network.","pos":[0,90],"source":"The <xref:System.Net.IPAddress> class contains the address of a computer on an IP network."}]}],"pos":[1841,1932],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.IPAddress\"></xref> class with the address specified as a <xref href=\"System.Byte\"></xref> array.","nodes":[{"pos":[0,153],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> class with the address specified as a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array.","source":"Initializes a new instance of the <xref href=\"System.Net.IPAddress\"></xref> class with the address specified as a <xref href=\"System.Byte\"></xref> array."}],"pos":[4008,4162],"yaml":true},{"content":"The <xref:System.Net.IPAddress> is created with the <xref:System.Net.IPAddress.Address%2A> property set to `address`.  \n  \n If the length of `address` is 4, <xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29> constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.  \n  \n The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress&gt;</ph> is created with the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property set to <ph id=\"ph3\">`address`</ph>.","source":"The <xref:System.Net.IPAddress> is created with the <xref:System.Net.IPAddress.Address%2A> property set to `address`."},{"pos":[124,304],"content":"If the length of <ph id=\"ph1\">`address`</ph> is 4, <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29&gt;</ph> constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.","source":"If the length of `address` is 4, <xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29> constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed."},{"pos":[311,436],"content":"The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array is assumed to be in network byte order with the most significant byte first in index position 0.","pos":[0,125],"source":"The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0."}]}],"pos":[4173,4616],"yaml":true,"extradata":"MT"},{"content":"The byte array value of the IP address.","nodes":[{"pos":[0,39],"content":"The byte array value of the IP address.","nodes":[{"content":"The byte array value of the IP address.","pos":[0,39]}]}],"pos":[4753,4793],"yaml":true},{"content":"<code>address</code> is `null`.","nodes":[{"pos":[0,31],"content":"<code>address</code> is `null`.","nodes":[{"content":"is <ph id=\"ph1\">`null`</ph>.","pos":[21,31],"source":" is `null`."}]}],"pos":[4949,4981],"yaml":true},{"content":"<code>address</code> contains a bad IP address.","nodes":[{"pos":[0,47],"content":"<code>address</code> contains a bad IP address.","nodes":[{"content":"contains a bad IP address.","pos":[21,47]}]}],"pos":[5075,5123],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.IPAddress\"></xref> class with the address specified as an <xref href=\"System.Int64\"></xref>.","nodes":[{"pos":[0,149],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> class with the address specified as an <ph id=\"ph2\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Net.IPAddress\"></xref> class with the address specified as an <xref href=\"System.Int64\"></xref>."}],"pos":[6376,6526],"yaml":true},{"content":"The <xref:System.Net.IPAddress> instance is created with the <xref:System.Net.IPAddress.Address%2A> property set to `newAddress`.  \n  \n The <xref:System.Int64> value is assumed to be in network byte order.","nodes":[{"pos":[0,129],"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress&gt;</ph> instance is created with the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property set to <ph id=\"ph3\">`newAddress`</ph>.","source":"The <xref:System.Net.IPAddress> instance is created with the <xref:System.Net.IPAddress.Address%2A> property set to `newAddress`."},{"pos":[136,205],"content":"The <xref:System.Int64> value is assumed to be in network byte order.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph> value is assumed to be in network byte order.","pos":[0,69],"source":"The <xref:System.Int64> value is assumed to be in network byte order."}]}],"pos":[6537,6747],"yaml":true,"extradata":"MT"},{"content":"The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address \"143.24.20.36\".","nodes":[{"pos":[0,128],"content":"The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address \"143.24.20.36\".","nodes":[{"content":"The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address \"143.24.20.36\".","pos":[0,128],"nodes":[{"content":"The long value of the IP address.","pos":[0,33]},{"content":"For example, the value 0x2414188f in big-endian format would be the IP address \"143.24.20.36\".","pos":[34,128]}]}]}],"pos":[6887,7016],"yaml":true},{"content":"<code>newAddress</code> < 0 or  \n  \n <code>newAddress</code> > 0x00000000FFFFFFFF","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">&lt;code&gt;newAddress&lt;/code&gt;</ph> &lt; 0 or  <ph id=\"ph2\">&lt;code&gt;newAddress&lt;/code&gt;</ph><ph id=\"ph3\"> &gt;</ph> 0x00000000FFFFFFFF","source":"<code>newAddress</code> < 0 or  \n  \n <code>newAddress</code> > 0x00000000FFFFFFFF"}],"pos":[7184,7270],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.IPAddress\"></xref> class with the address specified as a <xref href=\"System.Byte\"></xref> array and the specified scope identifier.","nodes":[{"pos":[0,188],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> class with the address specified as a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array and the specified scope identifier.","source":"Initializes a new instance of the <xref href=\"System.Net.IPAddress\"></xref> class with the address specified as a <xref href=\"System.Byte\"></xref> array and the specified scope identifier."}],"pos":[8589,8778],"yaml":true},{"content":"This constructor instantiates an IPv6 address. The `scopeid` identifies a network interface in the case of a link-local address. The scope is valid only for link-local and site-local addresses.  \n  \n The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0.","nodes":[{"pos":[0,193],"content":"This constructor instantiates an IPv6 address. The `scopeid` identifies a network interface in the case of a link-local address. The scope is valid only for link-local and site-local addresses.","nodes":[{"content":"This constructor instantiates an IPv6 address.","pos":[0,46]},{"content":"The <ph id=\"ph1\">`scopeid`</ph> identifies a network interface in the case of a link-local address.","pos":[47,128],"source":" The `scopeid` identifies a network interface in the case of a link-local address."},{"content":"The scope is valid only for link-local and site-local addresses.","pos":[129,193]}]},{"pos":[200,325],"content":"The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> array is assumed to be in network byte order with the most significant byte first in index position 0.","pos":[0,125],"source":"The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0."}]}],"pos":[8789,9119],"yaml":true,"extradata":"MT"},{"content":"The byte array value of the IP address.","nodes":[{"pos":[0,39],"content":"The byte array value of the IP address.","nodes":[{"content":"The byte array value of the IP address.","pos":[0,39]}]}],"pos":[9270,9310],"yaml":true},{"content":"The long value of the scope identifier.","nodes":[{"pos":[0,39],"content":"The long value of the scope identifier.","nodes":[{"content":"The long value of the scope identifier.","pos":[0,39]}]}],"pos":[9372,9412],"yaml":true},{"content":"<code>address</code> is `null`.","nodes":[{"pos":[0,31],"content":"<code>address</code> is `null`.","nodes":[{"content":"is <ph id=\"ph1\">`null`</ph>.","pos":[21,31],"source":" is `null`."}]}],"pos":[9568,9600],"yaml":true},{"content":"<code>address</code> contains a bad IP address.","nodes":[{"pos":[0,47],"content":"<code>address</code> contains a bad IP address.","nodes":[{"content":"contains a bad IP address.","pos":[21,47]}]}],"pos":[9694,9742],"yaml":true},{"content":"<code>scopeid</code> < 0 or  \n  \n <code>scopeid</code> > 0x00000000FFFFFFFF","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;scopeid&lt;/code&gt;</ph> &lt; 0 or  <ph id=\"ph2\">&lt;code&gt;scopeid&lt;/code&gt;</ph><ph id=\"ph3\"> &gt;</ph> 0x00000000FFFFFFFF","source":"<code>scopeid</code> < 0 or  \n  \n <code>scopeid</code> > 0x00000000FFFFFFFF"}],"pos":[9856,9936],"yaml":true},{"content":"An Internet Protocol (IP) address.","nodes":[{"pos":[0,34],"content":"An Internet Protocol (IP) address.","nodes":[{"content":"An Internet Protocol (IP) address.","pos":[0,34]}]}],"pos":[11121,11156],"yaml":true},{"content":"This property is obsolete. Use <xref:System.Net.IPAddress.GetAddressBytes%2A>.  \n  \n To convert <xref:System.Net.IPAddress.Address%2A> to dotted-quad notation, use the <xref:System.Net.IPAddress.ToString%2A> method.","nodes":[{"pos":[0,78],"content":"This property is obsolete. Use <xref:System.Net.IPAddress.GetAddressBytes%2A>.","nodes":[{"content":"This property is obsolete. Use <xref:System.Net.IPAddress.GetAddressBytes%2A>.","pos":[0,78],"nodes":[{"content":"This property is obsolete.","pos":[0,26]},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.GetAddressBytes%2A&gt;</ph>.","pos":[27,78],"source":" Use <xref:System.Net.IPAddress.GetAddressBytes%2A>."}]}]},{"pos":[85,215],"content":"To convert <xref:System.Net.IPAddress.Address%2A> to dotted-quad notation, use the <xref:System.Net.IPAddress.ToString%2A> method.","nodes":[{"content":"To convert <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> to dotted-quad notation, use the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> method.","pos":[0,130],"source":"To convert <xref:System.Net.IPAddress.Address%2A> to dotted-quad notation, use the <xref:System.Net.IPAddress.ToString%2A> method."}]}],"pos":[11167,11387],"yaml":true,"extradata":"MT"},{"content":"The long value of the IP address.","nodes":[{"pos":[0,33],"content":"The long value of the IP address.","nodes":[{"content":"The long value of the IP address.","pos":[0,33]}]}],"pos":[12396,12430],"yaml":true},{"content":"The address family is <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref>.","nodes":[{"pos":[0,91],"content":"The address family is <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"&gt;&lt;/xref&gt;</ph>.","source":"The address family is <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref>."}],"pos":[12600,12692],"yaml":true},{"content":"Gets the address family of the IP address.","nodes":[{"pos":[0,42],"content":"Gets the address family of the IP address.","nodes":[{"content":"Gets the address family of the IP address.","pos":[0,42]}]}],"pos":[13778,13821],"yaml":true},{"content":"Returns <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> for IPv4 or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> for IPv6.","nodes":[{"pos":[0,165],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"&gt;&lt;/xref&gt;</ph> for IPv4 or <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"&gt;&lt;/xref&gt;</ph> for IPv6.","source":"Returns <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> for IPv4 or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> for IPv6."}],"pos":[14470,14636],"yaml":true},{"content":"Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.","nodes":[{"pos":[0,137],"content":"Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.","nodes":[{"content":"Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.","pos":[0,137],"nodes":[{"content":"Provides an IP address that indicates that the server must listen for client activity on all network interfaces.","pos":[0,112]},{"content":"This field is read-only.","pos":[113,137]}]}]}],"pos":[15859,15997],"yaml":true},{"content":"The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.Any> field to indicate that a <xref:System.Net.Sockets.Socket> instance must listen for client activity on all network interfaces.  \n  \n The <xref:System.Net.IPAddress.Any> field is equivalent to 0.0.0.0 in dotted-quad notation.","nodes":[{"pos":[0,243],"content":"The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.Any> field to indicate that a <xref:System.Net.Sockets.Socket> instance must listen for client activity on all network interfaces.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.Any&gt;</ph> field to indicate that a <ph id=\"ph3\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> instance must listen for client activity on all network interfaces.","pos":[0,243],"source":"The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.Any> field to indicate that a <xref:System.Net.Sockets.Socket> instance must listen for client activity on all network interfaces."}]},{"pos":[250,341],"content":"The <xref:System.Net.IPAddress.Any> field is equivalent to 0.0.0.0 in dotted-quad notation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.Any&gt;</ph> field is equivalent to 0.0.0.0 in dotted-quad notation.","pos":[0,91],"source":"The <xref:System.Net.IPAddress.Any> field is equivalent to 0.0.0.0 in dotted-quad notation."}]}],"pos":[16008,16354],"yaml":true,"extradata":"MT"},{"content":"Provides the IP broadcast address. This field is read-only.","nodes":[{"pos":[0,59],"content":"Provides the IP broadcast address. This field is read-only.","nodes":[{"content":"Provides the IP broadcast address. This field is read-only.","pos":[0,59],"nodes":[{"content":"Provides the IP broadcast address.","pos":[0,34]},{"content":"This field is read-only.","pos":[35,59]}]}]}],"pos":[17704,17764],"yaml":true},{"content":"The <xref:System.Net.IPAddress.Broadcast> field is equivalent to 255.255.255.255 in dotted-quad notation.","nodes":[{"pos":[0,105],"content":"The <xref:System.Net.IPAddress.Broadcast> field is equivalent to 255.255.255.255 in dotted-quad notation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> field is equivalent to 255.255.255.255 in dotted-quad notation.","pos":[0,105],"source":"The <xref:System.Net.IPAddress.Broadcast> field is equivalent to 255.255.255.255 in dotted-quad notation."}]}],"pos":[17775,17881],"yaml":true,"extradata":"MT"},{"content":"Compares two IP addresses.","nodes":[{"pos":[0,26],"content":"Compares two IP addresses.","nodes":[{"content":"Compares two IP addresses.","pos":[0,26]}]}],"pos":[19893,19920],"yaml":true},{"content":"The <xref:System.Net.IPAddress.Equals%2A> method compares the current <xref:System.Net.IPAddress> instance with the `comparand` parameter and returns `true` if the two instances contain the same IP address.","nodes":[{"pos":[0,206],"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.Equals%2A&gt;</ph> method compares the current <ph id=\"ph2\">&lt;xref:System.Net.IPAddress&gt;</ph> instance with the <ph id=\"ph3\">`comparand`</ph> parameter and returns <ph id=\"ph4\">`true`</ph> if the two instances contain the same IP address.","source":"The <xref:System.Net.IPAddress.Equals%2A> method compares the current <xref:System.Net.IPAddress> instance with the `comparand` parameter and returns `true` if the two instances contain the same IP address."}],"pos":[19931,20138],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Net.IPAddress\"></xref> instance to compare to the current instance.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> instance to compare to the current instance.","source":"An <xref href=\"System.Net.IPAddress\"></xref> instance to compare to the current instance."}],"pos":[20290,20380],"yaml":true},{"content":"`true` if the two addresses are equal; otherwise, `false`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`true`</ph> if the two addresses are equal; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two addresses are equal; otherwise, `false`."}],"pos":[20438,20499],"yaml":true},{"content":"Provides a copy of the <xref href=\"System.Net.IPAddress\"></xref> as an array of bytes.","nodes":[{"pos":[0,86],"content":"Provides a copy of the <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> as an array of bytes.","source":"Provides a copy of the <xref href=\"System.Net.IPAddress\"></xref> as an array of bytes."}],"pos":[21794,21881],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array.","nodes":[{"pos":[0,41],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array.","source":"A <xref href=\"System.Byte\"></xref> array."}],"pos":[22512,22554],"yaml":true},{"content":"Returns a hash value for an IP address.","nodes":[{"pos":[0,39],"content":"Returns a hash value for an IP address.","nodes":[{"content":"Returns a hash value for an IP address.","pos":[0,39]}]}],"pos":[23834,23874],"yaml":true},{"content":"The <xref:System.Net.IPAddress.GetHashCode%2A> method returns a hash code of the IP address. This value can be used as a key in hash tables.","nodes":[{"pos":[0,140],"content":"The <xref:System.Net.IPAddress.GetHashCode%2A> method returns a hash code of the IP address. This value can be used as a key in hash tables.","nodes":[{"content":"The <xref:System.Net.IPAddress.GetHashCode%2A> method returns a hash code of the IP address. This value can be used as a key in hash tables.","pos":[0,140],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.GetHashCode%2A&gt;</ph> method returns a hash code of the IP address.","pos":[0,92],"source":"The <xref:System.Net.IPAddress.GetHashCode%2A> method returns a hash code of the IP address."},{"content":"This value can be used as a key in hash tables.","pos":[93,140]}]}]}],"pos":[23885,24026],"yaml":true,"extradata":"MT"},{"content":"An integer hash value.","nodes":[{"pos":[0,22],"content":"An integer hash value.","nodes":[{"content":"An integer hash value.","pos":[0,22]}]}],"pos":[24160,24183],"yaml":true},{"content":"Converts a short value from host byte order to network byte order.","nodes":[{"pos":[0,66],"content":"Converts a short value from host byte order to network byte order.","nodes":[{"content":"Converts a short value from host byte order to network byte order.","pos":[0,66]}]}],"pos":[25558,25625],"yaml":true},{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \n  \n The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.","nodes":[{"pos":[0,441],"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","nodes":[{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","pos":[0,441],"nodes":[{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values.","pos":[0,101]},{"content":"Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).","pos":[102,260]},{"content":"To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","pos":[261,441]}]}]},{"pos":[448,653],"content":"The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.","pos":[0,205],"source":"The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network."}]}],"pos":[25636,26294],"yaml":true,"extradata":"MT"},{"content":"The number to convert, expressed in host byte order.","nodes":[{"pos":[0,52],"content":"The number to convert, expressed in host byte order.","nodes":[{"content":"The number to convert, expressed in host byte order.","pos":[0,52]}]}],"pos":[26445,26498],"yaml":true},{"content":"A short value, expressed in network byte order.","nodes":[{"pos":[0,47],"content":"A short value, expressed in network byte order.","nodes":[{"content":"A short value, expressed in network byte order.","pos":[0,47]}]}],"pos":[26554,26602],"yaml":true},{"content":"Converts an integer value from host byte order to network byte order.","nodes":[{"pos":[0,69],"content":"Converts an integer value from host byte order to network byte order.","nodes":[{"content":"Converts an integer value from host byte order to network byte order.","pos":[0,69]}]}],"pos":[27984,28054],"yaml":true},{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \n  \n The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.","nodes":[{"pos":[0,441],"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","nodes":[{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","pos":[0,441],"nodes":[{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values.","pos":[0,101]},{"content":"Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).","pos":[102,260]},{"content":"To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","pos":[261,441]}]}]},{"pos":[448,653],"content":"The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.","pos":[0,205],"source":"The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network."}]}],"pos":[28065,28723],"yaml":true,"extradata":"MT"},{"content":"The number to convert, expressed in host byte order.","nodes":[{"pos":[0,52],"content":"The number to convert, expressed in host byte order.","nodes":[{"content":"The number to convert, expressed in host byte order.","pos":[0,52]}]}],"pos":[28870,28923],"yaml":true},{"content":"An integer value, expressed in network byte order.","nodes":[{"pos":[0,50],"content":"An integer value, expressed in network byte order.","nodes":[{"content":"An integer value, expressed in network byte order.","pos":[0,50]}]}],"pos":[28979,29030],"yaml":true},{"content":"Converts a long value from host byte order to network byte order.","nodes":[{"pos":[0,65],"content":"Converts a long value from host byte order to network byte order.","nodes":[{"content":"Converts a long value from host byte order to network byte order.","pos":[0,65]}]}],"pos":[30412,30478],"yaml":true},{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \n  \n The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.","nodes":[{"pos":[0,441],"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","nodes":[{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","pos":[0,441],"nodes":[{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values.","pos":[0,101]},{"content":"Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).","pos":[102,260]},{"content":"To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","pos":[261,441]}]}]},{"pos":[448,653],"content":"The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.","pos":[0,205],"source":"The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network."}]}],"pos":[30489,31147],"yaml":true,"extradata":"MT"},{"content":"The number to convert, expressed in host byte order.","nodes":[{"pos":[0,52],"content":"The number to convert, expressed in host byte order.","nodes":[{"content":"The number to convert, expressed in host byte order.","pos":[0,52]}]}],"pos":[31296,31349],"yaml":true},{"content":"A long value, expressed in network byte order.","nodes":[{"pos":[0,46],"content":"A long value, expressed in network byte order.","nodes":[{"content":"A long value, expressed in network byte order.","pos":[0,46]}]}],"pos":[31405,31452],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\"></xref> method uses the <xref href=\"System.Net.IPAddress.IPv6Any\"></xref> field to indicate that a <xref href=\"System.Net.Sockets.Socket\"></xref> must listen for client activity on all network interfaces.","nodes":[{"pos":[0,273],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\"&gt;&lt;/xref&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref href=\"System.Net.IPAddress.IPv6Any\"&gt;&lt;/xref&gt;</ph> field to indicate that a <ph id=\"ph3\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> must listen for client activity on all network interfaces.","source":"The <xref href=\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\"></xref> method uses the <xref href=\"System.Net.IPAddress.IPv6Any\"></xref> field to indicate that a <xref href=\"System.Net.Sockets.Socket\"></xref> must listen for client activity on all network interfaces."}],"pos":[32704,32978],"yaml":true},{"content":"The <xref:System.Net.IPAddress.IPv6Any> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.","nodes":[{"pos":[0,139],"content":"The <xref:System.Net.IPAddress.IPv6Any> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.IPv6Any&gt;</ph> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.","pos":[0,139],"source":"The <xref:System.Net.IPAddress.IPv6Any> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation."}]}],"pos":[32989,33131],"yaml":true,"extradata":"MT"},{"content":"Provides the IP loopback address. This property is read-only.","nodes":[{"pos":[0,61],"content":"Provides the IP loopback address. This property is read-only.","nodes":[{"content":"Provides the IP loopback address. This property is read-only.","pos":[0,61],"nodes":[{"content":"Provides the IP loopback address.","pos":[0,33]},{"content":"This property is read-only.","pos":[34,61]}]}]}],"pos":[35156,35218],"yaml":true},{"content":"The <xref:System.Net.IPAddress.IPv6Loopback> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.","nodes":[{"pos":[0,145],"content":"The <xref:System.Net.IPAddress.IPv6Loopback> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.IPv6Loopback&gt;</ph> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.","pos":[0,145],"source":"The <xref:System.Net.IPAddress.IPv6Loopback> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation."}]}],"pos":[35229,35375],"yaml":true,"extradata":"MT"},{"content":"Provides an IP address that indicates that no network interface should be used. This property is read-only.","nodes":[{"pos":[0,107],"content":"Provides an IP address that indicates that no network interface should be used. This property is read-only.","nodes":[{"content":"Provides an IP address that indicates that no network interface should be used. This property is read-only.","pos":[0,107],"nodes":[{"content":"Provides an IP address that indicates that no network interface should be used.","pos":[0,79]},{"content":"This property is read-only.","pos":[80,107]}]}]}],"pos":[37386,37494],"yaml":true},{"content":"The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.IPv6None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity. The <xref:System.Net.IPAddress.IPv6None> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.","nodes":[{"pos":[0,359],"content":"The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.IPv6None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity. The <xref:System.Net.IPAddress.IPv6None> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.","nodes":[{"content":"The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.IPv6None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity. The <xref:System.Net.IPAddress.IPv6None> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.","pos":[0,359],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> field to indicate that a <ph id=\"ph3\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> must not listen for client activity.","pos":[0,217],"source":"The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.IPv6None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.","pos":[218,359],"source":" The <xref:System.Net.IPAddress.IPv6None> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation."}]}]}],"pos":[37505,37865],"yaml":true,"extradata":"MT"},{"content":"Gets whether the IP address is an IPv4-mapped IPv6 address.","nodes":[{"pos":[0,59],"content":"Gets whether the IP address is an IPv4-mapped IPv6 address.","nodes":[{"content":"Gets whether the IP address is an IPv4-mapped IPv6 address.","pos":[0,59]}]}],"pos":[39931,39991],"yaml":true},{"content":"Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).","nodes":[{"pos":[0,723],"content":"Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).","nodes":[{"content":"Dual-stack sockets always require IPv6 addresses.","pos":[0,49]},{"content":"The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.","pos":[50,151]},{"content":"Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.","pos":[152,302]},{"content":"The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.","pos":[303,416]},{"content":"The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.","pos":[417,557]},{"content":"The IPv4-mapped IPv6 address format is specified in RFC 4291.","pos":[558,619]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.","pos":[620,723],"source":" For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231)."}]}],"pos":[40002,40726],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Boolean\"></xref>.  \n  \n `true` if the IP address is an IPv4-mapped IPv6 address; otherwise, `false`.","nodes":[{"pos":[0,44],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Boolean\"></xref>."},{"pos":[51,127],"content":"<ph id=\"ph1\">`true`</ph> if the IP address is an IPv4-mapped IPv6 address; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the IP address is an IPv4-mapped IPv6 address; otherwise, `false`."}],"pos":[40847,40981],"yaml":true},{"content":"Gets whether the address is an IPv6 link local address.","nodes":[{"pos":[0,55],"content":"Gets whether the address is an IPv6 link local address.","nodes":[{"content":"Gets whether the address is an IPv6 link local address.","pos":[0,55]}]}],"pos":[42284,42340],"yaml":true},{"content":"`true` if the IP address is an IPv6 link local address; otherwise, `false`.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">`true`</ph> if the IP address is an IPv6 link local address; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the IP address is an IPv6 link local address; otherwise, `false`."}],"pos":[42458,42536],"yaml":true},{"content":"Gets whether the address is an IPv6 multicast global address.","nodes":[{"pos":[0,61],"content":"Gets whether the address is an IPv6 multicast global address.","nodes":[{"content":"Gets whether the address is an IPv6 multicast global address.","pos":[0,61]}]}],"pos":[43836,43898],"yaml":true},{"content":"`true` if the IP address is an IPv6 multicast global address; otherwise, `false`.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">`true`</ph> if the IP address is an IPv6 multicast global address; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the IP address is an IPv6 multicast global address; otherwise, `false`."}],"pos":[44016,44100],"yaml":true},{"content":"Gets whether the address is an IPv6 site local address.","nodes":[{"pos":[0,55],"content":"Gets whether the address is an IPv6 site local address.","nodes":[{"content":"Gets whether the address is an IPv6 site local address.","pos":[0,55]}]}],"pos":[45400,45456],"yaml":true},{"content":"`true` if the IP address is an IPv6 site local address; otherwise, `false`.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">`true`</ph> if the IP address is an IPv6 site local address; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the IP address is an IPv6 site local address; otherwise, `false`."}],"pos":[45574,45652],"yaml":true},{"content":"Gets whether the address is an IPv6 Teredo address.","nodes":[{"pos":[0,51],"content":"Gets whether the address is an IPv6 Teredo address.","nodes":[{"content":"Gets whether the address is an IPv6 Teredo address.","pos":[0,51]}]}],"pos":[46934,46986],"yaml":true},{"content":"A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.","nodes":[{"pos":[0,197],"content":"A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.","nodes":[{"content":"A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.","pos":[0,197],"nodes":[{"content":"A Teredo address is an IPv6 address with the prefix of 2001::/32.","pos":[0,65]},{"content":"Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.","pos":[66,197]}]}]}],"pos":[46997,47195],"yaml":true,"extradata":"MT"},{"content":"`true` if the IP address is an IPv6 Teredo address; otherwise, `false`.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">`true`</ph> if the IP address is an IPv6 Teredo address; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the IP address is an IPv6 Teredo address; otherwise, `false`."}],"pos":[47310,47384],"yaml":true},{"content":"Indicates whether the specified IP address is the loopback address.","nodes":[{"pos":[0,67],"content":"Indicates whether the specified IP address is the loopback address.","nodes":[{"content":"Indicates whether the specified IP address is the loopback address.","pos":[0,67]}]}],"pos":[48748,48816],"yaml":true},{"content":"The <xref:System.Net.IPAddress.IsLoopback%2A> method compares `address` to <xref:System.Net.IPAddress.Loopback> and returns `true` if the two IP addresses are the same.  \n  \n In the case of IPv4, that the <xref:System.Net.IPAddress.IsLoopback%2A> method returns `true` for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <xref:System.Net.IPAddress.Loopback> (127.0.0.1).","nodes":[{"pos":[0,168],"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> method compares <ph id=\"ph2\">`address`</ph> to <ph id=\"ph3\">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> and returns <ph id=\"ph4\">`true`</ph> if the two IP addresses are the same.","source":"The <xref:System.Net.IPAddress.IsLoopback%2A> method compares `address` to <xref:System.Net.IPAddress.Loopback> and returns `true` if the two IP addresses are the same."},{"pos":[175,412],"content":"In the case of IPv4, that the <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> method returns <ph id=\"ph2\">`true`</ph> for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <ph id=\"ph3\">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> (127.0.0.1).","source":"In the case of IPv4, that the <xref:System.Net.IPAddress.IsLoopback%2A> method returns `true` for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <xref:System.Net.IPAddress.Loopback> (127.0.0.1)."}],"pos":[48827,49244],"yaml":true,"extradata":"MT"},{"content":"An IP address.","nodes":[{"pos":[0,14],"content":"An IP address.","nodes":[{"content":"An IP address.","pos":[0,14]}]}],"pos":[50039,50054],"yaml":true},{"content":"`true` if <code>address</code> is the loopback address; otherwise, `false`.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> is the loopback address; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>address</code> is the loopback address; otherwise, `false`."}],"pos":[50112,50190],"yaml":true},{"content":"Provides the IP loopback address. This field is read-only.","nodes":[{"pos":[0,58],"content":"Provides the IP loopback address. This field is read-only.","nodes":[{"content":"Provides the IP loopback address. This field is read-only.","pos":[0,58],"nodes":[{"content":"Provides the IP loopback address.","pos":[0,33]},{"content":"This field is read-only.","pos":[34,58]}]}]}],"pos":[51440,51499],"yaml":true},{"content":"The <xref:System.Net.IPAddress.Loopback> field is equivalent to 127.0.0.1 in dotted-quad notation.","nodes":[{"pos":[0,98],"content":"The <xref:System.Net.IPAddress.Loopback> field is equivalent to 127.0.0.1 in dotted-quad notation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> field is equivalent to 127.0.0.1 in dotted-quad notation.","pos":[0,98],"source":"The <xref:System.Net.IPAddress.Loopback> field is equivalent to 127.0.0.1 in dotted-quad notation."}]}],"pos":[51510,51609],"yaml":true,"extradata":"MT"},{"content":"Maps the <xref href=\"System.Net.IPAddress\"></xref> object to an IPv4 address.","nodes":[{"pos":[0,77],"content":"Maps the <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> object to an IPv4 address.","source":"Maps the <xref href=\"System.Net.IPAddress\"></xref> object to an IPv4 address."}],"pos":[53574,53652],"yaml":true},{"content":"Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).  \n  \n If you want to use <xref:System.Net.IPAddress.MapToIPv4%2A> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address. Call <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A>, which will return `true` if the IP address is originally IPv4 written as IPv6, or `false` otherwise. If <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A> returns `true`, use <xref:System.Net.IPAddress.MapToIPv4%2A> to make the conversion.","nodes":[{"pos":[0,723],"content":"Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).","nodes":[{"content":"Dual-stack sockets always require IPv6 addresses.","pos":[0,49]},{"content":"The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.","pos":[50,151]},{"content":"Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.","pos":[152,302]},{"content":"The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.","pos":[303,416]},{"content":"The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.","pos":[417,557]},{"content":"The IPv4-mapped IPv6 address format is specified in RFC 4291.","pos":[558,619]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.","pos":[620,723],"source":" For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231)."}]},{"pos":[730,1199],"content":"If you want to use <xref:System.Net.IPAddress.MapToIPv4%2A> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address. Call <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A>, which will return `true` if the IP address is originally IPv4 written as IPv6, or `false` otherwise. If <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A> returns `true`, use <xref:System.Net.IPAddress.MapToIPv4%2A> to make the conversion.","nodes":[{"content":"If you want to use <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address.","pos":[0,174],"source":"If you want to use <xref:System.Net.IPAddress.MapToIPv4%2A> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address."},{"content":"Call <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph>, which will return <ph id=\"ph2\">`true`</ph> if the IP address is originally IPv4 written as IPv6, or <ph id=\"ph3\">`false`</ph> otherwise.","pos":[175,331],"source":" Call <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A>, which will return `true` if the IP address is originally IPv4 written as IPv6, or `false` otherwise."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, use <ph id=\"ph3\">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> to make the conversion.","pos":[332,469],"source":" If <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A> returns `true`, use <xref:System.Net.IPAddress.MapToIPv4%2A> to make the conversion."}]}],"pos":[53663,54867],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Net.IPAddress\"></xref>.  \n  \n An IPv4 address.","nodes":[{"pos":[0,50],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Net.IPAddress\"></xref>."},{"pos":[57,73],"content":"An IPv4 address.","nodes":[{"content":"An IPv4 address.","pos":[0,16]}]}],"pos":[55015,55095],"yaml":true},{"content":"Maps the <xref href=\"System.Net.IPAddress\"></xref> object to an IPv6 address.","nodes":[{"pos":[0,77],"content":"Maps the <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> object to an IPv6 address.","source":"Maps the <xref href=\"System.Net.IPAddress\"></xref> object to an IPv6 address."}],"pos":[56357,56435],"yaml":true},{"content":"Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).","nodes":[{"pos":[0,723],"content":"Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).","nodes":[{"content":"Dual-stack sockets always require IPv6 addresses.","pos":[0,49]},{"content":"The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.","pos":[50,151]},{"content":"Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.","pos":[152,302]},{"content":"The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.","pos":[303,416]},{"content":"The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.","pos":[417,557]},{"content":"The IPv4-mapped IPv6 address format is specified in RFC 4291.","pos":[558,619]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.","pos":[620,723],"source":" For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231)."}]}],"pos":[56446,57170],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Net.IPAddress\"></xref>.  \n  \n An IPv6 address.","nodes":[{"pos":[0,50],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Net.IPAddress\"></xref>."},{"pos":[57,73],"content":"An IPv6 address.","nodes":[{"content":"An IPv6 address.","pos":[0,16]}]}],"pos":[57318,57398],"yaml":true},{"content":"Converts a short value from network byte order to host byte order.","nodes":[{"pos":[0,66],"content":"Converts a short value from network byte order to host byte order.","nodes":[{"content":"Converts a short value from network byte order to host byte order.","pos":[0,66]}]}],"pos":[58771,58838],"yaml":true},{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \n  \n The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.","nodes":[{"pos":[0,441],"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","nodes":[{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","pos":[0,441],"nodes":[{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values.","pos":[0,101]},{"content":"Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).","pos":[102,260]},{"content":"To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","pos":[261,441]}]}]},{"pos":[448,653],"content":"The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.","pos":[0,205],"source":"The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host."}]}],"pos":[58849,59507],"yaml":true,"extradata":"MT"},{"content":"The number to convert, expressed in network byte order.","nodes":[{"pos":[0,55],"content":"The number to convert, expressed in network byte order.","nodes":[{"content":"The number to convert, expressed in network byte order.","pos":[0,55]}]}],"pos":[60285,60341],"yaml":true},{"content":"A short value, expressed in host byte order.","nodes":[{"pos":[0,44],"content":"A short value, expressed in host byte order.","nodes":[{"content":"A short value, expressed in host byte order.","pos":[0,44]}]}],"pos":[60397,60442],"yaml":true},{"content":"Converts an integer value from network byte order to host byte order.","nodes":[{"pos":[0,69],"content":"Converts an integer value from network byte order to host byte order.","nodes":[{"content":"Converts an integer value from network byte order to host byte order.","pos":[0,69]}]}],"pos":[61824,61894],"yaml":true},{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \n  \n The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.","nodes":[{"pos":[0,441],"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","nodes":[{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","pos":[0,441],"nodes":[{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values.","pos":[0,101]},{"content":"Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).","pos":[102,260]},{"content":"To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","pos":[261,441]}]}]},{"pos":[448,653],"content":"The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.","pos":[0,205],"source":"The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host."}]}],"pos":[61905,62563],"yaml":true,"extradata":"MT"},{"content":"The number to convert, expressed in network byte order.","nodes":[{"pos":[0,55],"content":"The number to convert, expressed in network byte order.","nodes":[{"content":"The number to convert, expressed in network byte order.","pos":[0,55]}]}],"pos":[63340,63396],"yaml":true},{"content":"An integer value, expressed in host byte order.","nodes":[{"pos":[0,47],"content":"An integer value, expressed in host byte order.","nodes":[{"content":"An integer value, expressed in host byte order.","pos":[0,47]}]}],"pos":[63452,63500],"yaml":true},{"content":"Converts a long value from network byte order to host byte order.","nodes":[{"pos":[0,65],"content":"Converts a long value from network byte order to host byte order.","nodes":[{"content":"Converts a long value from network byte order to host byte order.","pos":[0,65]}]}],"pos":[64882,64948],"yaml":true},{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \n  \n The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.","nodes":[{"pos":[0,441],"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","nodes":[{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","pos":[0,441],"nodes":[{"content":"Different computers use different conventions for ordering the bytes within multibyte integer values.","pos":[0,101]},{"content":"Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).","pos":[102,260]},{"content":"To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.","pos":[261,441]}]}]},{"pos":[448,653],"content":"The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.","pos":[0,205],"source":"The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host."}]}],"pos":[64959,65617],"yaml":true,"extradata":"MT"},{"content":"The number to convert, expressed in network byte order.","nodes":[{"pos":[0,55],"content":"The number to convert, expressed in network byte order.","nodes":[{"content":"The number to convert, expressed in network byte order.","pos":[0,55]}]}],"pos":[66392,66448],"yaml":true},{"content":"A long value, expressed in host byte order.","nodes":[{"pos":[0,43],"content":"A long value, expressed in host byte order.","nodes":[{"content":"A long value, expressed in host byte order.","pos":[0,43]}]}],"pos":[66504,66548],"yaml":true},{"content":"Provides an IP address that indicates that no network interface should be used. This field is read-only.","nodes":[{"pos":[0,104],"content":"Provides an IP address that indicates that no network interface should be used. This field is read-only.","nodes":[{"content":"Provides an IP address that indicates that no network interface should be used. This field is read-only.","pos":[0,104],"nodes":[{"content":"Provides an IP address that indicates that no network interface should be used.","pos":[0,79]},{"content":"This field is read-only.","pos":[80,104]}]}]}],"pos":[67782,67887],"yaml":true},{"content":"The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity. The <xref:System.Net.IPAddress.None> field is equivalent to 255.255.255.255 in dotted-quad notation.","nodes":[{"pos":[0,314],"content":"The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity. The <xref:System.Net.IPAddress.None> field is equivalent to 255.255.255.255 in dotted-quad notation.","nodes":[{"content":"The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity. The <xref:System.Net.IPAddress.None> field is equivalent to 255.255.255.255 in dotted-quad notation.","pos":[0,314],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.None&gt;</ph> field to indicate that a <ph id=\"ph3\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> must not listen for client activity.","pos":[0,213],"source":"The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.None&gt;</ph> field is equivalent to 255.255.255.255 in dotted-quad notation.","pos":[214,314],"source":" The <xref:System.Net.IPAddress.None> field is equivalent to 255.255.255.255 in dotted-quad notation."}]}]}],"pos":[67898,68213],"yaml":true,"extradata":"MT"},{"content":"Converts an IP address string to an <xref href=\"System.Net.IPAddress\"></xref> instance.","nodes":[{"pos":[0,87],"content":"Converts an IP address string to an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> instance.","source":"Converts an IP address string to an <xref href=\"System.Net.IPAddress\"></xref> instance."}],"pos":[70120,70208],"yaml":true},{"content":"The static <xref:System.Net.IPAddress.Parse%2A> method creates an <xref:System.Net.IPAddress> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.  \n  \n The number of parts (each part is separated by a period) in `ipString` determines how the IP address is constructed. A one part address is stored directly in the network address. A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address. A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address. For example:  \n  \n|Number of parts and example `ipString`|IPv4 address for IPAddress|  \n|--------------------------------------------|--------------------------------|  \n|1 -- \"65535\"|0.0.255.255|  \n|2 -- \"20.2\"|20.0.0.2|  \n|2 -- \"20.65535\"|20.0.255.255|  \n|3 -- \"128.1.2\"|128.1.0.2|","nodes":[{"pos":[0,208],"content":"The static <xref:System.Net.IPAddress.Parse%2A> method creates an <xref:System.Net.IPAddress> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.","nodes":[{"content":"The static <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.Parse%2A&gt;</ph> method creates an <ph id=\"ph2\">&lt;xref:System.Net.IPAddress&gt;</ph> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.","pos":[0,208],"source":"The static <xref:System.Net.IPAddress.Parse%2A> method creates an <xref:System.Net.IPAddress> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6."}]},{"pos":[215,800],"content":"The number of parts (each part is separated by a period) in `ipString` determines how the IP address is constructed. A one part address is stored directly in the network address. A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address. A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address. For example:","nodes":[{"content":"The number of parts (each part is separated by a period) in <ph id=\"ph1\">`ipString`</ph> determines how the IP address is constructed.","pos":[0,116],"source":"The number of parts (each part is separated by a period) in `ipString` determines how the IP address is constructed."},{"content":"A one part address is stored directly in the network address.","pos":[117,178]},{"content":"A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address.","pos":[179,359]},{"content":"A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address.","pos":[360,572]},{"content":"For example:","pos":[573,585]}]},{"pos":[807,845],"content":"Number of parts and example <ph id=\"ph1\">`ipString`</ph>","source":"Number of parts and example `ipString`"},{"pos":[846,872],"content":"IPv4 address for IPAddress","nodes":[{"content":"IPv4 address for IPAddress","pos":[0,26]}]},{"pos":[959,971],"content":"1 -- \"65535\"","nodes":[{"content":"1 -- \"65535\"","pos":[0,12]}]},{"pos":[972,983],"content":"0.0.255.255","nodes":[{"content":"0.0.255.255","pos":[0,11]}]},{"pos":[988,999],"content":"2 -- \"20.2\"","nodes":[{"content":"2 -- \"20.2\"","pos":[0,11]}]},{"pos":[1000,1008],"content":"20.0.0.2","nodes":[{"content":"20.0.0.2","pos":[0,8]}]},{"pos":[1013,1028],"content":"2 -- \"20.65535\"","nodes":[{"content":"2 -- \"20.65535\"","pos":[0,15]}]},{"pos":[1029,1041],"content":"20.0.255.255","nodes":[{"content":"20.0.255.255","pos":[0,12]}]},{"pos":[1046,1060],"content":"3 -- \"128.1.2\"","nodes":[{"content":"3 -- \"128.1.2\"","pos":[0,14]}]},{"pos":[1061,1070],"content":"128.1.0.2","nodes":[{"content":"128.1.0.2","pos":[0,9]}]}],"pos":[70219,71310],"yaml":true,"extradata":"MT"},{"content":"A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.","nodes":[{"pos":[0,113],"content":"A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.","nodes":[{"content":"A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.","pos":[0,113]}]}],"pos":[72222,72336],"yaml":true},{"content":"An <xref href=\"System.Net.IPAddress\"></xref> instance.","nodes":[{"pos":[0,54],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> instance.","source":"An <xref href=\"System.Net.IPAddress\"></xref> instance."}],"pos":[72400,72455],"yaml":true},{"content":"<code>ipString</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;ipString&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ipString</code> is `null`."}],"pos":[72611,72644],"yaml":true},{"content":"<code>ipString</code> is not a valid IP address.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">&lt;code&gt;ipString&lt;/code&gt;</ph> is not a valid IP address.","source":"<code>ipString</code> is not a valid IP address."}],"pos":[72734,72783],"yaml":true},{"content":"Gets or sets the IPv6 address scope identifier.","nodes":[{"pos":[0,47],"content":"Gets or sets the IPv6 address scope identifier.","nodes":[{"content":"Gets or sets the IPv6 address scope identifier.","pos":[0,47]}]}],"pos":[73968,74016],"yaml":true},{"content":"The meaning of <xref:System.Net.IPAddress.ScopeId%2A> changes depending on the context in which it is used.  \n  \n-   Link-local address. On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces. To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.  \n  \n> [!NOTE]\n>  Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.  \n  \n-   Site-local addresses. A host can be connected to multiple sites. In this case, a scope identifier is used to indicate a specific site to communicate with.  \n  \n> [!NOTE]\n>  Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.  \n  \n The notation that is used to specify the `ScopeId` with an address is `Address%ScopeId`. For example, `FE80::5EFE:192.168.41.30%2.`","nodes":[{"pos":[0,107],"content":"The meaning of <xref:System.Net.IPAddress.ScopeId%2A> changes depending on the context in which it is used.","nodes":[{"content":"The meaning of <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.ScopeId%2A&gt;</ph> changes depending on the context in which it is used.","pos":[0,107],"source":"The meaning of <xref:System.Net.IPAddress.ScopeId%2A> changes depending on the context in which it is used."}]},{"pos":[117,384],"content":"Link-local address. On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces. To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.","nodes":[{"content":"Link-local address. On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces. To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.","pos":[0,267],"nodes":[{"content":"Link-local address.","pos":[0,19]},{"content":"On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces.","pos":[20,151]},{"content":"To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.","pos":[152,267]}]}]},{"pos":[392,545],"content":"[!NOTE]\n Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.","leadings":["","> "],"nodes":[{"content":"Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.","pos":[9,151]}]},{"pos":[555,709],"content":"Site-local addresses. A host can be connected to multiple sites. In this case, a scope identifier is used to indicate a specific site to communicate with.","nodes":[{"content":"Site-local addresses. A host can be connected to multiple sites. In this case, a scope identifier is used to indicate a specific site to communicate with.","pos":[0,154],"nodes":[{"content":"Site-local addresses.","pos":[0,21]},{"content":"A host can be connected to multiple sites.","pos":[22,64]},{"content":"In this case, a scope identifier is used to indicate a specific site to communicate with.","pos":[65,154]}]}]},{"pos":[717,851],"content":"[!NOTE]\n Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.","leadings":["","> "],"nodes":[{"content":"Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.","pos":[9,132]}]},{"pos":[858,989],"content":"The notation that is used to specify the `ScopeId` with an address is `Address%ScopeId`. For example, `FE80::5EFE:192.168.41.30%2.`","nodes":[{"content":"The notation that is used to specify the <ph id=\"ph1\">`ScopeId`</ph> with an address is <ph id=\"ph2\">`Address%ScopeId`</ph>.","pos":[0,88],"source":"The notation that is used to specify the `ScopeId` with an address is `Address%ScopeId`."},{"content":"For example, <ph id=\"ph1\">`FE80::5EFE:192.168.41.30%2.`</ph>","pos":[89,131],"source":" For example, `FE80::5EFE:192.168.41.30%2.`"}]}],"pos":[74027,75031],"yaml":true,"extradata":"MT"},{"content":"A long integer that specifies the scope of the address.","nodes":[{"pos":[0,55],"content":"A long integer that specifies the scope of the address.","nodes":[{"content":"A long integer that specifies the scope of the address.","pos":[0,55]}]}],"pos":[75551,75607],"yaml":true},{"content":"`AddressFamily` = `InterNetwork`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">`AddressFamily`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`InterNetwork`</ph>.","source":"`AddressFamily` = `InterNetwork`."}],"pos":[75777,75813],"yaml":true},{"content":"<code>scopeId</code> < 0  \n  \n \\- or -  \n  \n-   <code>scopeId</code> > 0x00000000FFFFFFFF","nodes":[{"pos":[0,24],"content":"<ph id=\"ph1\">&lt;code&gt;scopeId&lt;/code&gt;</ph> &lt; 0","source":"<code>scopeId</code> < 0"},{"pos":[31,38],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[44,89],"content":"<ph id=\"ph1\">-   &lt;code&gt;scopeId&lt;/code&gt;</ph><ph id=\"ph2\"> &gt;</ph> 0x00000000FFFFFFFF","source":"-   <code>scopeId</code> > 0x00000000FFFFFFFF"}],"pos":[75927,76024],"yaml":true},{"content":"Converts an Internet address to its standard notation.","nodes":[{"pos":[0,54],"content":"Converts an Internet address to its standard notation.","nodes":[{"content":"Converts an Internet address to its standard notation.","pos":[0,54]}]}],"pos":[77219,77274],"yaml":true},{"content":"The <xref:System.Net.IPAddress.ToString%2A> method converts the IP address that is stored in the <xref:System.Net.IPAddress.Address%2A> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.","nodes":[{"pos":[0,207],"content":"The <xref:System.Net.IPAddress.ToString%2A> method converts the IP address that is stored in the <xref:System.Net.IPAddress.Address%2A> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> method converts the IP address that is stored in the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.","pos":[0,207],"source":"The <xref:System.Net.IPAddress.ToString%2A> method converts the IP address that is stored in the <xref:System.Net.IPAddress.Address%2A> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation."}]}],"pos":[77285,77493],"yaml":true,"extradata":"MT"},{"content":"A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.","nodes":[{"pos":[0,103],"content":"A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.","nodes":[{"content":"A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.","pos":[0,103]}]}],"pos":[77628,77732],"yaml":true},{"content":"The address family is <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> and the address is bad.","nodes":[{"pos":[0,114],"content":"The address family is <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"&gt;&lt;/xref&gt;</ph> and the address is bad.","source":"The address family is <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> and the address is bad."}],"pos":[77903,78018],"yaml":true},{"content":"Determines whether a string is a valid IP address.","nodes":[{"pos":[0,50],"content":"Determines whether a string is a valid IP address.","nodes":[{"content":"Determines whether a string is a valid IP address.","pos":[0,50]}]}],"pos":[79375,79426],"yaml":true},{"content":"Note that this method accepts as valid an ipString value that can be parsed as an <xref:System.Int64>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <xref:System.Net.IPAddress.%23ctor%2A> constructor does. This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address. For example, if ipString is \"1\", this method returns true even though \"1\" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false. Fixing this bug would break existing apps, so the current behavior will not be changed. Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.","nodes":[{"pos":[0,789],"content":"Note that this method accepts as valid an ipString value that can be parsed as an <xref:System.Int64>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <xref:System.Net.IPAddress.%23ctor%2A> constructor does. This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address. For example, if ipString is \"1\", this method returns true even though \"1\" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false. Fixing this bug would break existing apps, so the current behavior will not be changed. Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.","nodes":[{"content":"Note that this method accepts as valid an ipString value that can be parsed as an <xref:System.Int64>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <xref:System.Net.IPAddress.%23ctor%2A> constructor does. This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address. For example, if ipString is \"1\", this method returns true even though \"1\" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false. Fixing this bug would break existing apps, so the current behavior will not be changed. Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.","pos":[0,789],"nodes":[{"content":"Note that this method accepts as valid an ipString value that can be parsed as an <ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.%23ctor%2A&gt;</ph> constructor does.","pos":[0,272],"source":"Note that this method accepts as valid an ipString value that can be parsed as an <xref:System.Int64>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <xref:System.Net.IPAddress.%23ctor%2A> constructor does."},{"content":"This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address.","pos":[273,414]},{"content":"For example, if ipString is \"1\", this method returns true even though \"1\" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false.","pos":[415,577]},{"content":"Fixing this bug would break existing apps, so the current behavior will not be changed.","pos":[578,665]},{"content":"Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.","pos":[666,789]}]}]}],"pos":[79437,80227],"yaml":true,"extradata":"MT"},{"content":"The string to validate.","nodes":[{"pos":[0,23],"content":"The string to validate.","nodes":[{"content":"The string to validate.","pos":[0,23]}]}],"pos":[80411,80435],"yaml":true},{"content":"The <xref href=\"System.Net.IPAddress\"></xref> version of the string.","nodes":[{"pos":[0,68],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> version of the string.","source":"The <xref href=\"System.Net.IPAddress\"></xref> version of the string."}],"pos":[80505,80574],"yaml":true},{"content":"`true` if <code>ipString</code> was able to be parsed as an IP address; otherwise, `false`.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">ipString</ph><ept id=\"p1\">&lt;/code&gt;</ept> was able to be parsed as an IP address; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>ipString</code> was able to be parsed as an IP address; otherwise, `false`."}],"pos":[80632,80726],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  id: IPAddress\n  children:\n  - System.Net.IPAddress.#ctor(System.Byte[])\n  - System.Net.IPAddress.#ctor(System.Int64)\n  - System.Net.IPAddress.#ctor(System.Byte[],System.Int64)\n  - System.Net.IPAddress.Address\n  - System.Net.IPAddress.AddressFamily\n  - System.Net.IPAddress.Any\n  - System.Net.IPAddress.Broadcast\n  - System.Net.IPAddress.Equals(System.Object)\n  - System.Net.IPAddress.GetAddressBytes\n  - System.Net.IPAddress.GetHashCode\n  - System.Net.IPAddress.HostToNetworkOrder(System.Int16)\n  - System.Net.IPAddress.HostToNetworkOrder(System.Int32)\n  - System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n  - System.Net.IPAddress.IPv6Any\n  - System.Net.IPAddress.IPv6Loopback\n  - System.Net.IPAddress.IPv6None\n  - System.Net.IPAddress.IsIPv4MappedToIPv6\n  - System.Net.IPAddress.IsIPv6LinkLocal\n  - System.Net.IPAddress.IsIPv6Multicast\n  - System.Net.IPAddress.IsIPv6SiteLocal\n  - System.Net.IPAddress.IsIPv6Teredo\n  - System.Net.IPAddress.IsLoopback(System.Net.IPAddress)\n  - System.Net.IPAddress.Loopback\n  - System.Net.IPAddress.MapToIPv4\n  - System.Net.IPAddress.MapToIPv6\n  - System.Net.IPAddress.NetworkToHostOrder(System.Int16)\n  - System.Net.IPAddress.NetworkToHostOrder(System.Int32)\n  - System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n  - System.Net.IPAddress.None\n  - System.Net.IPAddress.Parse(System.String)\n  - System.Net.IPAddress.ScopeId\n  - System.Net.IPAddress.ToString\n  - System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)\n  langs:\n  - csharp\n  name: IPAddress\n  nameWithType: IPAddress\n  fullName: System.Net.IPAddress\n  type: Class\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Provides an Internet Protocol (IP) address.\n  remarks: The <xref:System.Net.IPAddress> class contains the address of a computer on an IP network.\n  example:\n  - \"The following code example shows how to query a server to obtain the family addresses and the IP addresses it supports.  \\n  \\n [!code-cpp[System.Net.IPAddress#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#1)]\\n [!code-csharp[System.Net.IPAddress#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#1)]\\n [!code-vb[System.Net.IPAddress#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#1)]\"\n  syntax:\n    content: public class IPAddress\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.#ctor(System.Byte[])\n  commentId: M:System.Net.IPAddress.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: IPAddress(Byte[])\n  nameWithType: IPAddress.IPAddress(Byte[])\n  fullName: IPAddress.IPAddress(Byte[])\n  type: Constructor\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Initializes a new instance of the <xref href=\"System.Net.IPAddress\"></xref> class with the address specified as a <xref href=\"System.Byte\"></xref> array.\n  remarks: \"The <xref:System.Net.IPAddress> is created with the <xref:System.Net.IPAddress.Address%2A> property set to `address`.  \\n  \\n If the length of `address` is 4, <xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29> constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.  \\n  \\n The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0.\"\n  syntax:\n    content: public IPAddress (byte[] address);\n    parameters:\n    - id: address\n      type: System.Byte[]\n      description: The byte array value of the IP address.\n  overload: System.Net.IPAddress.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>address</code> contains a bad IP address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.#ctor(System.Int64)\n  commentId: M:System.Net.IPAddress.#ctor(System.Int64)\n  id: '#ctor(System.Int64)'\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: IPAddress(Int64)\n  nameWithType: IPAddress.IPAddress(Int64)\n  fullName: IPAddress.IPAddress(Int64)\n  type: Constructor\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Initializes a new instance of the <xref href=\"System.Net.IPAddress\"></xref> class with the address specified as an <xref href=\"System.Int64\"></xref>.\n  remarks: \"The <xref:System.Net.IPAddress> instance is created with the <xref:System.Net.IPAddress.Address%2A> property set to `newAddress`.  \\n  \\n The <xref:System.Int64> value is assumed to be in network byte order.\"\n  syntax:\n    content: public IPAddress (long newAddress);\n    parameters:\n    - id: newAddress\n      type: System.Int64\n      description: The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address \"143.24.20.36\".\n  overload: System.Net.IPAddress.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>newAddress</code> < 0 or  \\n  \\n <code>newAddress</code> > 0x00000000FFFFFFFF\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.#ctor(System.Byte[],System.Int64)\n  commentId: M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)\n  id: '#ctor(System.Byte[],System.Int64)'\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: IPAddress(Byte[], Int64)\n  nameWithType: IPAddress.IPAddress(Byte[], Int64)\n  fullName: IPAddress.IPAddress(Byte[], Int64)\n  type: Constructor\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Initializes a new instance of the <xref href=\"System.Net.IPAddress\"></xref> class with the address specified as a <xref href=\"System.Byte\"></xref> array and the specified scope identifier.\n  remarks: \"This constructor instantiates an IPv6 address. The `scopeid` identifies a network interface in the case of a link-local address. The scope is valid only for link-local and site-local addresses.  \\n  \\n The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0.\"\n  syntax:\n    content: public IPAddress (byte[] address, long scopeid);\n    parameters:\n    - id: address\n      type: System.Byte[]\n      description: The byte array value of the IP address.\n    - id: scopeid\n      type: System.Int64\n      description: The long value of the scope identifier.\n  overload: System.Net.IPAddress.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>address</code> contains a bad IP address.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>scopeid</code> < 0 or  \\n  \\n <code>scopeid</code> > 0x00000000FFFFFFFF\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.Address\n  commentId: P:System.Net.IPAddress.Address\n  id: Address\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: Address\n  nameWithType: IPAddress.Address\n  fullName: IPAddress.Address\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: An Internet Protocol (IP) address.\n  remarks: \"This property is obsolete. Use <xref:System.Net.IPAddress.GetAddressBytes%2A>.  \\n  \\n To convert <xref:System.Net.IPAddress.Address%2A> to dotted-quad notation, use the <xref:System.Net.IPAddress.ToString%2A> method.\"\n  example:\n  - \"The following example uses the <xref:System.Net.IPAddress.Address%2A> parameter to retrieve the IP address of the <xref:System.Net.IPAddress> instance.  \\n  \\n [!code-cpp[IPAddress_Address_AddressFamily#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Address_AddressFamily/CPP/ipaddress_address_addressfamily.cpp#2)]\\n [!code-csharp[IPAddress_Address_AddressFamily#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Address_AddressFamily/CS/ipaddress_address_addressfamily.cs#2)]\\n [!code-vb[IPAddress_Address_AddressFamily#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Address_AddressFamily/VB/ipaddress_address_addressfamily.vb#2)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"This property has been deprecated. It is address family dependent. Please use IPAddress.Equals method to perform comparisons. http://go.microsoft.com/fwlink/?linkid=14202\")]\n\n      public long Address { get; set; }\n    return:\n      type: System.Int64\n      description: The long value of the IP address.\n  overload: System.Net.IPAddress.Address*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: The address family is <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref>.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.AddressFamily\n  commentId: P:System.Net.IPAddress.AddressFamily\n  id: AddressFamily\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: AddressFamily\n  nameWithType: IPAddress.AddressFamily\n  fullName: IPAddress.AddressFamily\n  type: Property\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Gets the address family of the IP address.\n  remarks: ''\n  example:\n  - \"Refer to the example in the <xref:System.Net.IPAddress> class topic.  \\n  \\n [!code-cpp[System.Net.IPAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#3)]\\n [!code-csharp[System.Net.IPAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#3)]\\n [!code-vb[System.Net.IPAddress#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#3)]\"\n  syntax:\n    content: public System.Net.Sockets.AddressFamily AddressFamily { get; }\n    return:\n      type: System.Net.Sockets.AddressFamily\n      description: Returns <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> for IPv4 or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> for IPv6.\n  overload: System.Net.IPAddress.AddressFamily*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.Any\n  commentId: F:System.Net.IPAddress.Any\n  id: Any\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: Any\n  nameWithType: IPAddress.Any\n  fullName: IPAddress.Any\n  type: Field\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.\n  remarks: \"The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.Any> field to indicate that a <xref:System.Net.Sockets.Socket> instance must listen for client activity on all network interfaces.  \\n  \\n The <xref:System.Net.IPAddress.Any> field is equivalent to 0.0.0.0 in dotted-quad notation.\"\n  syntax:\n    content: public static readonly System.Net.IPAddress Any;\n    return:\n      type: System.Net.IPAddress\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.Broadcast\n  commentId: F:System.Net.IPAddress.Broadcast\n  id: Broadcast\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: Broadcast\n  nameWithType: IPAddress.Broadcast\n  fullName: IPAddress.Broadcast\n  type: Field\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Provides the IP broadcast address. This field is read-only.\n  remarks: The <xref:System.Net.IPAddress.Broadcast> field is equivalent to 255.255.255.255 in dotted-quad notation.\n  example:\n  - \"The following example prints the <xref:System.Net.IPAddress.Broadcast> address to the console.  \\n  \\n [!code-cpp[IPAddress_Broadcast_Loopback#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CPP/ipaddress_broadcast_loopback.cpp#2)]\\n [!code-csharp[IPAddress_Broadcast_Loopback#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CS/ipaddress_broadcast_loopback.cs#2)]\\n [!code-vb[IPAddress_Broadcast_Loopback#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/VB/ipaddress_broadcast_loopback.vb#2)]\"\n  syntax:\n    content: public static readonly System.Net.IPAddress Broadcast;\n    return:\n      type: System.Net.IPAddress\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.Equals(System.Object)\n  commentId: M:System.Net.IPAddress.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: IPAddress.Equals(Object)\n  fullName: IPAddress.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Compares two IP addresses.\n  remarks: The <xref:System.Net.IPAddress.Equals%2A> method compares the current <xref:System.Net.IPAddress> instance with the `comparand` parameter and returns `true` if the two instances contain the same IP address.\n  syntax:\n    content: public override bool Equals (object comparand);\n    parameters:\n    - id: comparand\n      type: System.Object\n      description: An <xref href=\"System.Net.IPAddress\"></xref> instance to compare to the current instance.\n    return:\n      type: System.Boolean\n      description: '`true` if the two addresses are equal; otherwise, `false`.'\n  overload: System.Net.IPAddress.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.GetAddressBytes\n  commentId: M:System.Net.IPAddress.GetAddressBytes\n  id: GetAddressBytes\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: GetAddressBytes()\n  nameWithType: IPAddress.GetAddressBytes()\n  fullName: IPAddress.GetAddressBytes()\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Provides a copy of the <xref href=\"System.Net.IPAddress\"></xref> as an array of bytes.\n  remarks: ''\n  example:\n  - \"The following code example shows how to get a server IP address in byte format.  \\n  \\n [!code-cpp[System.Net.IPAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#2)]\\n [!code-csharp[System.Net.IPAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#2)]\\n [!code-vb[System.Net.IPAddress#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#2)]\"\n  syntax:\n    content: public byte[] GetAddressBytes ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array.\n  overload: System.Net.IPAddress.GetAddressBytes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.GetHashCode\n  commentId: M:System.Net.IPAddress.GetHashCode\n  id: GetHashCode\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: IPAddress.GetHashCode()\n  fullName: IPAddress.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Returns a hash value for an IP address.\n  remarks: The <xref:System.Net.IPAddress.GetHashCode%2A> method returns a hash code of the IP address. This value can be used as a key in hash tables.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: An integer hash value.\n  overload: System.Net.IPAddress.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int16)\n  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)\n  id: HostToNetworkOrder(System.Int16)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: HostToNetworkOrder(Int16)\n  nameWithType: IPAddress.HostToNetworkOrder(Int16)\n  fullName: IPAddress.HostToNetworkOrder(Int16)\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Converts a short value from host byte order to network byte order.\n  remarks: \"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \\n  \\n The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.\"\n  syntax:\n    content: public static short HostToNetworkOrder (short host);\n    parameters:\n    - id: host\n      type: System.Int16\n      description: The number to convert, expressed in host byte order.\n    return:\n      type: System.Int16\n      description: A short value, expressed in network byte order.\n  overload: System.Net.IPAddress.HostToNetworkOrder*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int32)\n  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)\n  id: HostToNetworkOrder(System.Int32)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: HostToNetworkOrder(Int32)\n  nameWithType: IPAddress.HostToNetworkOrder(Int32)\n  fullName: IPAddress.HostToNetworkOrder(Int32)\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Converts an integer value from host byte order to network byte order.\n  remarks: \"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \\n  \\n The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.\"\n  syntax:\n    content: public static int HostToNetworkOrder (int host);\n    parameters:\n    - id: host\n      type: System.Int32\n      description: The number to convert, expressed in host byte order.\n    return:\n      type: System.Int32\n      description: An integer value, expressed in network byte order.\n  overload: System.Net.IPAddress.HostToNetworkOrder*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n  id: HostToNetworkOrder(System.Int64)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: HostToNetworkOrder(Int64)\n  nameWithType: IPAddress.HostToNetworkOrder(Int64)\n  fullName: IPAddress.HostToNetworkOrder(Int64)\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Converts a long value from host byte order to network byte order.\n  remarks: \"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \\n  \\n The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.\"\n  syntax:\n    content: public static long HostToNetworkOrder (long host);\n    parameters:\n    - id: host\n      type: System.Int64\n      description: The number to convert, expressed in host byte order.\n    return:\n      type: System.Int64\n      description: A long value, expressed in network byte order.\n  overload: System.Net.IPAddress.HostToNetworkOrder*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.IPv6Any\n  commentId: F:System.Net.IPAddress.IPv6Any\n  id: IPv6Any\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: IPv6Any\n  nameWithType: IPAddress.IPv6Any\n  fullName: IPAddress.IPv6Any\n  type: Field\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: The <xref href=\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\"></xref> method uses the <xref href=\"System.Net.IPAddress.IPv6Any\"></xref> field to indicate that a <xref href=\"System.Net.Sockets.Socket\"></xref> must listen for client activity on all network interfaces.\n  remarks: 'The <xref:System.Net.IPAddress.IPv6Any> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.'\n  example:\n  - \"The following code example displays the value of the current host's Any address in standard compressed format.  \\n  \\n [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#2)]\\n [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#2)]\\n [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#2)]\"\n  syntax:\n    content: public static readonly System.Net.IPAddress IPv6Any;\n    return:\n      type: System.Net.IPAddress\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.IPv6Loopback\n  commentId: F:System.Net.IPAddress.IPv6Loopback\n  id: IPv6Loopback\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: IPv6Loopback\n  nameWithType: IPAddress.IPv6Loopback\n  fullName: IPAddress.IPv6Loopback\n  type: Field\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Provides the IP loopback address. This property is read-only.\n  remarks: The <xref:System.Net.IPAddress.IPv6Loopback> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.\n  example:\n  - \"The following code example displays the value of the current host's loopback address in standard compressed format.  \\n  \\n [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#1)]\\n [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#1)]\\n [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#1)]\"\n  syntax:\n    content: public static readonly System.Net.IPAddress IPv6Loopback;\n    return:\n      type: System.Net.IPAddress\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.IPv6None\n  commentId: F:System.Net.IPAddress.IPv6None\n  id: IPv6None\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: IPv6None\n  nameWithType: IPAddress.IPv6None\n  fullName: IPAddress.IPv6None\n  type: Field\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Provides an IP address that indicates that no network interface should be used. This property is read-only.\n  remarks: The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.IPv6None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity. The <xref:System.Net.IPAddress.IPv6None> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.\n  example:\n  - \"The following code example displays the value of the current host's None address in standard compressed format.  \\n  \\n [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#3)]\\n [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#3)]\\n [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#3)]\"\n  syntax:\n    content: public static readonly System.Net.IPAddress IPv6None;\n    return:\n      type: System.Net.IPAddress\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.IsIPv4MappedToIPv6\n  commentId: P:System.Net.IPAddress.IsIPv4MappedToIPv6\n  id: IsIPv4MappedToIPv6\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: IsIPv4MappedToIPv6\n  nameWithType: IPAddress.IsIPv4MappedToIPv6\n  fullName: IPAddress.IsIPv4MappedToIPv6\n  type: Property\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Gets whether the IP address is an IPv4-mapped IPv6 address.\n  remarks: Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).\n  syntax:\n    content: public bool IsIPv4MappedToIPv6 { get; }\n    return:\n      type: System.Boolean\n      description: \"Returns <xref href=\\\"System.Boolean\\\"></xref>.  \\n  \\n `true` if the IP address is an IPv4-mapped IPv6 address; otherwise, `false`.\"\n  overload: System.Net.IPAddress.IsIPv4MappedToIPv6*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.IsIPv6LinkLocal\n  commentId: P:System.Net.IPAddress.IsIPv6LinkLocal\n  id: IsIPv6LinkLocal\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: IsIPv6LinkLocal\n  nameWithType: IPAddress.IsIPv6LinkLocal\n  fullName: IPAddress.IsIPv6LinkLocal\n  type: Property\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Gets whether the address is an IPv6 link local address.\n  syntax:\n    content: public bool IsIPv6LinkLocal { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the IP address is an IPv6 link local address; otherwise, `false`.'\n  overload: System.Net.IPAddress.IsIPv6LinkLocal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.IsIPv6Multicast\n  commentId: P:System.Net.IPAddress.IsIPv6Multicast\n  id: IsIPv6Multicast\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: IsIPv6Multicast\n  nameWithType: IPAddress.IsIPv6Multicast\n  fullName: IPAddress.IsIPv6Multicast\n  type: Property\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Gets whether the address is an IPv6 multicast global address.\n  syntax:\n    content: public bool IsIPv6Multicast { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the IP address is an IPv6 multicast global address; otherwise, `false`.'\n  overload: System.Net.IPAddress.IsIPv6Multicast*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.IsIPv6SiteLocal\n  commentId: P:System.Net.IPAddress.IsIPv6SiteLocal\n  id: IsIPv6SiteLocal\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: IsIPv6SiteLocal\n  nameWithType: IPAddress.IsIPv6SiteLocal\n  fullName: IPAddress.IsIPv6SiteLocal\n  type: Property\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Gets whether the address is an IPv6 site local address.\n  syntax:\n    content: public bool IsIPv6SiteLocal { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the IP address is an IPv6 site local address; otherwise, `false`.'\n  overload: System.Net.IPAddress.IsIPv6SiteLocal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.IsIPv6Teredo\n  commentId: P:System.Net.IPAddress.IsIPv6Teredo\n  id: IsIPv6Teredo\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: IsIPv6Teredo\n  nameWithType: IPAddress.IsIPv6Teredo\n  fullName: IPAddress.IsIPv6Teredo\n  type: Property\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Gets whether the address is an IPv6 Teredo address.\n  remarks: A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.\n  syntax:\n    content: public bool IsIPv6Teredo { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the IP address is an IPv6 Teredo address; otherwise, `false`.'\n  overload: System.Net.IPAddress.IsIPv6Teredo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.IsLoopback(System.Net.IPAddress)\n  commentId: M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)\n  id: IsLoopback(System.Net.IPAddress)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: IsLoopback(IPAddress)\n  nameWithType: IPAddress.IsLoopback(IPAddress)\n  fullName: IPAddress.IsLoopback(IPAddress)\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Indicates whether the specified IP address is the loopback address.\n  remarks: \"The <xref:System.Net.IPAddress.IsLoopback%2A> method compares `address` to <xref:System.Net.IPAddress.Loopback> and returns `true` if the two IP addresses are the same.  \\n  \\n In the case of IPv4, that the <xref:System.Net.IPAddress.IsLoopback%2A> method returns `true` for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <xref:System.Net.IPAddress.Loopback> (127.0.0.1).\"\n  example:\n  - \"The following code example uses the <xref:System.Net.IPAddress.IsLoopback%2A> method to determine whether the specified address is a loopback address.  \\n  \\n [!code-cpp[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/CPP/isloopback.cpp#1)]\\n [!code-csharp[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/CS/isloopback.cs#1)]\\n [!code-vb[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/VB/isloopback.vb#1)]\"\n  syntax:\n    content: public static bool IsLoopback (System.Net.IPAddress address);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An IP address.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>address</code> is the loopback address; otherwise, `false`.'\n  overload: System.Net.IPAddress.IsLoopback*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.Loopback\n  commentId: F:System.Net.IPAddress.Loopback\n  id: Loopback\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: Loopback\n  nameWithType: IPAddress.Loopback\n  fullName: IPAddress.Loopback\n  type: Field\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Provides the IP loopback address. This field is read-only.\n  remarks: The <xref:System.Net.IPAddress.Loopback> field is equivalent to 127.0.0.1 in dotted-quad notation.\n  example:\n  - \"The following example prints the <xref:System.Net.IPAddress.Loopback> address to the console.  \\n  \\n [!code-cpp[IPAddress_Broadcast_Loopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CPP/ipaddress_broadcast_loopback.cpp#1)]\\n [!code-csharp[IPAddress_Broadcast_Loopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CS/ipaddress_broadcast_loopback.cs#1)]\\n [!code-vb[IPAddress_Broadcast_Loopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/VB/ipaddress_broadcast_loopback.vb#1)]\"\n  syntax:\n    content: public static readonly System.Net.IPAddress Loopback;\n    return:\n      type: System.Net.IPAddress\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.MapToIPv4\n  commentId: M:System.Net.IPAddress.MapToIPv4\n  id: MapToIPv4\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: MapToIPv4()\n  nameWithType: IPAddress.MapToIPv4()\n  fullName: IPAddress.MapToIPv4()\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Maps the <xref href=\"System.Net.IPAddress\"></xref> object to an IPv4 address.\n  remarks: \"Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).  \\n  \\n If you want to use <xref:System.Net.IPAddress.MapToIPv4%2A> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address. Call <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A>, which will return `true` if the IP address is originally IPv4 written as IPv6, or `false` otherwise. If <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A> returns `true`, use <xref:System.Net.IPAddress.MapToIPv4%2A> to make the conversion.\"\n  syntax:\n    content: public System.Net.IPAddress MapToIPv4 ();\n    parameters: []\n    return:\n      type: System.Net.IPAddress\n      description: \"Returns <xref href=\\\"System.Net.IPAddress\\\"></xref>.  \\n  \\n An IPv4 address.\"\n  overload: System.Net.IPAddress.MapToIPv4*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.MapToIPv6\n  commentId: M:System.Net.IPAddress.MapToIPv6\n  id: MapToIPv6\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: MapToIPv6()\n  nameWithType: IPAddress.MapToIPv6()\n  fullName: IPAddress.MapToIPv6()\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Maps the <xref href=\"System.Net.IPAddress\"></xref> object to an IPv6 address.\n  remarks: Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).\n  syntax:\n    content: public System.Net.IPAddress MapToIPv6 ();\n    parameters: []\n    return:\n      type: System.Net.IPAddress\n      description: \"Returns <xref href=\\\"System.Net.IPAddress\\\"></xref>.  \\n  \\n An IPv6 address.\"\n  overload: System.Net.IPAddress.MapToIPv6*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int16)\n  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)\n  id: NetworkToHostOrder(System.Int16)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: NetworkToHostOrder(Int16)\n  nameWithType: IPAddress.NetworkToHostOrder(Int16)\n  fullName: IPAddress.NetworkToHostOrder(Int16)\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Converts a short value from network byte order to host byte order.\n  remarks: \"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \\n  \\n The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.\"\n  example:\n  - \"The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert a short value from network byte order to host byte order.  \\n  \\n [!code-cpp[IPAddress_NetworkToHost#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#1)]\\n [!code-csharp[IPAddress_NetworkToHost#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#1)]\\n [!code-vb[IPAddress_NetworkToHost#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#1)]\"\n  syntax:\n    content: public static short NetworkToHostOrder (short network);\n    parameters:\n    - id: network\n      type: System.Int16\n      description: The number to convert, expressed in network byte order.\n    return:\n      type: System.Int16\n      description: A short value, expressed in host byte order.\n  overload: System.Net.IPAddress.NetworkToHostOrder*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int32)\n  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)\n  id: NetworkToHostOrder(System.Int32)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: NetworkToHostOrder(Int32)\n  nameWithType: IPAddress.NetworkToHostOrder(Int32)\n  fullName: IPAddress.NetworkToHostOrder(Int32)\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Converts an integer value from network byte order to host byte order.\n  remarks: \"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \\n  \\n The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.\"\n  example:\n  - \"The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert an integer value from network byte order to host byte order.  \\n  \\n [!code-cpp[IPAddress_NetworkToHost#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#2)]\\n [!code-csharp[IPAddress_NetworkToHost#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#2)]\\n [!code-vb[IPAddress_NetworkToHost#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#2)]\"\n  syntax:\n    content: public static int NetworkToHostOrder (int network);\n    parameters:\n    - id: network\n      type: System.Int32\n      description: The number to convert, expressed in network byte order.\n    return:\n      type: System.Int32\n      description: An integer value, expressed in host byte order.\n  overload: System.Net.IPAddress.NetworkToHostOrder*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n  id: NetworkToHostOrder(System.Int64)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: NetworkToHostOrder(Int64)\n  nameWithType: IPAddress.NetworkToHostOrder(Int64)\n  fullName: IPAddress.NetworkToHostOrder(Int64)\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Converts a long value from network byte order to host byte order.\n  remarks: \"Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  \\n  \\n The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.\"\n  example:\n  - \"The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert a long value from network byte order to host byte order.  \\n  \\n [!code-cpp[IPAddress_NetworkToHost#3](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#3)]\\n [!code-csharp[IPAddress_NetworkToHost#3](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#3)]\\n [!code-vb[IPAddress_NetworkToHost#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#3)]\"\n  syntax:\n    content: public static long NetworkToHostOrder (long network);\n    parameters:\n    - id: network\n      type: System.Int64\n      description: The number to convert, expressed in network byte order.\n    return:\n      type: System.Int64\n      description: A long value, expressed in host byte order.\n  overload: System.Net.IPAddress.NetworkToHostOrder*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.None\n  commentId: F:System.Net.IPAddress.None\n  id: None\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: None\n  nameWithType: IPAddress.None\n  fullName: IPAddress.None\n  type: Field\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Provides an IP address that indicates that no network interface should be used. This field is read-only.\n  remarks: The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=fullName> method uses the <xref:System.Net.IPAddress.None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity. The <xref:System.Net.IPAddress.None> field is equivalent to 255.255.255.255 in dotted-quad notation.\n  example:\n  - \"The following example uses the <xref:System.Net.IPAddress.None> property to indicate that no network interface should be used.  \\n  \\n [!code-cpp[IPAddress_None#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_None/CPP/ipaddress_none.cpp#1)]\\n [!code-csharp[IPAddress_None#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_None/CS/ipaddress_none.cs#1)]\\n [!code-vb[IPAddress_None#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_None/VB/ipaddress_none.vb#1)]\"\n  syntax:\n    content: public static readonly System.Net.IPAddress None;\n    return:\n      type: System.Net.IPAddress\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.Parse(System.String)\n  commentId: M:System.Net.IPAddress.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: Parse(String)\n  nameWithType: IPAddress.Parse(String)\n  fullName: IPAddress.Parse(String)\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Converts an IP address string to an <xref href=\"System.Net.IPAddress\"></xref> instance.\n  remarks: \"The static <xref:System.Net.IPAddress.Parse%2A> method creates an <xref:System.Net.IPAddress> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.  \\n  \\n The number of parts (each part is separated by a period) in `ipString` determines how the IP address is constructed. A one part address is stored directly in the network address. A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address. A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address. For example:  \\n  \\n|Number of parts and example `ipString`|IPv4 address for IPAddress|  \\n|--------------------------------------------|--------------------------------|  \\n|1 -- \\\"65535\\\"|0.0.255.255|  \\n|2 -- \\\"20.2\\\"|20.0.0.2|  \\n|2 -- \\\"20.65535\\\"|20.0.255.255|  \\n|3 -- \\\"128.1.2\\\"|128.1.0.2|\"\n  example:\n  - \"The following code converts a string that contains an IP address, in dotted-quad notation for IPv4 or in colon-hexadecimal notation for IPv6, into an instance of the <xref:System.Net.IPAddress> class. Then it uses the overloaded <xref:System.Net.IPAddress.ToString%2A> method to display the address in standard notation.  \\n  \\n [!code-cpp[System.Net.IPAddress.Parse#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.Parse/CPP/parse.cpp#1)]\\n [!code-csharp[System.Net.IPAddress.Parse#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.Parse/CS/parse.cs#1)]\\n [!code-vb[System.Net.IPAddress.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.Parse/VB/parse.vb#1)]\"\n  syntax:\n    content: public static System.Net.IPAddress Parse (string ipString);\n    parameters:\n    - id: ipString\n      type: System.String\n      description: A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.\n    return:\n      type: System.Net.IPAddress\n      description: An <xref href=\"System.Net.IPAddress\"></xref> instance.\n  overload: System.Net.IPAddress.Parse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ipString</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>ipString</code> is not a valid IP address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.ScopeId\n  commentId: P:System.Net.IPAddress.ScopeId\n  id: ScopeId\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: ScopeId\n  nameWithType: IPAddress.ScopeId\n  fullName: IPAddress.ScopeId\n  type: Property\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Gets or sets the IPv6 address scope identifier.\n  remarks: \"The meaning of <xref:System.Net.IPAddress.ScopeId%2A> changes depending on the context in which it is used.  \\n  \\n-   Link-local address. On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces. To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.  \\n  \\n> [!NOTE]\\n>  Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.  \\n  \\n-   Site-local addresses. A host can be connected to multiple sites. In this case, a scope identifier is used to indicate a specific site to communicate with.  \\n  \\n> [!NOTE]\\n>  Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.  \\n  \\n The notation that is used to specify the `ScopeId` with an address is `Address%ScopeId`. For example, `FE80::5EFE:192.168.41.30%2.`\"\n  example:\n  - >-\n    [!code-cpp[System.Net.IPAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#3)]\n     [!code-csharp[System.Net.IPAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#3)]\n     [!code-vb[System.Net.IPAddress#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#3)]\n  syntax:\n    content: public long ScopeId { get; set; }\n    return:\n      type: System.Int64\n      description: A long integer that specifies the scope of the address.\n  overload: System.Net.IPAddress.ScopeId*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: '`AddressFamily` = `InterNetwork`.'\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>scopeId</code> < 0  \\n  \\n \\\\- or -  \\n  \\n-   <code>scopeId</code> > 0x00000000FFFFFFFF\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.ToString\n  commentId: M:System.Net.IPAddress.ToString\n  id: ToString\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: IPAddress.ToString()\n  fullName: IPAddress.ToString()\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Converts an Internet address to its standard notation.\n  remarks: The <xref:System.Net.IPAddress.ToString%2A> method converts the IP address that is stored in the <xref:System.Net.IPAddress.Address%2A> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.\n  overload: System.Net.IPAddress.ToString*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: The address family is <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> and the address is bad.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)\n  commentId: M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)\n  id: TryParse(System.String,System.Net.IPAddress@)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  name: TryParse(String, IPAddress)\n  nameWithType: IPAddress.TryParse(String, IPAddress)\n  fullName: IPAddress.TryParse(String, IPAddress)\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Determines whether a string is a valid IP address.\n  remarks: Note that this method accepts as valid an ipString value that can be parsed as an <xref:System.Int64>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <xref:System.Net.IPAddress.%23ctor%2A> constructor does. This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address. For example, if ipString is \"1\", this method returns true even though \"1\" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false. Fixing this bug would break existing apps, so the current behavior will not be changed. Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.\n  syntax:\n    content: public static bool TryParse (string ipString, out System.Net.IPAddress address);\n    parameters:\n    - id: ipString\n      type: System.String\n      description: The string to validate.\n    - id: address\n      type: System.Net.IPAddress\n      description: The <xref href=\"System.Net.IPAddress\"></xref> version of the string.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>ipString</code> was able to be parsed as an IP address; otherwise, `false`.'\n  overload: System.Net.IPAddress.TryParse*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Net.Sockets.SocketException\n  parent: System.Net.Sockets\n  isExternal: false\n  name: SocketException\n  nameWithType: SocketException\n  fullName: System.Net.Sockets.SocketException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  nameWithType: FormatException\n  fullName: System.FormatException\n- uid: System.Net.IPAddress.#ctor(System.Byte[])\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IPAddress(Byte[])\n  nameWithType: IPAddress.IPAddress(Byte[])\n  fullName: IPAddress.IPAddress(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.IPAddress.#ctor(System.Int64)\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IPAddress(Int64)\n  nameWithType: IPAddress.IPAddress(Int64)\n  fullName: IPAddress.IPAddress(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Net.IPAddress.#ctor(System.Byte[],System.Int64)\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IPAddress(Byte[], Int64)\n  nameWithType: IPAddress.IPAddress(Byte[], Int64)\n  fullName: IPAddress.IPAddress(Byte[], Int64)\n- uid: System.Net.IPAddress.Address\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: Address\n  nameWithType: IPAddress.Address\n  fullName: IPAddress.Address\n- uid: System.Net.IPAddress.AddressFamily\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: AddressFamily\n  nameWithType: IPAddress.AddressFamily\n  fullName: IPAddress.AddressFamily\n- uid: System.Net.Sockets.AddressFamily\n  parent: System.Net.Sockets\n  isExternal: false\n  name: AddressFamily\n  nameWithType: AddressFamily\n  fullName: System.Net.Sockets.AddressFamily\n- uid: System.Net.IPAddress.Any\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: Any\n  nameWithType: IPAddress.Any\n  fullName: IPAddress.Any\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  nameWithType: IPAddress\n  fullName: System.Net.IPAddress\n- uid: System.Net.IPAddress.Broadcast\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: Broadcast\n  nameWithType: IPAddress.Broadcast\n  fullName: IPAddress.Broadcast\n- uid: System.Net.IPAddress.Equals(System.Object)\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: IPAddress.Equals(Object)\n  fullName: IPAddress.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.IPAddress.GetAddressBytes\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: GetAddressBytes()\n  nameWithType: IPAddress.GetAddressBytes()\n  fullName: IPAddress.GetAddressBytes()\n- uid: System.Net.IPAddress.GetHashCode\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: IPAddress.GetHashCode()\n  fullName: IPAddress.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int16)\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: HostToNetworkOrder(Int16)\n  nameWithType: IPAddress.HostToNetworkOrder(Int16)\n  fullName: IPAddress.HostToNetworkOrder(Int16)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int32)\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: HostToNetworkOrder(Int32)\n  nameWithType: IPAddress.HostToNetworkOrder(Int32)\n  fullName: IPAddress.HostToNetworkOrder(Int32)\n- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: HostToNetworkOrder(Int64)\n  nameWithType: IPAddress.HostToNetworkOrder(Int64)\n  fullName: IPAddress.HostToNetworkOrder(Int64)\n- uid: System.Net.IPAddress.IPv6Any\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IPv6Any\n  nameWithType: IPAddress.IPv6Any\n  fullName: IPAddress.IPv6Any\n- uid: System.Net.IPAddress.IPv6Loopback\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IPv6Loopback\n  nameWithType: IPAddress.IPv6Loopback\n  fullName: IPAddress.IPv6Loopback\n- uid: System.Net.IPAddress.IPv6None\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IPv6None\n  nameWithType: IPAddress.IPv6None\n  fullName: IPAddress.IPv6None\n- uid: System.Net.IPAddress.IsIPv4MappedToIPv6\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IsIPv4MappedToIPv6\n  nameWithType: IPAddress.IsIPv4MappedToIPv6\n  fullName: IPAddress.IsIPv4MappedToIPv6\n- uid: System.Net.IPAddress.IsIPv6LinkLocal\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IsIPv6LinkLocal\n  nameWithType: IPAddress.IsIPv6LinkLocal\n  fullName: IPAddress.IsIPv6LinkLocal\n- uid: System.Net.IPAddress.IsIPv6Multicast\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IsIPv6Multicast\n  nameWithType: IPAddress.IsIPv6Multicast\n  fullName: IPAddress.IsIPv6Multicast\n- uid: System.Net.IPAddress.IsIPv6SiteLocal\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IsIPv6SiteLocal\n  nameWithType: IPAddress.IsIPv6SiteLocal\n  fullName: IPAddress.IsIPv6SiteLocal\n- uid: System.Net.IPAddress.IsIPv6Teredo\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IsIPv6Teredo\n  nameWithType: IPAddress.IsIPv6Teredo\n  fullName: IPAddress.IsIPv6Teredo\n- uid: System.Net.IPAddress.IsLoopback(System.Net.IPAddress)\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IsLoopback(IPAddress)\n  nameWithType: IPAddress.IsLoopback(IPAddress)\n  fullName: IPAddress.IsLoopback(IPAddress)\n- uid: System.Net.IPAddress.Loopback\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: Loopback\n  nameWithType: IPAddress.Loopback\n  fullName: IPAddress.Loopback\n- uid: System.Net.IPAddress.MapToIPv4\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: MapToIPv4()\n  nameWithType: IPAddress.MapToIPv4()\n  fullName: IPAddress.MapToIPv4()\n- uid: System.Net.IPAddress.MapToIPv6\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: MapToIPv6()\n  nameWithType: IPAddress.MapToIPv6()\n  fullName: IPAddress.MapToIPv6()\n- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int16)\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: NetworkToHostOrder(Int16)\n  nameWithType: IPAddress.NetworkToHostOrder(Int16)\n  fullName: IPAddress.NetworkToHostOrder(Int16)\n- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int32)\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: NetworkToHostOrder(Int32)\n  nameWithType: IPAddress.NetworkToHostOrder(Int32)\n  fullName: IPAddress.NetworkToHostOrder(Int32)\n- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: NetworkToHostOrder(Int64)\n  nameWithType: IPAddress.NetworkToHostOrder(Int64)\n  fullName: IPAddress.NetworkToHostOrder(Int64)\n- uid: System.Net.IPAddress.None\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: None\n  nameWithType: IPAddress.None\n  fullName: IPAddress.None\n- uid: System.Net.IPAddress.Parse(System.String)\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: Parse(String)\n  nameWithType: IPAddress.Parse(String)\n  fullName: IPAddress.Parse(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.IPAddress.ScopeId\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: ScopeId\n  nameWithType: IPAddress.ScopeId\n  fullName: IPAddress.ScopeId\n- uid: System.Net.IPAddress.ToString\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: ToString()\n  nameWithType: IPAddress.ToString()\n  fullName: IPAddress.ToString()\n- uid: System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: TryParse(String, IPAddress)\n  nameWithType: IPAddress.TryParse(String, IPAddress)\n  fullName: IPAddress.TryParse(String, IPAddress)\n- uid: System.Net.IPAddress.#ctor*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IPAddress\n  nameWithType: IPAddress.IPAddress\n  fullName: IPAddress.IPAddress\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.Address*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: Address\n  nameWithType: IPAddress.Address\n  fullName: IPAddress.Address\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.AddressFamily*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: AddressFamily\n  nameWithType: IPAddress.AddressFamily\n  fullName: IPAddress.AddressFamily\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.Equals*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: Equals\n  nameWithType: IPAddress.Equals\n  fullName: IPAddress.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.GetAddressBytes*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: GetAddressBytes\n  nameWithType: IPAddress.GetAddressBytes\n  fullName: IPAddress.GetAddressBytes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.GetHashCode*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: GetHashCode\n  nameWithType: IPAddress.GetHashCode\n  fullName: IPAddress.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.HostToNetworkOrder*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: HostToNetworkOrder\n  nameWithType: IPAddress.HostToNetworkOrder\n  fullName: IPAddress.HostToNetworkOrder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.IsIPv4MappedToIPv6*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IsIPv4MappedToIPv6\n  nameWithType: IPAddress.IsIPv4MappedToIPv6\n  fullName: IPAddress.IsIPv4MappedToIPv6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.IsIPv6LinkLocal*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IsIPv6LinkLocal\n  nameWithType: IPAddress.IsIPv6LinkLocal\n  fullName: IPAddress.IsIPv6LinkLocal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.IsIPv6Multicast*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IsIPv6Multicast\n  nameWithType: IPAddress.IsIPv6Multicast\n  fullName: IPAddress.IsIPv6Multicast\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.IsIPv6SiteLocal*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IsIPv6SiteLocal\n  nameWithType: IPAddress.IsIPv6SiteLocal\n  fullName: IPAddress.IsIPv6SiteLocal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.IsIPv6Teredo*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IsIPv6Teredo\n  nameWithType: IPAddress.IsIPv6Teredo\n  fullName: IPAddress.IsIPv6Teredo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.IsLoopback*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: IsLoopback\n  nameWithType: IPAddress.IsLoopback\n  fullName: IPAddress.IsLoopback\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.MapToIPv4*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: MapToIPv4\n  nameWithType: IPAddress.MapToIPv4\n  fullName: IPAddress.MapToIPv4\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.MapToIPv6*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: MapToIPv6\n  nameWithType: IPAddress.MapToIPv6\n  fullName: IPAddress.MapToIPv6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.NetworkToHostOrder*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: NetworkToHostOrder\n  nameWithType: IPAddress.NetworkToHostOrder\n  fullName: IPAddress.NetworkToHostOrder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.Parse*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: Parse\n  nameWithType: IPAddress.Parse\n  fullName: IPAddress.Parse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.ScopeId*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: ScopeId\n  nameWithType: IPAddress.ScopeId\n  fullName: IPAddress.ScopeId\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.ToString*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: ToString\n  nameWithType: IPAddress.ToString\n  fullName: IPAddress.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Net.IPAddress.TryParse*\n  parent: System.Net.IPAddress\n  isExternal: false\n  name: TryParse\n  nameWithType: IPAddress.TryParse\n  fullName: IPAddress.TryParse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/IPAddress.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n"}