### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Channels.IContextManager
  commentId: T:System.ServiceModel.Channels.IContextManager
  id: IContextManager
  children:
  - System.ServiceModel.Channels.IContextManager.Enabled
  - System.ServiceModel.Channels.IContextManager.GetContext
  - System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})
  langs:
  - csharp
  name: IContextManager
  nameWithType: IContextManager
  fullName: System.ServiceModel.Channels.IContextManager
  type: Interface
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Defines an interface that allows you to get and set the context on the channel.
  remarks: "For channels that use <xref:System.ServiceModel.WSHttpContextBinding> with the <xref:System.ServiceModel.SessionMode.NotAllowed> value set, the context cannot be retrieved on the client using <xref:System.ServiceModel.Channels.IContextManager> because a new channel that establishes a session is created each time <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> is called to enforce <xref:System.ServiceModel.SessionMode.NotAllowed> semantics on a channel. This means that even though the context is properly propagated back to the client in this case, it cannot be retrieved using <xref:System.ServiceModel.Channels.IContextManager>. You can still retrieve it using <xref:System.ServiceModel.Channels.ContextMessageProperty> as shown in the following code.  \n  \n```csharp  \nusing (new OperationContextScope((IContextChannel)channel))  \n{  \n    channel.MyChannel(\"Test\");  \n    ContextMessageProperty context;  \n    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  \n    {  \n        Console.WriteLine(context.Count);  \n    }  \n}  \n  \n```"
  syntax:
    content: public interface IContextManager
  implements: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IContextManager.Enabled
  commentId: P:System.ServiceModel.Channels.IContextManager.Enabled
  id: Enabled
  parent: System.ServiceModel.Channels.IContextManager
  langs:
  - csharp
  name: Enabled
  nameWithType: IContextManager.Enabled
  fullName: IContextManager.Enabled
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Gets or sets a value that indicates whether the context management is enabled.
  remarks: "When context management is enabled the context channel caches the context in its lifetime. Context can be retrieved from the channel through the `IContextManager` channel property by calling <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> method on it. The channel can also be pre-initialized with context before being opened by calling the <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> method on the channel property. Once the channel is initialized with context it cannot be reset.  \n  \n The following are invariants in this mode:  \n  \n-   Any call to <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> after the channel is open throws an `InvalidOperationException`.  \n  \n-   Any attempt to send context through the `ContextMessageProperty` in an outgoing message throws `InvalidOperationException`.  \n  \n-   If a message is received from the server with context, when the channel is already initialized with a context a `ProtocolException` is thrown. Note that you can receive initial context from a server if the channel is opened without explicitly setting the context.  \n  \n-   The `ContextMessageProperty` on an incoming message is always `null`.  \n  \n When context management is not enabled, the context channel does not manage context. It is the application's responsibility to retrieve, manage and apply context through the `ContextMessageProperty`. Any attempt to call <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> or <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> using through the `IContextManager` channel property results in `InvalidOperationException`.  \n  \n All HTTP cookies, except for context HTTP cookies, are handled at the channel level. Context HTTP cookies are managed at the application level. This can have unexpected consequences when channels are shared to talk to different instances targeted by <xref:System.ServiceModel.Channels.ContextMessageProperty>. The following table shows how HTTP cookies are affected when <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> is set to either `true` or `false`.  \n  \n|Binding|IContextManager.Enabled Value|Context HTTP Cookie Scope|Other HTTP Cookies Scope|  \n|-------------|-----------------------------------|-------------------------------|------------------------------|  \n|BasicHttpBinding|n/a|ChannelFactory|ChannelFactory|  \n|BasicHttpContextBinding|true|Channel|Channel|  \n|BasicHttpContextBinding|false|For each message (explicitly managed by application)|Channel|"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the context is enabled; otherwise, `false`.'
  overload: System.ServiceModel.Channels.IContextManager.Enabled*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IContextManager.GetContext
  commentId: M:System.ServiceModel.Channels.IContextManager.GetContext
  id: GetContext
  parent: System.ServiceModel.Channels.IContextManager
  langs:
  - csharp
  name: GetContext()
  nameWithType: IContextManager.GetContext()
  fullName: IContextManager.GetContext()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Gets the context.
  remarks: ''
  example:
  - "The following code shows how the context can be obtained from a typed proxy instance on the client.  \n  \n```  \nIDictionary<string, string> context;  \nCalculatorProxy proxy;  \nIContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  \nif (cm != null)  \n    context = cm.GetContext();  \n```"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> GetContext ();
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The <xref href="System.Collections.Generic.IDictionary`2"></xref> of key/value pairs with the namespace and name of the context.
  overload: System.ServiceModel.Channels.IContextManager.GetContext*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})
  id: SetContext(System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.ServiceModel.Channels.IContextManager
  langs:
  - csharp
  name: SetContext(IDictionary<String,String>)
  nameWithType: IContextManager.SetContext(IDictionary<String,String>)
  fullName: IContextManager.SetContext(IDictionary<String,String>)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Sets the context.
  remarks: ''
  example:
  - "The following code shows how the context can be set on the client.  \n  \n```  \nIDictionary<string, string> context;  \nCalculatorProxy proxy;  \nIContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  \nif (cm != null)  \n    cm.SetContext(context);  \n```"
  syntax:
    content: public void SetContext (System.Collections.Generic.IDictionary<string,string> context);
    parameters:
    - id: context
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The <xref href="System.Collections.Generic.IDictionary`2"></xref> of key/value pairs with the namespace and name of the context that is set.
  overload: System.ServiceModel.Channels.IContextManager.SetContext*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
references:
- uid: System.ServiceModel.Channels.IContextManager.Enabled
  parent: System.ServiceModel.Channels.IContextManager
  isExternal: false
  name: Enabled
  nameWithType: IContextManager.Enabled
  fullName: IContextManager.Enabled
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Channels.IContextManager.GetContext
  parent: System.ServiceModel.Channels.IContextManager
  isExternal: false
  name: GetContext()
  nameWithType: IContextManager.GetContext()
  fullName: IContextManager.GetContext()
- uid: System.Collections.Generic.IDictionary`2
  name: IDictionary<TKey,TValue>
  nameWithType: IDictionary<TKey,TValue>
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>
- uid: System.String
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: false
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.ServiceModel.Channels.IContextManager
  isExternal: false
  name: SetContext(IDictionary<String,String>)
  nameWithType: IContextManager.SetContext(IDictionary<String,String>)
  fullName: IContextManager.SetContext(IDictionary<String,String>)
- uid: System.ServiceModel.Channels.IContextManager.Enabled*
  parent: System.ServiceModel.Channels.IContextManager
  isExternal: false
  name: Enabled
  nameWithType: IContextManager.Enabled
  fullName: IContextManager.Enabled
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml
- uid: System.ServiceModel.Channels.IContextManager.GetContext*
  parent: System.ServiceModel.Channels.IContextManager
  isExternal: false
  name: GetContext
  nameWithType: IContextManager.GetContext
  fullName: IContextManager.GetContext
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml
- uid: System.ServiceModel.Channels.IContextManager.SetContext*
  parent: System.ServiceModel.Channels.IContextManager
  isExternal: false
  name: SetContext
  nameWithType: IContextManager.SetContext
  fullName: IContextManager.SetContext
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml
