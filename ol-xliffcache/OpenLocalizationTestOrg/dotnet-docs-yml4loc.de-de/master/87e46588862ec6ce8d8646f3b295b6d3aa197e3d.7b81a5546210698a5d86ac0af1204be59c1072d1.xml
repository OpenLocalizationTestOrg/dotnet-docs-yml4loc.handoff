{"nodes":[{"content":"Acts as a base class for deriving custom settings providers in the application settings architecture.","nodes":[{"pos":[0,101],"content":"Acts as a base class for deriving custom settings providers in the application settings architecture.","nodes":[{"content":"Acts as a base class for deriving custom settings providers in the application settings architecture.","pos":[0,101]}]}],"pos":[830,932],"yaml":true},{"content":"A settings provider defines the mechanism for storing configuration data used in the application settings architecture. The .NET Framework contains a single default settings provider, <xref:System.Configuration.LocalFileSettingsProvider>, which stores configuration data to the local file system. However, you can create alternate storage mechanisms by deriving from the abstract <xref:System.Configuration.SettingsProvider> class. The provider that a wrapper class uses is determined by decorating the wrapper class with the <xref:System.Configuration.SettingsProviderAttribute>. If this attribute is not provided, the default, <xref:System.Configuration.LocalFileSettingsProvider>, is used.  \n  \n When you create a custom settings provider, at minimum, you must provide implementations for the three methods of this class: <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A>, <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> and <xref:System.Configuration.SettingsProvider.ApplicationName%2A>.  \n  \n For client applications, you can add more standardized functionality to a custom provider by also implementing the <xref:System.Configuration.IApplicationSettingsProvider> interface. This interface mirrors methods found in the <xref:System.Configuration.ApplicationSettingsBase> class, which mainly enables versioning support.  \n  \n Typically, you should design settings providers to be single-instanced to avoid storage resource contention. Providers should also be thread-safe because they can be called simultaneously from multiple wrapper instances in a single application domain or from multiple applications in different domains.  \n  \n At minimum, a settings provider must recognize three attributesâ€”<xref:System.Configuration.ApplicationScopedSettingAttribute>, <xref:System.Configuration.UserScopedSettingAttribute>, and <xref:System.Configuration.DefaultSettingValueAttribute>. For a full listing of attributes that can be applied to application settings, see [Application Settings Attributes](~/docs/framework/winforms/advanced/application-settings-attributes.md). A custom setting provider should resolve attributes applied to settings properties in the following manner:  \n  \n1.  If the provider can fulfill the request implied by the attribute, obviously it should do so.  \n  \n2.  If the provider cannot fulfill the request, it should ignore it silently.  \n  \n3.  If two or more properties conflict; for example, a property being decorated with both <xref:System.Configuration.ApplicationScopedSettingAttribute> and <xref:System.Configuration.UserScopedSettingAttribute>; the provider should throw a <xref:System.Configuration.ConfigurationException>.","nodes":[{"pos":[0,692],"content":"A settings provider defines the mechanism for storing configuration data used in the application settings architecture. The .NET Framework contains a single default settings provider, <xref:System.Configuration.LocalFileSettingsProvider>, which stores configuration data to the local file system. However, you can create alternate storage mechanisms by deriving from the abstract <xref:System.Configuration.SettingsProvider> class. The provider that a wrapper class uses is determined by decorating the wrapper class with the <xref:System.Configuration.SettingsProviderAttribute>. If this attribute is not provided, the default, <xref:System.Configuration.LocalFileSettingsProvider>, is used.","nodes":[{"content":"A settings provider defines the mechanism for storing configuration data used in the application settings architecture. The .NET Framework contains a single default settings provider, <xref:System.Configuration.LocalFileSettingsProvider>, which stores configuration data to the local file system. However, you can create alternate storage mechanisms by deriving from the abstract <xref:System.Configuration.SettingsProvider> class. The provider that a wrapper class uses is determined by decorating the wrapper class with the <xref:System.Configuration.SettingsProviderAttribute>. If this attribute is not provided, the default, <xref:System.Configuration.LocalFileSettingsProvider>, is used.","pos":[0,692],"nodes":[{"content":"A settings provider defines the mechanism for storing configuration data used in the application settings architecture.","pos":[0,119]},{"content":"The .NET Framework contains a single default settings provider, <ph id=\"ph1\">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph>, which stores configuration data to the local file system.","pos":[120,296],"source":" The .NET Framework contains a single default settings provider, <xref:System.Configuration.LocalFileSettingsProvider>, which stores configuration data to the local file system."},{"content":"However, you can create alternate storage mechanisms by deriving from the abstract <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProvider&gt;</ph> class.","pos":[297,431],"source":" However, you can create alternate storage mechanisms by deriving from the abstract <xref:System.Configuration.SettingsProvider> class."},{"content":"The provider that a wrapper class uses is determined by decorating the wrapper class with the <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;</ph>.","pos":[432,580],"source":" The provider that a wrapper class uses is determined by decorating the wrapper class with the <xref:System.Configuration.SettingsProviderAttribute>."},{"content":"If this attribute is not provided, the default, <ph id=\"ph1\">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph>, is used.","pos":[581,692],"source":" If this attribute is not provided, the default, <xref:System.Configuration.LocalFileSettingsProvider>, is used."}]}]},{"pos":[699,1026],"content":"When you create a custom settings provider, at minimum, you must provide implementations for the three methods of this class: <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A>, <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> and <xref:System.Configuration.SettingsProvider.ApplicationName%2A>.","nodes":[{"content":"When you create a custom settings provider, at minimum, you must provide implementations for the three methods of this class: <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProvider.GetPropertyValues%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Configuration.SettingsProvider.SetPropertyValues%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Configuration.SettingsProvider.ApplicationName%2A&gt;</ph>.","pos":[0,327],"source":"When you create a custom settings provider, at minimum, you must provide implementations for the three methods of this class: <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A>, <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> and <xref:System.Configuration.SettingsProvider.ApplicationName%2A>."}]},{"pos":[1033,1359],"content":"For client applications, you can add more standardized functionality to a custom provider by also implementing the <xref:System.Configuration.IApplicationSettingsProvider> interface. This interface mirrors methods found in the <xref:System.Configuration.ApplicationSettingsBase> class, which mainly enables versioning support.","nodes":[{"content":"For client applications, you can add more standardized functionality to a custom provider by also implementing the <xref:System.Configuration.IApplicationSettingsProvider> interface. This interface mirrors methods found in the <xref:System.Configuration.ApplicationSettingsBase> class, which mainly enables versioning support.","pos":[0,326],"nodes":[{"content":"For client applications, you can add more standardized functionality to a custom provider by also implementing the <ph id=\"ph1\">&lt;xref:System.Configuration.IApplicationSettingsProvider&gt;</ph> interface.","pos":[0,182],"source":"For client applications, you can add more standardized functionality to a custom provider by also implementing the <xref:System.Configuration.IApplicationSettingsProvider> interface."},{"content":"This interface mirrors methods found in the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> class, which mainly enables versioning support.","pos":[183,326],"source":" This interface mirrors methods found in the <xref:System.Configuration.ApplicationSettingsBase> class, which mainly enables versioning support."}]}]},{"pos":[1366,1668],"content":"Typically, you should design settings providers to be single-instanced to avoid storage resource contention. Providers should also be thread-safe because they can be called simultaneously from multiple wrapper instances in a single application domain or from multiple applications in different domains.","nodes":[{"content":"Typically, you should design settings providers to be single-instanced to avoid storage resource contention. Providers should also be thread-safe because they can be called simultaneously from multiple wrapper instances in a single application domain or from multiple applications in different domains.","pos":[0,302],"nodes":[{"content":"Typically, you should design settings providers to be single-instanced to avoid storage resource contention.","pos":[0,108]},{"content":"Providers should also be thread-safe because they can be called simultaneously from multiple wrapper instances in a single application domain or from multiple applications in different domains.","pos":[109,302]}]}]},{"pos":[1675,2215],"content":"At minimum, a settings provider must recognize three attributesâ€”<xref:System.Configuration.ApplicationScopedSettingAttribute>, <xref:System.Configuration.UserScopedSettingAttribute>, and <xref:System.Configuration.DefaultSettingValueAttribute>. For a full listing of attributes that can be applied to application settings, see [Application Settings Attributes](~/docs/framework/winforms/advanced/application-settings-attributes.md). A custom setting provider should resolve attributes applied to settings properties in the following manner:","nodes":[{"content":"At minimum, a settings provider must recognize three attributesâ€”<ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationScopedSettingAttribute&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Configuration.UserScopedSettingAttribute&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Configuration.DefaultSettingValueAttribute&gt;</ph>.","pos":[0,244],"source":"At minimum, a settings provider must recognize three attributesâ€”<xref:System.Configuration.ApplicationScopedSettingAttribute>, <xref:System.Configuration.UserScopedSettingAttribute>, and <xref:System.Configuration.DefaultSettingValueAttribute>."},{"content":"For a full listing of attributes that can be applied to application settings, see <bpt id=\"p1\">[</bpt>Application Settings Attributes<ept id=\"p1\">](~/docs/framework/winforms/advanced/application-settings-attributes.md)</ept>.","pos":[245,432],"source":" For a full listing of attributes that can be applied to application settings, see [Application Settings Attributes](~/docs/framework/winforms/advanced/application-settings-attributes.md)."},{"content":"A custom setting provider should resolve attributes applied to settings properties in the following manner:","pos":[433,540]}]},{"pos":[2225,2317],"content":"If the provider can fulfill the request implied by the attribute, obviously it should do so.","nodes":[{"content":"If the provider can fulfill the request implied by the attribute, obviously it should do so.","pos":[0,92]}]},{"pos":[2327,2400],"content":"If the provider cannot fulfill the request, it should ignore it silently.","nodes":[{"content":"If the provider cannot fulfill the request, it should ignore it silently.","pos":[0,73]}]},{"pos":[2410,2697],"content":"If two or more properties conflict; for example, a property being decorated with both <xref:System.Configuration.ApplicationScopedSettingAttribute> and <xref:System.Configuration.UserScopedSettingAttribute>; the provider should throw a <xref:System.Configuration.ConfigurationException>.","nodes":[{"content":"If two or more properties conflict; for example, a property being decorated with both <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationScopedSettingAttribute&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Configuration.UserScopedSettingAttribute&gt;</ph>; the provider should throw a <ph id=\"ph3\">&lt;xref:System.Configuration.ConfigurationException&gt;</ph>.","pos":[0,287],"source":"If two or more properties conflict; for example, a property being decorated with both <xref:System.Configuration.ApplicationScopedSettingAttribute> and <xref:System.Configuration.UserScopedSettingAttribute>; the provider should throw a <xref:System.Configuration.ConfigurationException>."}]}],"pos":[943,3657],"yaml":true,"extradata":"MT"},{"content":"Initializes an instance of the <xref href=\"System.Configuration.SettingsProvider\"></xref> class.","nodes":[{"pos":[0,96],"content":"Initializes an instance of the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsProvider\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes an instance of the <xref href=\"System.Configuration.SettingsProvider\"></xref> class."}],"pos":[5625,5722],"yaml":true},{"content":"This is this default protected constructor for this abstract class. Derived custom settings providers are not required to provide an explicit constructor because the <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> method typically performs all initialization.  \n  \n Client code typically does not directly instantiate a settings provider; instead, you use the following procedure to find a settings provider for a particular settings property:  \n  \n1.  Call the <xref:System.ComponentModel.Component.GetService%2A> method on the current <xref:System.ComponentModel.Component> or <xref:System.ComponentModel.ISite> to return a reference to the current <xref:System.Configuration.ISettingsProviderService>.  \n  \n2.  Call the <xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A> method of the <xref:System.Configuration.ISettingsProviderService> retrieved in the first step to return the settings provider.","nodes":[{"pos":[0,275],"content":"This is this default protected constructor for this abstract class. Derived custom settings providers are not required to provide an explicit constructor because the <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> method typically performs all initialization.","nodes":[{"content":"This is this default protected constructor for this abstract class. Derived custom settings providers are not required to provide an explicit constructor because the <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> method typically performs all initialization.","pos":[0,275],"nodes":[{"content":"This is this default protected constructor for this abstract class.","pos":[0,67]},{"content":"Derived custom settings providers are not required to provide an explicit constructor because the <ph id=\"ph1\">&lt;xref:System.Configuration.Provider.ProviderBase.Initialize%2A&gt;</ph> method typically performs all initialization.","pos":[68,275],"source":" Derived custom settings providers are not required to provide an explicit constructor because the <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> method typically performs all initialization."}]}]},{"pos":[282,459],"content":"Client code typically does not directly instantiate a settings provider; instead, you use the following procedure to find a settings provider for a particular settings property:","nodes":[{"content":"Client code typically does not directly instantiate a settings provider; instead, you use the following procedure to find a settings provider for a particular settings property:","pos":[0,177]}]},{"pos":[469,720],"content":"Call the <xref:System.ComponentModel.Component.GetService%2A> method on the current <xref:System.ComponentModel.Component> or <xref:System.ComponentModel.ISite> to return a reference to the current <xref:System.Configuration.ISettingsProviderService>.","nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.GetService%2A&gt;</ph> method on the current <ph id=\"ph2\">&lt;xref:System.ComponentModel.Component&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.ComponentModel.ISite&gt;</ph> to return a reference to the current <ph id=\"ph4\">&lt;xref:System.Configuration.ISettingsProviderService&gt;</ph>.","pos":[0,251],"source":"Call the <xref:System.ComponentModel.Component.GetService%2A> method on the current <xref:System.ComponentModel.Component> or <xref:System.ComponentModel.ISite> to return a reference to the current <xref:System.Configuration.ISettingsProviderService>."}]},{"pos":[730,942],"content":"Call the <xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A> method of the <xref:System.Configuration.ISettingsProviderService> retrieved in the first step to return the settings provider.","nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Configuration.ISettingsProviderService&gt;</ph> retrieved in the first step to return the settings provider.","pos":[0,212],"source":"Call the <xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A> method of the <xref:System.Configuration.ISettingsProviderService> retrieved in the first step to return the settings provider."}]}],"pos":[5733,6684],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the name of the currently running application.","nodes":[{"pos":[0,59],"content":"Gets or sets the name of the currently running application.","nodes":[{"content":"Gets or sets the name of the currently running application.","pos":[0,59]}]}],"pos":[7909,7969],"yaml":true},{"content":"The <xref:System.Configuration.SettingsProvider.ApplicationName%2A> and <xref:System.Configuration.Provider.ProviderBase.Name%2A> properties help to disambiguate similarly named setting properties in different applications.","nodes":[{"pos":[0,223],"content":"The <xref:System.Configuration.SettingsProvider.ApplicationName%2A> and <xref:System.Configuration.Provider.ProviderBase.Name%2A> properties help to disambiguate similarly named setting properties in different applications.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProvider.ApplicationName%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Configuration.Provider.ProviderBase.Name%2A&gt;</ph> properties help to disambiguate similarly named setting properties in different applications.","pos":[0,223],"source":"The <xref:System.Configuration.SettingsProvider.ApplicationName%2A> and <xref:System.Configuration.Provider.ProviderBase.Name%2A> properties help to disambiguate similarly named setting properties in different applications."}]}],"pos":[7980,8204],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains the application's shortened name, which does not contain a full path or extension, for example, <code>SimpleAppSettings</code>.","nodes":[{"pos":[0,178],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the application's shortened name, which does not contain a full path or extension, for example, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">SimpleAppSettings</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.String\"></xref> that contains the application's shortened name, which does not contain a full path or extension, for example, <code>SimpleAppSettings</code>."}],"pos":[8337,8516],"yaml":true},{"content":"Returns the collection of settings property values for the specified application instance and settings property group.","nodes":[{"pos":[0,118],"content":"Returns the collection of settings property values for the specified application instance and settings property group.","nodes":[{"content":"Returns the collection of settings property values for the specified application instance and settings property group.","pos":[0,118]}]}],"pos":[10081,10200],"yaml":true},{"content":"The <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A> method must be implemented to handle special settings, those marked with <xref:System.Configuration.SpecialSettingAttribute>, as well as reconcile application and user settings.","nodes":[{"pos":[0,247],"content":"The <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A> method must be implemented to handle special settings, those marked with <xref:System.Configuration.SpecialSettingAttribute>, as well as reconcile application and user settings.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProvider.GetPropertyValues%2A&gt;</ph> method must be implemented to handle special settings, those marked with <ph id=\"ph2\">&lt;xref:System.Configuration.SpecialSettingAttribute&gt;</ph>, as well as reconcile application and user settings.","pos":[0,247],"source":"The <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A> method must be implemented to handle special settings, those marked with <xref:System.Configuration.SpecialSettingAttribute>, as well as reconcile application and user settings."}]}],"pos":[10211,10459],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application use.","nodes":[{"pos":[0,99],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsContext\"&gt;&lt;/xref&gt;</ph> describing the current application use.","source":"A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application use."}],"pos":[10779,10879],"yaml":true},{"content":"A <xref href=\"System.Configuration.SettingsPropertyCollection\"></xref> containing the settings property group whose values are to be retrieved.","nodes":[{"pos":[0,143],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsPropertyCollection\"&gt;&lt;/xref&gt;</ph> containing the settings property group whose values are to be retrieved.","source":"A <xref href=\"System.Configuration.SettingsPropertyCollection\"></xref> containing the settings property group whose values are to be retrieved."}],"pos":[10979,11123],"yaml":true},{"content":"A <xref href=\"System.Configuration.SettingsPropertyValueCollection\"></xref> containing the values for the specified settings property group.","nodes":[{"pos":[0,140],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsPropertyValueCollection\"&gt;&lt;/xref&gt;</ph> containing the values for the specified settings property group.","source":"A <xref href=\"System.Configuration.SettingsPropertyValueCollection\"></xref> containing the values for the specified settings property group."}],"pos":[11219,11360],"yaml":true},{"content":"Sets the values of the specified group of property settings.","nodes":[{"pos":[0,60],"content":"Sets the values of the specified group of property settings.","nodes":[{"content":"Sets the values of the specified group of property settings.","pos":[0,60]}]}],"pos":[12957,13018],"yaml":true},{"content":"<xref:System.Configuration.ApplicationSettingsBase> contains the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method, which is called to persist the values of all of its settings properties. This method enumerates through all the settings providers associated with its settings properties, and calls the <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method for each <xref:System.Configuration.SettingsProvider> to perform the actual serialization operation.  \n  \n The <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method should be implemented with security in mind:  \n  \n-   Only fully trusted code should be allowed to update application settings. Partially trusted code should be allowed to update only user application settings. Untrusted code is not typically allowed to update application settings.  \n  \n-   Usage quotas should be considered to guard against resource attacks by partially trusted applications.","nodes":[{"pos":[0,492],"content":"<xref:System.Configuration.ApplicationSettingsBase> contains the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method, which is called to persist the values of all of its settings properties. This method enumerates through all the settings providers associated with its settings properties, and calls the <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method for each <xref:System.Configuration.SettingsProvider> to perform the actual serialization operation.","nodes":[{"content":"<xref:System.Configuration.ApplicationSettingsBase> contains the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method, which is called to persist the values of all of its settings properties. This method enumerates through all the settings providers associated with its settings properties, and calls the <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method for each <xref:System.Configuration.SettingsProvider> to perform the actual serialization operation.","pos":[0,492],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> contains the <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;</ph> method, which is called to persist the values of all of its settings properties.","pos":[0,205],"source":"<xref:System.Configuration.ApplicationSettingsBase> contains the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method, which is called to persist the values of all of its settings properties."},{"content":"This method enumerates through all the settings providers associated with its settings properties, and calls the <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProvider.SetPropertyValues%2A&gt;</ph> method for each <ph id=\"ph2\">&lt;xref:System.Configuration.SettingsProvider&gt;</ph> to perform the actual serialization operation.","pos":[206,492],"source":" This method enumerates through all the settings providers associated with its settings properties, and calls the <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method for each <xref:System.Configuration.SettingsProvider> to perform the actual serialization operation."}]}]},{"pos":[499,620],"content":"The <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method should be implemented with security in mind:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProvider.SetPropertyValues%2A&gt;</ph> method should be implemented with security in mind:","pos":[0,121],"source":"The <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method should be implemented with security in mind:"}]},{"pos":[630,858],"content":"Only fully trusted code should be allowed to update application settings. Partially trusted code should be allowed to update only user application settings. Untrusted code is not typically allowed to update application settings.","nodes":[{"content":"Only fully trusted code should be allowed to update application settings. Partially trusted code should be allowed to update only user application settings. Untrusted code is not typically allowed to update application settings.","pos":[0,228],"nodes":[{"content":"Only fully trusted code should be allowed to update application settings.","pos":[0,73]},{"content":"Partially trusted code should be allowed to update only user application settings.","pos":[74,156]},{"content":"Untrusted code is not typically allowed to update application settings.","pos":[157,228]}]}]},{"pos":[868,970],"content":"Usage quotas should be considered to guard against resource attacks by partially trusted applications.","nodes":[{"content":"Usage quotas should be considered to guard against resource attacks by partially trusted applications.","pos":[0,102]}]}],"pos":[13029,14008],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application usage.","nodes":[{"pos":[0,101],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsContext\"&gt;&lt;/xref&gt;</ph> describing the current application usage.","source":"A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application usage."}],"pos":[14285,14387],"yaml":true},{"content":"A <xref href=\"System.Configuration.SettingsPropertyValueCollection\"></xref> representing the group of property settings to set.","nodes":[{"pos":[0,127],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsPropertyValueCollection\"&gt;&lt;/xref&gt;</ph> representing the group of property settings to set.","source":"A <xref href=\"System.Configuration.SettingsPropertyValueCollection\"></xref> representing the group of property settings to set."}],"pos":[14492,14620],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.SettingsProvider\n  commentId: T:System.Configuration.SettingsProvider\n  id: SettingsProvider\n  children:\n  - System.Configuration.SettingsProvider.#ctor\n  - System.Configuration.SettingsProvider.ApplicationName\n  - System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)\n  - System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)\n  langs:\n  - csharp\n  name: SettingsProvider\n  nameWithType: SettingsProvider\n  fullName: System.Configuration.SettingsProvider\n  type: Class\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Acts as a base class for deriving custom settings providers in the application settings architecture.\n  remarks: \"A settings provider defines the mechanism for storing configuration data used in the application settings architecture. The .NET Framework contains a single default settings provider, <xref:System.Configuration.LocalFileSettingsProvider>, which stores configuration data to the local file system. However, you can create alternate storage mechanisms by deriving from the abstract <xref:System.Configuration.SettingsProvider> class. The provider that a wrapper class uses is determined by decorating the wrapper class with the <xref:System.Configuration.SettingsProviderAttribute>. If this attribute is not provided, the default, <xref:System.Configuration.LocalFileSettingsProvider>, is used.  \\n  \\n When you create a custom settings provider, at minimum, you must provide implementations for the three methods of this class: <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A>, <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> and <xref:System.Configuration.SettingsProvider.ApplicationName%2A>.  \\n  \\n For client applications, you can add more standardized functionality to a custom provider by also implementing the <xref:System.Configuration.IApplicationSettingsProvider> interface. This interface mirrors methods found in the <xref:System.Configuration.ApplicationSettingsBase> class, which mainly enables versioning support.  \\n  \\n Typically, you should design settings providers to be single-instanced to avoid storage resource contention. Providers should also be thread-safe because they can be called simultaneously from multiple wrapper instances in a single application domain or from multiple applications in different domains.  \\n  \\n At minimum, a settings provider must recognize three attributesâ€”<xref:System.Configuration.ApplicationScopedSettingAttribute>, <xref:System.Configuration.UserScopedSettingAttribute>, and <xref:System.Configuration.DefaultSettingValueAttribute>. For a full listing of attributes that can be applied to application settings, see [Application Settings Attributes](~/docs/framework/winforms/advanced/application-settings-attributes.md). A custom setting provider should resolve attributes applied to settings properties in the following manner:  \\n  \\n1.  If the provider can fulfill the request implied by the attribute, obviously it should do so.  \\n  \\n2.  If the provider cannot fulfill the request, it should ignore it silently.  \\n  \\n3.  If two or more properties conflict; for example, a property being decorated with both <xref:System.Configuration.ApplicationScopedSettingAttribute> and <xref:System.Configuration.UserScopedSettingAttribute>; the provider should throw a <xref:System.Configuration.ConfigurationException>.\"\n  syntax:\n    content: 'public abstract class SettingsProvider : System.Configuration.Provider.ProviderBase'\n  inheritance:\n  - System.Object\n  - System.Configuration.Provider.ProviderBase\n  derivedClasses:\n  - System.Configuration.LocalFileSettingsProvider\n  - System.Web.ClientServices.Providers.ClientSettingsProvider\n  - System.Web.Profile.ProfileProvider\n  implements: []\n  inheritedMembers:\n  - System.Configuration.Provider.ProviderBase.Description\n  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Configuration.Provider.ProviderBase.Name\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/SettingsProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.SettingsProvider.#ctor\n  commentId: M:System.Configuration.SettingsProvider.#ctor\n  id: '#ctor'\n  parent: System.Configuration.SettingsProvider\n  langs:\n  - csharp\n  name: SettingsProvider()\n  nameWithType: SettingsProvider.SettingsProvider()\n  fullName: SettingsProvider.SettingsProvider()\n  type: Constructor\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Initializes an instance of the <xref href=\"System.Configuration.SettingsProvider\"></xref> class.\n  remarks: \"This is this default protected constructor for this abstract class. Derived custom settings providers are not required to provide an explicit constructor because the <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> method typically performs all initialization.  \\n  \\n Client code typically does not directly instantiate a settings provider; instead, you use the following procedure to find a settings provider for a particular settings property:  \\n  \\n1.  Call the <xref:System.ComponentModel.Component.GetService%2A> method on the current <xref:System.ComponentModel.Component> or <xref:System.ComponentModel.ISite> to return a reference to the current <xref:System.Configuration.ISettingsProviderService>.  \\n  \\n2.  Call the <xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A> method of the <xref:System.Configuration.ISettingsProviderService> retrieved in the first step to return the settings provider.\"\n  syntax:\n    content: protected SettingsProvider ();\n    parameters: []\n  overload: System.Configuration.SettingsProvider.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/SettingsProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.SettingsProvider.ApplicationName\n  commentId: P:System.Configuration.SettingsProvider.ApplicationName\n  id: ApplicationName\n  parent: System.Configuration.SettingsProvider\n  langs:\n  - csharp\n  name: ApplicationName\n  nameWithType: SettingsProvider.ApplicationName\n  fullName: SettingsProvider.ApplicationName\n  type: Property\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Gets or sets the name of the currently running application.\n  remarks: The <xref:System.Configuration.SettingsProvider.ApplicationName%2A> and <xref:System.Configuration.Provider.ProviderBase.Name%2A> properties help to disambiguate similarly named setting properties in different applications.\n  syntax:\n    content: public abstract string ApplicationName { get; set; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the application's shortened name, which does not contain a full path or extension, for example, <code>SimpleAppSettings</code>.\n  overload: System.Configuration.SettingsProvider.ApplicationName*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/SettingsProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)\n  commentId: M:System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)\n  id: GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)\n  parent: System.Configuration.SettingsProvider\n  langs:\n  - csharp\n  name: GetPropertyValues(SettingsContext, SettingsPropertyCollection)\n  nameWithType: SettingsProvider.GetPropertyValues(SettingsContext, SettingsPropertyCollection)\n  fullName: SettingsProvider.GetPropertyValues(SettingsContext, SettingsPropertyCollection)\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Returns the collection of settings property values for the specified application instance and settings property group.\n  remarks: The <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A> method must be implemented to handle special settings, those marked with <xref:System.Configuration.SpecialSettingAttribute>, as well as reconcile application and user settings.\n  syntax:\n    content: public abstract System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection collection);\n    parameters:\n    - id: context\n      type: System.Configuration.SettingsContext\n      description: A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application use.\n    - id: collection\n      type: System.Configuration.SettingsPropertyCollection\n      description: A <xref href=\"System.Configuration.SettingsPropertyCollection\"></xref> containing the settings property group whose values are to be retrieved.\n    return:\n      type: System.Configuration.SettingsPropertyValueCollection\n      description: A <xref href=\"System.Configuration.SettingsPropertyValueCollection\"></xref> containing the values for the specified settings property group.\n  overload: System.Configuration.SettingsProvider.GetPropertyValues*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/SettingsProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)\n  commentId: M:System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)\n  id: SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)\n  parent: System.Configuration.SettingsProvider\n  langs:\n  - csharp\n  name: SetPropertyValues(SettingsContext, SettingsPropertyValueCollection)\n  nameWithType: SettingsProvider.SetPropertyValues(SettingsContext, SettingsPropertyValueCollection)\n  fullName: SettingsProvider.SetPropertyValues(SettingsContext, SettingsPropertyValueCollection)\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Sets the values of the specified group of property settings.\n  remarks: \"<xref:System.Configuration.ApplicationSettingsBase> contains the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method, which is called to persist the values of all of its settings properties. This method enumerates through all the settings providers associated with its settings properties, and calls the <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method for each <xref:System.Configuration.SettingsProvider> to perform the actual serialization operation.  \\n  \\n The <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method should be implemented with security in mind:  \\n  \\n-   Only fully trusted code should be allowed to update application settings. Partially trusted code should be allowed to update only user application settings. Untrusted code is not typically allowed to update application settings.  \\n  \\n-   Usage quotas should be considered to guard against resource attacks by partially trusted applications.\"\n  syntax:\n    content: public abstract void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection collection);\n    parameters:\n    - id: context\n      type: System.Configuration.SettingsContext\n      description: A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application usage.\n    - id: collection\n      type: System.Configuration.SettingsPropertyValueCollection\n      description: A <xref href=\"System.Configuration.SettingsPropertyValueCollection\"></xref> representing the group of property settings to set.\n  overload: System.Configuration.SettingsProvider.SetPropertyValues*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/SettingsProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Configuration.Provider.ProviderBase\n  parent: System.Configuration.Provider\n  isExternal: false\n  name: ProviderBase\n  nameWithType: ProviderBase\n  fullName: System.Configuration.Provider.ProviderBase\n- uid: System.Configuration.SettingsProvider.#ctor\n  parent: System.Configuration.SettingsProvider\n  isExternal: false\n  name: SettingsProvider()\n  nameWithType: SettingsProvider.SettingsProvider()\n  fullName: SettingsProvider.SettingsProvider()\n- uid: System.Configuration.SettingsProvider.ApplicationName\n  parent: System.Configuration.SettingsProvider\n  isExternal: false\n  name: ApplicationName\n  nameWithType: SettingsProvider.ApplicationName\n  fullName: SettingsProvider.ApplicationName\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)\n  parent: System.Configuration.SettingsProvider\n  isExternal: false\n  name: GetPropertyValues(SettingsContext, SettingsPropertyCollection)\n  nameWithType: SettingsProvider.GetPropertyValues(SettingsContext, SettingsPropertyCollection)\n  fullName: SettingsProvider.GetPropertyValues(SettingsContext, SettingsPropertyCollection)\n- uid: System.Configuration.SettingsPropertyValueCollection\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsPropertyValueCollection\n  nameWithType: SettingsPropertyValueCollection\n  fullName: System.Configuration.SettingsPropertyValueCollection\n- uid: System.Configuration.SettingsContext\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsContext\n  nameWithType: SettingsContext\n  fullName: System.Configuration.SettingsContext\n- uid: System.Configuration.SettingsPropertyCollection\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsPropertyCollection\n  nameWithType: SettingsPropertyCollection\n  fullName: System.Configuration.SettingsPropertyCollection\n- uid: System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)\n  parent: System.Configuration.SettingsProvider\n  isExternal: false\n  name: SetPropertyValues(SettingsContext, SettingsPropertyValueCollection)\n  nameWithType: SettingsProvider.SetPropertyValues(SettingsContext, SettingsPropertyValueCollection)\n  fullName: SettingsProvider.SetPropertyValues(SettingsContext, SettingsPropertyValueCollection)\n- uid: System.Configuration.SettingsProvider.#ctor*\n  parent: System.Configuration.SettingsProvider\n  isExternal: false\n  name: SettingsProvider\n  nameWithType: SettingsProvider.SettingsProvider\n  fullName: SettingsProvider.SettingsProvider\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/SettingsProvider.xml\n- uid: System.Configuration.SettingsProvider.ApplicationName*\n  parent: System.Configuration.SettingsProvider\n  isExternal: false\n  name: ApplicationName\n  nameWithType: SettingsProvider.ApplicationName\n  fullName: SettingsProvider.ApplicationName\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/SettingsProvider.xml\n- uid: System.Configuration.SettingsProvider.GetPropertyValues*\n  parent: System.Configuration.SettingsProvider\n  isExternal: false\n  name: GetPropertyValues\n  nameWithType: SettingsProvider.GetPropertyValues\n  fullName: SettingsProvider.GetPropertyValues\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/SettingsProvider.xml\n- uid: System.Configuration.SettingsProvider.SetPropertyValues*\n  parent: System.Configuration.SettingsProvider\n  isExternal: false\n  name: SetPropertyValues\n  nameWithType: SettingsProvider.SetPropertyValues\n  fullName: SettingsProvider.SetPropertyValues\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/SettingsProvider.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Configuration.Provider.ProviderBase.Description\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: Description\n  nameWithType: ProviderBase.Description\n  fullName: ProviderBase.Description\n- uid: System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: Initialize(String, NameValueCollection)\n  nameWithType: ProviderBase.Initialize(String, NameValueCollection)\n  fullName: ProviderBase.Initialize(String, NameValueCollection)\n- uid: System.Configuration.Provider.ProviderBase.Name\n  parent: System.Configuration.Provider.ProviderBase\n  isExternal: false\n  name: Name\n  nameWithType: ProviderBase.Name\n  fullName: ProviderBase.Name\n"}