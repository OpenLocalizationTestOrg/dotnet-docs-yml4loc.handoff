{"nodes":[{"content":"Specifies a reliability contract.","nodes":[{"pos":[0,33],"content":"Specifies a reliability contract.","nodes":[{"content":"Specifies a reliability contract.","pos":[0,33]}]}],"pos":[732,766],"yaml":true},{"content":"The <xref:System.Runtime.ConstrainedExecution.Consistency> enumeration is used as a parameter to the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to specify the reliability guarantee on a given method.","nodes":[{"pos":[0,238],"content":"The <xref:System.Runtime.ConstrainedExecution.Consistency> enumeration is used as a parameter to the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to specify the reliability guarantee on a given method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.ConstrainedExecution.Consistency&gt;</ph> enumeration is used as a parameter to the <ph id=\"ph2\">&lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;</ph> attribute to specify the reliability guarantee on a given method.","pos":[0,238],"source":"The <xref:System.Runtime.ConstrainedExecution.Consistency> enumeration is used as a parameter to the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to specify the reliability guarantee on a given method."}]}],"pos":[777,1016],"yaml":true,"extradata":"MT"},{"content":"In the face of exceptional conditions, the common language runtime (CLR) makes no guarantees regarding state consistency in the current application domain.","nodes":[{"pos":[0,155],"content":"In the face of exceptional conditions, the common language runtime (CLR) makes no guarantees regarding state consistency in the current application domain.","nodes":[{"content":"In the face of exceptional conditions, the common language runtime (CLR) makes no guarantees regarding state consistency in the current application domain.","pos":[0,155]}]}],"pos":[3078,3234],"yaml":true},{"content":"In the face of exceptional conditions, the method is guaranteed to limit state corruption to the current instance.","nodes":[{"pos":[0,114],"content":"In the face of exceptional conditions, the method is guaranteed to limit state corruption to the current instance.","nodes":[{"content":"In the face of exceptional conditions, the method is guaranteed to limit state corruption to the current instance.","pos":[0,114]}]}],"pos":[4547,4662],"yaml":true},{"content":"In the face of exceptional conditions, the CLR makes no guarantees regarding state consistency; that is, the condition might corrupt the process.","nodes":[{"pos":[0,145],"content":"In the face of exceptional conditions, the CLR makes no guarantees regarding state consistency; that is, the condition might corrupt the process.","nodes":[{"content":"In the face of exceptional conditions, the CLR makes no guarantees regarding state consistency; that is, the condition might corrupt the process.","pos":[0,145]}]}],"pos":[5968,6114],"yaml":true},{"content":"In the face of exceptional conditions, the method is guaranteed not to corrupt state.","nodes":[{"pos":[0,85],"content":"In the face of exceptional conditions, the method is guaranteed not to corrupt state.","nodes":[{"content":"In the face of exceptional conditions, the method is guaranteed not to corrupt state.","pos":[0,85]}]}],"pos":[7431,7517],"yaml":true},{"content":"> [!NOTE]\n>  This does not guarantee that the method will never fail; however, it does guarantee that such a failure will never corrupt state.","nodes":[{"pos":[2,142],"content":"[!NOTE]\n This does not guarantee that the method will never fail; however, it does guarantee that such a failure will never corrupt state.","leadings":["","> "],"nodes":[{"content":"This does not guarantee that the method will never fail; however, it does guarantee that such a failure will never corrupt state.","pos":[9,138]}]}],"pos":[7528,7683],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.ConstrainedExecution.Consistency\n  commentId: T:System.Runtime.ConstrainedExecution.Consistency\n  id: Consistency\n  children:\n  - System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain\n  - System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance\n  - System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess\n  - System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState\n  langs:\n  - csharp\n  name: Consistency\n  nameWithType: Consistency\n  fullName: System.Runtime.ConstrainedExecution.Consistency\n  type: Enum\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Runtime.ConstrainedExecution\n  summary: Specifies a reliability contract.\n  remarks: The <xref:System.Runtime.ConstrainedExecution.Consistency> enumeration is used as a parameter to the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to specify the reliability guarantee on a given method.\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Runtime.ConstrainedExecution.Consistency> enumeration when specifying a constrained execution region for a method. This code example  is part of a larger example provided for the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> constructor.  \\n  \\n [!code-csharp[System.Runtime.ConstrainedExecution#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.ConstrainedExecution/cs/program.cs#3)]\\n [!code-vb[System.Runtime.ConstrainedExecution#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.ConstrainedExecution/vb/program.vb#3)]\"\n  syntax:\n    content: public enum Consistency\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.ConstrainedExecution/Consistency.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain\n  commentId: F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain\n  id: MayCorruptAppDomain\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  langs:\n  - csharp\n  name: MayCorruptAppDomain\n  nameWithType: Consistency.MayCorruptAppDomain\n  fullName: Consistency.MayCorruptAppDomain\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Runtime.ConstrainedExecution\n  summary: In the face of exceptional conditions, the common language runtime (CLR) makes no guarantees regarding state consistency in the current application domain.\n  syntax:\n    content: MayCorruptAppDomain\n    return:\n      type: System.Runtime.ConstrainedExecution.Consistency\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.ConstrainedExecution/Consistency.xml\n- uid: System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance\n  commentId: F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance\n  id: MayCorruptInstance\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  langs:\n  - csharp\n  name: MayCorruptInstance\n  nameWithType: Consistency.MayCorruptInstance\n  fullName: Consistency.MayCorruptInstance\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Runtime.ConstrainedExecution\n  summary: In the face of exceptional conditions, the method is guaranteed to limit state corruption to the current instance.\n  syntax:\n    content: MayCorruptInstance\n    return:\n      type: System.Runtime.ConstrainedExecution.Consistency\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.ConstrainedExecution/Consistency.xml\n- uid: System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess\n  commentId: F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess\n  id: MayCorruptProcess\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  langs:\n  - csharp\n  name: MayCorruptProcess\n  nameWithType: Consistency.MayCorruptProcess\n  fullName: Consistency.MayCorruptProcess\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Runtime.ConstrainedExecution\n  summary: In the face of exceptional conditions, the CLR makes no guarantees regarding state consistency; that is, the condition might corrupt the process.\n  syntax:\n    content: MayCorruptProcess\n    return:\n      type: System.Runtime.ConstrainedExecution.Consistency\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.ConstrainedExecution/Consistency.xml\n- uid: System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState\n  commentId: F:System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState\n  id: WillNotCorruptState\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  langs:\n  - csharp\n  name: WillNotCorruptState\n  nameWithType: Consistency.WillNotCorruptState\n  fullName: Consistency.WillNotCorruptState\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Runtime.ConstrainedExecution\n  summary: In the face of exceptional conditions, the method is guaranteed not to corrupt state.\n  remarks: >-\n    > [!NOTE]\n\n    >  This does not guarantee that the method will never fail; however, it does guarantee that such a failure will never corrupt state.\n  syntax:\n    content: WillNotCorruptState\n    return:\n      type: System.Runtime.ConstrainedExecution.Consistency\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.ConstrainedExecution/Consistency.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  isExternal: false\n  name: MayCorruptAppDomain\n  nameWithType: Consistency.MayCorruptAppDomain\n  fullName: Consistency.MayCorruptAppDomain\n- uid: System.Runtime.ConstrainedExecution.Consistency\n  parent: System.Runtime.ConstrainedExecution\n  isExternal: false\n  name: Consistency\n  nameWithType: Consistency\n  fullName: System.Runtime.ConstrainedExecution.Consistency\n- uid: System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  isExternal: false\n  name: MayCorruptInstance\n  nameWithType: Consistency.MayCorruptInstance\n  fullName: Consistency.MayCorruptInstance\n- uid: System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  isExternal: false\n  name: MayCorruptProcess\n  nameWithType: Consistency.MayCorruptProcess\n  fullName: Consistency.MayCorruptProcess\n- uid: System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  isExternal: false\n  name: WillNotCorruptState\n  nameWithType: Consistency.WillNotCorruptState\n  fullName: Consistency.WillNotCorruptState\n"}