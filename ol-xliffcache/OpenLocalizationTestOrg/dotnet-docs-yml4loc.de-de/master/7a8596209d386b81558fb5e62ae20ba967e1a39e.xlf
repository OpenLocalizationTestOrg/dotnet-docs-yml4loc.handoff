<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a8596209d386b81558fb5e62ae20ba967e1a39e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Transactions.IEnlistmentNotification.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">505bcfeedb927940e846bcb449b7de3bce7670e5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba25ae56eb343cfdd15c0456264f2139f0d2b1e4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for a resource manager to participate in a transaction, it must enlist in the transaction through the transaction manager.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.Transaction&gt;</ph> class defines a set of methods whose names begin with <ph id="ph2">`Enlist`</ph> that provide this functionality.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The different <ph id="ph1">`Enlist`</ph> methods correspond to the different types of enlistment that a resource maanger may have.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each resource manager's implementation of the <ph id="ph1">&lt;xref:System.Transactions.IEnlistmentNotification&gt;</ph> interface, you should enlist it using the <ph id="ph2">&lt;xref:System.Transactions.Transaction.EnlistVolatile%2A&gt;</ph> method or the <ph id="ph3">&lt;xref:System.Transactions.Transaction.EnlistDurable%2A&gt;</ph> method of the <ph id="ph4">&lt;xref:System.Transactions.Transaction&gt;</ph> class, depending on whether your resource is volatile or durable.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on enlistment and 2PC, see <bpt id="p1">[</bpt>Enlisting Resources as Participants in a Transaction<ept id="p1">](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md)</ept> and <bpt id="p2">[</bpt>Committing a Transaction in Single-Phase and Multi-Phase<ept id="p2">](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transaction manager notifies the enlisted object at different phases of the Two Phase Commit Protocol by the following methods.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method of an enlisted object is used as a callback by the Transaction Manager during the first phase of a transaction, when the transaction manager asks participants whether they can commit the transaction.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is commited.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is aborted (that is, rolled back).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is in doubt.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should be aware that notifications might not be sent sequentially, or in a particular order.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Notifies an enlisted object that a transaction is being committed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transaction manager calls this method of an enlisted object during the second phase of a commitment, when it instructs all participants to commit the transaction.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method on the <ph id="ph2">`enlistment`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager has enlisted durably, but does not respond by calling <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method, the transaction manager is unsure that the resource manager has received the <ph id="ph2">&lt;xref:System.Transactions.IEnlistmentNotification.Commit%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>This results in resources not being able to be reclaimed.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case of a transaction managed by <ph id="ph1">&lt;xref:System.Transactions&gt;</ph>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, it is crucial that you call the <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method once your resource manager is done with your prepare work.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Transactions.Enlistment"&gt;&lt;/xref&gt;</ph> object used to send a response to the transaction manager.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Notifies an enlisted object that the status of a transaction is in doubt.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called for volatile resources when the transaction manager has invoked a single phase commit operation to a single durable resource, and then connection to the durable resource was lost prior to getting the transaction result.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>At that point, the transaction outcome cannot be safely determined.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>As <ph id="ph1">&lt;xref:System.Transactions.IEnlistmentNotification.InDoubt%2A&gt;</ph> is considered to be a final state for a transaction, you should not call <ph id="ph2">&lt;xref:System.Transactions.IEnlistmentNotification.Commit%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Transactions.IEnlistmentNotification.Rollback%2A&gt;</ph> after calling <ph id="ph4">&lt;xref:System.Transactions.IEnlistmentNotification.InDoubt%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your implementation of this method for the volatile resource should perform whatever recovery or containment operation it understands on the affected data.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>It must also call the <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method on the on the <ph id="ph2">`enlistment`</ph> parameter when it has finished its work.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager has enlisted durably, but does not respond by calling <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method, the transaction manager is unsure that the resource manager has received the <ph id="ph2">&lt;xref:System.Transactions.IEnlistmentNotification.InDoubt%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This results in resources not being able to be reclaimed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case of a transaction managed by <ph id="ph1">&lt;xref:System.Transactions&gt;</ph>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, it is crucial that you call the <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method once your resource manager is done with your prepare work.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Transactions.Enlistment"&gt;&lt;/xref&gt;</ph> object used to send a response to the transaction manager.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Notifies an enlisted object that a transaction is being prepared for commitment.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transaction manager calls this method of an enlisted resource manager during the phase 1 of a commitment, when it asks participants whether they can commit the transaction.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are implementing a durable resource manager, you should log your prepare record during this phase.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The record should contain all the necessary information to perform recovery.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes the <ph id="ph1">&lt;xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A&gt;</ph> property, which is passed to the transaction manager in the <ph id="ph2">&lt;xref:System.Transactions.TransactionManager.Reenlist%2A&gt;</ph> method during recovery.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on recovery, see <bpt id="p1">[</bpt>Performing Recovery<ept id="p1">](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your resource manager should complete all work that must be finished before calling the <ph id="ph1">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> method of the <ph id="ph2">`preparingEnlistment`</ph> parameter to indicate its vote for commitment.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should make sure that this is accomplished before receiving any phase 2 notification such as commit, rollback or in doubt.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because phase 2 notifications can happen inline on the same thread that called the <ph id="ph1">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> method in phase 1.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>As such, you should not do any work after the <ph id="ph1">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> call (for example, releasing locks) that you would expect to have completed before receiving the phase 2 notifications.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also call the method of the <ph id="ph1">`preparingEnlistment`</ph> parameter to indicate a vote for rollback.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want the object to merely observe and react to the progress of the transaction, without participating in it, your implementation of this method should call the <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method of the <ph id="ph2">`preparingEnlistment`</ph> parameter when it has finished its work.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>By doing so, your resource manager would not receive any phase 2 notification.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Transactions.PreparingEnlistment"&gt;&lt;/xref&gt;</ph> object used to send a response to the transaction manager.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Notifies an enlisted object that a transaction is being rolled back (aborted).</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transaction manager calls this method of an enlisted object when the transaction is being rolled back (aborted) due to the inability of one or more transaction participants to commit the transaction.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method on the <ph id="ph2">`enlistment`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager has enlisted durably, but does not respond by calling <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method, the transaction manager is unsure that the resource manager has received the <ph id="ph2">&lt;xref:System.Transactions.IEnlistmentNotification.Rollback%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This results in resources not being able to be reclaimed.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case of a transaction managed by <ph id="ph1">&lt;xref:System.Transactions&gt;</ph>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, it is crucial that you call the <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method once your resource manager is done with your prepare work.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Transactions.Enlistment"&gt;&lt;/xref&gt;</ph> object used to send a response to the transaction manager.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>