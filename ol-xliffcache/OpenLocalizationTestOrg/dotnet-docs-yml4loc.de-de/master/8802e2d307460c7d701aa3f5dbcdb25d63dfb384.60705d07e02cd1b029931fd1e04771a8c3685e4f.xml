{"nodes":[{"content":"Instructs obfuscation tools to use their standard obfuscation rules for the appropriate assembly type.","nodes":[{"pos":[0,102],"content":"Instructs obfuscation tools to use their standard obfuscation rules for the appropriate assembly type.","nodes":[{"content":"Instructs obfuscation tools to use their standard obfuscation rules for the appropriate assembly type.","pos":[0,102]}]}],"pos":[675,778],"yaml":true},{"content":"The <xref:System.Reflection.ObfuscationAttribute> and <xref:System.Reflection.ObfuscateAssemblyAttribute> attributes provide a way for assembly authors to annotate their binaries so that obfuscation tools can process them correctly with minimal external configuration.  \n  \n Applying this attribute to an assembly tells the obfuscation tool to use its default rules for the assembly type.  \n  \n> [!IMPORTANT]\n>  Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.  \n  \n You can apply <xref:System.Reflection.ObfuscationAttribute> to types within an assembly, and to members on those types. The innermost attribute controls the way an obfuscation tool treats any particular code entity.","nodes":[{"pos":[0,268],"content":"The <xref:System.Reflection.ObfuscationAttribute> and <xref:System.Reflection.ObfuscateAssemblyAttribute> attributes provide a way for assembly authors to annotate their binaries so that obfuscation tools can process them correctly with minimal external configuration.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.ObfuscationAttribute&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.ObfuscateAssemblyAttribute&gt;</ph> attributes provide a way for assembly authors to annotate their binaries so that obfuscation tools can process them correctly with minimal external configuration.","pos":[0,268],"source":"The <xref:System.Reflection.ObfuscationAttribute> and <xref:System.Reflection.ObfuscateAssemblyAttribute> attributes provide a way for assembly authors to annotate their binaries so that obfuscation tools can process them correctly with minimal external configuration."}]},{"pos":[275,388],"content":"Applying this attribute to an assembly tells the obfuscation tool to use its default rules for the assembly type.","nodes":[{"content":"Applying this attribute to an assembly tells the obfuscation tool to use its default rules for the assembly type.","pos":[0,113]}]},{"pos":[396,829],"content":"[!IMPORTANT]\n Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.","leadings":["","> "],"nodes":[{"content":" Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.","pos":[13,431],"nodes":[{"content":"Applying this attribute does not automatically obfuscate the assembly.","pos":[1,71]},{"content":"Applying the attribute is an alternative to creating a configuration file for the obfuscation tool.","pos":[72,171]},{"content":"That is, it merely provides instructions for an obfuscation tool.","pos":[172,237]},{"content":"Microsoft recommends that vendors of obfuscation tools follow the semantics described here.","pos":[238,329]},{"content":"However, there is no guarantee that a particular tool follows Microsoft recommendations.","pos":[330,418]}]}]},{"pos":[836,1051],"content":"You can apply <xref:System.Reflection.ObfuscationAttribute> to types within an assembly, and to members on those types. The innermost attribute controls the way an obfuscation tool treats any particular code entity.","nodes":[{"content":"You can apply <xref:System.Reflection.ObfuscationAttribute> to types within an assembly, and to members on those types. The innermost attribute controls the way an obfuscation tool treats any particular code entity.","pos":[0,215],"nodes":[{"content":"You can apply <ph id=\"ph1\">&lt;xref:System.Reflection.ObfuscationAttribute&gt;</ph> to types within an assembly, and to members on those types.","pos":[0,119],"source":"You can apply <xref:System.Reflection.ObfuscationAttribute> to types within an assembly, and to members on those types."},{"content":"The innermost attribute controls the way an obfuscation tool treats any particular code entity.","pos":[120,215]}]}]}],"pos":[789,1850],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.ObfuscateAssemblyAttribute\"></xref> class, specifying whether the assembly to be obfuscated is public or private.","nodes":[{"pos":[0,177],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ObfuscateAssemblyAttribute\"&gt;&lt;/xref&gt;</ph> class, specifying whether the assembly to be obfuscated is public or private.","source":"Initializes a new instance of the <xref href=\"System.Reflection.ObfuscateAssemblyAttribute\"></xref> class, specifying whether the assembly to be obfuscated is public or private."}],"pos":[8070,8248],"yaml":true},{"content":"Mark assemblies as private if they are used only by your application, and are not libraries to be used by other software. Generally, marking an assembly as private tells an obfuscator that it can obfuscate the names of all methods, including public methods, as part of obfuscating an application. If an assembly is public, an obfuscator should not obfuscate the names of public members.  \n  \n> [!IMPORTANT]\n>  Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.","nodes":[{"pos":[0,386],"content":"Mark assemblies as private if they are used only by your application, and are not libraries to be used by other software. Generally, marking an assembly as private tells an obfuscator that it can obfuscate the names of all methods, including public methods, as part of obfuscating an application. If an assembly is public, an obfuscator should not obfuscate the names of public members.","nodes":[{"content":"Mark assemblies as private if they are used only by your application, and are not libraries to be used by other software. Generally, marking an assembly as private tells an obfuscator that it can obfuscate the names of all methods, including public methods, as part of obfuscating an application. If an assembly is public, an obfuscator should not obfuscate the names of public members.","pos":[0,386],"nodes":[{"content":"Mark assemblies as private if they are used only by your application, and are not libraries to be used by other software.","pos":[0,121]},{"content":"Generally, marking an assembly as private tells an obfuscator that it can obfuscate the names of all methods, including public methods, as part of obfuscating an application.","pos":[122,296]},{"content":"If an assembly is public, an obfuscator should not obfuscate the names of public members.","pos":[297,386]}]}]},{"pos":[394,827],"content":"[!IMPORTANT]\n Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.","leadings":["","> "],"nodes":[{"content":" Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.","pos":[13,431],"nodes":[{"content":"Applying this attribute does not automatically obfuscate the assembly.","pos":[1,71]},{"content":"Applying the attribute is an alternative to creating a configuration file for the obfuscation tool.","pos":[72,171]},{"content":"That is, it merely provides instructions for an obfuscation tool.","pos":[172,237]},{"content":"Microsoft recommends that vendors of obfuscation tools follow the semantics described here.","pos":[238,329]},{"content":"However, there is no guarantee that a particular tool follows Microsoft recommendations.","pos":[330,418]}]}]}],"pos":[8259,9092],"yaml":true,"extradata":"MT"},{"content":"`true` if the assembly is used within the scope of one application; otherwise, `false`.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">`true`</ph> if the assembly is used within the scope of one application; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the assembly is used within the scope of one application; otherwise, `false`."}],"pos":[9836,9926],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value indicating whether the assembly was marked private.","nodes":[{"pos":[0,100],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value indicating whether the assembly was marked private.","source":"Gets a <xref href=\"System.Boolean\"></xref> value indicating whether the assembly was marked private."}],"pos":[11260,11361],"yaml":true},{"content":"A private assembly is used only by the application of which it is a part, and not by other software.  \n  \n> [!IMPORTANT]\n>  Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.","nodes":[{"pos":[0,100],"content":"A private assembly is used only by the application of which it is a part, and not by other software.","nodes":[{"content":"A private assembly is used only by the application of which it is a part, and not by other software.","pos":[0,100]}]},{"pos":[108,541],"content":"[!IMPORTANT]\n Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.","leadings":["","> "],"nodes":[{"content":" Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.","pos":[13,431],"nodes":[{"content":"Applying this attribute does not automatically obfuscate the assembly.","pos":[1,71]},{"content":"Applying the attribute is an alternative to creating a configuration file for the obfuscation tool.","pos":[72,171]},{"content":"That is, it merely provides instructions for an obfuscation tool.","pos":[172,237]},{"content":"Microsoft recommends that vendors of obfuscation tools follow the semantics described here.","pos":[238,329]},{"content":"However, there is no guarantee that a particular tool follows Microsoft recommendations.","pos":[330,418]}]}]}],"pos":[11372,11919],"yaml":true,"extradata":"MT"},{"content":"`true` if the assembly was marked private; otherwise, `false`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`true`</ph> if the assembly was marked private; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the assembly was marked private; otherwise, `false`."}],"pos":[12713,12778],"yaml":true},{"content":"Gets or sets a <xref href=\"System.Boolean\"></xref> value indicating whether the obfuscation tool should remove the attribute after processing.","nodes":[{"pos":[0,142],"content":"Gets or sets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value indicating whether the obfuscation tool should remove the attribute after processing.","source":"Gets or sets a <xref href=\"System.Boolean\"></xref> value indicating whether the obfuscation tool should remove the attribute after processing."}],"pos":[14148,14291],"yaml":true},{"content":"Attributes should not be stripped if your library will be included as part of another application, and obfuscated as part of that application.  \n  \n Specifying that obfuscation tools should strip the <xref:System.Reflection.ObfuscateAssemblyAttribute> does not affect instances of <xref:System.Reflection.ObfuscationAttribute> that have been applied to types and members within the assembly.  \n  \n> [!IMPORTANT]\n>  Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.","nodes":[{"pos":[0,142],"content":"Attributes should not be stripped if your library will be included as part of another application, and obfuscated as part of that application.","nodes":[{"content":"Attributes should not be stripped if your library will be included as part of another application, and obfuscated as part of that application.","pos":[0,142]}]},{"pos":[149,391],"content":"Specifying that obfuscation tools should strip the <xref:System.Reflection.ObfuscateAssemblyAttribute> does not affect instances of <xref:System.Reflection.ObfuscationAttribute> that have been applied to types and members within the assembly.","nodes":[{"content":"Specifying that obfuscation tools should strip the <ph id=\"ph1\">&lt;xref:System.Reflection.ObfuscateAssemblyAttribute&gt;</ph> does not affect instances of <ph id=\"ph2\">&lt;xref:System.Reflection.ObfuscationAttribute&gt;</ph> that have been applied to types and members within the assembly.","pos":[0,242],"source":"Specifying that obfuscation tools should strip the <xref:System.Reflection.ObfuscateAssemblyAttribute> does not affect instances of <xref:System.Reflection.ObfuscationAttribute> that have been applied to types and members within the assembly."}]},{"pos":[399,832],"content":"[!IMPORTANT]\n Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.","leadings":["","> "],"nodes":[{"content":" Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.","pos":[13,431],"nodes":[{"content":"Applying this attribute does not automatically obfuscate the assembly.","pos":[1,71]},{"content":"Applying the attribute is an alternative to creating a configuration file for the obfuscation tool.","pos":[72,171]},{"content":"That is, it merely provides instructions for an obfuscation tool.","pos":[172,237]},{"content":"Microsoft recommends that vendors of obfuscation tools follow the semantics described here.","pos":[238,329]},{"content":"However, there is no guarantee that a particular tool follows Microsoft recommendations.","pos":[330,418]}]}]}],"pos":[14302,15142],"yaml":true,"extradata":"MT"},{"content":"`true` if the obfuscation tool should remove the attribute after processing; otherwise, `false`. The default value for this property is `true`.","nodes":[{"pos":[0,143],"content":"`true` if the obfuscation tool should remove the attribute after processing; otherwise, `false`. The default value for this property is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the obfuscation tool should remove the attribute after processing; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,96],"source":"`true` if the obfuscation tool should remove the attribute after processing; otherwise, `false`."},{"content":"The default value for this property is <ph id=\"ph1\">`true`</ph>.","pos":[97,143],"source":" The default value for this property is `true`."}]}],"pos":[15848,15994],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.ObfuscateAssemblyAttribute\n  commentId: T:System.Reflection.ObfuscateAssemblyAttribute\n  id: ObfuscateAssemblyAttribute\n  children:\n  - System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)\n  - System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate\n  - System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation\n  langs:\n  - csharp\n  name: ObfuscateAssemblyAttribute\n  nameWithType: ObfuscateAssemblyAttribute\n  fullName: System.Reflection.ObfuscateAssemblyAttribute\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Instructs obfuscation tools to use their standard obfuscation rules for the appropriate assembly type.\n  remarks: \"The <xref:System.Reflection.ObfuscationAttribute> and <xref:System.Reflection.ObfuscateAssemblyAttribute> attributes provide a way for assembly authors to annotate their binaries so that obfuscation tools can process them correctly with minimal external configuration.  \\n  \\n Applying this attribute to an assembly tells the obfuscation tool to use its default rules for the assembly type.  \\n  \\n> [!IMPORTANT]\\n>  Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.  \\n  \\n You can apply <xref:System.Reflection.ObfuscationAttribute> to types within an assembly, and to members on those types. The innermost attribute controls the way an obfuscation tool treats any particular code entity.\"\n  example:\n  - \"The following code example shows a private assembly that has been marked with the <xref:System.Reflection.ObfuscateAssemblyAttribute>. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \\n  \\n For a code example that shows the use of <xref:System.Reflection.ObfuscateAssemblyAttribute> with <xref:System.Reflection.ObfuscationAttribute>, see the <xref:System.Reflection.ObfuscationAttribute> class.  \\n  \\n [!code-csharp[ObfuscateAssemblyAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscateAssemblyAttribute/cs/source.cs#1)]\\n [!code-vb[ObfuscateAssemblyAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscateAssemblyAttribute/vb/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=false, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class ObfuscateAssemblyAttribute : Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetHashCode\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.AttributeUsageAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ObfuscateAssemblyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)\n  commentId: M:System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Reflection.ObfuscateAssemblyAttribute\n  langs:\n  - csharp\n  name: ObfuscateAssemblyAttribute(Boolean)\n  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)\n  fullName: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.ObfuscateAssemblyAttribute\"></xref> class, specifying whether the assembly to be obfuscated is public or private.\n  remarks: \"Mark assemblies as private if they are used only by your application, and are not libraries to be used by other software. Generally, marking an assembly as private tells an obfuscator that it can obfuscate the names of all methods, including public methods, as part of obfuscating an application. If an assembly is public, an obfuscator should not obfuscate the names of public members.  \\n  \\n> [!IMPORTANT]\\n>  Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.\"\n  example:\n  - \"The following code example shows how the attribute constructor specifies that an assembly is private. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \\n  \\n [!code-csharp[ObfuscateAssemblyAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscateAssemblyAttribute/cs/source.cs#1)]\\n [!code-vb[ObfuscateAssemblyAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscateAssemblyAttribute/vb/source.vb#1)]\"\n  syntax:\n    content: public ObfuscateAssemblyAttribute (bool assemblyIsPrivate);\n    parameters:\n    - id: assemblyIsPrivate\n      type: System.Boolean\n      description: '`true` if the assembly is used within the scope of one application; otherwise, `false`.'\n  overload: System.Reflection.ObfuscateAssemblyAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ObfuscateAssemblyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate\n  commentId: P:System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate\n  id: AssemblyIsPrivate\n  parent: System.Reflection.ObfuscateAssemblyAttribute\n  langs:\n  - csharp\n  name: AssemblyIsPrivate\n  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate\n  fullName: ObfuscateAssemblyAttribute.AssemblyIsPrivate\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value indicating whether the assembly was marked private.\n  remarks: \"A private assembly is used only by the application of which it is a part, and not by other software.  \\n  \\n> [!IMPORTANT]\\n>  Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.\"\n  example:\n  - \"The following code example shows how the attribute constructor sets the <xref:System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate%2A> property to `true`, to specify that an assembly is private. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \\n  \\n [!code-csharp[ObfuscateAssemblyAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscateAssemblyAttribute/cs/source.cs#1)]\\n [!code-vb[ObfuscateAssemblyAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscateAssemblyAttribute/vb/source.vb#1)]\"\n  syntax:\n    content: public bool AssemblyIsPrivate { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the assembly was marked private; otherwise, `false`.'\n  overload: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ObfuscateAssemblyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation\n  commentId: P:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation\n  id: StripAfterObfuscation\n  parent: System.Reflection.ObfuscateAssemblyAttribute\n  langs:\n  - csharp\n  name: StripAfterObfuscation\n  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation\n  fullName: ObfuscateAssemblyAttribute.StripAfterObfuscation\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets or sets a <xref href=\"System.Boolean\"></xref> value indicating whether the obfuscation tool should remove the attribute after processing.\n  remarks: \"Attributes should not be stripped if your library will be included as part of another application, and obfuscated as part of that application.  \\n  \\n Specifying that obfuscation tools should strip the <xref:System.Reflection.ObfuscateAssemblyAttribute> does not affect instances of <xref:System.Reflection.ObfuscationAttribute> that have been applied to types and members within the assembly.  \\n  \\n> [!IMPORTANT]\\n>  Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.\"\n  example:\n  - \"The following code example shows the <xref:System.Reflection.ObfuscateAssemblyAttribute> attribute with the <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property set to `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \\n  \\n [!code-csharp[ObfuscateAssemblyAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscateAssemblyAttribute/cs/source.cs#1)]\\n [!code-vb[ObfuscateAssemblyAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscateAssemblyAttribute/vb/source.vb#1)]\"\n  syntax:\n    content: public bool StripAfterObfuscation { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the obfuscation tool should remove the attribute after processing; otherwise, `false`. The default value for this property is `true`.'\n  overload: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ObfuscateAssemblyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)\n  parent: System.Reflection.ObfuscateAssemblyAttribute\n  isExternal: false\n  name: ObfuscateAssemblyAttribute(Boolean)\n  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)\n  fullName: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate\n  parent: System.Reflection.ObfuscateAssemblyAttribute\n  isExternal: false\n  name: AssemblyIsPrivate\n  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate\n  fullName: ObfuscateAssemblyAttribute.AssemblyIsPrivate\n- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation\n  parent: System.Reflection.ObfuscateAssemblyAttribute\n  isExternal: false\n  name: StripAfterObfuscation\n  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation\n  fullName: ObfuscateAssemblyAttribute.StripAfterObfuscation\n- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor*\n  parent: System.Reflection.ObfuscateAssemblyAttribute\n  isExternal: false\n  name: ObfuscateAssemblyAttribute\n  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute\n  fullName: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ObfuscateAssemblyAttribute.xml\n- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate*\n  parent: System.Reflection.ObfuscateAssemblyAttribute\n  isExternal: false\n  name: AssemblyIsPrivate\n  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate\n  fullName: ObfuscateAssemblyAttribute.AssemblyIsPrivate\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ObfuscateAssemblyAttribute.xml\n- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation*\n  parent: System.Reflection.ObfuscateAssemblyAttribute\n  isExternal: false\n  name: StripAfterObfuscation\n  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation\n  fullName: ObfuscateAssemblyAttribute.StripAfterObfuscation\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ObfuscateAssemblyAttribute.xml\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Attribute.Equals(Object)\n  fullName: Attribute.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Attribute.GetHashCode()\n  fullName: Attribute.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n"}