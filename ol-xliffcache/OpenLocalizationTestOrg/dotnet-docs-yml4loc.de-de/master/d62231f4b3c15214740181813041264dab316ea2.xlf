<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d62231f4b3c15214740181813041264dab316ea2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.Dispatcher.ClientRuntime.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12600c5df0f41600430e99f84f4177e225a39ddc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c85caa57544a3cc64260b09e4666221804b499b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the insertion point for classes that extend the functionality of Windows Communication Foundation (WCF) client objects for all messages handled by a client application.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> client objects, whether an extension of <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> or of <ph id="ph3">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph>, are used by <ph id="ph4">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> client applications to convert method calls into outbound messages and convert incoming messages to objects and pass them to the results of client methods.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> class is an extensibility point to which you can add extension objects that intercept messages and extend client behavior across all operations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Interception objects can process all messages in a particular contract, process only messages for particular operations, perform custom channel initialization, and implement other custom client application behavior.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview of client architecture, see <bpt id="p1">[</bpt>WCF Client Architecture<ept id="p1">](~/docs/framework/wcf/feature-details/client-architecture.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about client programming, see <bpt id="p1">[</bpt>Accessing Services Using a WCF Client<ept id="p1">](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about customizations and how to perform them, see <bpt id="p1">[</bpt>Extending Clients<ept id="p1">](~/docs/framework/wcf/extending/extending-clients.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A&gt;</ph> property returns the dispatch run-time object for service-initiated callback operations.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.OperationSelector%2A&gt;</ph> property accepts a custom operation selector object to control the routing of client messages.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.ChannelInitializers%2A&gt;</ph> property enables the addition of a channel initializer that can inspect or modify the client channel.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers%2A&gt;</ph> property can be used to display a visual prompt to enable a user to select credentials prior to opening the channel.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A&gt;</ph> property gets a collection of <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> objects to which you can add custom message interceptors that provide functionality specific to the messages of that operation.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.ManualAddressing%2A&gt;</ph> property enables an application to turn off some automatic addressing headers to directly control addressing.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MaxFaultSize%2A&gt;</ph> property enables the client to limit the size of fault messages that the client accepts.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A&gt;</ph> property gets a collection of <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> objects to which you can add custom message interceptors for all messages traveling through a client.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.UnhandledClientOperation%2A&gt;</ph> property returns the operation to which unexpected messages are passed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.ValidateMustUnderstand%2A&gt;</ph> property informs the system whether it should confirm that SOAP headers marked as <ph id="ph2">`MustUnderstand`</ph> have, in fact, been understood.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.Via%2A&gt;</ph> property sets the value of the destination of the message at the transport level to support intermediaries and other scenarios.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, there are a number of other properties that retrieve the client contract information:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the client is a duplex client, the following properties also retrieve the client callback type and runtime:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets or sets the type of the callback contract associated with a duplex client.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object that represents the callback contract associated with a duplex client.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets the dispatch run-time that dispatches service-initiated operations.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ServiceModel.Dispatcher.DispatchRuntime"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the contract is a duplex contract, the dispatch behavior contains service-initiated operations; otherwise the dispatch behavior contains no operations.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets a collection of channel initializer objects used to customize the channel associated with a client.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.ChannelInitializers%2A&gt;</ph> property to add a custom <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IChannelInitializer&gt;</ph> object that can inspect the channel that is associated with a client on creation, register for events on the channel, and associate state with the channel by using <ph id="ph3">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A collection of <ph id="ph1">&lt;xref href="System.ServiceModel.Dispatcher.IChannelInitializer"&gt;&lt;/xref&gt;</ph> implementations.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets a collection of message inspector objects used to view or modify messages of a particular service operation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>ClientMessateInspectors is a thread safe collection.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A collection of message inspector objects used to view or modify messages of a particular service operation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets a collection of client operation objects used to attach extension objects that inspect or modify messages and behavior of a particular service operation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>ClientOperations is a thread safe collection.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A collection of client operation objects used to attach extension objects that inspect or modify messages and behavior of a particular service operation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets or sets the type of the contract associated with a client.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object that represents the contract associated with this client.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Gets the name of the contract associated with a client.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The contract name for a client.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the namespace of the contract associated with a client.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The namespace of the contract associated with a client.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets a collection of an interactive channel initializer.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about how to use interactive channel initializers, see <bpt id="p1">[</bpt>Accessing Services Using a WCF Client<ept id="p1">](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A synchronized collection of type <ph id="ph1">&lt;xref href="System.ServiceModel.Dispatcher.IInteractiveChannelInitializer"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the client adds addressing headers to request-reply messages.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.ManualAddressing%2A&gt;</ph> property to <ph id="ph2">`true`</ph> if you want to prevent the client from adding Message ID and Reply-To addressing headers to request/response messages so that your application can control these headers.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.ManualAddressing%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the client does not support request-reply operations over a duplex channel.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the client does not add any addressing headers; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum fault size.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MaxFaultSize%2A&gt;</ph> property to limit the size of fault messages accepted by the client runtime.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An integer representing the maximum fault size.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Gets a collection of message inspector implementations for a client.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A&gt;</ph> property to attach custom <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> implementations to inspect or modify all messages that flow through the client.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A collection of <ph id="ph1">&lt;xref href="System.ServiceModel.Dispatcher.IClientMessageInspector"&gt;&lt;/xref&gt;</ph> implementations.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the MessageVersionNoneFaultsEnabled property is set.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the MessageVersionNoneFaultsEnabled property is set; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets a collection of client operations for a client.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A&gt;</ph> property to get a collection of all client operations for this client that you can use to attach extension objects that inspect or modify messages and behavior scoped to a particular operation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A synchronized collection of <ph id="ph1">&lt;xref href="System.ServiceModel.Dispatcher.ClientOperation"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Gets or sets an <ph id="ph1">&lt;xref href="System.ServiceModel.Dispatcher.IClientOperationSelector"&gt;&lt;/xref&gt;</ph> implementation that can be used to select a <ph id="ph2">&lt;xref href="System.ServiceModel.Dispatcher.ClientOperation"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.OperationSelector%2A&gt;</ph> property to modify the selection of an operation when a client invokes a particular method.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default algorithm is to use the name of the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Name%2A&gt;</ph> of the operation method as a key to find the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no matching <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> object is found, the invocation is dispatched to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> object returned from the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.UnhandledClientOperation%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ServiceModel.Dispatcher.IClientOperationSelector"&gt;&lt;/xref&gt;</ph> object that selects a <ph id="ph2">&lt;xref href="System.ServiceModel.Dispatcher.ClientOperation"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets the client operation for methods that do not have a corresponding <ph id="ph1">&lt;xref href="System.ServiceModel.Dispatcher.ClientOperation"&gt;&lt;/xref&gt;</ph> in the <ph id="ph2">&lt;xref href="System.ServiceModel.Dispatcher.ClientRuntime.Operations"&gt;&lt;/xref&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ServiceModel.Dispatcher.ClientOperation"&gt;&lt;/xref&gt;</ph> that represents the method to which the current message contents are routed when the operation selector cannot find an operation that matches the message.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that specifies whether the system or the application enforces SOAP <ph id="ph1">`MustUnderstand`</ph> header processing.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.ValidateMustUnderstand%2A&gt;</ph> property to turn off the enforced validation of arriving message headers.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>In normal execution, message headers are compared against the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.UnderstoodHeaders%2A&gt;</ph> property to confirm that arriving headers are explicitly handled by the service.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set this to <ph id="ph1">`false`</ph> to disable this checking.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>When set to <ph id="ph1">`false`</ph>, the application must check for headers marked with MustUnderstand="true" and return a fault if one or more of them were not understood.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful when the application is supposed to accept any returned SOAP messages (for example, when using typed or untyped messages) and perform custom header processing.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the system is to perform SOAP header <ph id="ph2">`MustUnderstand`</ph> processing; otherwise <ph id="ph3">`false`</ph>, which indicates that the application performs this processing.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Gets or sets the transport address that is used to send messages through the client.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.Via%2A&gt;</ph> property to specify a transport address for messages when the immediate destination of messages is not the client's <ph id="ph2">&lt;xref:System.ServiceModel.EndpointAddress.Uri%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables you to specify SOAP intermediaries and handle scenarios in which the value of the <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress.Uri%2A&gt;</ph> property of the client is a logical name.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is this value that the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ClientViaBehavior?displayProperty=fullName&gt;</ph> sets from a configuration file.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that is the destination address for the transport.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The default value is the <ph id="ph1">&lt;xref href="System.ServiceModel.EndpointAddress.Uri"&gt;&lt;/xref&gt;</ph> value of the client.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>