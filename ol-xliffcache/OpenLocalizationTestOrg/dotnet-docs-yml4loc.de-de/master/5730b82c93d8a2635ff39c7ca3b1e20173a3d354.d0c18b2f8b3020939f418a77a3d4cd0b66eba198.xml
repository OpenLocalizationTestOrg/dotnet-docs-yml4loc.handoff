{"nodes":[{"content":"Provides a set of `static` (`Shared` in Visual Basic) methods for querying objects that implement <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.","nodes":[{"pos":[0,160],"content":"Provides a set of <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) methods for querying objects that implement <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph>.","source":"Provides a set of `static` (`Shared` in Visual Basic) methods for querying objects that implement <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>."}],"pos":[21381,21542],"yaml":true},{"content":"The methods in this class provide an implementation of the standard query operators for querying data sources that implement <xref:System.Collections.Generic.IEnumerable%601>. The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.  \n  \n The majority of the methods in this class are defined as extension methods that extend <xref:System.Collections.Generic.IEnumerable%601>. This means they can be called like an instance method on any object that implements <xref:System.Collections.Generic.IEnumerable%601>.  \n  \n Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated. This is known as deferred execution. Methods that are used in a query that returns a singleton value execute and consume the target data immediately.","nodes":[{"pos":[0,427],"content":"The methods in this class provide an implementation of the standard query operators for querying data sources that implement <xref:System.Collections.Generic.IEnumerable%601>. The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.","nodes":[{"content":"The methods in this class provide an implementation of the standard query operators for querying data sources that implement <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.","pos":[0,175],"source":"The methods in this class provide an implementation of the standard query operators for querying data sources that implement <xref:System.Collections.Generic.IEnumerable%601>."},{"content":"The standard query operators are general purpose methods that follow the <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.","pos":[176,427],"source":" The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language."}]},{"pos":[434,706],"content":"The majority of the methods in this class are defined as extension methods that extend <xref:System.Collections.Generic.IEnumerable%601>. This means they can be called like an instance method on any object that implements <xref:System.Collections.Generic.IEnumerable%601>.","nodes":[{"content":"The majority of the methods in this class are defined as extension methods that extend <xref:System.Collections.Generic.IEnumerable%601>. This means they can be called like an instance method on any object that implements <xref:System.Collections.Generic.IEnumerable%601>.","pos":[0,272],"nodes":[{"content":"The majority of the methods in this class are defined as extension methods that extend <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.","pos":[0,137],"source":"The majority of the methods in this class are defined as extension methods that extend <xref:System.Collections.Generic.IEnumerable%601>."},{"content":"This means they can be called like an instance method on any object that implements <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.","pos":[138,272],"source":" This means they can be called like an instance method on any object that implements <xref:System.Collections.Generic.IEnumerable%601>."}]}]},{"pos":[713,998],"content":"Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated. This is known as deferred execution. Methods that are used in a query that returns a singleton value execute and consume the target data immediately.","nodes":[{"content":"Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated. This is known as deferred execution. Methods that are used in a query that returns a singleton value execute and consume the target data immediately.","pos":[0,285],"nodes":[{"content":"Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.","pos":[0,135]},{"content":"This is known as deferred execution.","pos":[136,172]},{"content":"Methods that are used in a query that returns a singleton value execute and consume the target data immediately.","pos":[173,285]}]}]}],"pos":[21553,22558],"yaml":true,"extradata":"MT"},{"content":"Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.","nodes":[{"pos":[0,178],"content":"Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.","nodes":[{"content":"Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.","pos":[0,178],"nodes":[{"content":"Applies an accumulator function over a sequence.","pos":[0,48]},{"content":"The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.","pos":[49,178]}]}]}],"pos":[25022,25201],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> method makes it simple to perform a calculation over a sequence of values. This method works by calling `func` one time for each element in `source`. Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`). The value of the `seed` parameter is used as the initial aggregate value. The result of `func` replaces the previous aggregated value. The final result of `func` is passed to `resultSelector` to obtain the final result of <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.  \n  \n To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,1099],"content":"The <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> method makes it simple to perform a calculation over a sequence of values. This method works by calling `func` one time for each element in `source`. Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`). The value of the `seed` parameter is used as the initial aggregate value. The result of `func` replaces the previous aggregated value. The final result of `func` is passed to `resultSelector` to obtain the final result of <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.","pos":[0,276],"source":"The <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> method makes it simple to perform a calculation over a sequence of values."},{"content":"This method works by calling <ph id=\"ph1\">`func`</ph> one time for each element in <ph id=\"ph2\">`source`</ph>.","pos":[277,351],"source":" This method works by calling `func` one time for each element in `source`."},{"content":"Each time <ph id=\"ph1\">`func`</ph> is called, <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id=\"ph3\">`func`</ph>).","pos":[352,678],"source":" Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`)."},{"content":"The value of the <ph id=\"ph1\">`seed`</ph> parameter is used as the initial aggregate value.","pos":[679,752],"source":" The value of the `seed` parameter is used as the initial aggregate value."},{"content":"The result of <ph id=\"ph1\">`func`</ph> replaces the previous aggregated value.","pos":[753,813],"source":" The result of `func` replaces the previous aggregated value."},{"content":"The final result of <ph id=\"ph1\">`func`</ph> is passed to <ph id=\"ph2\">`resultSelector`</ph> to obtain the final result of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph>.","pos":[814,1099],"source":" The final result of `func` is passed to `resultSelector` to obtain the final result of <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>."}]},{"pos":[1106,1467],"content":"To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"content":"To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","pos":[0,361],"source":"To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>."}]}],"pos":[25212,26684],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to aggregate over.","nodes":[{"pos":[0,83],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to aggregate over.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to aggregate over."}],"pos":[27491,27575],"yaml":true},{"content":"The initial accumulator value.","nodes":[{"pos":[0,30],"content":"The initial accumulator value.","nodes":[{"content":"The initial accumulator value.","pos":[0,30]}]}],"pos":[27633,27664],"yaml":true},{"content":"An accumulator function to be invoked on each element.","nodes":[{"pos":[0,54],"content":"An accumulator function to be invoked on each element.","nodes":[{"content":"An accumulator function to be invoked on each element.","pos":[0,54]}]}],"pos":[27755,27810],"yaml":true},{"content":"A function to transform the final accumulator value into the result value.","nodes":[{"pos":[0,74],"content":"A function to transform the final accumulator value into the result value.","nodes":[{"content":"A function to transform the final accumulator value into the result value.","pos":[0,74]}]}],"pos":[27899,27974],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[28031,28080],"yaml":true},{"content":"The type of the accumulator value.","nodes":[{"pos":[0,34],"content":"The type of the accumulator value.","nodes":[{"content":"The type of the accumulator value.","pos":[0,34]}]}],"pos":[28121,28156],"yaml":true},{"content":"The type of the resulting value.","nodes":[{"pos":[0,32],"content":"The type of the resulting value.","nodes":[{"content":"The type of the resulting value.","pos":[0,32]}]}],"pos":[28193,28226],"yaml":true},{"content":"The transformed final accumulator value.","nodes":[{"pos":[0,40],"content":"The transformed final accumulator value.","nodes":[{"content":"The transformed final accumulator value.","pos":[0,40]}]}],"pos":[28277,28318],"yaml":true},{"content":"<code>source</code> or <code>func</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;func&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>func</code> or <code>resultSelector</code> is `null`."}],"pos":[28483,28566],"yaml":true},{"content":"Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.","nodes":[{"pos":[0,115],"content":"Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.","nodes":[{"content":"Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.","pos":[0,115],"nodes":[{"content":"Applies an accumulator function over a sequence.","pos":[0,48]},{"content":"The specified seed value is used as the initial accumulator value.","pos":[49,115]}]}]}],"pos":[30442,30558],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> method makes it simple to perform a calculation over a sequence of values. This method works by calling `func` one time for each element in `source`. Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`). The value of the `seed` parameter is used as the initial aggregate value. The result of `func` replaces the previous aggregated value. <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> returns the final result of `func`.  \n  \n To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,936],"content":"The <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> method makes it simple to perform a calculation over a sequence of values. This method works by calling `func` one time for each element in `source`. Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`). The value of the `seed` parameter is used as the initial aggregate value. The result of `func` replaces the previous aggregated value. <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> returns the final result of `func`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.","pos":[0,239],"source":"The <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> method makes it simple to perform a calculation over a sequence of values."},{"content":"This method works by calling <ph id=\"ph1\">`func`</ph> one time for each element in <ph id=\"ph2\">`source`</ph>.","pos":[240,314],"source":" This method works by calling `func` one time for each element in `source`."},{"content":"Each time <ph id=\"ph1\">`func`</ph> is called, <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id=\"ph3\">`func`</ph>).","pos":[315,604],"source":" Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`)."},{"content":"The value of the <ph id=\"ph1\">`seed`</ph> parameter is used as the initial aggregate value.","pos":[605,678],"source":" The value of the `seed` parameter is used as the initial aggregate value."},{"content":"The result of <ph id=\"ph1\">`func`</ph> replaces the previous aggregated value.","pos":[679,739],"source":" The result of `func` replaces the previous aggregated value."},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> returns the final result of <ph id=\"ph2\">`func`</ph>.","pos":[740,936],"source":" <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> returns the final result of `func`."}]},{"pos":[943,1304],"content":"To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"content":"To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","pos":[0,361],"source":"To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>."}]}],"pos":[30569,31878],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to aggregate over.","nodes":[{"pos":[0,83],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to aggregate over.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to aggregate over."}],"pos":[32638,32722],"yaml":true},{"content":"The initial accumulator value.","nodes":[{"pos":[0,30],"content":"The initial accumulator value.","nodes":[{"content":"The initial accumulator value.","pos":[0,30]}]}],"pos":[32780,32811],"yaml":true},{"content":"An accumulator function to be invoked on each element.","nodes":[{"pos":[0,54],"content":"An accumulator function to be invoked on each element.","nodes":[{"content":"An accumulator function to be invoked on each element.","pos":[0,54]}]}],"pos":[32902,32957],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[33014,33063],"yaml":true},{"content":"The type of the accumulator value.","nodes":[{"pos":[0,34],"content":"The type of the accumulator value.","nodes":[{"content":"The type of the accumulator value.","pos":[0,34]}]}],"pos":[33104,33139],"yaml":true},{"content":"The final accumulator value.","nodes":[{"pos":[0,28],"content":"The final accumulator value.","nodes":[{"content":"The final accumulator value.","pos":[0,28]}]}],"pos":[33194,33223],"yaml":true},{"content":"<code>source</code> or <code>func</code> is `null`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;func&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>func</code> is `null`."}],"pos":[33388,33440],"yaml":true},{"content":"Applies an accumulator function over a sequence.","nodes":[{"pos":[0,48],"content":"Applies an accumulator function over a sequence.","nodes":[{"content":"Applies an accumulator function over a sequence.","pos":[0,48]}]}],"pos":[35227,35276],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> method makes it simple to perform a calculation over a sequence of values. This method works by calling `func` one time for each element in `source` except the first one. Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`). The first element of `source` is used as the initial aggregate value. The result of `func` replaces the previous aggregated value. <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> returns the final result of `func`.  \n  \n This overload of the <xref:System.Linq.Enumerable.Aggregate%2A>methodisn't suitable for all casesbecause it uses the first element of `source` as the initial aggregate value. You should choose another overload if the return value should include only the elements of `source` that meet a certain condition. For example, this overload isn't reliableif you want to calculate the sum of the even numbers in `source`. The result will be incorrect if the first element is odd instead of even.  \n  \n To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,923],"content":"The <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> method makes it simple to perform a calculation over a sequence of values. This method works by calling `func` one time for each element in `source` except the first one. Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`). The first element of `source` is used as the initial aggregate value. The result of `func` replaces the previous aggregated value. <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> returns the final result of `func`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.","pos":[0,229],"source":"The <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> method makes it simple to perform a calculation over a sequence of values."},{"content":"This method works by calling <ph id=\"ph1\">`func`</ph> one time for each element in <ph id=\"ph2\">`source`</ph> except the first one.","pos":[230,325],"source":" This method works by calling `func` one time for each element in `source` except the first one."},{"content":"Each time <ph id=\"ph1\">`func`</ph> is called, <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id=\"ph3\">`func`</ph>).","pos":[326,605],"source":" Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`)."},{"content":"The first element of <ph id=\"ph1\">`source`</ph> is used as the initial aggregate value.","pos":[606,675],"source":" The first element of `source` is used as the initial aggregate value."},{"content":"The result of <ph id=\"ph1\">`func`</ph> replaces the previous aggregated value.","pos":[676,736],"source":" The result of `func` replaces the previous aggregated value."},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> returns the final result of <ph id=\"ph2\">`func`</ph>.","pos":[737,923],"source":" <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> returns the final result of `func`."}]},{"pos":[930,1416],"content":"This overload of the <xref:System.Linq.Enumerable.Aggregate%2A>methodisn't suitable for all casesbecause it uses the first element of `source` as the initial aggregate value. You should choose another overload if the return value should include only the elements of `source` that meet a certain condition. For example, this overload isn't reliableif you want to calculate the sum of the even numbers in `source`. The result will be incorrect if the first element is odd instead of even.","nodes":[{"content":"This overload of the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>methodisn't suitable for all casesbecause it uses the first element of <ph id=\"ph2\">`source`</ph> as the initial aggregate value.","pos":[0,174],"source":"This overload of the <xref:System.Linq.Enumerable.Aggregate%2A>methodisn't suitable for all casesbecause it uses the first element of `source` as the initial aggregate value."},{"content":"You should choose another overload if the return value should include only the elements of <ph id=\"ph1\">`source`</ph> that meet a certain condition.","pos":[175,305],"source":" You should choose another overload if the return value should include only the elements of `source` that meet a certain condition."},{"content":"For example, this overload isn't reliableif you want to calculate the sum of the even numbers in <ph id=\"ph1\">`source`</ph>.","pos":[306,412],"source":" For example, this overload isn't reliableif you want to calculate the sum of the even numbers in `source`."},{"content":"The result will be incorrect if the first element is odd instead of even.","pos":[413,486]}]},{"pos":[1423,1784],"content":"To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"content":"To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","pos":[0,361],"source":"To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>."}]}],"pos":[35287,37078],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to aggregate over.","nodes":[{"pos":[0,83],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to aggregate over.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to aggregate over."}],"pos":[37785,37869],"yaml":true},{"content":"An accumulator function to be invoked on each element.","nodes":[{"pos":[0,54],"content":"An accumulator function to be invoked on each element.","nodes":[{"content":"An accumulator function to be invoked on each element.","pos":[0,54]}]}],"pos":[37952,38007],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[38064,38113],"yaml":true},{"content":"The final accumulator value.","nodes":[{"pos":[0,28],"content":"The final accumulator value.","nodes":[{"content":"The final accumulator value.","pos":[0,28]}]}],"pos":[38164,38193],"yaml":true},{"content":"<code>source</code> or <code>func</code> is `null`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;func&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>func</code> is `null`."}],"pos":[38358,38410],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[38520,38562],"yaml":true},{"content":"Determines whether all elements of a sequence satisfy a condition.","nodes":[{"pos":[0,66],"content":"Determines whether all elements of a sequence satisfy a condition.","nodes":[{"content":"Determines whether all elements of a sequence satisfy a condition.","pos":[0,66]}]}],"pos":[40310,40377],"yaml":true},{"content":"> [!NOTE]\n>  This method does not return all the elements of a collection. Instead, it determines whether all the elements of a collection satisfy a condition.  \n  \n The enumeration of `source` is stopped as soon as the result can be determined.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into All()` clause translates to an invocation of <xref:System.Linq.Enumerable.All%2A>.","nodes":[{"pos":[2,159],"content":"[!NOTE]\n This method does not return all the elements of a collection. Instead, it determines whether all the elements of a collection satisfy a condition.","leadings":["","> "],"nodes":[{"content":" This method does not return all the elements of a collection. Instead, it determines whether all the elements of a collection satisfy a condition.","pos":[8,155],"nodes":[{"content":"This method does not return all the elements of a collection.","pos":[1,62]},{"content":"Instead, it determines whether all the elements of a collection satisfy a condition.","pos":[63,147]}]}]},{"pos":[166,245],"content":"The enumeration of <ph id=\"ph1\">`source`</ph> is stopped as soon as the result can be determined.","source":"The enumeration of `source` is stopped as soon as the result can be determined."},{"pos":[252,425],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into All()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into All()` clause translates to an invocation of <xref:System.Linq.Enumerable.All%2A>."}],"pos":[40388,40821],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements to apply the predicate to.","nodes":[{"pos":[0,118],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements to apply the predicate to.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements to apply the predicate to."}],"pos":[42267,42386],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[42473,42522],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[42579,42628],"yaml":true},{"content":"`true` if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, `false`.","nodes":[{"pos":[0,139],"content":"<ph id=\"ph1\">`true`</ph> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, `false`."}],"pos":[42686,42828],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[42987,43044],"yaml":true},{"content":"Determines whether a sequence contains any elements.","nodes":[{"pos":[0,52],"content":"Determines whether a sequence contains any elements.","nodes":[{"content":"Determines whether a sequence contains any elements.","pos":[0,52]}]}],"pos":[44627,44680],"yaml":true},{"content":"> [!NOTE]\n>  This method does not return any one element of a collection. Instead, it determines whether the collection contains any elements.  \n  \n The enumeration of `source` is stopped as soon as the result can be determined.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.","nodes":[{"pos":[2,142],"content":"[!NOTE]\n This method does not return any one element of a collection. Instead, it determines whether the collection contains any elements.","leadings":["","> "],"nodes":[{"content":" This method does not return any one element of a collection. Instead, it determines whether the collection contains any elements.","pos":[8,138],"nodes":[{"content":"This method does not return any one element of a collection.","pos":[1,61]},{"content":"Instead, it determines whether the collection contains any elements.","pos":[62,130]}]}]},{"pos":[149,228],"content":"The enumeration of <ph id=\"ph1\">`source`</ph> is stopped as soon as the result can be determined.","source":"The enumeration of `source` is stopped as soon as the result can be determined."},{"pos":[235,408],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Any()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>."}],"pos":[44691,45107],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to check for emptiness.","nodes":[{"pos":[0,89],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to check for emptiness.","source":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to check for emptiness."}],"pos":[46567,46657],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[46714,46763],"yaml":true},{"content":"`true` if the source sequence contains any elements; otherwise, `false`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">`true`</ph> if the source sequence contains any elements; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the source sequence contains any elements; otherwise, `false`."}],"pos":[46821,46896],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[47055,47086],"yaml":true},{"content":"Determines whether any element of a sequence satisfies a condition.","nodes":[{"pos":[0,67],"content":"Determines whether any element of a sequence satisfies a condition.","nodes":[{"content":"Determines whether any element of a sequence satisfies a condition.","pos":[0,67]}]}],"pos":[48834,48902],"yaml":true},{"content":"> [!NOTE]\n>  This method does not return any one element of a collection. Instead, it determines whether any elements of a collection satisfy a condition.  \n  \n The enumeration of `source` is stopped as soon as the result can be determined.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.","nodes":[{"pos":[2,154],"content":"[!NOTE]\n This method does not return any one element of a collection. Instead, it determines whether any elements of a collection satisfy a condition.","leadings":["","> "],"nodes":[{"content":" This method does not return any one element of a collection. Instead, it determines whether any elements of a collection satisfy a condition.","pos":[8,150],"nodes":[{"content":"This method does not return any one element of a collection.","pos":[1,61]},{"content":"Instead, it determines whether any elements of a collection satisfy a condition.","pos":[62,142]}]}]},{"pos":[161,240],"content":"The enumeration of <ph id=\"ph1\">`source`</ph> is stopped as soon as the result can be determined.","source":"The enumeration of `source` is stopped as soon as the result can be determined."},{"pos":[247,420],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Any()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>."}],"pos":[48913,49341],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to apply the predicate to.","nodes":[{"pos":[0,106],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements to apply the predicate to.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to apply the predicate to."}],"pos":[50053,50160],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[50247,50296],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[50353,50402],"yaml":true},{"content":"`true` if any elements in the source sequence pass the test in the specified predicate; otherwise, `false`.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">`true`</ph> if any elements in the source sequence pass the test in the specified predicate; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if any elements in the source sequence pass the test in the specified predicate; otherwise, `false`."}],"pos":[50460,50570],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[50729,50786],"yaml":true},{"content":"Returns the input typed as <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.","nodes":[{"pos":[0,89],"content":"Returns the input typed as <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the input typed as <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>."}],"pos":[53979,54069],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method has no effect other than to change the compile-time type of `source` from a type that implements <xref:System.Collections.Generic.IEnumerable%601> to <xref:System.Collections.Generic.IEnumerable%601> itself.  \n  \n <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> can be used to choose between query implementations when a sequence implements <xref:System.Collections.Generic.IEnumerable%601> but also has a different set of public query methods available. For example, given a generic class `Table` that implements <xref:System.Collections.Generic.IEnumerable%601> and has its own methods such as `Where`, `Select`, and `SelectMany`, a call to `Where` would invoke the public `Where` method of `Table`. A `Table` type that represents a database table could have a `Where` method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution. If remote execution is not desired, for example because the predicate invokes a local method, the <xref:System.Linq.Enumerable.AsEnumerable%2A> method can be used to hide the custom methods and instead make the standard query operators available.","nodes":[{"pos":[0,325],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method has no effect other than to change the compile-time type of <ph id=\"ph2\">`source`</ph> from a type that implements <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> to <ph id=\"ph4\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> itself.","source":"The <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method has no effect other than to change the compile-time type of `source` from a type that implements <xref:System.Collections.Generic.IEnumerable%601> to <xref:System.Collections.Generic.IEnumerable%601> itself."},{"pos":[332,1308],"content":"<xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> can be used to choose between query implementations when a sequence implements <xref:System.Collections.Generic.IEnumerable%601> but also has a different set of public query methods available. For example, given a generic class `Table` that implements <xref:System.Collections.Generic.IEnumerable%601> and has its own methods such as `Where`, `Select`, and `SelectMany`, a call to `Where` would invoke the public `Where` method of `Table`. A `Table` type that represents a database table could have a `Where` method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution. If remote execution is not desired, for example because the predicate invokes a local method, the <xref:System.Linq.Enumerable.AsEnumerable%2A> method can be used to hide the custom methods and instead make the standard query operators available.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> can be used to choose between query implementations when a sequence implements <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> but also has a different set of public query methods available.","pos":[0,299],"source":"<xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> can be used to choose between query implementations when a sequence implements <xref:System.Collections.Generic.IEnumerable%601> but also has a different set of public query methods available."},{"content":"For example, given a generic class <ph id=\"ph1\">`Table`</ph> that implements <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and has its own methods such as <ph id=\"ph3\">`Where`</ph>, <ph id=\"ph4\">`Select`</ph>, and <ph id=\"ph5\">`SelectMany`</ph>, a call to <ph id=\"ph6\">`Where`</ph> would invoke the public <ph id=\"ph7\">`Where`</ph> method of <ph id=\"ph8\">`Table`</ph>.","pos":[300,546],"source":" For example, given a generic class `Table` that implements <xref:System.Collections.Generic.IEnumerable%601> and has its own methods such as `Where`, `Select`, and `SelectMany`, a call to `Where` would invoke the public `Where` method of `Table`."},{"content":"A <ph id=\"ph1\">`Table`</ph> type that represents a database table could have a <ph id=\"ph2\">`Where`</ph> method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.","pos":[547,729],"source":" A `Table` type that represents a database table could have a `Where` method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution."},{"content":"If remote execution is not desired, for example because the predicate invokes a local method, the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> method can be used to hide the custom methods and instead make the standard query operators available.","pos":[730,976],"source":" If remote execution is not desired, for example because the predicate invokes a local method, the <xref:System.Linq.Enumerable.AsEnumerable%2A> method can be used to hide the custom methods and instead make the standard query operators available."}]}],"pos":[54080,55393],"yaml":true,"extradata":"MT"},{"content":"The sequence to type as <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.","nodes":[{"pos":[0,86],"content":"The sequence to type as <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph>.","source":"The sequence to type as <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>."}],"pos":[56234,56321],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[56378,56427],"yaml":true},{"content":"The input sequence typed as <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.","nodes":[{"pos":[0,90],"content":"The input sequence typed as <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph>.","source":"The input sequence typed as <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>."}],"pos":[56518,56609],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Single\"></xref> values.","nodes":[{"pos":[0,80],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of <xref href=\"System.Single\"></xref> values."}],"pos":[58276,58357],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[58368,58550],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Single\"></xref> values to calculate the average of.","nodes":[{"pos":[0,84],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of <xref href=\"System.Single\"></xref> values to calculate the average of."}],"pos":[59364,59449],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[59506,59545],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[59705,59736],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[59846,59888],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Single\"></xref> values.","nodes":[{"pos":[0,89],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of nullable <xref href=\"System.Single\"></xref> values."}],"pos":[61545,61635],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[61646,61828],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Single\"></xref> values to calculate the average of.","nodes":[{"pos":[0,93],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of nullable <xref href=\"System.Single\"></xref> values to calculate the average of."}],"pos":[62704,62798],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.","nodes":[{"pos":[0,121],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only values that are <ph id=\"ph2\">`null`</ph>.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`."}],"pos":[62872,62994],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[63154,63185],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Int64\"></xref> values.","nodes":[{"pos":[0,88],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of nullable <xref href=\"System.Int64\"></xref> values."}],"pos":[64858,64947],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[64958,65140],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Int64\"></xref> values to calculate the average of.","nodes":[{"pos":[0,92],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of nullable <xref href=\"System.Int64\"></xref> values to calculate the average of."}],"pos":[65901,65994],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.","nodes":[{"pos":[0,121],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only values that are <ph id=\"ph2\">`null`</ph>.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`."}],"pos":[66068,66190],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[66350,66381],"yaml":true},{"content":"The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,98],"content":"The sum of the elements in the sequence is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[66475,66574],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Int32\"></xref> values.","nodes":[{"pos":[0,88],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of nullable <xref href=\"System.Int32\"></xref> values."}],"pos":[68247,68336],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[68347,68529],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Int32\"></xref> values to calculate the average of.","nodes":[{"pos":[0,92],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of nullable <xref href=\"System.Int32\"></xref> values to calculate the average of."}],"pos":[69403,69496],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.","nodes":[{"pos":[0,121],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only values that are <ph id=\"ph2\">`null`</ph>.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`."}],"pos":[69570,69692],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[69852,69883],"yaml":true},{"content":"The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,98],"content":"The sum of the elements in the sequence is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[69977,70076],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Double\"></xref> values.","nodes":[{"pos":[0,89],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of nullable <xref href=\"System.Double\"></xref> values."}],"pos":[71755,71845],"yaml":true},{"content":"If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,130],"content":"If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.","nodes":[{"content":"If the sum of the elements is too large to represent as a <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph>, this method returns positive or negative infinity.","pos":[0,130],"source":"If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity."}]},{"pos":[137,318],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[71856,72179],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Double\"></xref> values to calculate the average of.","nodes":[{"pos":[0,93],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of nullable <xref href=\"System.Double\"></xref> values to calculate the average of."}],"pos":[73057,73151],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.","nodes":[{"pos":[0,121],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only values that are <ph id=\"ph2\">`null`</ph>.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`."}],"pos":[73225,73347],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[73507,73538],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Int64\"></xref> values.","nodes":[{"pos":[0,79],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of <xref href=\"System.Int64\"></xref> values."}],"pos":[75108,75188],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[75199,75381],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Int64\"></xref> values to calculate the average of.","nodes":[{"pos":[0,83],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of <xref href=\"System.Int64\"></xref> values to calculate the average of."}],"pos":[76194,76278],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[76335,76374],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[76534,76565],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[76675,76717],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Int32\"></xref> values.","nodes":[{"pos":[0,79],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of <xref href=\"System.Int32\"></xref> values."}],"pos":[78309,78389],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[78400,78582],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Int32\"></xref> values to calculate the average of.","nodes":[{"pos":[0,83],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of <xref href=\"System.Int32\"></xref> values to calculate the average of."}],"pos":[79280,79364],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[79421,79460],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[79620,79651],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[79761,79803],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Double\"></xref> values.","nodes":[{"pos":[0,80],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of <xref href=\"System.Double\"></xref> values."}],"pos":[81379,81460],"yaml":true},{"content":"If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,130],"content":"If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.","nodes":[{"content":"If the sum of the elements is too large to represent as a <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph>, this method returns positive or negative infinity.","pos":[0,130],"source":"If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity."}]},{"pos":[137,318],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[81471,81794],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Double\"></xref> values to calculate the average of.","nodes":[{"pos":[0,84],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of <xref href=\"System.Double\"></xref> values to calculate the average of."}],"pos":[82610,82695],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[82752,82791],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[82951,82982],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[83092,83134],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Decimal\"></xref> values.","nodes":[{"pos":[0,81],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of <xref href=\"System.Decimal\"></xref> values."}],"pos":[84738,84820],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[84831,85013],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Decimal\"></xref> values to calculate the average of.","nodes":[{"pos":[0,85],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of <xref href=\"System.Decimal\"></xref> values to calculate the average of."}],"pos":[85857,85943],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[86001,86040],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[86200,86231],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[86341,86383],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Decimal\"></xref> values.","nodes":[{"pos":[0,90],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of nullable <xref href=\"System.Decimal\"></xref> values."}],"pos":[88068,88159],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[88170,88352],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Decimal\"></xref> values to calculate the average of.","nodes":[{"pos":[0,94],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of nullable <xref href=\"System.Decimal\"></xref> values to calculate the average of."}],"pos":[89233,89328],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.","nodes":[{"pos":[0,121],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only values that are <ph id=\"ph2\">`null`</ph>.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`."}],"pos":[89403,89525],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[89685,89716],"yaml":true},{"content":"The sum of the elements in the sequence is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,100],"content":"The sum of the elements in the sequence is larger than <ph id=\"ph1\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum of the elements in the sequence is larger than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[89810,89911],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Int32\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,177],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the average of a sequence of nullable <xref href=\"System.Int32\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[91752,91930],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[91941,92123],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[93025,93075],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[93176,93223],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[93280,93329],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.","nodes":[{"pos":[0,121],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only values that are <ph id=\"ph2\">`null`</ph>.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`."}],"pos":[93403,93525],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[93688,93744],"yaml":true},{"content":"The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,98],"content":"The sum of the elements in the sequence is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[93838,93937],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Single\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,169],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the average of a sequence of <xref href=\"System.Single\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[95703,95873],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[95884,96066],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[96949,96999],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[97084,97131],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[97188,97237],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[97294,97333],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[97496,97552],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[97662,97704],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Single\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,178],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the average of a sequence of nullable <xref href=\"System.Single\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[99551,99730],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[99741,99923],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[100826,100876],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[100978,101025],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[101082,101131],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.","nodes":[{"pos":[0,121],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only values that are <ph id=\"ph2\">`null`</ph>.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`."}],"pos":[101205,101327],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[101490,101546],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Int64\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,177],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the average of a sequence of nullable <xref href=\"System.Int64\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[103365,103543],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[103554,103736],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[104639,104689],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[104790,104837],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[104894,104943],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.","nodes":[{"pos":[0,121],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only values that are <ph id=\"ph2\">`null`</ph>.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`."}],"pos":[105017,105139],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Double\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,178],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the average of a sequence of nullable <xref href=\"System.Double\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[107050,107229],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[107240,107422],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[108327,108377],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[108479,108526],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[108583,108632],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.","nodes":[{"pos":[0,121],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only values that are <ph id=\"ph2\">`null`</ph>.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`."}],"pos":[108706,108828],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[108991,109047],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Decimal\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,179],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the average of a sequence of nullable <xref href=\"System.Decimal\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[110878,111058],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[111069,111251],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[112158,112208],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[112311,112358],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[112415,112464],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.","nodes":[{"pos":[0,121],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only values that are <ph id=\"ph2\">`null`</ph>.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`."}],"pos":[112539,112661],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[112824,112880],"yaml":true},{"content":"The sum of the elements in the sequence is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,100],"content":"The sum of the elements in the sequence is larger than <ph id=\"ph1\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum of the elements in the sequence is larger than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[112974,113075],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Int64\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,168],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the average of a sequence of <xref href=\"System.Int64\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[114813,114982],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[114993,115175],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[115958,116008],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[116092,116139],"yaml":true},{"content":"The type of the elements of source.","nodes":[{"pos":[0,35],"content":"The type of the elements of source.","nodes":[{"content":"The type of the elements of source.","pos":[0,35]}]}],"pos":[116196,116232],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[116289,116328],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[116491,116547],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[116657,116699],"yaml":true},{"content":"The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,98],"content":"The sum of the elements in the sequence is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[116793,116892],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Int32\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,168],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the average of a sequence of <xref href=\"System.Int32\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[118630,118799],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[118810,118992],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[119774,119824],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[119908,119955],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[120012,120061],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[120118,120157],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[120320,120376],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[120486,120528],"yaml":true},{"content":"The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,98],"content":"The sum of the elements in the sequence is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[120622,120721],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Double\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,169],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the average of a sequence of <xref href=\"System.Double\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[122487,122657],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[122668,122850],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[123735,123785],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[123870,123917],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[123974,124023],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[124080,124119],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[124282,124338],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[124448,124490],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Decimal\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,170],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the average of a sequence of <xref href=\"System.Decimal\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[126240,126411],"yaml":true},{"content":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.","nodes":[{"pos":[0,181],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>."}],"pos":[126422,126604],"yaml":true,"extradata":"MT"},{"content":"A sequence of values that are used to calculate an average.","nodes":[{"pos":[0,59],"content":"A sequence of values that are used to calculate an average.","nodes":[{"content":"A sequence of values that are used to calculate an average.","pos":[0,59]}]}],"pos":[127491,127551],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[127637,127684],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[127741,127790],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[127848,127887],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[128050,128106],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[128216,128258],"yaml":true},{"content":"The sum of the elements in the sequence is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,100],"content":"The sum of the elements in the sequence is larger than <ph id=\"ph1\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum of the elements in the sequence is larger than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[128352,128453],"yaml":true},{"content":"Casts the elements of an <xref href=\"System.Collections.IEnumerable\"></xref> to the specified type.","nodes":[{"pos":[0,99],"content":"Casts the elements of an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> to the specified type.","source":"Casts the elements of an <xref href=\"System.Collections.IEnumerable\"></xref> to the specified type."}],"pos":[129954,130054],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information. For example, <xref:System.Collections.ArrayList> does not implement <xref:System.Collections.Generic.IEnumerable%601>, but by calling <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> on the <xref:System.Collections.ArrayList> object, the standard query operators can then be used to query the sequence.  \n  \n If an element cannot be cast to type `TResult`, this method will throw an exception. To obtain only those elements that can be cast to type `TResult`, use the <xref:System.Linq.Enumerable.OfType%2A> method instead of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.  \n  \n In a query expression, an explicitly typed iteration variable translates to an invocation of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>. This example shows the syntax for an explicitly typed range variable.  \n  \n```csharp  \nfrom int i in objects  \n```  \n  \n```vb  \nFrom i As Integer In objects  \n```","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,986],"content":"The <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information. For example, <xref:System.Collections.ArrayList> does not implement <xref:System.Collections.Generic.IEnumerable%601>, but by calling <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> on the <xref:System.Collections.ArrayList> object, the standard query operators can then be used to query the sequence.","nodes":[{"content":"The <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information. For example, <xref:System.Collections.ArrayList> does not implement <xref:System.Collections.Generic.IEnumerable%601>, but by calling <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> on the <xref:System.Collections.ArrayList> object, the standard query operators can then be used to query the sequence.","pos":[0,543],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.","pos":[0,211],"source":"The <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information."},{"content":"For example, <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> does not implement <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, but by calling <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> on the <ph id=\"ph4\">&lt;xref:System.Collections.ArrayList&gt;</ph> object, the standard query operators can then be used to query the sequence.","pos":[212,543],"source":" For example, <xref:System.Collections.ArrayList> does not implement <xref:System.Collections.Generic.IEnumerable%601>, but by calling <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> on the <xref:System.Collections.ArrayList> object, the standard query operators can then be used to query the sequence."}]}]},{"pos":[993,1288],"content":"If an element cannot be cast to type `TResult`, this method will throw an exception. To obtain only those elements that can be cast to type `TResult`, use the <xref:System.Linq.Enumerable.OfType%2A> method instead of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.","nodes":[{"content":"If an element cannot be cast to type <ph id=\"ph1\">`TResult`</ph>, this method will throw an exception.","pos":[0,84],"source":"If an element cannot be cast to type `TResult`, this method will throw an exception."},{"content":"To obtain only those elements that can be cast to type <ph id=\"ph1\">`TResult`</ph>, use the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> method instead of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.","pos":[85,295],"source":" To obtain only those elements that can be cast to type `TResult`, use the <xref:System.Linq.Enumerable.OfType%2A> method instead of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>."}]},{"pos":[1295,1536],"content":"In a query expression, an explicitly typed iteration variable translates to an invocation of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>. This example shows the syntax for an explicitly typed range variable.","nodes":[{"content":"In a query expression, an explicitly typed iteration variable translates to an invocation of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>. This example shows the syntax for an explicitly typed range variable.","pos":[0,241],"nodes":[{"content":"In a query expression, an explicitly typed iteration variable translates to an invocation of <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.","pos":[0,171],"source":"In a query expression, an explicitly typed iteration variable translates to an invocation of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>."},{"content":"This example shows the syntax for an explicitly typed range variable.","pos":[172,241]}]}]}],"pos":[130065,131711],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IEnumerable\"></xref> that contains the elements to be cast to type <code>TResult</code>.","nodes":[{"pos":[0,123],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> that contains the elements to be cast to type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.Collections.IEnumerable\"></xref> that contains the elements to be cast to type <code>TResult</code>."}],"pos":[132471,132595],"yaml":true},{"content":"The type to cast the elements of <code>source</code> to.","nodes":[{"pos":[0,56],"content":"The type to cast the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> to.","source":"The type to cast the elements of <code>source</code> to."}],"pos":[132652,132709],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains each element of the source sequence cast to the specified type.","nodes":[{"pos":[0,142],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains each element of the source sequence cast to the specified type.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains each element of the source sequence cast to the specified type."}],"pos":[132800,132943],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[133103,133134],"yaml":true},{"content":"An element in the sequence cannot be cast to type <code>TResult</code>.","nodes":[{"pos":[0,71],"content":"An element in the sequence cannot be cast to type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An element in the sequence cannot be cast to type <code>TResult</code>."}],"pos":[133234,133306],"yaml":true},{"content":"Concatenates two sequences.","nodes":[{"pos":[0,27],"content":"Concatenates two sequences.","nodes":[{"content":"Concatenates two sequences.","pos":[0,27]}]}],"pos":[135083,135111],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns all the original elements in the input sequences. The <xref:System.Linq.Enumerable.Union%2A> method returns only unique elements.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,983],"content":"The <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns all the original elements in the input sequences. The <xref:System.Linq.Enumerable.Union%2A> method returns only unique elements.","nodes":[{"content":"The <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns all the original elements in the input sequences. The <xref:System.Linq.Enumerable.Union%2A> method returns only unique elements.","pos":[0,540],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method differs from the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method because the <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns all the original elements in the input sequences.","pos":[0,460],"source":"The <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns all the original elements in the input sequences."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method returns only unique elements.","pos":[461,540],"source":" The <xref:System.Linq.Enumerable.Union%2A> method returns only unique elements."}]}]}],"pos":[135122,136110],"yaml":true,"extradata":"MT"},{"content":"The first sequence to concatenate.","nodes":[{"pos":[0,34],"content":"The first sequence to concatenate.","nodes":[{"content":"The first sequence to concatenate.","pos":[0,34]}]}],"pos":[137588,137623],"yaml":true},{"content":"The sequence to concatenate to the first sequence.","nodes":[{"pos":[0,50],"content":"The sequence to concatenate to the first sequence.","nodes":[{"content":"The sequence to concatenate to the first sequence.","pos":[0,50]}]}],"pos":[137719,137770],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[137827,137876],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the concatenated elements of the two input sequences.","nodes":[{"pos":[0,132],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains the concatenated elements of the two input sequences.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the concatenated elements of the two input sequences."}],"pos":[137967,138100],"yaml":true},{"content":"<code>first</code> or <code>second</code> is `null`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>first</code> or <code>second</code> is `null`."}],"pos":[138262,138315],"yaml":true},{"content":"Determines whether a sequence contains a specified element by using the default equality comparer.","nodes":[{"pos":[0,98],"content":"Determines whether a sequence contains a specified element by using the default equality comparer.","nodes":[{"content":"Determines whether a sequence contains a specified element by using the default equality comparer.","pos":[0,98]}]}],"pos":[139967,140066],"yaml":true},{"content":"If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, the `Contains` method in that implementation is invoked to obtain the result. Otherwise, this method determines whether `source` contains the specified element.  \n  \n Enumeration is terminated as soon as a matching element is found.  \n  \n Elements are compared to the specified value by using the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.","nodes":[{"pos":[0,246],"content":"If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, the `Contains` method in that implementation is invoked to obtain the result. Otherwise, this method determines whether `source` contains the specified element.","nodes":[{"content":"If the type of <ph id=\"ph1\">`source`</ph> implements <ph id=\"ph2\">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, the <ph id=\"ph3\">`Contains`</ph> method in that implementation is invoked to obtain the result.","pos":[0,163],"source":"If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, the `Contains` method in that implementation is invoked to obtain the result."},{"content":"Otherwise, this method determines whether <ph id=\"ph1\">`source`</ph> contains the specified element.","pos":[164,246],"source":" Otherwise, this method determines whether `source` contains the specified element."}]},{"pos":[253,318],"content":"Enumeration is terminated as soon as a matching element is found.","nodes":[{"content":"Enumeration is terminated as soon as a matching element is found.","pos":[0,65]}]},{"pos":[325,476],"content":"Elements are compared to the specified value by using the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.","nodes":[{"content":"Elements are compared to the specified value by using the default equality comparer, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.","pos":[0,151],"source":"Elements are compared to the specified value by using the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>."}]}],"pos":[140077,140560],"yaml":true,"extradata":"MT"},{"content":"A sequence in which to locate a value.","nodes":[{"pos":[0,38],"content":"A sequence in which to locate a value.","nodes":[{"content":"A sequence in which to locate a value.","pos":[0,38]}]}],"pos":[141331,141370],"yaml":true},{"content":"The value to locate in the sequence.","nodes":[{"pos":[0,36],"content":"The value to locate in the sequence.","nodes":[{"content":"The value to locate in the sequence.","pos":[0,36]}]}],"pos":[141425,141462],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[141519,141568],"yaml":true},{"content":"`true` if the source sequence contains an element that has the specified value; otherwise, `false`.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">`true`</ph> if the source sequence contains an element that has the specified value; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the source sequence contains an element that has the specified value; otherwise, `false`."}],"pos":[141626,141728],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[141892,141923],"yaml":true},{"content":"Determines whether a sequence contains a specified element by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.","nodes":[{"pos":[0,148],"content":"Determines whether a sequence contains a specified element by using a specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether a sequence contains a specified element by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>."}],"pos":[143809,143958],"yaml":true},{"content":"Enumeration is terminated as soon as a matching element is found.  \n  \n If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements to the specified value.","nodes":[{"pos":[0,65],"content":"Enumeration is terminated as soon as a matching element is found.","nodes":[{"content":"Enumeration is terminated as soon as a matching element is found.","pos":[0,65]}]},{"pos":[72,246],"content":"If c<ph id=\"ph1\">`omparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare elements to the specified value.","source":"If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements to the specified value."}],"pos":[143969,144220],"yaml":true,"extradata":"MT"},{"content":"A sequence in which to locate a value.","nodes":[{"pos":[0,38],"content":"A sequence in which to locate a value.","nodes":[{"content":"A sequence in which to locate a value.","pos":[0,38]}]}],"pos":[145416,145455],"yaml":true},{"content":"The value to locate in the sequence.","nodes":[{"pos":[0,36],"content":"The value to locate in the sequence.","nodes":[{"content":"The value to locate in the sequence.","pos":[0,36]}]}],"pos":[145510,145547],"yaml":true},{"content":"An equality comparer to compare values.","nodes":[{"pos":[0,39],"content":"An equality comparer to compare values.","nodes":[{"content":"An equality comparer to compare values.","pos":[0,39]}]}],"pos":[145651,145691],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[145748,145797],"yaml":true},{"content":"`true` if the source sequence contains an element that has the specified value; otherwise, `false`.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">`true`</ph> if the source sequence contains an element that has the specified value; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the source sequence contains an element that has the specified value; otherwise, `false`."}],"pos":[145855,145957],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[146121,146152],"yaml":true},{"content":"Returns the number of elements in a sequence.","nodes":[{"pos":[0,45],"content":"Returns the number of elements in a sequence.","nodes":[{"content":"Returns the number of elements in a sequence.","pos":[0,45]}]}],"pos":[147747,147793],"yaml":true},{"content":"If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements. Otherwise, this method determines the count.  \n  \n Use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.","nodes":[{"pos":[0,191],"content":"If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements. Otherwise, this method determines the count.","nodes":[{"content":"If the type of <ph id=\"ph1\">`source`</ph> implements <ph id=\"ph2\">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, that implementation is used to obtain the count of elements.","pos":[0,146],"source":"If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements."},{"content":"Otherwise, this method determines the count.","pos":[147,191]}]},{"pos":[198,349],"content":"Use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> method when you expect and want to allow the result to be greater than <ph id=\"ph2\">&lt;xref:System.Int32.MaxValue&gt;</ph>.","pos":[0,151],"source":"Use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>."}]},{"pos":[356,533],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Count()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>."}],"pos":[147804,148344],"yaml":true,"extradata":"MT"},{"content":"A sequence that contains elements to be counted.","nodes":[{"pos":[0,48],"content":"A sequence that contains elements to be counted.","nodes":[{"content":"A sequence that contains elements to be counted.","pos":[0,48]}]}],"pos":[149059,149108],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[149165,149214],"yaml":true},{"content":"The number of elements in the input sequence.","nodes":[{"pos":[0,45],"content":"The number of elements in the input sequence.","nodes":[{"content":"The number of elements in the input sequence.","pos":[0,45]}]}],"pos":[149270,149316],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[149477,149508],"yaml":true},{"content":"The number of elements in <code>source</code> is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,104],"content":"The number of elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> is larger than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of elements in <code>source</code> is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[149602,149707],"yaml":true},{"content":"Returns a number that represents how many elements in the specified sequence satisfy a condition.","nodes":[{"pos":[0,97],"content":"Returns a number that represents how many elements in the specified sequence satisfy a condition.","nodes":[{"content":"Returns a number that represents how many elements in the specified sequence satisfy a condition.","pos":[0,97]}]}],"pos":[151445,151543],"yaml":true},{"content":"If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements. Otherwise, this method determines the count.  \n  \n You should use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.","nodes":[{"pos":[0,191],"content":"If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements. Otherwise, this method determines the count.","nodes":[{"content":"If the type of <ph id=\"ph1\">`source`</ph> implements <ph id=\"ph2\">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, that implementation is used to obtain the count of elements.","pos":[0,146],"source":"If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements."},{"content":"Otherwise, this method determines the count.","pos":[147,191]}]},{"pos":[198,360],"content":"You should use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.","nodes":[{"content":"You should use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> method when you expect and want to allow the result to be greater than <ph id=\"ph2\">&lt;xref:System.Int32.MaxValue&gt;</ph>.","pos":[0,162],"source":"You should use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>."}]},{"pos":[367,544],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Count()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>."}],"pos":[151554,152105],"yaml":true,"extradata":"MT"},{"content":"A sequence that contains elements to be tested and counted.","nodes":[{"pos":[0,59],"content":"A sequence that contains elements to be tested and counted.","nodes":[{"content":"A sequence that contains elements to be tested and counted.","pos":[0,59]}]}],"pos":[152919,152979],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[153066,153115],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[153172,153221],"yaml":true},{"content":"A number that represents how many elements in the sequence satisfy the condition in the predicate function.","nodes":[{"pos":[0,107],"content":"A number that represents how many elements in the sequence satisfy the condition in the predicate function.","nodes":[{"content":"A number that represents how many elements in the sequence satisfy the condition in the predicate function.","pos":[0,107]}]}],"pos":[153277,153385],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[153546,153603],"yaml":true},{"content":"The number of elements in <code>source</code> is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,104],"content":"The number of elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> is larger than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of elements in <code>source</code> is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[153697,153802],"yaml":true},{"content":"Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.","nodes":[{"pos":[0,121],"content":"Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.","nodes":[{"content":"Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.","pos":[0,121]}]}],"pos":[155468,155590],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,576],"content":"This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.","nodes":[{"content":"This method can be used to produce a left outer join when it is combined with the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) method.","pos":[0,133],"source":"This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method."}]}],"pos":[155601,156182],"yaml":true,"extradata":"MT"},{"content":"The sequence to return the specified value for if it is empty.","nodes":[{"pos":[0,62],"content":"The sequence to return the specified value for if it is empty.","nodes":[{"content":"The sequence to return the specified value for if it is empty.","pos":[0,62]}]}],"pos":[157062,157125],"yaml":true},{"content":"The value to return if the sequence is empty.","nodes":[{"pos":[0,45],"content":"The value to return if the sequence is empty.","nodes":[{"content":"The value to return if the sequence is empty.","pos":[0,45]}]}],"pos":[157187,157233],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[157290,157339],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <code>defaultValue</code> if <code>source</code> is empty; otherwise, <code>source</code>.","nodes":[{"pos":[0,169],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">defaultValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> is empty; otherwise, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <code>defaultValue</code> if <code>source</code> is empty; otherwise, <code>source</code>."}],"pos":[157430,157600],"yaml":true},{"content":"Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.","nodes":[{"pos":[0,136],"content":"Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.","nodes":[{"content":"Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.","pos":[0,136]}]}],"pos":[159320,159457],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The default value for reference and nullable types is `null`.  \n  \n This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,504],"content":"The default value for reference and nullable types is <ph id=\"ph1\">`null`</ph>.","source":"The default value for reference and nullable types is `null`."},{"pos":[511,644],"content":"This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.","nodes":[{"content":"This method can be used to produce a left outer join when it is combined with the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) method.","pos":[0,133],"source":"This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method."}]}],"pos":[159468,160119],"yaml":true,"extradata":"MT"},{"content":"The sequence to return a default value for if it is empty.","nodes":[{"pos":[0,58],"content":"The sequence to return a default value for if it is empty.","nodes":[{"content":"The sequence to return a default value for if it is empty.","pos":[0,58]}]}],"pos":[161300,161359],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[161416,161465],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> object that contains the default value for the <code>TSource</code> type if <code>source</code> is empty; otherwise, <code>source</code>.","nodes":[{"pos":[0,202],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> object that contains the default value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept> type if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> is empty; otherwise, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> object that contains the default value for the <code>TSource</code> type if <code>source</code> is empty; otherwise, <code>source</code>."}],"pos":[161556,161759],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[161929,161960],"yaml":true},{"content":"Returns distinct elements from a sequence by using the default equality comparer to compare values.","nodes":[{"pos":[0,99],"content":"Returns distinct elements from a sequence by using the default equality comparer to compare values.","nodes":[{"content":"Returns distinct elements from a sequence by using the default equality comparer to compare values.","pos":[0,99]}]}],"pos":[163573,163673],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values. It uses the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Distinct` clause translates to an invocation of <xref:System.Linq.Enumerable.Distinct%2A>.  \n  \n The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.IEquatable%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.  \n  \n For an example that uses <xref:System.Collections.Generic.IEqualityComparer%601>to define a custom comparer, see <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,746],"content":"The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values. It uses the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, to compare values.","nodes":[{"content":"The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values. It uses the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, to compare values.","pos":[0,303],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns an unordered sequence that contains no duplicate values.","pos":[0,178],"source":"The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values."},{"content":"It uses the default equality comparer, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, to compare values.","pos":[179,303],"source":" It uses the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, to compare values."}]}]},{"pos":[753,918],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id=\"ph2\">`Distinct`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Distinct` clause translates to an invocation of <xref:System.Linq.Enumerable.Distinct%2A>."},{"pos":[925,1310],"content":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.IEquatable%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.","nodes":[{"content":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.IEquatable%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.","pos":[0,385],"nodes":[{"content":"The default equality comparer, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id=\"ph2\">&lt;xref:System.IEquatable%601&gt;</ph> generic interface.","pos":[0,203],"source":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.IEquatable%601> generic interface."},{"content":"To compare a custom data type, you need to implement this interface and provide your own <ph id=\"ph1\">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.","pos":[204,385],"source":" To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type."}]}]},{"pos":[1317,1593],"content":"For an example that uses <xref:System.Collections.Generic.IEqualityComparer%601>to define a custom comparer, see <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.","nodes":[{"content":"For an example that uses <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>to define a custom comparer, see <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>.","pos":[0,276],"source":"For an example that uses <xref:System.Collections.Generic.IEqualityComparer%601>to define a custom comparer, see <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>."}]}],"pos":[163684,165288],"yaml":true,"extradata":"MT"},{"content":"The sequence to remove duplicate elements from.","nodes":[{"pos":[0,47],"content":"The sequence to remove duplicate elements from.","nodes":[{"content":"The sequence to remove duplicate elements from.","pos":[0,47]}]}],"pos":[167300,167348],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[167405,167454],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains distinct elements from the source sequence.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains distinct elements from the source sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains distinct elements from the source sequence."}],"pos":[167545,167668],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[167832,167863],"yaml":true},{"content":"Returns distinct elements from a sequence by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,149],"content":"Returns distinct elements from a sequence by using a specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"Returns distinct elements from a sequence by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[169710,169860],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values. If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,831],"content":"The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values. If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method returns an unordered sequence that contains no duplicate values.","pos":[0,238],"source":"The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values."},{"content":"If c<ph id=\"ph1\">`omparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.","pos":[239,388],"source":" If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values."}]}],"pos":[169871,170707],"yaml":true,"extradata":"MT"},{"content":"The sequence to remove duplicate elements from.","nodes":[{"pos":[0,47],"content":"The sequence to remove duplicate elements from.","nodes":[{"content":"The sequence to remove duplicate elements from.","pos":[0,47]}]}],"pos":[171931,171979],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[172083,172173],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[172230,172279],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains distinct elements from the source sequence.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains distinct elements from the source sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains distinct elements from the source sequence."}],"pos":[172370,172493],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[172657,172688],"yaml":true},{"content":"Returns the element at a specified index in a sequence.","nodes":[{"pos":[0,55],"content":"Returns the element at a specified index in a sequence.","nodes":[{"content":"Returns the element at a specified index in a sequence.","pos":[0,55]}]}],"pos":[174367,174423],"yaml":true},{"content":"If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index. Otherwise, this method obtains the specified element.  \n  \n This method throws an exception if `index` is out of range. To instead return a default value when the specified index is out of range, use the <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> method.","nodes":[{"pos":[0,207],"content":"If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index. Otherwise, this method obtains the specified element.","nodes":[{"content":"If the type of <ph id=\"ph1\">`source`</ph> implements <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, that implementation is used to obtain the element at the specified index.","pos":[0,153],"source":"If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index."},{"content":"Otherwise, this method obtains the specified element.","pos":[154,207]}]},{"pos":[214,417],"content":"This method throws an exception if `index` is out of range. To instead return a default value when the specified index is out of range, use the <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> method.","nodes":[{"content":"This method throws an exception if <ph id=\"ph1\">`index`</ph> is out of range.","pos":[0,59],"source":"This method throws an exception if `index` is out of range."},{"content":"To instead return a default value when the specified index is out of range, use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph> method.","pos":[60,203],"source":" To instead return a default value when the specified index is out of range, use the <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> method."}]}],"pos":[174434,174856],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from.","nodes":[{"pos":[0,91],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return an element from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from."}],"pos":[175543,175635],"yaml":true},{"content":"The zero-based index of the element to retrieve.","nodes":[{"pos":[0,48],"content":"The zero-based index of the element to retrieve.","nodes":[{"content":"The zero-based index of the element to retrieve.","pos":[0,48]}]}],"pos":[175695,175744],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[175801,175850],"yaml":true},{"content":"The element at the specified position in the source sequence.","nodes":[{"pos":[0,61],"content":"The element at the specified position in the source sequence.","nodes":[{"content":"The element at the specified position in the source sequence.","pos":[0,61]}]}],"pos":[175901,175963],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[176128,176159],"yaml":true},{"content":"<code>index</code> is less than 0 or greater than or equal to the number of elements in <code>source</code>.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0 or greater than or equal to the number of elements in <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>index</code> is less than 0 or greater than or equal to the number of elements in <code>source</code>."}],"pos":[176273,176382],"yaml":true},{"content":"Returns the element at a specified index in a sequence or a default value if the index is out of range.","nodes":[{"pos":[0,103],"content":"Returns the element at a specified index in a sequence or a default value if the index is out of range.","nodes":[{"content":"Returns the element at a specified index in a sequence or a default value if the index is out of range.","pos":[0,103]}]}],"pos":[178115,178219],"yaml":true},{"content":"If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index. Otherwise, this method obtains the specified element.  \n  \n The default value for reference and nullable types is `null`.","nodes":[{"pos":[0,207],"content":"If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index. Otherwise, this method obtains the specified element.","nodes":[{"content":"If the type of <ph id=\"ph1\">`source`</ph> implements <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, that implementation is used to obtain the element at the specified index.","pos":[0,153],"source":"If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index."},{"content":"Otherwise, this method obtains the specified element.","pos":[154,207]}]},{"pos":[214,275],"content":"The default value for reference and nullable types is <ph id=\"ph1\">`null`</ph>.","source":"The default value for reference and nullable types is `null`."}],"pos":[178230,178510],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from.","nodes":[{"pos":[0,91],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return an element from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from."}],"pos":[179239,179331],"yaml":true},{"content":"The zero-based index of the element to retrieve.","nodes":[{"pos":[0,48],"content":"The zero-based index of the element to retrieve.","nodes":[{"content":"The zero-based index of the element to retrieve.","pos":[0,48]}]}],"pos":[179391,179440],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[179497,179546],"yaml":true},{"content":"`default`(<code>TSource</code>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.","nodes":[{"pos":[0,163],"content":"<ph id=\"ph1\">`default`</ph>(<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.","source":"`default`(<code>TSource</code>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence."}],"pos":[179597,179763],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[179937,179968],"yaml":true},{"content":"Returns an empty <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that has the specified type argument.","nodes":[{"pos":[0,116],"content":"Returns an empty <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that has the specified type argument.","source":"Returns an empty <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that has the specified type argument."}],"pos":[181368,181485],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Empty%60%601> method caches an empty sequence of type `TResult`. When the object it returns is enumerated, it yields no elements.  \n  \n In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref:System.Collections.Generic.IEnumerable%601>. It can also be used to generate a neutral element for methods such as <xref:System.Linq.Enumerable.Union%2A>. See the Example section for an example of this use of <xref:System.Linq.Enumerable.Empty%60%601>.","nodes":[{"pos":[0,162],"content":"The <xref:System.Linq.Enumerable.Empty%60%601> method caches an empty sequence of type `TResult`. When the object it returns is enumerated, it yields no elements.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> method caches an empty sequence of type <ph id=\"ph2\">`TResult`</ph>.","pos":[0,97],"source":"The <xref:System.Linq.Enumerable.Empty%60%601> method caches an empty sequence of type `TResult`."},{"content":"When the object it returns is enumerated, it yields no elements.","pos":[98,162]}]},{"pos":[169,533],"content":"In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref:System.Collections.Generic.IEnumerable%601>. It can also be used to generate a neutral element for methods such as <xref:System.Linq.Enumerable.Union%2A>. See the Example section for an example of this use of <xref:System.Linq.Enumerable.Empty%60%601>.","nodes":[{"content":"In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref:System.Collections.Generic.IEnumerable%601>. It can also be used to generate a neutral element for methods such as <xref:System.Linq.Enumerable.Union%2A>. See the Example section for an example of this use of <xref:System.Linq.Enumerable.Empty%60%601>.","pos":[0,364],"nodes":[{"content":"In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.","pos":[0,156],"source":"In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref:System.Collections.Generic.IEnumerable%601>."},{"content":"It can also be used to generate a neutral element for methods such as <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>.","pos":[157,266],"source":" It can also be used to generate a neutral element for methods such as <xref:System.Linq.Enumerable.Union%2A>."},{"content":"See the Example section for an example of this use of <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>.","pos":[267,364],"source":" See the Example section for an example of this use of <xref:System.Linq.Enumerable.Empty%60%601>."}]}]}],"pos":[181496,182034],"yaml":true,"extradata":"MT"},{"content":"The type to assign to the type parameter of the returned generic <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.","nodes":[{"pos":[0,127],"content":"The type to assign to the type parameter of the returned generic <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type to assign to the type parameter of the returned generic <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>."}],"pos":[183583,183711],"yaml":true},{"content":"An empty <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose type argument is <code>TResult</code>.","nodes":[{"pos":[0,115],"content":"An empty <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose type argument is <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An empty <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose type argument is <code>TResult</code>."}],"pos":[183802,183918],"yaml":true},{"content":"Produces the set difference of two sequences by using the default equality comparer to compare values.","nodes":[{"pos":[0,102],"content":"Produces the set difference of two sequences by using the default equality comparer to compare values.","nodes":[{"content":"Produces the set difference of two sequences by using the default equality comparer to compare values.","pos":[0,102]}]}],"pos":[185779,185882],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The set difference of two sets is defined as the members of the first set that do not appear in the second set.  \n  \n> [!NOTE]\n>  This method returns those elements in `first` that do not appear in `second`. It does not also return those elements in `second` that do not appear in `first`.  \n  \n The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,554],"content":"The set difference of two sets is defined as the members of the first set that do not appear in the second set.","nodes":[{"content":"The set difference of two sets is defined as the members of the first set that do not appear in the second set.","pos":[0,111]}]},{"pos":[562,732],"content":"[!NOTE]\n This method returns those elements in `first` that do not appear in `second`. It does not also return those elements in `second` that do not appear in `first`.","leadings":["","> "],"nodes":[{"content":" This method returns those elements in `first` that do not appear in `second`. It does not also return those elements in `second` that do not appear in `first`.","pos":[8,168],"nodes":[{"content":"This method returns those elements in <ph id=\"ph1\">`first`</ph> that do not appear in <ph id=\"ph2\">`second`</ph>.","pos":[1,78],"source":" This method returns those elements in `first` that do not appear in `second`."},{"content":"It does not also return those elements in <ph id=\"ph1\">`second`</ph> that do not appear in <ph id=\"ph2\">`first`</ph>.","pos":[79,160],"source":" It does not also return those elements in `second` that do not appear in `first`."}]}]},{"pos":[739,1151],"content":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.","nodes":[{"content":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.","pos":[0,412],"nodes":[{"content":"The default equality comparer, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.","pos":[0,230],"source":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface."},{"content":"To compare a custom data type, you need to implement this interface and provide your own <ph id=\"ph1\">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.","pos":[231,412],"source":" To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type."}]}]}],"pos":[185893,187054],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that are not also in <code>second</code> will be returned.","nodes":[{"pos":[0,138],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements that are not also in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">second</ph><ept id=\"p1\">&lt;/code&gt;</ept> will be returned.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that are not also in <code>second</code> will be returned."}],"pos":[189129,189268],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.","nodes":[{"pos":[0,185],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence."}],"pos":[189364,189550],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[189607,189656],"yaml":true},{"content":"A sequence that contains the set difference of the elements of two sequences.","nodes":[{"pos":[0,77],"content":"A sequence that contains the set difference of the elements of two sequences.","nodes":[{"content":"A sequence that contains the set difference of the elements of two sequences.","pos":[0,77]}]}],"pos":[189747,189825],"yaml":true},{"content":"<code>first</code> or <code>second</code> is `null`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>first</code> or <code>second</code> is `null`."}],"pos":[189987,190040],"yaml":true},{"content":"Produces the set difference of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,154],"content":"Produces the set difference of two sequences by using the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"Produces the set difference of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[192073,192228],"yaml":true},{"content":"If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.","nodes":[{"pos":[0,149],"content":"If c<ph id=\"ph1\">`omparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.","source":"If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values."}],"pos":[192239,192389],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that are not also in <code>second</code> will be returned.","nodes":[{"pos":[0,138],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements that are not also in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">second</ph><ept id=\"p1\">&lt;/code&gt;</ept> will be returned.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that are not also in <code>second</code> will be returned."}],"pos":[193660,193799],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.","nodes":[{"pos":[0,185],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence."}],"pos":[193895,194081],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[194185,194275],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[194332,194381],"yaml":true},{"content":"A sequence that contains the set difference of the elements of two sequences.","nodes":[{"pos":[0,77],"content":"A sequence that contains the set difference of the elements of two sequences.","nodes":[{"content":"A sequence that contains the set difference of the elements of two sequences.","pos":[0,77]}]}],"pos":[194472,194550],"yaml":true},{"content":"<code>first</code> or <code>second</code> is `null`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>first</code> or <code>second</code> is `null`."}],"pos":[194712,194765],"yaml":true},{"content":"Returns the first element of a sequence.","nodes":[{"pos":[0,40],"content":"Returns the first element of a sequence.","nodes":[{"content":"Returns the first element of a sequence.","pos":[0,40]}]}],"pos":[196360,196401],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements. To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.","nodes":[{"pos":[0,297],"content":"The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements. To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if <ph id=\"ph2\">`source`</ph> contains no elements.","pos":[0,164],"source":"The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements."},{"content":"To instead return a default value when the source sequence is empty, use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method.","pos":[165,297],"source":" To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method."}]}],"pos":[196412,196710],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the first element of.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return the first element of.","source":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the first element of."}],"pos":[197435,197533],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[197590,197639],"yaml":true},{"content":"The first element in the specified sequence.","nodes":[{"pos":[0,44],"content":"The first element in the specified sequence.","nodes":[{"content":"The first element in the specified sequence.","pos":[0,44]}]}],"pos":[197690,197735],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[197896,197927],"yaml":true},{"content":"The source sequence is empty.","nodes":[{"pos":[0,29],"content":"The source sequence is empty.","nodes":[{"content":"The source sequence is empty.","pos":[0,29]}]}],"pos":[198037,198067],"yaml":true},{"content":"Returns the first element in a sequence that satisfies a specified condition.","nodes":[{"pos":[0,77],"content":"Returns the first element in a sequence that satisfies a specified condition.","nodes":[{"content":"Returns the first element in a sequence that satisfies a specified condition.","pos":[0,77]}]}],"pos":[199805,199883],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`. To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.","nodes":[{"pos":[0,352],"content":"The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`. To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if no matching element is found in <ph id=\"ph2\">`source`</ph>.","pos":[0,219],"source":"The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`."},{"content":"To instead return a default value when no matching element is found, use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method.","pos":[220,352],"source":" To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method."}]}],"pos":[199894,200247],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from.","nodes":[{"pos":[0,91],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return an element from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from."}],"pos":[201073,201165],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[201252,201301],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[201358,201407],"yaml":true},{"content":"The first element in the sequence that passes the test in the specified predicate function.","nodes":[{"pos":[0,91],"content":"The first element in the sequence that passes the test in the specified predicate function.","nodes":[{"content":"The first element in the sequence that passes the test in the specified predicate function.","pos":[0,91]}]}],"pos":[201458,201550],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[201711,201768],"yaml":true},{"content":"No element satisfies the condition in <code>predicate</code>.  \n  \n -or-  \n  \n The source sequence is empty.","nodes":[{"pos":[0,61],"content":"No element satisfies the condition in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"No element satisfies the condition in <code>predicate</code>."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,108],"content":"The source sequence is empty.","nodes":[{"content":"The source sequence is empty.","pos":[0,29]}]}],"pos":[201878,201993],"yaml":true},{"content":"Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.","nodes":[{"pos":[0,116],"content":"Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.","nodes":[{"content":"Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.","pos":[0,116]}]}],"pos":[203785,203902],"yaml":true},{"content":"The default value for reference and nullable types is `null`.","nodes":[{"pos":[0,61],"content":"The default value for reference and nullable types is <ph id=\"ph1\">`null`</ph>.","source":"The default value for reference and nullable types is `null`."}],"pos":[203913,203975],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from.","nodes":[{"pos":[0,91],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return an element from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from."}],"pos":[204875,204967],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[205054,205103],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[205160,205209],"yaml":true},{"content":"`default`(<code>TSource</code>) if <code>source</code> is empty or if no element passes the test specified by <code>predicate</code>; otherwise, the first element in <code>source</code> that passes the test specified by <code>predicate</code>.","nodes":[{"pos":[0,243],"content":"<ph id=\"ph1\">`default`</ph>(<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> is empty or if no element passes the test specified by <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">predicate</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise, the first element in <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">source</ph><ept id=\"p4\">&lt;/code&gt;</ept> that passes the test specified by <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph6\">predicate</ph><ept id=\"p5\">&lt;/code&gt;</ept>.","source":"`default`(<code>TSource</code>) if <code>source</code> is empty or if no element passes the test specified by <code>predicate</code>; otherwise, the first element in <code>source</code> that passes the test specified by <code>predicate</code>."}],"pos":[205260,205506],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[205676,205733],"yaml":true},{"content":"Returns the first element of a sequence, or a default value if the sequence contains no elements.","nodes":[{"pos":[0,97],"content":"Returns the first element of a sequence, or a default value if the sequence contains no elements.","nodes":[{"content":"Returns the first element of a sequence, or a default value if the sequence contains no elements.","pos":[0,97]}]}],"pos":[207382,207480],"yaml":true},{"content":"The default value for reference and nullable types is `null`.  \n  \n The <xref:System.Linq.Enumerable.FirstOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.","nodes":[{"pos":[0,61],"content":"The default value for reference and nullable types is <ph id=\"ph1\">`null`</ph>.","source":"The default value for reference and nullable types is `null`."},{"pos":[68,418],"content":"The <xref:System.Linq.Enumerable.FirstOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.","pos":[0,109],"source":"The <xref:System.Linq.Enumerable.FirstOrDefault%2A> method does not provide a way to specify a default value."},{"content":"If you want to specify a default value other than <ph id=\"ph1\">`default(TSource)`</ph>, use the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.","pos":[110,350],"source":" If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section."}]}],"pos":[207491,207914],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the first element of.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return the first element of.","source":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the first element of."}],"pos":[210081,210179],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[210236,210285],"yaml":true},{"content":"`default`(<code>TSource</code>) if <code>source</code> is empty; otherwise, the first element in <code>source</code>.","nodes":[{"pos":[0,117],"content":"<ph id=\"ph1\">`default`</ph>(<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> is empty; otherwise, the first element in <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"`default`(<code>TSource</code>) if <code>source</code> is empty; otherwise, the first element in <code>source</code>."}],"pos":[210336,210456],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[210626,210657],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.","nodes":[{"pos":[0,208],"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.","pos":[0,208],"nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.","pos":[0,136]},{"content":"The elements of each group are projected by using a specified function.","pos":[137,208]}]}]}],"pos":[212909,213118],"yaml":true},{"content":"In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.","nodes":[{"pos":[0,231],"content":"In query expression syntax, a <ph id=\"ph1\">`group by`</ph> (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`Group By Into`</ph> (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.","source":"In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>."}],"pos":[213129,213361],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group."}],"pos":[214540,214630],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[214709,214757],"yaml":true},{"content":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,103],"content":"A function to map each source element to an element in an <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[214844,214948],"yaml":true},{"content":"A function to create a result value from each group.","nodes":[{"pos":[0,52],"content":"A function to create a result value from each group.","nodes":[{"content":"A function to create a result value from each group.","pos":[0,52]}]}],"pos":[215079,215132],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[215189,215238],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[215272,215330],"yaml":true},{"content":"The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,78],"content":"The type of the elements in each <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[215368,215447],"yaml":true},{"content":"The type of the result value returned by <code>resultSelector</code>.","nodes":[{"pos":[0,69],"content":"The type of the result value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">resultSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result value returned by <code>resultSelector</code>."}],"pos":[215484,215554],"yaml":true},{"content":"A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key.","nodes":[{"pos":[0,122],"content":"A collection of elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> where each element represents a projection over a group and its key.","source":"A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key."}],"pos":[215645,215768],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.","nodes":[{"pos":[0,267],"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.","pos":[0,267],"nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.","pos":[0,136]},{"content":"Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.","pos":[137,267]}]}]}],"pos":[218309,218577],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group."}],"pos":[219093,219183],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[219262,219310],"yaml":true},{"content":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,103],"content":"A function to map each source element to an element in an <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[219397,219501],"yaml":true},{"content":"A function to create a result value from each group.","nodes":[{"pos":[0,52],"content":"A function to create a result value from each group.","nodes":[{"content":"A function to create a result value from each group.","pos":[0,52]}]}],"pos":[219632,219685],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys with.","nodes":[{"pos":[0,92],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys with.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys with."}],"pos":[219786,219879],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[219936,219985],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[220019,220077],"yaml":true},{"content":"The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,78],"content":"The type of the elements in each <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[220115,220194],"yaml":true},{"content":"The type of the result value returned by <code>resultSelector</code>.","nodes":[{"pos":[0,69],"content":"The type of the result value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">resultSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result value returned by <code>resultSelector</code>."}],"pos":[220231,220301],"yaml":true},{"content":"A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key.","nodes":[{"pos":[0,122],"content":"A collection of elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> where each element represents a projection over a group and its key.","source":"A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key."}],"pos":[220392,220515],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.","nodes":[{"pos":[0,152],"content":"Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.","pos":[0,152]}]}],"pos":[222486,222639],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.  \n  \n The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>. Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.  \n  \n The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,885],"content":"The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.","nodes":[{"content":"The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.","pos":[0,442],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method returns a collection of <ph id=\"ph2\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.","pos":[0,300],"source":"The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.","pos":[301,442],"source":" An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements."}]}]},{"pos":[892,1182],"content":"The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>. Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id=\"ph2\">`source`</ph> that produced the first key of each <ph id=\"ph3\">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.","pos":[0,185],"source":"The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>."},{"content":"Elements in a grouping are yielded in the order that the elements that produced them appear in <ph id=\"ph1\">`source`</ph>.","pos":[186,290],"source":" Elements in a grouping are yielded in the order that the elements that produced them appear in `source`."}]},{"pos":[1189,1309],"content":"The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.","nodes":[{"content":"The default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.","pos":[0,120],"source":"The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys."}]}],"pos":[222650,223968],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group."}],"pos":[225996,226086],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[226165,226213],"yaml":true},{"content":"A function to map each source element to an element in the <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,104],"content":"A function to map each source element to an element in the <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"A function to map each source element to an element in the <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[226300,226405],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[226462,226511],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[226545,226603],"yaml":true},{"content":"The type of the elements in the <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,77],"content":"The type of the elements in the <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the elements in the <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[226641,226719],"yaml":true},{"content":"An <code>IEnumerable<IGrouping<TKey, TElement>></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a collection of objects of type <code>TElement</code> and a key.","nodes":[{"pos":[0,305],"content":"An <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</ph><ept id=\"p1\">&lt;/code&gt;</ept> in C# or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">IEnumerable(Of IGrouping(Of TKey, TElement))</ph><ept id=\"p2\">&lt;/code&gt;</ept> in <ph id=\"ph3\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id=\"ph4\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph> object contains a collection of objects of type <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph5\">TElement</ph><ept id=\"p3\">&lt;/code&gt;</ept> and a key.","source":"An <code>IEnumerable<IGrouping<TKey, TElement>></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a collection of objects of type <code>TElement</code> and a key."}],"pos":[226839,227145],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`."}],"pos":[227308,227399],"yaml":true},{"content":"Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.","nodes":[{"pos":[0,184],"content":"Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.","nodes":[{"content":"Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.","pos":[0,184],"nodes":[{"content":"Groups the elements of a sequence according to a key selector function.","pos":[0,71]},{"content":"The keys are compared by using a comparer and each group's elements are projected by using a specified function.","pos":[72,184]}]}]}],"pos":[229509,229694],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n> [!NOTE]\n>  For examples of `GroupBy`, see the following topics.  \n>   \n>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  \n> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  \n> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  \n  \n The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.  \n  \n The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>. Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.  \n  \n If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.  \n  \n If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.  \n  \n In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>. For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[444,507],"content":"[!NOTE]\n For examples of `GroupBy`, see the following topics.","leadings":["","> "],"nodes":[{"content":"For examples of <ph id=\"ph1\">`GroupBy`</ph>, see the following topics.","pos":[9,61],"source":" For examples of `GroupBy`, see the following topics."}]},{"pos":[522,697],"content":"<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>","nodes":[]},{"pos":[706,935],"content":"<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>","nodes":[]},{"pos":[944,1210],"content":"<xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>","nodes":[]},{"pos":[1217,1719],"content":"The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.","nodes":[{"content":"The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.","pos":[0,502],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a collection of <ph id=\"ph2\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.","pos":[0,360],"source":"The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.","pos":[361,502],"source":" An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements."}]}]},{"pos":[1726,2016],"content":"The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>. Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id=\"ph2\">`source`</ph> that produced the first key of each <ph id=\"ph3\">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.","pos":[0,185],"source":"The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>."},{"content":"Elements in a grouping are yielded in the order that the elements that produced them appear in <ph id=\"ph1\">`source`</ph>.","pos":[186,290],"source":" Elements in a grouping are yielded in the order that the elements that produced them appear in `source`."}]},{"pos":[2023,2168],"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.","source":"If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys."},{"pos":[2175,2286],"content":"If two keys are considered equal according to <ph id=\"ph1\">`comparer`</ph>, the first key is chosen as the key for that grouping.","source":"If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping."},{"pos":[2293,2733],"content":"In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>. For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).","nodes":[{"content":"In query expression syntax, a <ph id=\"ph1\">`group by`</ph> (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`Group By Into`</ph> (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.","pos":[0,231],"source":"In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>."},{"content":"For more information and usage examples, see <bpt id=\"p1\">[</bpt>group clause<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id=\"p2\">[</bpt>Group By Clause<ept id=\"p2\">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.","pos":[232,440],"source":" For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md)."}]}],"pos":[229705,232458],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group."}],"pos":[232911,233001],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[233080,233128],"yaml":true},{"content":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,103],"content":"A function to map each source element to an element in an <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[233215,233319],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys."}],"pos":[233420,233508],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[233565,233614],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[233648,233706],"yaml":true},{"content":"The type of the elements in the <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,77],"content":"The type of the elements in the <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the elements in the <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[233744,233822],"yaml":true},{"content":"An <code>IEnumerable<IGrouping<TKey, TElement>></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a collection of objects of type <code>TElement</code> and a key.","nodes":[{"pos":[0,305],"content":"An <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</ph><ept id=\"p1\">&lt;/code&gt;</ept> in C# or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">IEnumerable(Of IGrouping(Of TKey, TElement))</ph><ept id=\"p2\">&lt;/code&gt;</ept> in <ph id=\"ph3\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id=\"ph4\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph> object contains a collection of objects of type <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph5\">TElement</ph><ept id=\"p3\">&lt;/code&gt;</ept> and a key.","source":"An <code>IEnumerable<IGrouping<TKey, TElement>></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a collection of objects of type <code>TElement</code> and a key."}],"pos":[233942,234248],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`."}],"pos":[234411,234502],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.","nodes":[{"pos":[0,136],"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.","pos":[0,136]}]}],"pos":[236567,236704],"yaml":true},{"content":"In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.","nodes":[{"pos":[0,231],"content":"In query expression syntax, a <ph id=\"ph1\">`group by`</ph> (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`Group By Into`</ph> (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.","source":"In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>."}],"pos":[236715,236947],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group."}],"pos":[238020,238110],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[238189,238237],"yaml":true},{"content":"A function to create a result value from each group.","nodes":[{"pos":[0,52],"content":"A function to create a result value from each group.","nodes":[{"content":"A function to create a result value from each group.","pos":[0,52]}]}],"pos":[238367,238420],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[238477,238526],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[238560,238618],"yaml":true},{"content":"The type of the result value returned by <code>resultSelector</code>.","nodes":[{"pos":[0,69],"content":"The type of the result value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">resultSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result value returned by <code>resultSelector</code>."}],"pos":[238655,238725],"yaml":true},{"content":"A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key.","nodes":[{"pos":[0,122],"content":"A collection of elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> where each element represents a projection over a group and its key.","source":"A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key."}],"pos":[238816,238939],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.","nodes":[{"pos":[0,189],"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.","pos":[0,189],"nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.","pos":[0,136]},{"content":"The keys are compared by using a specified comparer.","pos":[137,189]}]}]}],"pos":[241293,241483],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group."}],"pos":[241949,242039],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[242118,242166],"yaml":true},{"content":"A function to create a result value from each group.","nodes":[{"pos":[0,52],"content":"A function to create a result value from each group.","nodes":[{"content":"A function to create a result value from each group.","pos":[0,52]}]}],"pos":[242296,242349],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys with.","nodes":[{"pos":[0,92],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys with.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys with."}],"pos":[242450,242543],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[242600,242649],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[242683,242741],"yaml":true},{"content":"The type of the result value returned by <code>resultSelector</code>.","nodes":[{"pos":[0,69],"content":"The type of the result value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">resultSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result value returned by <code>resultSelector</code>."}],"pos":[242778,242848],"yaml":true},{"content":"A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key.","nodes":[{"pos":[0,122],"content":"A collection of elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> where each element represents a projection over a group and its key.","source":"A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key."}],"pos":[242939,243062],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function.","nodes":[{"pos":[0,81],"content":"Groups the elements of a sequence according to a specified key selector function.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function.","pos":[0,81]}]}],"pos":[244871,244953],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n> [!NOTE]\n>  For examples of `GroupBy`, see the following topics.  \n>   \n>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  \n> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  \n> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  \n  \n The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.  \n  \n The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>. Elements in a grouping are yielded in the order they appear in `source`.  \n  \n The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.  \n  \n In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>. For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[444,507],"content":"[!NOTE]\n For examples of `GroupBy`, see the following topics.","leadings":["","> "],"nodes":[{"content":"For examples of <ph id=\"ph1\">`GroupBy`</ph>, see the following topics.","pos":[9,61],"source":" For examples of `GroupBy`, see the following topics."}]},{"pos":[522,697],"content":"<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>","nodes":[]},{"pos":[706,935],"content":"<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>","nodes":[]},{"pos":[944,1210],"content":"<xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>","nodes":[]},{"pos":[1217,1622],"content":"The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.","nodes":[{"content":"The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.","pos":[0,405],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method returns a collection of <ph id=\"ph2\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.","pos":[0,263],"source":"The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.","pos":[264,405],"source":" An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements."}]}]},{"pos":[1629,1887],"content":"The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>. Elements in a grouping are yielded in the order they appear in `source`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id=\"ph2\">`source`</ph> that produced the first key of each <ph id=\"ph3\">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.","pos":[0,185],"source":"The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>."},{"content":"Elements in a grouping are yielded in the order they appear in <ph id=\"ph1\">`source`</ph>.","pos":[186,258],"source":" Elements in a grouping are yielded in the order they appear in `source`."}]},{"pos":[1894,2014],"content":"The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.","nodes":[{"content":"The default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.","pos":[0,120],"source":"The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys."}]},{"pos":[2021,2461],"content":"In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>. For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).","nodes":[{"content":"In query expression syntax, a <ph id=\"ph1\">`group by`</ph> (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`Group By Into`</ph> (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.","pos":[0,231],"source":"In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>."},{"content":"For more information and usage examples, see <bpt id=\"p1\">[</bpt>group clause<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id=\"p2\">[</bpt>Group By Clause<ept id=\"p2\">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.","pos":[232,440],"source":" For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md)."}]}],"pos":[244964,247443],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group."}],"pos":[247785,247875],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[247954,248002],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[248059,248108],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[248142,248200],"yaml":true},{"content":"An <code>IEnumerable<IGrouping<TKey, TSource>></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a sequence of objects and a key.","nodes":[{"pos":[0,271],"content":"An <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</ph><ept id=\"p1\">&lt;/code&gt;</ept> in C# or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">IEnumerable(Of IGrouping(Of TKey, TSource))</ph><ept id=\"p2\">&lt;/code&gt;</ept> in <ph id=\"ph3\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id=\"ph4\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph> object contains a sequence of objects and a key.","source":"An <code>IEnumerable<IGrouping<TKey, TSource>></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a sequence of objects and a key."}],"pos":[248319,248591],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[248754,248813],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.","nodes":[{"pos":[0,133],"content":"Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.","pos":[0,133]}]}],"pos":[250783,250917],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n> [!NOTE]\n>  For examples of `GroupBy`, see the following topics.  \n>   \n>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  \n> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  \n> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  \n  \n The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.  \n  \n The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>. Elements in a grouping are yielded in the order they appear in `source`.  \n  \n If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.  \n  \n If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.  \n  \n In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>. For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[444,507],"content":"[!NOTE]\n For examples of `GroupBy`, see the following topics.","leadings":["","> "],"nodes":[{"content":"For examples of <ph id=\"ph1\">`GroupBy`</ph>, see the following topics.","pos":[9,61],"source":" For examples of `GroupBy`, see the following topics."}]},{"pos":[522,697],"content":"<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>","nodes":[]},{"pos":[706,935],"content":"<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>","nodes":[]},{"pos":[944,1210],"content":"<xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>","nodes":[]},{"pos":[1217,1682],"content":"The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.","nodes":[{"content":"The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.","pos":[0,465],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a collection of <ph id=\"ph2\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.","pos":[0,323],"source":"The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.","pos":[324,465],"source":" An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements."}]}]},{"pos":[1689,1947],"content":"The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>. Elements in a grouping are yielded in the order they appear in `source`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id=\"ph2\">`source`</ph> that produced the first key of each <ph id=\"ph3\">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.","pos":[0,185],"source":"The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>."},{"content":"Elements in a grouping are yielded in the order they appear in <ph id=\"ph1\">`source`</ph>.","pos":[186,258],"source":" Elements in a grouping are yielded in the order they appear in `source`."}]},{"pos":[1954,2099],"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.","source":"If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys."},{"pos":[2106,2217],"content":"If two keys are considered equal according to <ph id=\"ph1\">`comparer`</ph>, the first key is chosen as the key for that grouping.","source":"If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping."},{"pos":[2224,2664],"content":"In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>. For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).","nodes":[{"content":"In query expression syntax, a <ph id=\"ph1\">`group by`</ph> (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`Group By Into`</ph> (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.","pos":[0,231],"source":"In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>."},{"content":"For more information and usage examples, see <bpt id=\"p1\">[</bpt>group clause<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id=\"p2\">[</bpt>Group By Clause<ept id=\"p2\">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.","pos":[232,440],"source":" For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md)."}]}],"pos":[250928,253612],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group."}],"pos":[254015,254105],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[254184,254232],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys."}],"pos":[254333,254421],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[254478,254527],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[254561,254619],"yaml":true},{"content":"An <code>IEnumerable<IGrouping<TKey, TSource>></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a collection of objects and a key.","nodes":[{"pos":[0,273],"content":"An <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</ph><ept id=\"p1\">&lt;/code&gt;</ept> in C# or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">IEnumerable(Of IGrouping(Of TKey, TSource))</ph><ept id=\"p2\">&lt;/code&gt;</ept> in <ph id=\"ph3\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id=\"ph4\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph> object contains a collection of objects and a key.","source":"An <code>IEnumerable<IGrouping<TKey, TSource>></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a collection of objects and a key."}],"pos":[254738,255012],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[255175,255234],"yaml":true},{"content":"Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys.","nodes":[{"pos":[0,191],"content":"Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys.","nodes":[{"content":"Correlates the elements of two sequences based on key equality and groups the results.","pos":[0,86]},{"content":"A specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> is used to compare keys.","pos":[87,191],"source":" A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys."}]}],"pos":[257888,258080],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.  \n  \n <xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`. `GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.  \n  \n> [!NOTE]\n>  If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.  \n  \n The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element. This differs from the <xref:System.Linq.Enumerable.Join%2A> method in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.  \n  \n `GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.  \n  \n <xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms. However, this method does implement a superset of inner joins and left outer joins. Both of these operations can be written in terms of a grouped join. See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,599],"content":"If c<ph id=\"ph1\">`omparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.","source":"If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys."},{"pos":[606,881],"content":"<xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`. `GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produces hierarchical results, which means that elements from <ph id=\"ph2\">`outer`</ph> are paired with collections of matching elements from <ph id=\"ph3\">`inner`</ph>.","pos":[0,175],"source":"<xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`."},{"content":"<ph id=\"ph1\">`GroupJoin`</ph> enables you to base your results on a whole set of matches for each element of <ph id=\"ph2\">`outer`</ph>.","pos":[176,275],"source":"`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`."}]},{"pos":[889,1071],"content":"[!NOTE]\n If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.","leadings":["","> "],"nodes":[{"content":"If there are no correlated elements in <ph id=\"ph1\">`inner`</ph> for a given element of <ph id=\"ph2\">`outer`</ph>, the sequence of matches for that element will be empty but will still appear in the results.","pos":[9,180],"source":" If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results."}]},{"pos":[1078,1436],"content":"The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element. This differs from the <xref:System.Linq.Enumerable.Join%2A> method in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.","nodes":[{"content":"The <ph id=\"ph1\">`resultSelector`</ph> function is called only one time for each <ph id=\"ph2\">`outer`</ph> element together with a collection of all the <ph id=\"ph3\">`inner`</ph> elements that match the <ph id=\"ph4\">`outer`</ph> element.","pos":[0,165],"source":"The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element."},{"content":"This differs from the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method in which the result selector function is invoked on pairs that contain one element from <ph id=\"ph2\">`outer`</ph> and one element from <ph id=\"ph3\">`inner`</ph>.","pos":[166,358],"source":" This differs from the <xref:System.Linq.Enumerable.Join%2A> method in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`."}]},{"pos":[1443,1584],"content":"<ph id=\"ph1\">`GroupJoin`</ph> preserves the order of the elements of <ph id=\"ph2\">`outer`</ph>, and for each element of <ph id=\"ph3\">`outer`</ph>, the order of the matching elements from <ph id=\"ph4\">`inner`</ph>.","source":"`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`."},{"pos":[1591,1947],"content":"<xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms. However, this method does implement a superset of inner joins and left outer joins. Both of these operations can be written in terms of a grouped join. See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> has no direct equivalent in traditional relational database terms.","pos":[0,109],"source":"<xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms."},{"content":"However, this method does implement a superset of inner joins and left outer joins.","pos":[110,193]},{"content":"Both of these operations can be written in terms of a grouped join.","pos":[194,261]},{"content":"See <bpt id=\"p1\">[</bpt>Join Operations<ept id=\"p1\">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.","pos":[262,356],"source":" See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)."}]}],"pos":[258091,260054],"yaml":true,"extradata":"MT"},{"content":"The first sequence to join.","nodes":[{"pos":[0,27],"content":"The first sequence to join.","nodes":[{"content":"The first sequence to join.","pos":[0,27]}]}],"pos":[260619,260647],"yaml":true},{"content":"The sequence to join to the first sequence.","nodes":[{"pos":[0,43],"content":"The sequence to join to the first sequence.","nodes":[{"content":"The sequence to join to the first sequence.","pos":[0,43]}]}],"pos":[260741,260785],"yaml":true},{"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"pos":[0,75],"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"content":"A function to extract the join key from each element of the first sequence.","pos":[0,75]}]}],"pos":[260868,260944],"yaml":true},{"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"pos":[0,76],"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"content":"A function to extract the join key from each element of the second sequence.","pos":[0,76]}]}],"pos":[261027,261104],"yaml":true},{"content":"A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.","nodes":[{"pos":[0,141],"content":"A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.","nodes":[{"content":"A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.","pos":[0,141]}]}],"pos":[261235,261377],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to hash and compare keys.","nodes":[{"pos":[0,96],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to hash and compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to hash and compare keys."}],"pos":[261478,261575],"yaml":true},{"content":"The type of the elements of the first sequence.","nodes":[{"pos":[0,47],"content":"The type of the elements of the first sequence.","nodes":[{"content":"The type of the elements of the first sequence.","pos":[0,47]}]}],"pos":[261631,261679],"yaml":true},{"content":"The type of the elements of the second sequence.","nodes":[{"pos":[0,48],"content":"The type of the elements of the second sequence.","nodes":[{"content":"The type of the elements of the second sequence.","pos":[0,48]}]}],"pos":[261715,261764],"yaml":true},{"content":"The type of the keys returned by the key selector functions.","nodes":[{"pos":[0,60],"content":"The type of the keys returned by the key selector functions.","nodes":[{"content":"The type of the keys returned by the key selector functions.","pos":[0,60]}]}],"pos":[261798,261859],"yaml":true},{"content":"The type of the result elements.","nodes":[{"pos":[0,32],"content":"The type of the result elements.","nodes":[{"content":"The type of the result elements.","pos":[0,32]}]}],"pos":[261896,261929],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements of type <code>TResult</code> that are obtained by performing a grouped join on two sequences.","nodes":[{"pos":[0,181],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> that are obtained by performing a grouped join on two sequences.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements of type <code>TResult</code> that are obtained by performing a grouped join on two sequences."}],"pos":[262020,262202],"yaml":true},{"content":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">&lt;code&gt;outer&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;inner&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;outerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;innerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph5\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph6\">`null`</ph>.","source":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`."}],"pos":[262367,262516],"yaml":true},{"content":"Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.","nodes":[{"pos":[0,145],"content":"Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.","nodes":[{"content":"Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.","pos":[0,145],"nodes":[{"content":"Correlates the elements of two sequences based on equality of keys and groups the results.","pos":[0,90]},{"content":"The default equality comparer is used to compare keys.","pos":[91,145]}]}]}],"pos":[264945,265091],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.  \n  \n <xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`. `GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.  \n  \n> [!NOTE]\n>  If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.  \n  \n The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element. This differs from the <xref:System.Linq.Enumerable.Join%2A> method, in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.  \n  \n `GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.  \n  \n <xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms. However, this method does implement a superset of inner joins and left outer joins. Both of these operations can be written in terms of a grouped join. See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).  \n  \n In query expression syntax, a `join … into` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group Join` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupJoin%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,574],"content":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.","nodes":[{"content":"The default equality comparer, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.","pos":[0,131],"source":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys."}]},{"pos":[581,856],"content":"<xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`. `GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produces hierarchical results, which means that elements from <ph id=\"ph2\">`outer`</ph> are paired with collections of matching elements from <ph id=\"ph3\">`inner`</ph>.","pos":[0,175],"source":"<xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`."},{"content":"<ph id=\"ph1\">`GroupJoin`</ph> enables you to base your results on a whole set of matches for each element of <ph id=\"ph2\">`outer`</ph>.","pos":[176,275],"source":"`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`."}]},{"pos":[864,1046],"content":"[!NOTE]\n If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.","leadings":["","> "],"nodes":[{"content":"If there are no correlated elements in <ph id=\"ph1\">`inner`</ph> for a given element of <ph id=\"ph2\">`outer`</ph>, the sequence of matches for that element will be empty but will still appear in the results.","pos":[9,180],"source":" If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results."}]},{"pos":[1053,1412],"content":"The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element. This differs from the <xref:System.Linq.Enumerable.Join%2A> method, in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.","nodes":[{"content":"The <ph id=\"ph1\">`resultSelector`</ph> function is called only one time for each <ph id=\"ph2\">`outer`</ph> element together with a collection of all the <ph id=\"ph3\">`inner`</ph> elements that match the <ph id=\"ph4\">`outer`</ph> element.","pos":[0,165],"source":"The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element."},{"content":"This differs from the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method, in which the result selector function is invoked on pairs that contain one element from <ph id=\"ph2\">`outer`</ph> and one element from <ph id=\"ph3\">`inner`</ph>.","pos":[166,359],"source":" This differs from the <xref:System.Linq.Enumerable.Join%2A> method, in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`."}]},{"pos":[1419,1560],"content":"<ph id=\"ph1\">`GroupJoin`</ph> preserves the order of the elements of <ph id=\"ph2\">`outer`</ph>, and for each element of <ph id=\"ph3\">`outer`</ph>, the order of the matching elements from <ph id=\"ph4\">`inner`</ph>.","source":"`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`."},{"pos":[1567,1923],"content":"<xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms. However, this method does implement a superset of inner joins and left outer joins. Both of these operations can be written in terms of a grouped join. See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> has no direct equivalent in traditional relational database terms.","pos":[0,109],"source":"<xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms."},{"content":"However, this method does implement a superset of inner joins and left outer joins.","pos":[110,193]},{"content":"Both of these operations can be written in terms of a grouped join.","pos":[194,261]},{"content":"See <bpt id=\"p1\">[</bpt>Join Operations<ept id=\"p1\">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.","pos":[262,356],"source":" See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)."}]},{"pos":[1930,2163],"content":"In query expression syntax, a <ph id=\"ph1\">`join … into`</ph> (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`Group Join`</ph> (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.","source":"In query expression syntax, a `join … into` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group Join` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupJoin%2A>."}],"pos":[265102,267283],"yaml":true,"extradata":"MT"},{"content":"The first sequence to join.","nodes":[{"pos":[0,27],"content":"The first sequence to join.","nodes":[{"content":"The first sequence to join.","pos":[0,27]}]}],"pos":[268503,268531],"yaml":true},{"content":"The sequence to join to the first sequence.","nodes":[{"pos":[0,43],"content":"The sequence to join to the first sequence.","nodes":[{"content":"The sequence to join to the first sequence.","pos":[0,43]}]}],"pos":[268625,268669],"yaml":true},{"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"pos":[0,75],"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"content":"A function to extract the join key from each element of the first sequence.","pos":[0,75]}]}],"pos":[268752,268828],"yaml":true},{"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"pos":[0,76],"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"content":"A function to extract the join key from each element of the second sequence.","pos":[0,76]}]}],"pos":[268911,268988],"yaml":true},{"content":"A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.","nodes":[{"pos":[0,141],"content":"A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.","nodes":[{"content":"A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.","pos":[0,141]}]}],"pos":[269119,269261],"yaml":true},{"content":"The type of the elements of the first sequence.","nodes":[{"pos":[0,47],"content":"The type of the elements of the first sequence.","nodes":[{"content":"The type of the elements of the first sequence.","pos":[0,47]}]}],"pos":[269317,269365],"yaml":true},{"content":"The type of the elements of the second sequence.","nodes":[{"pos":[0,48],"content":"The type of the elements of the second sequence.","nodes":[{"content":"The type of the elements of the second sequence.","pos":[0,48]}]}],"pos":[269401,269450],"yaml":true},{"content":"The type of the keys returned by the key selector functions.","nodes":[{"pos":[0,60],"content":"The type of the keys returned by the key selector functions.","nodes":[{"content":"The type of the keys returned by the key selector functions.","pos":[0,60]}]}],"pos":[269484,269545],"yaml":true},{"content":"The type of the result elements.","nodes":[{"pos":[0,32],"content":"The type of the result elements.","nodes":[{"content":"The type of the result elements.","pos":[0,32]}]}],"pos":[269582,269615],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements of type <code>TResult</code> that are obtained by performing a grouped join on two sequences.","nodes":[{"pos":[0,181],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> that are obtained by performing a grouped join on two sequences.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements of type <code>TResult</code> that are obtained by performing a grouped join on two sequences."}],"pos":[269706,269888],"yaml":true},{"content":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">&lt;code&gt;outer&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;inner&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;outerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;innerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph5\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph6\">`null`</ph>.","source":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`."}],"pos":[270053,270202],"yaml":true},{"content":"Produces the set intersection of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,156],"content":"Produces the set intersection of two sequences by using the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"Produces the set intersection of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[272253,272410],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.  \n  \n When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`.  \n  \n If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,583],"content":"The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.","nodes":[{"content":"The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.","pos":[0,140]}]},{"pos":[590,786],"content":"When the object returned by this method is enumerated, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> yields distinct elements occurring in both sequences in the order in which they appear in <ph id=\"ph2\">`first`</ph>.","source":"When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`."},{"pos":[793,942],"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.","source":"If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values."}],"pos":[272421,273372],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in <code>second</code> will be returned.","nodes":[{"pos":[0,146],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose distinct elements that also appear in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">second</ph><ept id=\"p1\">&lt;/code&gt;</ept> will be returned.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in <code>second</code> will be returned."}],"pos":[274919,275066],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in the first sequence will be returned.","nodes":[{"pos":[0,145],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose distinct elements that also appear in the first sequence will be returned.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in the first sequence will be returned."}],"pos":[275162,275308],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[275412,275502],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[275559,275608],"yaml":true},{"content":"A sequence that contains the elements that form the set intersection of two sequences.","nodes":[{"pos":[0,86],"content":"A sequence that contains the elements that form the set intersection of two sequences.","nodes":[{"content":"A sequence that contains the elements that form the set intersection of two sequences.","pos":[0,86]}]}],"pos":[275699,275786],"yaml":true},{"content":"<code>first</code> or <code>second</code> is `null`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>first</code> or <code>second</code> is `null`."}],"pos":[275951,276004],"yaml":true},{"content":"Produces the set intersection of two sequences by using the default equality comparer to compare values.","nodes":[{"pos":[0,104],"content":"Produces the set intersection of two sequences by using the default equality comparer to compare values.","nodes":[{"content":"Produces the set intersection of two sequences by using the default equality comparer to compare values.","pos":[0,104]}]}],"pos":[277821,277926],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.  \n  \n When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`.  \n  \n The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,583],"content":"The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.","nodes":[{"content":"The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.","pos":[0,140]}]},{"pos":[590,786],"content":"When the object returned by this method is enumerated, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> yields distinct elements occurring in both sequences in the order in which they appear in <ph id=\"ph2\">`first`</ph>.","source":"When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`."},{"pos":[793,1205],"content":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.","nodes":[{"content":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.","pos":[0,412],"nodes":[{"content":"The default equality comparer, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.","pos":[0,230],"source":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface."},{"content":"To compare a custom data type, you need to implement this interface and provide your own <ph id=\"ph1\">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.","pos":[231,412],"source":" To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type."}]}]}],"pos":[277937,279151],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in <code>second</code> will be returned.","nodes":[{"pos":[0,146],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose distinct elements that also appear in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">second</ph><ept id=\"p1\">&lt;/code&gt;</ept> will be returned.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in <code>second</code> will be returned."}],"pos":[281237,281384],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in the first sequence will be returned.","nodes":[{"pos":[0,145],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose distinct elements that also appear in the first sequence will be returned.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in the first sequence will be returned."}],"pos":[281480,281626],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[281683,281732],"yaml":true},{"content":"A sequence that contains the elements that form the set intersection of two sequences.","nodes":[{"pos":[0,86],"content":"A sequence that contains the elements that form the set intersection of two sequences.","nodes":[{"content":"A sequence that contains the elements that form the set intersection of two sequences.","pos":[0,86]}]}],"pos":[281823,281910],"yaml":true},{"content":"<code>first</code> or <code>second</code> is `null`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>first</code> or <code>second</code> is `null`."}],"pos":[282075,282128],"yaml":true},{"content":"Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.","nodes":[{"pos":[0,119],"content":"Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.","nodes":[{"content":"Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.","pos":[0,119],"nodes":[{"content":"Correlates the elements of two sequences based on matching keys.","pos":[0,64]},{"content":"The default equality comparer is used to compare keys.","pos":[65,119]}]}]}],"pos":[284368,284488],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.  \n  \n A join refers to the operation of correlating the elements of two sources of information based on a common key. <xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call. This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.  \n  \n <xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.  \n  \n In query expression syntax, a `join` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Join` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.Join%2A>.  \n  \n In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin. 'Inner' means that only elements that have a match in the other sequence are included in the results. An 'equijoin' is a join in which the keys are compared for equality. A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method. See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,574],"content":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.","nodes":[{"content":"The default equality comparer, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.","pos":[0,131],"source":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys."}]},{"pos":[581,948],"content":"A join refers to the operation of correlating the elements of two sources of information based on a common key. <xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call. This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.","nodes":[{"content":"A join refers to the operation of correlating the elements of two sources of information based on a common key.","pos":[0,111]},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> brings the two information sources and the keys by which they are matched together in one method call.","pos":[112,252],"source":" <xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call."},{"content":"This differs from the use of <ph id=\"ph1\">`SelectMany`</ph>, which requires more than one method call to perform the same operation.","pos":[253,367],"source":" This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation."}]},{"pos":[955,1119],"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserves the order of the elements of <ph id=\"ph2\">`outer`</ph>, and for each of these elements, the order of the matching elements of <ph id=\"ph3\">`inner`</ph>.","source":"<xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`."},{"pos":[1126,1341],"content":"In query expression syntax, a <ph id=\"ph1\">`join`</ph> (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`Join`</ph> (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>.","source":"In query expression syntax, a `join` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Join` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.Join%2A>."},{"pos":[1348,1877],"content":"In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin. 'Inner' means that only elements that have a match in the other sequence are included in the results. An 'equijoin' is a join in which the keys are compared for equality. A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method. See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).","nodes":[{"content":"In relational database terms, the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method implements an inner equijoin.","pos":[0,108],"source":"In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin."},{"content":"'Inner' means that only elements that have a match in the other sequence are included in the results.","pos":[109,210]},{"content":"An 'equijoin' is a join in which the keys are compared for equality.","pos":[211,279]},{"content":"A left outer join operation has no dedicated standard query operator, but can be performed by using the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method.","pos":[280,434],"source":" A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method."},{"content":"See <bpt id=\"p1\">[</bpt>Join Operations<ept id=\"p1\">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.","pos":[435,529],"source":" See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)."}]}],"pos":[284499,286389],"yaml":true,"extradata":"MT"},{"content":"The first sequence to join.","nodes":[{"pos":[0,27],"content":"The first sequence to join.","nodes":[{"content":"The first sequence to join.","pos":[0,27]}]}],"pos":[287536,287564],"yaml":true},{"content":"The sequence to join to the first sequence.","nodes":[{"pos":[0,43],"content":"The sequence to join to the first sequence.","nodes":[{"content":"The sequence to join to the first sequence.","pos":[0,43]}]}],"pos":[287658,287702],"yaml":true},{"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"pos":[0,75],"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"content":"A function to extract the join key from each element of the first sequence.","pos":[0,75]}]}],"pos":[287785,287861],"yaml":true},{"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"pos":[0,76],"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"content":"A function to extract the join key from each element of the second sequence.","pos":[0,76]}]}],"pos":[287944,288021],"yaml":true},{"content":"A function to create a result element from two matching elements.","nodes":[{"pos":[0,65],"content":"A function to create a result element from two matching elements.","nodes":[{"content":"A function to create a result element from two matching elements.","pos":[0,65]}]}],"pos":[288112,288178],"yaml":true},{"content":"The type of the elements of the first sequence.","nodes":[{"pos":[0,47],"content":"The type of the elements of the first sequence.","nodes":[{"content":"The type of the elements of the first sequence.","pos":[0,47]}]}],"pos":[288234,288282],"yaml":true},{"content":"The type of the elements of the second sequence.","nodes":[{"pos":[0,48],"content":"The type of the elements of the second sequence.","nodes":[{"content":"The type of the elements of the second sequence.","pos":[0,48]}]}],"pos":[288318,288367],"yaml":true},{"content":"The type of the keys returned by the key selector functions.","nodes":[{"pos":[0,60],"content":"The type of the keys returned by the key selector functions.","nodes":[{"content":"The type of the keys returned by the key selector functions.","pos":[0,60]}]}],"pos":[288401,288462],"yaml":true},{"content":"The type of the result elements.","nodes":[{"pos":[0,32],"content":"The type of the result elements.","nodes":[{"content":"The type of the result elements.","pos":[0,32]}]}],"pos":[288499,288532],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that has elements of type <code>TResult</code> that are obtained by performing an inner join on two sequences.","nodes":[{"pos":[0,175],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that has elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> that are obtained by performing an inner join on two sequences.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that has elements of type <code>TResult</code> that are obtained by performing an inner join on two sequences."}],"pos":[288623,288799],"yaml":true},{"content":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">&lt;code&gt;outer&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;inner&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;outerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;innerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph5\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph6\">`null`</ph>.","source":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`."}],"pos":[288959,289108],"yaml":true},{"content":"Correlates the elements of two sequences based on matching keys. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys.","nodes":[{"pos":[0,169],"content":"Correlates the elements of two sequences based on matching keys. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys.","nodes":[{"content":"Correlates the elements of two sequences based on matching keys.","pos":[0,64]},{"content":"A specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> is used to compare keys.","pos":[65,169],"source":" A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys."}]}],"pos":[291573,291743],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.  \n  \n A join refers to the operation of correlating the elements of two sources of information based on a common key. <xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call. This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.  \n  \n <xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.  \n  \n In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin. 'Inner' means that only elements that have a match in the other sequence are included in the results. An 'equijoin' is a join in which the keys are compared for equality. A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method. See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,599],"content":"If c<ph id=\"ph1\">`omparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.","source":"If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys."},{"pos":[606,973],"content":"A join refers to the operation of correlating the elements of two sources of information based on a common key. <xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call. This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.","nodes":[{"content":"A join refers to the operation of correlating the elements of two sources of information based on a common key.","pos":[0,111]},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> brings the two information sources and the keys by which they are matched together in one method call.","pos":[112,252],"source":" <xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call."},{"content":"This differs from the use of <ph id=\"ph1\">`SelectMany`</ph>, which requires more than one method call to perform the same operation.","pos":[253,367],"source":" This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation."}]},{"pos":[980,1144],"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserves the order of the elements of <ph id=\"ph2\">`outer`</ph>, and for each of these elements, the order of the matching elements of <ph id=\"ph3\">`inner`</ph>.","source":"<xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`."},{"pos":[1151,1680],"content":"In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin. 'Inner' means that only elements that have a match in the other sequence are included in the results. An 'equijoin' is a join in which the keys are compared for equality. A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method. See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).","nodes":[{"content":"In relational database terms, the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method implements an inner equijoin.","pos":[0,108],"source":"In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin."},{"content":"'Inner' means that only elements that have a match in the other sequence are included in the results.","pos":[109,210]},{"content":"An 'equijoin' is a join in which the keys are compared for equality.","pos":[211,279]},{"content":"A left outer join operation has no dedicated standard query operator, but can be performed by using the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method.","pos":[280,434],"source":" A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method."},{"content":"See <bpt id=\"p1\">[</bpt>Join Operations<ept id=\"p1\">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.","pos":[435,529],"source":" See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)."}]}],"pos":[291754,293445],"yaml":true,"extradata":"MT"},{"content":"The first sequence to join.","nodes":[{"pos":[0,27],"content":"The first sequence to join.","nodes":[{"content":"The first sequence to join.","pos":[0,27]}]}],"pos":[293965,293993],"yaml":true},{"content":"The sequence to join to the first sequence.","nodes":[{"pos":[0,43],"content":"The sequence to join to the first sequence.","nodes":[{"content":"The sequence to join to the first sequence.","pos":[0,43]}]}],"pos":[294087,294131],"yaml":true},{"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"pos":[0,75],"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"content":"A function to extract the join key from each element of the first sequence.","pos":[0,75]}]}],"pos":[294214,294290],"yaml":true},{"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"pos":[0,76],"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"content":"A function to extract the join key from each element of the second sequence.","pos":[0,76]}]}],"pos":[294373,294450],"yaml":true},{"content":"A function to create a result element from two matching elements.","nodes":[{"pos":[0,65],"content":"A function to create a result element from two matching elements.","nodes":[{"content":"A function to create a result element from two matching elements.","pos":[0,65]}]}],"pos":[294541,294607],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to hash and compare keys.","nodes":[{"pos":[0,96],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to hash and compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to hash and compare keys."}],"pos":[294708,294805],"yaml":true},{"content":"The type of the elements of the first sequence.","nodes":[{"pos":[0,47],"content":"The type of the elements of the first sequence.","nodes":[{"content":"The type of the elements of the first sequence.","pos":[0,47]}]}],"pos":[294861,294909],"yaml":true},{"content":"The type of the elements of the second sequence.","nodes":[{"pos":[0,48],"content":"The type of the elements of the second sequence.","nodes":[{"content":"The type of the elements of the second sequence.","pos":[0,48]}]}],"pos":[294945,294994],"yaml":true},{"content":"The type of the keys returned by the key selector functions.","nodes":[{"pos":[0,60],"content":"The type of the keys returned by the key selector functions.","nodes":[{"content":"The type of the keys returned by the key selector functions.","pos":[0,60]}]}],"pos":[295028,295089],"yaml":true},{"content":"The type of the result elements.","nodes":[{"pos":[0,32],"content":"The type of the result elements.","nodes":[{"content":"The type of the result elements.","pos":[0,32]}]}],"pos":[295126,295159],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that has elements of type <code>TResult</code> that are obtained by performing an inner join on two sequences.","nodes":[{"pos":[0,175],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that has elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> that are obtained by performing an inner join on two sequences.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that has elements of type <code>TResult</code> that are obtained by performing an inner join on two sequences."}],"pos":[295250,295426],"yaml":true},{"content":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">&lt;code&gt;outer&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;inner&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;outerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;innerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph5\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph6\">`null`</ph>.","source":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`."}],"pos":[295586,295735],"yaml":true},{"content":"Returns the last element of a sequence.","nodes":[{"pos":[0,39],"content":"Returns the last element of a sequence.","nodes":[{"content":"Returns the last element of a sequence.","pos":[0,39]}]}],"pos":[297324,297364],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements. To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.","nodes":[{"pos":[0,295],"content":"The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements. To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if <ph id=\"ph2\">`source`</ph> contains no elements.","pos":[0,163],"source":"The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements."},{"content":"To instead return a default value when the source sequence is empty, use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method.","pos":[164,295],"source":" To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method."}]}],"pos":[297375,297671],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the last element of.","nodes":[{"pos":[0,95],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return the last element of.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the last element of."}],"pos":[298393,298489],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[298546,298595],"yaml":true},{"content":"The value at the last position in the source sequence.","nodes":[{"pos":[0,54],"content":"The value at the last position in the source sequence.","nodes":[{"content":"The value at the last position in the source sequence.","pos":[0,54]}]}],"pos":[298646,298701],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[298861,298892],"yaml":true},{"content":"The source sequence is empty.","nodes":[{"pos":[0,29],"content":"The source sequence is empty.","nodes":[{"content":"The source sequence is empty.","pos":[0,29]}]}],"pos":[299002,299032],"yaml":true},{"content":"Returns the last element of a sequence that satisfies a specified condition.","nodes":[{"pos":[0,76],"content":"Returns the last element of a sequence that satisfies a specified condition.","nodes":[{"content":"Returns the last element of a sequence that satisfies a specified condition.","pos":[0,76]}]}],"pos":[300786,300863],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`. To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.","nodes":[{"pos":[0,350],"content":"The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`. To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if no matching element is found in <ph id=\"ph2\">`source`</ph>.","pos":[0,218],"source":"The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`."},{"content":"To instead return a default value when no matching element is found, use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method.","pos":[219,350],"source":" To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method."}]}],"pos":[300874,301225],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from.","nodes":[{"pos":[0,91],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return an element from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from."}],"pos":[302048,302140],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[302227,302276],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[302333,302382],"yaml":true},{"content":"The last element in the sequence that passes the test in the specified predicate function.","nodes":[{"pos":[0,90],"content":"The last element in the sequence that passes the test in the specified predicate function.","nodes":[{"content":"The last element in the sequence that passes the test in the specified predicate function.","pos":[0,90]}]}],"pos":[302433,302524],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[302684,302741],"yaml":true},{"content":"No element satisfies the condition in <code>predicate</code>.  \n  \n -or-  \n  \n The source sequence is empty.","nodes":[{"pos":[0,61],"content":"No element satisfies the condition in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"No element satisfies the condition in <code>predicate</code>."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,108],"content":"The source sequence is empty.","nodes":[{"content":"The source sequence is empty.","pos":[0,29]}]}],"pos":[302851,302966],"yaml":true},{"content":"Returns the last element of a sequence, or a default value if the sequence contains no elements.","nodes":[{"pos":[0,96],"content":"Returns the last element of a sequence, or a default value if the sequence contains no elements.","nodes":[{"content":"Returns the last element of a sequence, or a default value if the sequence contains no elements.","pos":[0,96]}]}],"pos":[304609,304706],"yaml":true},{"content":"The default value for reference and nullable types is `null`.  \n  \n The <xref:System.Linq.Enumerable.LastOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.","nodes":[{"pos":[0,61],"content":"The default value for reference and nullable types is <ph id=\"ph1\">`null`</ph>.","source":"The default value for reference and nullable types is `null`."},{"pos":[68,417],"content":"The <xref:System.Linq.Enumerable.LastOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.","pos":[0,108],"source":"The <xref:System.Linq.Enumerable.LastOrDefault%2A> method does not provide a way to specify a default value."},{"content":"If you want to specify a default value other than <ph id=\"ph1\">`default(TSource)`</ph>, use the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.","pos":[109,349],"source":" If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section."}]}],"pos":[304717,305139],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the last element of.","nodes":[{"pos":[0,95],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return the last element of.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the last element of."}],"pos":[307324,307420],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[307477,307526],"yaml":true},{"content":"`default`(<code>TSource</code>) if the source sequence is empty; otherwise, the last element in the <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">`default`</ph>(<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>) if the source sequence is empty; otherwise, the last element in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph>.","source":"`default`(<code>TSource</code>) if the source sequence is empty; otherwise, the last element in the <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>."}],"pos":[307577,307742],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[307911,307942],"yaml":true},{"content":"Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.","nodes":[{"pos":[0,113],"content":"Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.","nodes":[{"content":"Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.","pos":[0,113]}]}],"pos":[309728,309842],"yaml":true},{"content":"The default value for reference and nullable types is `null`.","nodes":[{"pos":[0,61],"content":"The default value for reference and nullable types is <ph id=\"ph1\">`null`</ph>.","source":"The default value for reference and nullable types is `null`."}],"pos":[309853,309915],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from.","nodes":[{"pos":[0,91],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return an element from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from."}],"pos":[310816,310908],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[310995,311044],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[311101,311150],"yaml":true},{"content":"`default`(<code>TSource</code>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.","nodes":[{"pos":[0,191],"content":"<ph id=\"ph1\">`default`</ph>(<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.","source":"`default`(<code>TSource</code>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function."}],"pos":[311201,311395],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[311564,311621],"yaml":true},{"content":"Returns an <xref href=\"System.Int64\"></xref> that represents how many elements in a sequence satisfy a condition.","nodes":[{"pos":[0,113],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> that represents how many elements in a sequence satisfy a condition.","source":"Returns an <xref href=\"System.Int64\"></xref> that represents how many elements in a sequence satisfy a condition."}],"pos":[313405,313519],"yaml":true},{"content":"Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.","nodes":[{"pos":[0,142],"content":"Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.","nodes":[{"content":"Use this method rather than <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> when you expect the result to be greater than <ph id=\"ph2\">&lt;xref:System.Int32.MaxValue&gt;</ph>.","pos":[0,142],"source":"Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>."}]},{"pos":[149,334],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into LongCount()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>."}],"pos":[313530,313869],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements to be counted.","nodes":[{"pos":[0,106],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements to be counted.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements to be counted."}],"pos":[314692,314799],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[314886,314935],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[314992,315041],"yaml":true},{"content":"A number that represents how many elements in the sequence satisfy the condition in the predicate function.","nodes":[{"pos":[0,107],"content":"A number that represents how many elements in the sequence satisfy the condition in the predicate function.","nodes":[{"content":"A number that represents how many elements in the sequence satisfy the condition in the predicate function.","pos":[0,107]}]}],"pos":[315097,315205],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[315370,315427],"yaml":true},{"content":"The number of matching elements exceeds <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,83],"content":"The number of matching elements exceeds <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of matching elements exceeds <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[315521,315605],"yaml":true},{"content":"Returns an <xref href=\"System.Int64\"></xref> that represents the total number of elements in a sequence.","nodes":[{"pos":[0,104],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> that represents the total number of elements in a sequence.","source":"Returns an <xref href=\"System.Int64\"></xref> that represents the total number of elements in a sequence."}],"pos":[317224,317329],"yaml":true},{"content":"Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.","nodes":[{"pos":[0,142],"content":"Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.","nodes":[{"content":"Use this method rather than <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> when you expect the result to be greater than <ph id=\"ph2\">&lt;xref:System.Int32.MaxValue&gt;</ph>.","pos":[0,142],"source":"Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>."}]},{"pos":[149,334],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into LongCount()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>."}],"pos":[317340,317679],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements to be counted.","nodes":[{"pos":[0,106],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements to be counted.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements to be counted."}],"pos":[318403,318510],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[318567,318616],"yaml":true},{"content":"The number of elements in the source sequence.","nodes":[{"pos":[0,46],"content":"The number of elements in the source sequence.","nodes":[{"content":"The number of elements in the source sequence.","pos":[0,46]}]}],"pos":[318672,318719],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[318884,318915],"yaml":true},{"content":"The number of elements exceeds <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,74],"content":"The number of elements exceeds <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of elements exceeds <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[319009,319084],"yaml":true},{"content":"Returns the maximum value in a sequence of nullable <xref href=\"System.Single\"></xref> values.","nodes":[{"pos":[0,94],"content":"Returns the maximum value in a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the maximum value in a sequence of nullable <xref href=\"System.Single\"></xref> values."}],"pos":[320739,320834],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \n  \n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,225],"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,225],"source":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[232,334],"content":"If the source sequence is empty or contains only values that are <ph id=\"ph1\">`null`</ph>, this function returns <ph id=\"ph2\">`null`</ph>.","source":"If the source sequence is empty or contains only values that are `null`, this function returns `null`."},{"pos":[341,514],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[320845,321366],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Single\"></xref> values to determine the maximum value of.","nodes":[{"pos":[0,99],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.","source":"A sequence of nullable <xref href=\"System.Single\"></xref> values to determine the maximum value of."}],"pos":[322256,322356],"yaml":true},{"content":"A value of type <code>Nullable<Single></code> in C# or <code>Nullable(Of Single)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.","nodes":[{"pos":[0,189],"content":"A value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Single&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Single)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.","source":"A value of type <code>Nullable<Single></code> in C# or <code>Nullable(Of Single)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence."}],"pos":[322430,322620],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[322776,322807],"yaml":true},{"content":"Returns the maximum value in a sequence of <xref href=\"System.Int32\"></xref> values.","nodes":[{"pos":[0,84],"content":"Returns the maximum value in a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the maximum value in a sequence of <xref href=\"System.Int32\"></xref> values."}],"pos":[324353,324438],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,202],"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,202],"source":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[209,382],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[324449,324836],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Int32\"></xref> values to determine the maximum value of.","nodes":[{"pos":[0,89],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.","source":"A sequence of <xref href=\"System.Int32\"></xref> values to determine the maximum value of."}],"pos":[325662,325752],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[325808,325843],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[325999,326030],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[326140,326182],"yaml":true},{"content":"Returns the maximum value in a sequence of nullable <xref href=\"System.Int64\"></xref> values.","nodes":[{"pos":[0,93],"content":"Returns the maximum value in a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the maximum value in a sequence of nullable <xref href=\"System.Int64\"></xref> values."}],"pos":[327809,327903],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \n  \n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,223],"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,223],"source":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[230,332],"content":"If the source sequence is empty or contains only values that are <ph id=\"ph1\">`null`</ph>, this function returns <ph id=\"ph2\">`null`</ph>.","source":"If the source sequence is empty or contains only values that are `null`, this function returns `null`."},{"pos":[339,512],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[327914,328433],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Int64\"></xref> values to determine the maximum value of.","nodes":[{"pos":[0,98],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.","source":"A sequence of nullable <xref href=\"System.Int64\"></xref> values to determine the maximum value of."}],"pos":[329320,329419],"yaml":true},{"content":"A value of type <code>Nullable<Int64></code> in C# or <code>Nullable(Of Int64)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.","nodes":[{"pos":[0,187],"content":"A value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Int64&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Int64)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.","source":"A value of type <code>Nullable<Int64></code> in C# or <code>Nullable(Of Int64)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence."}],"pos":[329492,329680],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[329836,329867],"yaml":true},{"content":"Returns the maximum value in a sequence of <xref href=\"System.Single\"></xref> values.","nodes":[{"pos":[0,85],"content":"Returns the maximum value in a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the maximum value in a sequence of <xref href=\"System.Single\"></xref> values."}],"pos":[331441,331527],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,204],"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,204],"source":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[211,384],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[331538,331927],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Single\"></xref> values to determine the maximum value of.","nodes":[{"pos":[0,90],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.","source":"A sequence of <xref href=\"System.Single\"></xref> values to determine the maximum value of."}],"pos":[332758,332849],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[332906,332941],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[333097,333128],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[333238,333280],"yaml":true},{"content":"Returns the maximum value in a sequence of nullable <xref href=\"System.Int32\"></xref> values.","nodes":[{"pos":[0,93],"content":"Returns the maximum value in a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the maximum value in a sequence of nullable <xref href=\"System.Int32\"></xref> values."}],"pos":[334929,335023],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \n  \n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,223],"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,223],"source":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[230,332],"content":"If the source sequence is empty or contains only values that are <ph id=\"ph1\">`null`</ph>, this function returns <ph id=\"ph2\">`null`</ph>.","source":"If the source sequence is empty or contains only values that are `null`, this function returns `null`."},{"pos":[339,512],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[335034,335553],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Int32\"></xref> values to determine the maximum value of.","nodes":[{"pos":[0,98],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.","source":"A sequence of nullable <xref href=\"System.Int32\"></xref> values to determine the maximum value of."}],"pos":[336438,336537],"yaml":true},{"content":"A value of type <code>Nullable<Int32></code> in C# or <code>Nullable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.","nodes":[{"pos":[0,187],"content":"A value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Int32&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Int32)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.","source":"A value of type <code>Nullable<Int32></code> in C# or <code>Nullable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence."}],"pos":[336610,336798],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[336954,336985],"yaml":true},{"content":"Returns the maximum value in a sequence of <xref href=\"System.Decimal\"></xref> values.","nodes":[{"pos":[0,86],"content":"Returns the maximum value in a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the maximum value in a sequence of <xref href=\"System.Decimal\"></xref> values."}],"pos":[338565,338652],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,206],"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,206],"source":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[213,386],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[338663,339054],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Decimal\"></xref> values to determine the maximum value of.","nodes":[{"pos":[0,91],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.","source":"A sequence of <xref href=\"System.Decimal\"></xref> values to determine the maximum value of."}],"pos":[339890,339982],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[340040,340075],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[340231,340262],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[340372,340414],"yaml":true},{"content":"Returns the maximum value in a sequence of nullable <xref href=\"System.Decimal\"></xref> values.","nodes":[{"pos":[0,95],"content":"Returns the maximum value in a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the maximum value in a sequence of nullable <xref href=\"System.Decimal\"></xref> values."}],"pos":[342053,342149],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \n  \n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,227],"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,227],"source":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[234,336],"content":"If the source sequence is empty or contains only values that are <ph id=\"ph1\">`null`</ph>, this function returns <ph id=\"ph2\">`null`</ph>.","source":"If the source sequence is empty or contains only values that are `null`, this function returns `null`."},{"pos":[343,516],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[342160,342683],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Decimal\"></xref> values to determine the maximum value of.","nodes":[{"pos":[0,100],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.","source":"A sequence of nullable <xref href=\"System.Decimal\"></xref> values to determine the maximum value of."}],"pos":[343578,343679],"yaml":true},{"content":"A value of type <code>Nullable<Decimal></code> in C# or <code>Nullable(Of Decimal)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.","nodes":[{"pos":[0,191],"content":"A value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Decimal&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Decimal)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.","source":"A value of type <code>Nullable<Decimal></code> in C# or <code>Nullable(Of Decimal)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence."}],"pos":[343754,343946],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[344102,344133],"yaml":true},{"content":"Returns the maximum value in a sequence of <xref href=\"System.Int64\"></xref> values.","nodes":[{"pos":[0,84],"content":"Returns the maximum value in a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the maximum value in a sequence of <xref href=\"System.Int64\"></xref> values."}],"pos":[345701,345786],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,202],"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,202],"source":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[209,382],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[345797,346184],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Int64\"></xref> values to determine the maximum value of.","nodes":[{"pos":[0,89],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.","source":"A sequence of <xref href=\"System.Int64\"></xref> values to determine the maximum value of."}],"pos":[346898,346988],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[347044,347079],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[347235,347266],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[347376,347418],"yaml":true},{"content":"Returns the maximum value in a sequence of <xref href=\"System.Double\"></xref> values.","nodes":[{"pos":[0,85],"content":"Returns the maximum value in a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the maximum value in a sequence of <xref href=\"System.Double\"></xref> values."}],"pos":[348970,349056],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,204],"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,204],"source":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[211,384],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[349067,349456],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Double\"></xref> values to determine the maximum value of.","nodes":[{"pos":[0,90],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.","source":"A sequence of <xref href=\"System.Double\"></xref> values to determine the maximum value of."}],"pos":[350289,350380],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[350437,350472],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[350628,350659],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[350769,350811],"yaml":true},{"content":"Returns the maximum value in a sequence of nullable <xref href=\"System.Double\"></xref> values.","nodes":[{"pos":[0,94],"content":"Returns the maximum value in a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the maximum value in a sequence of nullable <xref href=\"System.Double\"></xref> values."}],"pos":[352466,352561],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \n  \n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,225],"content":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,225],"source":"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[232,334],"content":"If the source sequence is empty or contains only values that are <ph id=\"ph1\">`null`</ph>, this function returns <ph id=\"ph2\">`null`</ph>.","source":"If the source sequence is empty or contains only values that are `null`, this function returns `null`."},{"pos":[341,514],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[352572,353093],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Double\"></xref> values to determine the maximum value of.","nodes":[{"pos":[0,99],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.","source":"A sequence of nullable <xref href=\"System.Double\"></xref> values to determine the maximum value of."}],"pos":[353871,353971],"yaml":true},{"content":"A value of type <code>Nullable<Double></code> in C# or <code>Nullable(Of Double)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.","nodes":[{"pos":[0,189],"content":"A value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Double&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Double)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.","source":"A value of type <code>Nullable<Double></code> in C# or <code>Nullable(Of Double)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence."}],"pos":[354045,354235],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[354391,354422],"yaml":true},{"content":"Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.","nodes":[{"pos":[0,107],"content":"Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.","nodes":[{"content":"Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.","pos":[0,107]}]}],"pos":[356161,356269],"yaml":true},{"content":"If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values. Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,229],"content":"If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values. Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.","nodes":[{"content":"If type <ph id=\"ph1\">`TResult`</ph> implements <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.","pos":[0,115],"source":"If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values."},{"content":"Otherwise, if type <ph id=\"ph1\">`TResult`</ph> implements <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.","pos":[116,229],"source":" Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values."}]},{"pos":[236,409],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[356280,356694],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the maximum value of.","nodes":[{"content":"A sequence of values to determine the maximum value of.","pos":[0,55]}]}],"pos":[357622,357678],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[357757,357804],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[357861,357910],"yaml":true},{"content":"The type of the value returned by <code>selector</code>.","nodes":[{"pos":[0,56],"content":"The type of the value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">selector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the value returned by <code>selector</code>."}],"pos":[357947,358004],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[358055,358090],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[358249,358305],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Single\"></xref> value.","nodes":[{"pos":[0,124],"content":"Invokes a transform function on each element of a sequence and returns the maximum <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Single\"></xref> value."}],"pos":[360025,360150],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,248],"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,248],"source":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[255,447],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Single&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>."},{"pos":[454,627],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[360161,360795],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the maximum value of.","nodes":[{"content":"A sequence of values to determine the maximum value of.","pos":[0,55]}]}],"pos":[361711,361767],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[361852,361899],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[361956,362005],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[362062,362097],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[362256,362312],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[362422,362464],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Single\"></xref> value.","nodes":[{"pos":[0,133],"content":"Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Single\"></xref> value."}],"pos":[364265,364399],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,269],"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,269],"source":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[276,544],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Single&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Single)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[551,724],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[364410,365141],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the maximum value of.","nodes":[{"content":"A sequence of values to determine the maximum value of.","pos":[0,55]}]}],"pos":[366077,366133],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[366235,366282],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[366339,366388],"yaml":true},{"content":"The value of type <code>Nullable<Single></code> in C# or <code>Nullable(Of Single)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.","nodes":[{"pos":[0,191],"content":"The value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Single&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Single)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.","source":"The value of type <code>Nullable<Single></code> in C# or <code>Nullable(Of Single)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence."}],"pos":[366462,366654],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[366813,366869],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Int64\"></xref> value.","nodes":[{"pos":[0,132],"content":"Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Int64\"></xref> value."}],"pos":[368686,368819],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,267],"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,267],"source":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[274,540],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Int64)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[547,720],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[368830,369557],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the maximum value of.","nodes":[{"content":"A sequence of values to determine the maximum value of.","pos":[0,55]}]}],"pos":[370491,370547],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[370648,370695],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[370752,370801],"yaml":true},{"content":"The value of type <code>Nullable<Int64></code> in C# or <code>Nullable(Of Int64)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.","nodes":[{"pos":[0,189],"content":"The value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Int64&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Int64)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.","source":"The value of type <code>Nullable<Int64></code> in C# or <code>Nullable(Of Int64)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence."}],"pos":[370874,371064],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[371223,371279],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Int32\"></xref> value.","nodes":[{"pos":[0,132],"content":"Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Int32\"></xref> value."}],"pos":[373074,373207],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,267],"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,267],"source":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[274,540],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Int32)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[547,720],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[373218,373945],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the maximum value of.","nodes":[{"content":"A sequence of values to determine the maximum value of.","pos":[0,55]}]}],"pos":[374877,374933],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[375034,375081],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[375138,375187],"yaml":true},{"content":"The value of type <code>Nullable<Int32></code> in C# or <code>Nullable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.","nodes":[{"pos":[0,189],"content":"The value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Int32&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Int32)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.","source":"The value of type <code>Nullable<Int32></code> in C# or <code>Nullable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence."}],"pos":[375260,375450],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[375609,375665],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Double\"></xref> value.","nodes":[{"pos":[0,133],"content":"Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Double\"></xref> value."}],"pos":[377488,377622],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,269],"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,269],"source":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[276,544],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Double&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Double)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[551,724],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[377633,378364],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the maximum value of.","nodes":[{"content":"A sequence of values to determine the maximum value of.","pos":[0,55]}]}],"pos":[379302,379358],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[379460,379507],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[379564,379613],"yaml":true},{"content":"The value of type <code>Nullable<Double></code> in C# or <code>Nullable(Of Double)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.","nodes":[{"pos":[0,191],"content":"The value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Double&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Double)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.","source":"The value of type <code>Nullable<Double></code> in C# or <code>Nullable(Of Double)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence."}],"pos":[379687,379879],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[380038,380094],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Int64\"></xref> value.","nodes":[{"pos":[0,123],"content":"Invokes a transform function on each element of a sequence and returns the maximum <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Int64\"></xref> value."}],"pos":[381830,381954],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,246],"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,246],"source":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[253,444],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Int64&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>."},{"pos":[451,624],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[381965,382596],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the maximum value of.","nodes":[{"content":"A sequence of values to determine the maximum value of.","pos":[0,55]}]}],"pos":[383510,383566],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[383650,383697],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[383754,383803],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[383859,383894],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[384053,384109],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[384219,384261],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Int32\"></xref> value.","nodes":[{"pos":[0,123],"content":"Invokes a transform function on each element of a sequence and returns the maximum <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Int32\"></xref> value."}],"pos":[385975,386099],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,246],"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,246],"source":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[253,444],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Int32&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>."},{"pos":[451,624],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[386110,386741],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the maximum value of.","nodes":[{"content":"A sequence of values to determine the maximum value of.","pos":[0,55]}]}],"pos":[387553,387609],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[387693,387740],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[387797,387846],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[387902,387937],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[388096,388152],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[388262,388304],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Double\"></xref> value.","nodes":[{"pos":[0,124],"content":"Invokes a transform function on each element of a sequence and returns the maximum <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Double\"></xref> value."}],"pos":[390024,390149],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,248],"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,248],"source":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[255,447],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>."},{"pos":[454,627],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[390160,390794],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the maximum value of.","nodes":[{"content":"A sequence of values to determine the maximum value of.","pos":[0,55]}]}],"pos":[391712,391768],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[391853,391900],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[391957,392006],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[392063,392098],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[392257,392313],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[392423,392465],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Decimal\"></xref> value.","nodes":[{"pos":[0,125],"content":"Invokes a transform function on each element of a sequence and returns the maximum <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Decimal\"></xref> value."}],"pos":[394213,394339],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,250],"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,250],"source":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[257,450],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Decimal&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>."},{"pos":[457,630],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[394350,394987],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the maximum value of.","nodes":[{"content":"A sequence of values to determine the maximum value of.","pos":[0,55]}]}],"pos":[395907,395963],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[396049,396096],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[396153,396202],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[396260,396295],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[396454,396510],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[396620,396662],"yaml":true},{"content":"Returns the maximum value in a generic sequence.","nodes":[{"pos":[0,48],"content":"Returns the maximum value in a generic sequence.","nodes":[{"content":"Returns the maximum value in a generic sequence.","pos":[0,48]}]}],"pos":[398245,398294],"yaml":true},{"content":"If type `TSource` implements <xref:System.IComparable%601>, the <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method uses that implementation to compare values. Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.  \n  \n If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this method returns `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,326],"content":"If type `TSource` implements <xref:System.IComparable%601>, the <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method uses that implementation to compare values. Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.","nodes":[{"content":"If type <ph id=\"ph1\">`TSource`</ph> implements <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph>, the <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method uses that implementation to compare values.","pos":[0,212],"source":"If type `TSource` implements <xref:System.IComparable%601>, the <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method uses that implementation to compare values."},{"content":"Otherwise, if type <ph id=\"ph1\">`TSource`</ph> implements <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.","pos":[213,326],"source":" Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values."}]},{"pos":[333,467],"content":"If <ph id=\"ph1\">`TSource`</ph> is a reference type and the source sequence is empty or contains only values that are <ph id=\"ph2\">`null`</ph>, this method returns <ph id=\"ph3\">`null`</ph>.","source":"If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this method returns `null`."},{"pos":[474,647],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[398305,398959],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the maximum value of.","nodes":[{"content":"A sequence of values to determine the maximum value of.","pos":[0,55]}]}],"pos":[399726,399782],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[399839,399888],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[399939,399974],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[400133,400164],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Decimal\"></xref> value.","nodes":[{"pos":[0,134],"content":"Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Decimal\"></xref> value."}],"pos":[401971,402106],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.","nodes":[{"pos":[0,271],"content":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,271],"source":"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[278,548],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Decimal)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[555,728],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>."}],"pos":[402117,402852],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the maximum value of.","nodes":[{"content":"A sequence of values to determine the maximum value of.","pos":[0,55]}]}],"pos":[403792,403848],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[403951,403998],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[404055,404104],"yaml":true},{"content":"The value of type <code>Nullable<Decimal></code> in C# or <code>Nullable(Of Decimal)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.","nodes":[{"pos":[0,193],"content":"The value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Decimal&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Decimal)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.","source":"The value of type <code>Nullable<Decimal></code> in C# or <code>Nullable(Of Decimal)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence."}],"pos":[404179,404373],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[404532,404588],"yaml":true},{"content":"Returns the minimum value in a sequence of nullable <xref href=\"System.Int64\"></xref> values.","nodes":[{"pos":[0,93],"content":"Returns the minimum value in a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the minimum value in a sequence of nullable <xref href=\"System.Int64\"></xref> values."}],"pos":[406237,406331],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \n  \n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,223],"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,223],"source":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[230,332],"content":"If the source sequence is empty or contains only values that are <ph id=\"ph1\">`null`</ph>, this function returns <ph id=\"ph2\">`null`</ph>.","source":"If the source sequence is empty or contains only values that are `null`, this function returns `null`."},{"pos":[339,512],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[406342,406861],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Int64\"></xref> values to determine the minimum value of.","nodes":[{"pos":[0,98],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.","source":"A sequence of nullable <xref href=\"System.Int64\"></xref> values to determine the minimum value of."}],"pos":[407747,407846],"yaml":true},{"content":"A value of type <code>Nullable<Int64></code> in C# or <code>Nullable(Of Int64)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.","nodes":[{"pos":[0,187],"content":"A value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Int64&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Int64)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.","source":"A value of type <code>Nullable<Int64></code> in C# or <code>Nullable(Of Int64)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence."}],"pos":[407919,408107],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[408263,408294],"yaml":true},{"content":"Returns the minimum value in a sequence of nullable <xref href=\"System.Int32\"></xref> values.","nodes":[{"pos":[0,93],"content":"Returns the minimum value in a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the minimum value in a sequence of nullable <xref href=\"System.Int32\"></xref> values."}],"pos":[409921,410015],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \n  \n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,223],"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,223],"source":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[230,332],"content":"If the source sequence is empty or contains only values that are <ph id=\"ph1\">`null`</ph>, this function returns <ph id=\"ph2\">`null`</ph>.","source":"If the source sequence is empty or contains only values that are `null`, this function returns `null`."},{"pos":[339,512],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[410026,410545],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Int32\"></xref> values to determine the minimum value of.","nodes":[{"pos":[0,98],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.","source":"A sequence of nullable <xref href=\"System.Int32\"></xref> values to determine the minimum value of."}],"pos":[411315,411414],"yaml":true},{"content":"A value of type <code>Nullable<Int32></code> in C# or <code>Nullable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.","nodes":[{"pos":[0,187],"content":"A value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Int32&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Int32)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.","source":"A value of type <code>Nullable<Int32></code> in C# or <code>Nullable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence."}],"pos":[411487,411675],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[411831,411862],"yaml":true},{"content":"Returns the minimum value in a sequence of <xref href=\"System.Single\"></xref> values.","nodes":[{"pos":[0,85],"content":"Returns the minimum value in a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the minimum value in a sequence of <xref href=\"System.Single\"></xref> values."}],"pos":[413414,413500],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,204],"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,204],"source":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[211,384],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[413511,413900],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Single\"></xref> values to determine the minimum value of.","nodes":[{"pos":[0,90],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.","source":"A sequence of <xref href=\"System.Single\"></xref> values to determine the minimum value of."}],"pos":[414732,414823],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[414880,414915],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[415071,415102],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[415212,415254],"yaml":true},{"content":"Returns the minimum value in a sequence of nullable <xref href=\"System.Single\"></xref> values.","nodes":[{"pos":[0,94],"content":"Returns the minimum value in a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the minimum value in a sequence of nullable <xref href=\"System.Single\"></xref> values."}],"pos":[416909,417004],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \n  \n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,225],"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,225],"source":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[232,334],"content":"If the source sequence is empty or contains only values that are <ph id=\"ph1\">`null`</ph>, this function returns <ph id=\"ph2\">`null`</ph>.","source":"If the source sequence is empty or contains only values that are `null`, this function returns `null`."},{"pos":[341,514],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[417015,417536],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Single\"></xref> values to determine the minimum value of.","nodes":[{"pos":[0,99],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.","source":"A sequence of nullable <xref href=\"System.Single\"></xref> values to determine the minimum value of."}],"pos":[418425,418525],"yaml":true},{"content":"A value of type <code>Nullable<Single></code> in C# or <code>Nullable(Of Single)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.","nodes":[{"pos":[0,189],"content":"A value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Single&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Single)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.","source":"A value of type <code>Nullable<Single></code> in C# or <code>Nullable(Of Single)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence."}],"pos":[418599,418789],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[418945,418976],"yaml":true},{"content":"Returns the minimum value in a sequence of nullable <xref href=\"System.Double\"></xref> values.","nodes":[{"pos":[0,94],"content":"Returns the minimum value in a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the minimum value in a sequence of nullable <xref href=\"System.Double\"></xref> values."}],"pos":[420631,420726],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \n  \n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,225],"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,225],"source":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[232,334],"content":"If the source sequence is empty or contains only values that are <ph id=\"ph1\">`null`</ph>, this function returns <ph id=\"ph2\">`null`</ph>.","source":"If the source sequence is empty or contains only values that are `null`, this function returns `null`."},{"pos":[341,514],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[420737,421258],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Double\"></xref> values to determine the minimum value of.","nodes":[{"pos":[0,99],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.","source":"A sequence of nullable <xref href=\"System.Double\"></xref> values to determine the minimum value of."}],"pos":[422149,422249],"yaml":true},{"content":"A value of type <code>Nullable<Double></code> in C# or <code>Nullable(Of Double)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.","nodes":[{"pos":[0,189],"content":"A value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Double&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Double)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.","source":"A value of type <code>Nullable<Double></code> in C# or <code>Nullable(Of Double)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence."}],"pos":[422323,422513],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[422669,422700],"yaml":true},{"content":"Returns the minimum value in a sequence of <xref href=\"System.Double\"></xref> values.","nodes":[{"pos":[0,85],"content":"Returns the minimum value in a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the minimum value in a sequence of <xref href=\"System.Double\"></xref> values."}],"pos":[424274,424360],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,204],"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,204],"source":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[211,384],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[424371,424760],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Double\"></xref> values to determine the minimum value of.","nodes":[{"pos":[0,90],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.","source":"A sequence of <xref href=\"System.Double\"></xref> values to determine the minimum value of."}],"pos":[425480,425571],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[425628,425663],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[425819,425850],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[425960,426002],"yaml":true},{"content":"Returns the minimum value in a sequence of <xref href=\"System.Int64\"></xref> values.","nodes":[{"pos":[0,84],"content":"Returns the minimum value in a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the minimum value in a sequence of <xref href=\"System.Int64\"></xref> values."}],"pos":[427570,427655],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,202],"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,202],"source":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[209,382],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[427666,428053],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Int64\"></xref> values to determine the minimum value of.","nodes":[{"pos":[0,89],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.","source":"A sequence of <xref href=\"System.Int64\"></xref> values to determine the minimum value of."}],"pos":[428882,428972],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[429028,429063],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[429219,429250],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[429360,429402],"yaml":true},{"content":"Returns the minimum value in a sequence of <xref href=\"System.Int32\"></xref> values.","nodes":[{"pos":[0,84],"content":"Returns the minimum value in a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the minimum value in a sequence of <xref href=\"System.Int32\"></xref> values."}],"pos":[430970,431055],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,202],"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,202],"source":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[209,382],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[431066,431453],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Int32\"></xref> values to determine the minimum value of.","nodes":[{"pos":[0,89],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.","source":"A sequence of <xref href=\"System.Int32\"></xref> values to determine the minimum value of."}],"pos":[432280,432370],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[432426,432461],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[432617,432648],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[432758,432800],"yaml":true},{"content":"Returns the minimum value in a sequence of nullable <xref href=\"System.Decimal\"></xref> values.","nodes":[{"pos":[0,95],"content":"Returns the minimum value in a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the minimum value in a sequence of nullable <xref href=\"System.Decimal\"></xref> values."}],"pos":[434461,434557],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \n  \n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,227],"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,227],"source":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[234,336],"content":"If the source sequence is empty or contains only values that are <ph id=\"ph1\">`null`</ph>, this function returns <ph id=\"ph2\">`null`</ph>.","source":"If the source sequence is empty or contains only values that are `null`, this function returns `null`."},{"pos":[343,516],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[434568,435091],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Decimal\"></xref> values to determine the minimum value of.","nodes":[{"pos":[0,100],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.","source":"A sequence of nullable <xref href=\"System.Decimal\"></xref> values to determine the minimum value of."}],"pos":[435985,436086],"yaml":true},{"content":"A value of type <code>Nullable<Decimal></code> in C# or <code>Nullable(Of Decimal)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.","nodes":[{"pos":[0,191],"content":"A value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Decimal&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Decimal)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.","source":"A value of type <code>Nullable<Decimal></code> in C# or <code>Nullable(Of Decimal)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence."}],"pos":[436161,436353],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[436509,436540],"yaml":true},{"content":"Returns the minimum value in a sequence of <xref href=\"System.Decimal\"></xref> values.","nodes":[{"pos":[0,86],"content":"Returns the minimum value in a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the minimum value in a sequence of <xref href=\"System.Decimal\"></xref> values."}],"pos":[438120,438207],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,206],"content":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,206],"source":"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[213,386],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[438218,438609],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Decimal\"></xref> values to determine the minimum value of.","nodes":[{"pos":[0,91],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.","source":"A sequence of <xref href=\"System.Decimal\"></xref> values to determine the minimum value of."}],"pos":[439446,439538],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[439596,439631],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[439787,439818],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[439928,439970],"yaml":true},{"content":"Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.","nodes":[{"pos":[0,107],"content":"Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.","nodes":[{"content":"Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.","pos":[0,107]}]}],"pos":[441709,441817],"yaml":true},{"content":"If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values. Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,229],"content":"If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values. Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.","nodes":[{"content":"If type <ph id=\"ph1\">`TResult`</ph> implements <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.","pos":[0,115],"source":"If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values."},{"content":"Otherwise, if type <ph id=\"ph1\">`TResult`</ph> implements <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.","pos":[116,229],"source":" Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values."}]},{"pos":[236,409],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[441828,442242],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the minimum value of.","nodes":[{"content":"A sequence of values to determine the minimum value of.","pos":[0,55]}]}],"pos":[443170,443226],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[443305,443352],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[443409,443458],"yaml":true},{"content":"The type of the value returned by <code>selector</code>.","nodes":[{"pos":[0,56],"content":"The type of the value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">selector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the value returned by <code>selector</code>."}],"pos":[443495,443552],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[443603,443638],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[443797,443853],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Single\"></xref> value.","nodes":[{"pos":[0,124],"content":"Invokes a transform function on each element of a sequence and returns the minimum <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Single\"></xref> value."}],"pos":[445595,445720],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,248],"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,248],"source":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[255,447],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Single&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>."},{"pos":[454,627],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[445731,446365],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the minimum value of.","nodes":[{"content":"A sequence of values to determine the minimum value of.","pos":[0,55]}]}],"pos":[447281,447337],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[447422,447469],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[447526,447575],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[447632,447667],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[447826,447882],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[447992,448034],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Single\"></xref> value.","nodes":[{"pos":[0,133],"content":"Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Single\"></xref> value."}],"pos":[449857,449991],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,269],"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,269],"source":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[276,544],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Single&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Single)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[551,724],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[450002,450733],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the minimum value of.","nodes":[{"content":"A sequence of values to determine the minimum value of.","pos":[0,55]}]}],"pos":[451669,451725],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[451827,451874],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[451931,451980],"yaml":true},{"content":"The value of type <code>Nullable<Single></code> in C# or <code>Nullable(Of Single)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.","nodes":[{"pos":[0,191],"content":"The value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Single&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Single)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.","source":"The value of type <code>Nullable<Single></code> in C# or <code>Nullable(Of Single)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence."}],"pos":[452054,452246],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[452405,452461],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Int64\"></xref> value.","nodes":[{"pos":[0,132],"content":"Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Int64\"></xref> value."}],"pos":[454278,454411],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,267],"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,267],"source":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[274,540],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Int64)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[547,720],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[454422,455149],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the minimum value of.","nodes":[{"content":"A sequence of values to determine the minimum value of.","pos":[0,55]}]}],"pos":[456083,456139],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[456240,456287],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[456344,456393],"yaml":true},{"content":"The value of type <code>Nullable<Int64></code> in C# or <code>Nullable(Of Int64)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.","nodes":[{"pos":[0,189],"content":"The value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Int64&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Int64)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.","source":"The value of type <code>Nullable<Int64></code> in C# or <code>Nullable(Of Int64)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence."}],"pos":[456466,456656],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[456815,456871],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Int32\"></xref> value.","nodes":[{"pos":[0,132],"content":"Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Int32\"></xref> value."}],"pos":[458666,458799],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of source into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,267],"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,267],"source":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[274,538],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of source into a numeric type, specifically <ph id=\"ph2\">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id=\"ph3\">`Nullable(Of Int32)`</ph> in <ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of source into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[545,718],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[458810,459535],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the minimum value of.","nodes":[{"content":"A sequence of values to determine the minimum value of.","pos":[0,55]}]}],"pos":[460467,460523],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[460624,460671],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[460728,460777],"yaml":true},{"content":"The value of type <code>Nullable<Int32></code> in C# or <code>Nullable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.","nodes":[{"pos":[0,189],"content":"The value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Int32&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Int32)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.","source":"The value of type <code>Nullable<Int32></code> in C# or <code>Nullable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence."}],"pos":[460850,461040],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[461199,461255],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Double\"></xref> value.","nodes":[{"pos":[0,133],"content":"Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Double\"></xref> value."}],"pos":[463078,463212],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,269],"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,269],"source":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[276,544],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Double&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Double)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[551,724],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[463223,463954],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the minimum value of.","nodes":[{"content":"A sequence of values to determine the minimum value of.","pos":[0,55]}]}],"pos":[464892,464948],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[465050,465097],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[465154,465203],"yaml":true},{"content":"The value of type <code>Nullable<Double></code> in C# or <code>Nullable(Of Double)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.","nodes":[{"pos":[0,191],"content":"The value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Double&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Double)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.","source":"The value of type <code>Nullable<Double></code> in C# or <code>Nullable(Of Double)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence."}],"pos":[465277,465469],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[465628,465684],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Int64\"></xref> value.","nodes":[{"pos":[0,123],"content":"Invokes a transform function on each element of a sequence and returns the minimum <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Int64\"></xref> value."}],"pos":[467420,467544],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,246],"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,246],"source":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[253,444],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Int64&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>."},{"pos":[451,624],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[467555,468186],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the minimum value of.","nodes":[{"content":"A sequence of values to determine the minimum value of.","pos":[0,55]}]}],"pos":[469100,469156],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[469240,469287],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[469344,469393],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[469449,469484],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[469643,469699],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[469809,469851],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Int32\"></xref> value.","nodes":[{"pos":[0,123],"content":"Invokes a transform function on each element of a sequence and returns the minimum <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Int32\"></xref> value."}],"pos":[471587,471711],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,246],"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,246],"source":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[253,444],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Int32&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>."},{"pos":[451,624],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[471722,472353],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the minimum value of.","nodes":[{"content":"A sequence of values to determine the minimum value of.","pos":[0,55]}]}],"pos":[473165,473221],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[473305,473352],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[473409,473458],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[473514,473549],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[473708,473764],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[473874,473916],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Double\"></xref> value.","nodes":[{"pos":[0,124],"content":"Invokes a transform function on each element of a sequence and returns the minimum <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Double\"></xref> value."}],"pos":[475658,475783],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,248],"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,248],"source":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[255,447],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>."},{"pos":[454,627],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[475794,476428],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the minimum value of.","nodes":[{"content":"A sequence of values to determine the minimum value of.","pos":[0,55]}]}],"pos":[477346,477402],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[477487,477534],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[477591,477640],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[477697,477732],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[477891,477947],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[478057,478099],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Decimal\"></xref> value.","nodes":[{"pos":[0,125],"content":"Invokes a transform function on each element of a sequence and returns the minimum <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Decimal\"></xref> value."}],"pos":[479847,479973],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,250],"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,250],"source":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[257,450],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Decimal&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>."},{"pos":[457,630],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[479984,480621],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the minimum value of.","nodes":[{"content":"A sequence of values to determine the minimum value of.","pos":[0,55]}]}],"pos":[481541,481597],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[481683,481730],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[481787,481836],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[481894,481929],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[482088,482144],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[482254,482296],"yaml":true},{"content":"Returns the minimum value in a generic sequence.","nodes":[{"pos":[0,48],"content":"Returns the minimum value in a generic sequence.","nodes":[{"content":"Returns the minimum value in a generic sequence.","pos":[0,48]}]}],"pos":[483879,483928],"yaml":true},{"content":"If type `TSource` implements <xref:System.IComparable%601>, this method uses that implementation to compare values. Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.  \n  \n If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this function returns `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,229],"content":"If type `TSource` implements <xref:System.IComparable%601>, this method uses that implementation to compare values. Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.","nodes":[{"content":"If type <ph id=\"ph1\">`TSource`</ph> implements <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.","pos":[0,115],"source":"If type `TSource` implements <xref:System.IComparable%601>, this method uses that implementation to compare values."},{"content":"Otherwise, if type <ph id=\"ph1\">`TSource`</ph> implements <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.","pos":[116,229],"source":" Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values."}]},{"pos":[236,372],"content":"If <ph id=\"ph1\">`TSource`</ph> is a reference type and the source sequence is empty or contains only values that are <ph id=\"ph2\">`null`</ph>, this function returns <ph id=\"ph3\">`null`</ph>.","source":"If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this function returns `null`."},{"pos":[379,552],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[483939,484498],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the minimum value of.","nodes":[{"content":"A sequence of values to determine the minimum value of.","pos":[0,55]}]}],"pos":[485265,485321],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[485378,485427],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[485478,485513],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[485672,485703],"yaml":true},{"content":"Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Decimal\"></xref> value.","nodes":[{"pos":[0,134],"content":"Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> value.","source":"Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Decimal\"></xref> value."}],"pos":[487510,487645],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.","nodes":[{"pos":[0,271],"content":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> to compare values.","pos":[0,271],"source":"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values."}]},{"pos":[278,548],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Decimal)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[555,728],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>."}],"pos":[487656,488391],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum value of.","nodes":[{"pos":[0,55],"content":"A sequence of values to determine the minimum value of.","nodes":[{"content":"A sequence of values to determine the minimum value of.","pos":[0,55]}]}],"pos":[489331,489387],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[489490,489537],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[489594,489643],"yaml":true},{"content":"The value of type <code>Nullable<Decimal></code> in C# or <code>Nullable(Of Decimal)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.","nodes":[{"pos":[0,193],"content":"The value of type <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">Nullable</ph><ph id=\"ph3\">&lt;Decimal&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">Nullable(Of Decimal)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.","source":"The value of type <code>Nullable<Decimal></code> in C# or <code>Nullable(Of Decimal)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence."}],"pos":[489718,489912],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[490071,490127],"yaml":true},{"content":"Filters the elements of an <xref href=\"System.Collections.IEnumerable\"></xref> based on a specified type.","nodes":[{"pos":[0,105],"content":"Filters the elements of an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> based on a specified type.","source":"Filters the elements of an <xref href=\"System.Collections.IEnumerable\"></xref> based on a specified type."}],"pos":[491662,491768],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> method returns only those elements in `source` that can be cast to type `TResult`. To instead receive an exception if an element cannot be cast to type `TResult`, use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.  \n  \n This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref:System.Collections.ArrayList>. This is because <xref:System.Linq.Enumerable.OfType%2A> extends the type <xref:System.Collections.IEnumerable>. <xref:System.Linq.Enumerable.OfType%2A> cannot only be applied to collections that are based on the parameterized <xref:System.Collections.Generic.IEnumerable%601> type, but collections that are based on the non-parameterized <xref:System.Collections.IEnumerable> type also.  \n  \n By applying <xref:System.Linq.Enumerable.OfType%2A> to a collection that implements <xref:System.Collections.IEnumerable>, you gain the ability to query the collection by using the standard query operators. For example, specifying a type argument of <xref:System.Object> to <xref:System.Linq.Enumerable.OfType%2A> would return an object of type `IEnumerable<Object>` in C# or `IEnumerable(Of Object)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], to which the standard query operators can be applied.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,772],"content":"The <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> method returns only those elements in `source` that can be cast to type `TResult`. To instead receive an exception if an element cannot be cast to type `TResult`, use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29&gt;</ph> method returns only those elements in <ph id=\"ph2\">`source`</ph> that can be cast to type <ph id=\"ph3\">`TResult`</ph>.","pos":[0,166],"source":"The <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> method returns only those elements in `source` that can be cast to type `TResult`."},{"content":"To instead receive an exception if an element cannot be cast to type <ph id=\"ph1\">`TResult`</ph>, use <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.","pos":[167,329],"source":" To instead receive an exception if an element cannot be cast to type `TResult`, use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>."}]},{"pos":[779,1346],"content":"This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref:System.Collections.ArrayList>. This is because <xref:System.Linq.Enumerable.OfType%2A> extends the type <xref:System.Collections.IEnumerable>. <xref:System.Linq.Enumerable.OfType%2A> cannot only be applied to collections that are based on the parameterized <xref:System.Collections.Generic.IEnumerable%601> type, but collections that are based on the non-parameterized <xref:System.Collections.IEnumerable> type also.","nodes":[{"content":"This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref:System.Collections.ArrayList>. This is because <xref:System.Linq.Enumerable.OfType%2A> extends the type <xref:System.Collections.IEnumerable>. <xref:System.Linq.Enumerable.OfType%2A> cannot only be applied to collections that are based on the parameterized <xref:System.Collections.Generic.IEnumerable%601> type, but collections that are based on the non-parameterized <xref:System.Collections.IEnumerable> type also.","pos":[0,567],"nodes":[{"content":"This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[0,180],"source":"This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref:System.Collections.ArrayList>."},{"content":"This is because <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> extends the type <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph>.","pos":[181,292],"source":" This is because <xref:System.Linq.Enumerable.OfType%2A> extends the type <xref:System.Collections.IEnumerable>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> cannot only be applied to collections that are based on the parameterized <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> type, but collections that are based on the non-parameterized <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph> type also.","pos":[293,567],"source":" <xref:System.Linq.Enumerable.OfType%2A> cannot only be applied to collections that are based on the parameterized <xref:System.Collections.Generic.IEnumerable%601> type, but collections that are based on the non-parameterized <xref:System.Collections.IEnumerable> type also."}]}]},{"pos":[1353,1855],"content":"By applying <xref:System.Linq.Enumerable.OfType%2A> to a collection that implements <xref:System.Collections.IEnumerable>, you gain the ability to query the collection by using the standard query operators. For example, specifying a type argument of <xref:System.Object> to <xref:System.Linq.Enumerable.OfType%2A> would return an object of type `IEnumerable<Object>` in C# or `IEnumerable(Of Object)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], to which the standard query operators can be applied.","nodes":[{"content":"By applying <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> to a collection that implements <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph>, you gain the ability to query the collection by using the standard query operators.","pos":[0,206],"source":"By applying <xref:System.Linq.Enumerable.OfType%2A> to a collection that implements <xref:System.Collections.IEnumerable>, you gain the ability to query the collection by using the standard query operators."},{"content":"For example, specifying a type argument of <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> to <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> would return an object of type <ph id=\"ph3\">`IEnumerable&lt;Object&gt;`</ph> in C# or <ph id=\"ph4\">`IEnumerable(Of Object)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, to which the standard query operators can be applied.","pos":[207,502],"source":" For example, specifying a type argument of <xref:System.Object> to <xref:System.Linq.Enumerable.OfType%2A> would return an object of type `IEnumerable<Object>` in C# or `IEnumerable(Of Object)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], to which the standard query operators can be applied."}]}],"pos":[491779,493643],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IEnumerable\"></xref> whose elements to filter.","nodes":[{"pos":[0,81],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> whose elements to filter.","source":"The <xref href=\"System.Collections.IEnumerable\"></xref> whose elements to filter."}],"pos":[494342,494424],"yaml":true},{"content":"The type to filter the elements of the sequence on.","nodes":[{"pos":[0,51],"content":"The type to filter the elements of the sequence on.","nodes":[{"content":"The type to filter the elements of the sequence on.","pos":[0,51]}]}],"pos":[494481,494533],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements from the input sequence of type <code>TResult</code>.","nodes":[{"pos":[0,141],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements from the input sequence of type <code>TResult</code>."}],"pos":[494624,494766],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[494928,494959],"yaml":true},{"content":"Sorts the elements of a sequence in ascending order according to a key.","nodes":[{"pos":[0,71],"content":"Sorts the elements of a sequence in ascending order according to a key.","nodes":[{"content":"Sorts the elements of a sequence in ascending order according to a key.","pos":[0,71]}]}],"pos":[496682,496754],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \n  \n Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method. These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence. `ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.  \n  \n> [!NOTE]\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \n  \n This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.  \n  \n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.  \n  \n In query expression syntax, an `orderby` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Order By` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderBy%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,677],"content":"To order a sequence by the values of the elements themselves, specify the identity function (<ph id=\"ph1\">`x =&gt; x`</ph> in <ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph3\">`Function(x) x`</ph> in <ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id=\"ph5\">`keySelector`</ph>.","source":"To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`."},{"pos":[684,1117],"content":"Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method. These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence. `ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.","nodes":[{"content":"Two methods are defined to extend the type <ph id=\"ph1\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.","pos":[0,126],"source":"Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method."},{"content":"These two methods, namely <ph id=\"ph1\">`ThenBy`</ph> and <ph id=\"ph2\">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.","pos":[127,252],"source":" These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence."},{"content":"<ph id=\"ph1\">`ThenBy`</ph> and <ph id=\"ph2\">`ThenByDescending`</ph> also return an <ph id=\"ph3\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id=\"ph4\">`ThenBy`</ph> or <ph id=\"ph5\">`ThenByDescending`</ph> can be made.","pos":[253,433],"source":"`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made."}]},{"pos":[1125,1669],"content":"[!NOTE]\n Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","leadings":["","> "],"nodes":[{"content":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[8,542],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id=\"ph8\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.","pos":[1,439],"source":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>."},{"content":"Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[440,534]}]}]},{"pos":[1676,1790],"content":"This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.","nodes":[{"content":"This method compares keys by using the default comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.","pos":[0,114],"source":"This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>."}]},{"pos":[1797,2014],"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[0,217],"nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.","pos":[0,123]},{"content":"In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[124,217]}]}]},{"pos":[2021,2247],"content":"In query expression syntax, an <ph id=\"ph1\">`orderby`</ph> (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`Order By`</ph> (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>.","source":"In query expression syntax, an `orderby` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Order By` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderBy%2A>."}],"pos":[496765,499028],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to order.","nodes":[{"pos":[0,30],"content":"A sequence of values to order.","nodes":[{"content":"A sequence of values to order.","pos":[0,30]}]}],"pos":[499858,499889],"yaml":true},{"content":"A function to extract a key from an element.","nodes":[{"pos":[0,44],"content":"A function to extract a key from an element.","nodes":[{"content":"A function to extract a key from an element.","pos":[0,44]}]}],"pos":[499968,500013],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[500070,500119],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[500153,500211],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted according to a key.","nodes":[{"pos":[0,102],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted according to a key.","source":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted according to a key."}],"pos":[500294,500397],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[500560,500619],"yaml":true},{"content":"Sorts the elements of a sequence in ascending order by using a specified comparer.","nodes":[{"pos":[0,82],"content":"Sorts the elements of a sequence in ascending order by using a specified comparer.","nodes":[{"content":"Sorts the elements of a sequence in ascending order by using a specified comparer.","pos":[0,82]}]}],"pos":[502541,502624],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \n  \n Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method. These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence. `ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.  \n  \n> [!NOTE]\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \n  \n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.  \n  \n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,677],"content":"To order a sequence by the values of the elements themselves, specify the identity function (<ph id=\"ph1\">`x =&gt; x`</ph> in <ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph3\">`Function(x) x`</ph> in <ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id=\"ph5\">`keySelector`</ph>.","source":"To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`."},{"pos":[684,1117],"content":"Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method. These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence. `ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.","nodes":[{"content":"Two methods are defined to extend the type <ph id=\"ph1\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.","pos":[0,126],"source":"Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method."},{"content":"These two methods, namely <ph id=\"ph1\">`ThenBy`</ph> and <ph id=\"ph2\">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.","pos":[127,252],"source":" These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence."},{"content":"<ph id=\"ph1\">`ThenBy`</ph> and <ph id=\"ph2\">`ThenByDescending`</ph> also return an <ph id=\"ph3\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id=\"ph4\">`ThenBy`</ph> or <ph id=\"ph5\">`ThenByDescending`</ph> can be made.","pos":[253,433],"source":"`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made."}]},{"pos":[1125,1669],"content":"[!NOTE]\n Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","leadings":["","> "],"nodes":[{"content":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[8,542],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id=\"ph8\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.","pos":[1,439],"source":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>."},{"content":"Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[440,534]}]}]},{"pos":[1676,1804],"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.","source":"If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys."},{"pos":[1811,2028],"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[0,217],"nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.","pos":[0,123]},{"content":"In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[124,217]}]}]}],"pos":[502635,504677],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to order.","nodes":[{"pos":[0,30],"content":"A sequence of values to order.","nodes":[{"content":"A sequence of values to order.","pos":[0,30]}]}],"pos":[505036,505067],"yaml":true},{"content":"A function to extract a key from an element.","nodes":[{"pos":[0,44],"content":"A function to extract a key from an element.","nodes":[{"content":"A function to extract a key from an element.","pos":[0,44]}]}],"pos":[505146,505191],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys."}],"pos":[505284,505364],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[505421,505470],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[505504,505562],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted according to a key.","nodes":[{"pos":[0,102],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted according to a key.","source":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted according to a key."}],"pos":[505645,505748],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[505911,505970],"yaml":true},{"content":"Sorts the elements of a sequence in descending order by using a specified comparer.","nodes":[{"pos":[0,83],"content":"Sorts the elements of a sequence in descending order by using a specified comparer.","nodes":[{"content":"Sorts the elements of a sequence in descending order by using a specified comparer.","pos":[0,83]}]}],"pos":[507952,508036],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \n  \n Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method. These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence. `ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.  \n  \n> [!NOTE]\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \n  \n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.  \n  \n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,677],"content":"To order a sequence by the values of the elements themselves, specify the identity function (<ph id=\"ph1\">`x =&gt; x`</ph> in <ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph3\">`Function(x) x`</ph> in <ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id=\"ph5\">`keySelector`</ph>.","source":"To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`."},{"pos":[684,1117],"content":"Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method. These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence. `ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.","nodes":[{"content":"Two methods are defined to extend the type <ph id=\"ph1\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.","pos":[0,126],"source":"Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method."},{"content":"These two methods, namely <ph id=\"ph1\">`ThenBy`</ph> and <ph id=\"ph2\">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.","pos":[127,252],"source":" These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence."},{"content":"<ph id=\"ph1\">`ThenBy`</ph> and <ph id=\"ph2\">`ThenByDescending`</ph> also return an <ph id=\"ph3\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id=\"ph4\">`ThenBy`</ph> or <ph id=\"ph5\">`ThenByDescending`</ph> can be made.","pos":[253,433],"source":"`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made."}]},{"pos":[1125,1669],"content":"[!NOTE]\n Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","leadings":["","> "],"nodes":[{"content":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[8,542],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id=\"ph8\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.","pos":[1,439],"source":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>."},{"content":"Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[440,534]}]}]},{"pos":[1676,1804],"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.","source":"If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys."},{"pos":[1811,2028],"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[0,217],"nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.","pos":[0,123]},{"content":"In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[124,217]}]}]}],"pos":[508047,510089],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to order.","nodes":[{"pos":[0,30],"content":"A sequence of values to order.","nodes":[{"content":"A sequence of values to order.","pos":[0,30]}]}],"pos":[511116,511147],"yaml":true},{"content":"A function to extract a key from an element.","nodes":[{"pos":[0,44],"content":"A function to extract a key from an element.","nodes":[{"content":"A function to extract a key from an element.","pos":[0,44]}]}],"pos":[511226,511271],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys."}],"pos":[511364,511444],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[511501,511550],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[511584,511642],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted in descending order according to a key.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted in descending order according to a key.","source":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted in descending order according to a key."}],"pos":[511725,511848],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[512021,512080],"yaml":true},{"content":"Sorts the elements of a sequence in descending order according to a key.","nodes":[{"pos":[0,72],"content":"Sorts the elements of a sequence in descending order according to a key.","nodes":[{"content":"Sorts the elements of a sequence in descending order according to a key.","pos":[0,72]}]}],"pos":[513885,513958],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \n  \n For an example of this method, see <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.  \n  \n Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method. These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence. `ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.  \n  \n> [!NOTE]\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \n  \n This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.  \n  \n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.  \n  \n In query expression syntax, an `orderby descending` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Order By Descending` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderByDescending%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,677],"content":"To order a sequence by the values of the elements themselves, specify the identity function (<ph id=\"ph1\">`x =&gt; x`</ph> in <ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph3\">`Function(x) x`</ph> in <ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id=\"ph5\">`keySelector`</ph>.","source":"To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`."},{"pos":[684,920],"content":"For an example of this method, see <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.","nodes":[{"content":"For an example of this method, see <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph>.","pos":[0,236],"source":"For an example of this method, see <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>."}]},{"pos":[927,1360],"content":"Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method. These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence. `ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.","nodes":[{"content":"Two methods are defined to extend the type <ph id=\"ph1\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.","pos":[0,126],"source":"Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method."},{"content":"These two methods, namely <ph id=\"ph1\">`ThenBy`</ph> and <ph id=\"ph2\">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.","pos":[127,252],"source":" These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence."},{"content":"<ph id=\"ph1\">`ThenBy`</ph> and <ph id=\"ph2\">`ThenByDescending`</ph> also return an <ph id=\"ph3\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id=\"ph4\">`ThenBy`</ph> or <ph id=\"ph5\">`ThenByDescending`</ph> can be made.","pos":[253,433],"source":"`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made."}]},{"pos":[1368,1912],"content":"[!NOTE]\n Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","leadings":["","> "],"nodes":[{"content":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[8,542],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id=\"ph8\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.","pos":[1,439],"source":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>."},{"content":"Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[440,534]}]}]},{"pos":[1919,2033],"content":"This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.","nodes":[{"content":"This method compares keys by using the default comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.","pos":[0,114],"source":"This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>."}]},{"pos":[2040,2257],"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[0,217],"nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.","pos":[0,123]},{"content":"In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[124,217]}]}]},{"pos":[2264,2522],"content":"In query expression syntax, an <ph id=\"ph1\">`orderby descending`</ph> (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`Order By Descending`</ph> (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>.","source":"In query expression syntax, an `orderby descending` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Order By Descending` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderByDescending%2A>."}],"pos":[513969,516509],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to order.","nodes":[{"pos":[0,30],"content":"A sequence of values to order.","nodes":[{"content":"A sequence of values to order.","pos":[0,30]}]}],"pos":[516825,516856],"yaml":true},{"content":"A function to extract a key from an element.","nodes":[{"pos":[0,44],"content":"A function to extract a key from an element.","nodes":[{"content":"A function to extract a key from an element.","pos":[0,44]}]}],"pos":[516935,516980],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[517037,517086],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[517120,517178],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted in descending order according to a key.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted in descending order according to a key.","source":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted in descending order according to a key."}],"pos":[517261,517384],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[517557,517616],"yaml":true},{"content":"Generates a sequence of integral numbers within a specified range.","nodes":[{"pos":[0,66],"content":"Generates a sequence of integral numbers within a specified range.","nodes":[{"content":"Generates a sequence of integral numbers within a specified range.","pos":[0,66]}]}],"pos":[520661,520728],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]}],"pos":[520739,521176],"yaml":true,"extradata":"MT"},{"content":"The value of the first integer in the sequence.","nodes":[{"pos":[0,47],"content":"The value of the first integer in the sequence.","nodes":[{"content":"The value of the first integer in the sequence.","pos":[0,47]}]}],"pos":[521785,521833],"yaml":true},{"content":"The number of sequential integers to generate.","nodes":[{"pos":[0,46],"content":"The number of sequential integers to generate.","nodes":[{"content":"The number of sequential integers to generate.","pos":[0,46]}]}],"pos":[521893,521940],"yaml":true},{"content":"An <code>IEnumerable<Int32></code> in C# or <code>IEnumerable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that contains a range of sequential integral numbers.","nodes":[{"pos":[0,179],"content":"An <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">IEnumerable</ph><ph id=\"ph3\">&lt;Int32&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> in C# or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">IEnumerable(Of Int32)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <ph id=\"ph6\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that contains a range of sequential integral numbers.","source":"An <code>IEnumerable<Int32></code> in C# or <code>IEnumerable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that contains a range of sequential integral numbers."}],"pos":[522036,522216],"yaml":true},{"content":"<code>count</code> is less than 0.  \n  \n -or-  \n  \n <code>start</code> + <code>count</code> -1 is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,153],"content":"<ph id=\"ph1\">&lt;code&gt;start&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> -1 is larger than <ph id=\"ph3\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>start</code> + <code>count</code> -1 is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[522386,522548],"yaml":true},{"content":"Generates a sequence that contains one repeated value.","nodes":[{"pos":[0,54],"content":"Generates a sequence that contains one repeated value.","nodes":[{"content":"Generates a sequence that contains one repeated value.","pos":[0,54]}]}],"pos":[524050,524105],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]}],"pos":[524116,524553],"yaml":true,"extradata":"MT"},{"content":"The value to be repeated.","nodes":[{"pos":[0,25],"content":"The value to be repeated.","nodes":[{"content":"The value to be repeated.","pos":[0,25]}]}],"pos":[525190,525216],"yaml":true},{"content":"The number of times to repeat the value in the generated sequence.","nodes":[{"pos":[0,66],"content":"The number of times to repeat the value in the generated sequence.","nodes":[{"content":"The number of times to repeat the value in the generated sequence.","pos":[0,66]}]}],"pos":[525276,525343],"yaml":true},{"content":"The type of the value to be repeated in the result sequence.","nodes":[{"pos":[0,60],"content":"The type of the value to be repeated in the result sequence.","nodes":[{"content":"The type of the value to be repeated in the result sequence.","pos":[0,60]}]}],"pos":[525400,525461],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains a repeated value.","nodes":[{"pos":[0,96],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains a repeated value.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains a repeated value."}],"pos":[525552,525649],"yaml":true},{"content":"<code>count</code> is less than 0.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."}],"pos":[525823,525858],"yaml":true},{"content":"Inverts the order of the elements in a sequence.","nodes":[{"pos":[0,48],"content":"Inverts the order of the elements in a sequence.","nodes":[{"content":"Inverts the order of the elements in a sequence.","pos":[0,48]}]}],"pos":[527465,527514],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n Unlike <xref:System.Linq.Enumerable.OrderBy%2A>, this sorting method does not consider the actual values themselves in determining the order. Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,697],"content":"Unlike <xref:System.Linq.Enumerable.OrderBy%2A>, this sorting method does not consider the actual values themselves in determining the order. Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.","nodes":[{"content":"Unlike <xref:System.Linq.Enumerable.OrderBy%2A>, this sorting method does not consider the actual values themselves in determining the order. Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.","pos":[0,254],"nodes":[{"content":"Unlike <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, this sorting method does not consider the actual values themselves in determining the order.","pos":[0,141],"source":"Unlike <xref:System.Linq.Enumerable.OrderBy%2A>, this sorting method does not consider the actual values themselves in determining the order."},{"content":"Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.","pos":[142,254]}]}]}],"pos":[527525,528227],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to reverse.","nodes":[{"pos":[0,32],"content":"A sequence of values to reverse.","nodes":[{"content":"A sequence of values to reverse.","pos":[0,32]}]}],"pos":[528940,528973],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[529030,529079],"yaml":true},{"content":"A sequence whose elements correspond to those of the input sequence in reverse order.","nodes":[{"pos":[0,85],"content":"A sequence whose elements correspond to those of the input sequence in reverse order.","nodes":[{"content":"A sequence whose elements correspond to those of the input sequence in reverse order.","pos":[0,85]}]}],"pos":[529170,529256],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[529419,529450],"yaml":true},{"content":"Projects each element of a sequence into a new form by incorporating the element's index.","nodes":[{"pos":[0,89],"content":"Projects each element of a sequence into a new form by incorporating the element's index.","nodes":[{"content":"Projects each element of a sequence into a new form by incorporating the element's index.","pos":[0,89]}]}],"pos":[531264,531354],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The first argument to `selector` represents the element to process. The second argument to `selector` represents the zero-based index of that element in the source sequence. This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example. It can also be useful if you want to retrieve the index of one or more elements.  \n  \n This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`. If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually. In such a situation, it might be better for your query to return a single coalesced sequence of values. To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>. Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,834],"content":"The first argument to `selector` represents the element to process. The second argument to `selector` represents the zero-based index of that element in the source sequence. This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example. It can also be useful if you want to retrieve the index of one or more elements.","nodes":[{"content":"The first argument to <ph id=\"ph1\">`selector`</ph> represents the element to process.","pos":[0,67],"source":"The first argument to `selector` represents the element to process."},{"content":"The second argument to <ph id=\"ph1\">`selector`</ph> represents the zero-based index of that element in the source sequence.","pos":[68,173],"source":" The second argument to `selector` represents the zero-based index of that element in the source sequence."},{"content":"This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.","pos":[174,310]},{"content":"It can also be useful if you want to retrieve the index of one or more elements.","pos":[311,391]}]},{"pos":[841,1508],"content":"This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`. If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually. In such a situation, it might be better for your query to return a single coalesced sequence of values. To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>. Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.","nodes":[{"content":"This projection method requires the transform function, <ph id=\"ph1\">`selector`</ph>, to produce one value for each value in the source sequence, <ph id=\"ph2\">`source`</ph>.","pos":[0,137],"source":"This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`."},{"content":"If <ph id=\"ph1\">`selector`</ph> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.","pos":[138,260],"source":" If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually."},{"content":"In such a situation, it might be better for your query to return a single coalesced sequence of values.","pos":[261,364]},{"content":"To achieve this, use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method instead of <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.","pos":[365,492],"source":" To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>."},{"content":"Although <ph id=\"ph1\">`SelectMany`</ph> works similarly to <ph id=\"ph2\">`Select`</ph>, it differs in that the transform function returns a collection that is then expanded by <ph id=\"ph3\">`SelectMany`</ph> before it is returned.","pos":[493,667],"source":" Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned."}]}],"pos":[531365,532880],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to invoke a transform function on.","nodes":[{"pos":[0,55],"content":"A sequence of values to invoke a transform function on.","nodes":[{"content":"A sequence of values to invoke a transform function on.","pos":[0,55]}]}],"pos":[533774,533830],"yaml":true},{"content":"A transform function to apply to each source element; the second parameter of the function represents the index of the source element.","nodes":[{"pos":[0,134],"content":"A transform function to apply to each source element; the second parameter of the function represents the index of the source element.","nodes":[{"content":"A transform function to apply to each source element; the second parameter of the function represents the index of the source element.","pos":[0,134]}]}],"pos":[533922,534057],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[534114,534163],"yaml":true},{"content":"The type of the value returned by <code>selector</code>.","nodes":[{"pos":[0,56],"content":"The type of the value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">selector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the value returned by <code>selector</code>."}],"pos":[534200,534257],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the transform function on each element of <code>source</code>.","nodes":[{"pos":[0,169],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the transform function on each element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the transform function on each element of <code>source</code>."}],"pos":[534348,534518],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[534680,534736],"yaml":true},{"content":"Projects each element of a sequence into a new form.","nodes":[{"pos":[0,52],"content":"Projects each element of a sequence into a new form.","nodes":[{"content":"Projects each element of a sequence into a new form.","pos":[0,52]}]}],"pos":[536493,536546],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`. If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually. In such a situation, it might be better for your query to return a single coalesced sequence of values. To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>. Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.  \n  \n In query expression syntax, a `select` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Select` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.Select%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,1110],"content":"This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`. If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually. In such a situation, it might be better for your query to return a single coalesced sequence of values. To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>. Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.","nodes":[{"content":"This projection method requires the transform function, <ph id=\"ph1\">`selector`</ph>, to produce one value for each value in the source sequence, <ph id=\"ph2\">`source`</ph>.","pos":[0,137],"source":"This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`."},{"content":"If <ph id=\"ph1\">`selector`</ph> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.","pos":[138,260],"source":" If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually."},{"content":"In such a situation, it might be better for your query to return a single coalesced sequence of values.","pos":[261,364]},{"content":"To achieve this, use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method instead of <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.","pos":[365,492],"source":" To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>."},{"content":"Although <ph id=\"ph1\">`SelectMany`</ph> works similarly to <ph id=\"ph2\">`Select`</ph>, it differs in that the transform function returns a collection that is then expanded by <ph id=\"ph3\">`SelectMany`</ph> before it is returned.","pos":[493,667],"source":" Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned."}]},{"pos":[1117,1338],"content":"In query expression syntax, a <ph id=\"ph1\">`select`</ph> (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`Select`</ph> (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.","source":"In query expression syntax, a `select` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Select` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.Select%2A>."}],"pos":[536557,537902],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to invoke a transform function on.","nodes":[{"pos":[0,55],"content":"A sequence of values to invoke a transform function on.","nodes":[{"content":"A sequence of values to invoke a transform function on.","pos":[0,55]}]}],"pos":[538743,538799],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[538878,538925],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[538982,539031],"yaml":true},{"content":"The type of the value returned by <code>selector</code>.","nodes":[{"pos":[0,56],"content":"The type of the value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">selector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the value returned by <code>selector</code>."}],"pos":[539068,539125],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the transform function on each element of <code>source</code>.","nodes":[{"pos":[0,169],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the transform function on each element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the transform function on each element of <code>source</code>."}],"pos":[539216,539386],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[539548,539604],"yaml":true},{"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.","nodes":[{"pos":[0,220],"content":"Projects each element of a sequence to an <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.","source":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein."}],"pos":[541772,541993],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>. See the Example section for a code example. If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>. Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.  \n  \n In query expression syntax, each `from` clause ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `From` clause ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,1851],"content":"The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>. See the Example section for a code example. If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>. Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> method is useful when you have to keep the elements of <ph id=\"ph2\">`source`</ph> in scope for query logic that occurs after the call to <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.","pos":[0,589],"source":"The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>."},{"content":"See the Example section for a code example.","pos":[590,633]},{"content":"If there is a bidirectional relationship between objects of type <ph id=\"ph1\">`TSource`</ph> and objects of type <ph id=\"ph2\">`TCollection`</ph>, that is, if an object of type <ph id=\"ph3\">`TCollection`</ph> provides a property to retrieve the <ph id=\"ph4\">`TSource`</ph> object that produced it, you do not need this overload of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.","pos":[634,1125],"source":" If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>."},{"content":"Instead, you can use <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> and navigate back to the <ph id=\"ph2\">`TSource`</ph> object through the <ph id=\"ph3\">`TCollection`</ph> object.","pos":[1126,1408],"source":" Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object."}]},{"pos":[1858,2111],"content":"In query expression syntax, each <ph id=\"ph1\">`from`</ph> clause (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`From`</ph> clause (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) after the initial one translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.","source":"In query expression syntax, each `from` clause ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `From` clause ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>."}],"pos":[542004,544122],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to project.","nodes":[{"pos":[0,32],"content":"A sequence of values to project.","nodes":[{"content":"A sequence of values to project.","pos":[0,32]}]}],"pos":[545330,545363],"yaml":true},{"content":"A transform function to apply to each element of the input sequence.","nodes":[{"pos":[0,68],"content":"A transform function to apply to each element of the input sequence.","nodes":[{"content":"A transform function to apply to each element of the input sequence.","pos":[0,68]}]}],"pos":[545496,545565],"yaml":true},{"content":"A transform function to apply to each element of the intermediate sequence.","nodes":[{"pos":[0,75],"content":"A transform function to apply to each element of the intermediate sequence.","nodes":[{"content":"A transform function to apply to each element of the intermediate sequence.","pos":[0,75]}]}],"pos":[545662,545738],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[545795,545844],"yaml":true},{"content":"The type of the intermediate elements collected by <code>collectionSelector</code>.","nodes":[{"pos":[0,83],"content":"The type of the intermediate elements collected by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collectionSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the intermediate elements collected by <code>collectionSelector</code>."}],"pos":[545885,545969],"yaml":true},{"content":"The type of the elements of the resulting sequence.","nodes":[{"pos":[0,51],"content":"The type of the elements of the resulting sequence.","nodes":[{"content":"The type of the elements of the resulting sequence.","pos":[0,51]}]}],"pos":[546006,546058],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the one-to-many transform function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding source element to a result element.","nodes":[{"pos":[0,321],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the one-to-many transform function <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">collectionSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept> on each element of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> and then mapping each of those sequence elements and their corresponding source element to a result element.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the one-to-many transform function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding source element to a result element."}],"pos":[546149,546471],"yaml":true},{"content":"<code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;collectionSelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`."}],"pos":[546637,546734],"yaml":true},{"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.","nodes":[{"pos":[0,313],"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.","nodes":[{"content":"Projects each element of a sequence to an <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.","pos":[0,220],"source":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein."},{"content":"The index of each source element is used in the intermediate projected form of that element.","pos":[221,313]}]}],"pos":[548959,549273],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>. See the Example section for a code example. If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>. Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,1911],"content":"The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>. See the Example section for a code example. If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>. Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> method is useful when you have to keep the elements of <ph id=\"ph2\">`source`</ph> in scope for query logic that occurs after the call to <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.","pos":[0,619],"source":"The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>."},{"content":"See the Example section for a code example.","pos":[620,663]},{"content":"If there is a bidirectional relationship between objects of type <ph id=\"ph1\">`TSource`</ph> and objects of type <ph id=\"ph2\">`TCollection`</ph>, that is, if an object of type <ph id=\"ph3\">`TCollection`</ph> provides a property to retrieve the <ph id=\"ph4\">`TSource`</ph> object that produced it, you do not need this overload of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.","pos":[664,1170],"source":" If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>."},{"content":"Instead, you can use <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> and navigate back to the <ph id=\"ph2\">`TSource`</ph> object through the <ph id=\"ph3\">`TCollection`</ph> object.","pos":[1171,1468],"source":" Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object."}]}],"pos":[549284,551200],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to project.","nodes":[{"pos":[0,32],"content":"A sequence of values to project.","nodes":[{"content":"A sequence of values to project.","pos":[0,32]}]}],"pos":[551640,551673],"yaml":true},{"content":"A transform function to apply to each source element; the second parameter of the function represents the index of the source element.","nodes":[{"pos":[0,134],"content":"A transform function to apply to each source element; the second parameter of the function represents the index of the source element.","nodes":[{"content":"A transform function to apply to each source element; the second parameter of the function represents the index of the source element.","pos":[0,134]}]}],"pos":[551819,551954],"yaml":true},{"content":"A transform function to apply to each element of the intermediate sequence.","nodes":[{"pos":[0,75],"content":"A transform function to apply to each element of the intermediate sequence.","nodes":[{"content":"A transform function to apply to each element of the intermediate sequence.","pos":[0,75]}]}],"pos":[552051,552127],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[552184,552233],"yaml":true},{"content":"The type of the intermediate elements collected by <code>collectionSelector</code>.","nodes":[{"pos":[0,83],"content":"The type of the intermediate elements collected by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collectionSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the intermediate elements collected by <code>collectionSelector</code>."}],"pos":[552274,552358],"yaml":true},{"content":"The type of the elements of the resulting sequence.","nodes":[{"pos":[0,51],"content":"The type of the elements of the resulting sequence.","nodes":[{"content":"The type of the elements of the resulting sequence.","pos":[0,51]}]}],"pos":[552395,552447],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the one-to-many transform function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding source element to a result element.","nodes":[{"pos":[0,321],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the one-to-many transform function <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">collectionSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept> on each element of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> and then mapping each of those sequence elements and their corresponding source element to a result element.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the one-to-many transform function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding source element to a result element."}],"pos":[552538,552860],"yaml":true},{"content":"<code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;collectionSelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`."}],"pos":[553026,553123],"yaml":true},{"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and flattens the resulting sequences into one sequence.","nodes":[{"pos":[0,159],"content":"Projects each element of a sequence to an <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> and flattens the resulting sequences into one sequence.","source":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and flattens the resulting sequences into one sequence."}],"pos":[555041,555201],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object. That is, for each element of `source`, `selector` is invoked and a sequence of values is returned. <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it. For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In query expression syntax, each `from` clause ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `From` clause ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,2021],"content":"The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object. That is, for each element of `source`, `selector` is invoked and a sequence of values is returned. <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it. For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> method enumerates the input sequence, uses a transform function to map each element to an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and then enumerates and yields the elements of each such <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object.","pos":[0,445],"source":"The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object."},{"content":"That is, for each element of <ph id=\"ph1\">`source`</ph>, <ph id=\"ph2\">`selector`</ph> is invoked and a sequence of values is returned.","pos":[446,544],"source":" That is, for each element of `source`, `selector` is invoked and a sequence of values is returned."},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> then flattens this two-dimensional collection of collections into a one-dimensional <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and returns it.","pos":[545,880],"source":" <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it."},{"content":"For example, if a query uses <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to obtain the orders (of type <ph id=\"ph2\">`Order`</ph>) for each customer in a database, the result is of type <ph id=\"ph3\">`IEnumerable&lt;Order&gt;`</ph> in C# or <ph id=\"ph4\">`IEnumerable(Of Order)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[881,1291],"source":" For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"content":"If instead the query uses <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to obtain the orders, the collection of collections of orders is not combined and the result is of type <ph id=\"ph2\">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in C# or <ph id=\"ph3\">`IEnumerable(Of List(Of Order))`</ph> in <ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[1292,1578],"source":" If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[2028,2281],"content":"In query expression syntax, each <ph id=\"ph1\">`from`</ph> clause (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`From`</ph> clause (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) after the initial one translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.","source":"In query expression syntax, each `from` clause ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `From` clause ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>."}],"pos":[555212,557500],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to project.","nodes":[{"pos":[0,32],"content":"A sequence of values to project.","nodes":[{"content":"A sequence of values to project.","pos":[0,32]}]}],"pos":[558446,558479],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[558598,558645],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[558702,558751],"yaml":true},{"content":"The type of the elements of the sequence returned by <code>selector</code>.","nodes":[{"pos":[0,75],"content":"The type of the elements of the sequence returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">selector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of the sequence returned by <code>selector</code>."}],"pos":[558788,558864],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.","nodes":[{"pos":[0,180],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence."}],"pos":[558955,559136],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[559302,559358],"yaml":true},{"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.","nodes":[{"pos":[0,240],"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.","nodes":[{"content":"Projects each element of a sequence to an <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph>, and flattens the resulting sequences into one sequence.","pos":[0,160],"source":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, and flattens the resulting sequences into one sequence."},{"content":"The index of each source element is used in the projected form of that element.","pos":[161,240]}]}],"pos":[561355,561596],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object. That is, for each element of `source`, `selector` is invoked and a sequence of values is returned. <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it. For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The first argument to `selector` represents the element to process. The second argument to `selector` represents the zero-based index of that element in the source sequence. This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example. It can also be useful if you want to retrieve the index of one or more elements.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,2066],"content":"The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object. That is, for each element of `source`, `selector` is invoked and a sequence of values is returned. <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it. For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> method enumerates the input sequence, uses a transform function to map each element to an <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and then enumerates and yields the elements of each such <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object.","pos":[0,460],"source":"The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object."},{"content":"That is, for each element of <ph id=\"ph1\">`source`</ph>, <ph id=\"ph2\">`selector`</ph> is invoked and a sequence of values is returned.","pos":[461,559],"source":" That is, for each element of `source`, `selector` is invoked and a sequence of values is returned."},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> then flattens this two-dimensional collection of collections into a one-dimensional <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and returns it.","pos":[560,910],"source":" <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it."},{"content":"For example, if a query uses <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to obtain the orders (of type <ph id=\"ph2\">`Order`</ph>) for each customer in a database, the result is of type <ph id=\"ph3\">`IEnumerable&lt;Order&gt;`</ph> in C# or <ph id=\"ph4\">`IEnumerable(Of Order)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[911,1336],"source":" For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"content":"If instead the query uses <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to obtain the orders, the collection of collections of orders is not combined and the result is of type <ph id=\"ph2\">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in C# or <ph id=\"ph3\">`IEnumerable(Of List(Of Order))`</ph> in <ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[1337,1623],"source":" If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[2073,2464],"content":"The first argument to `selector` represents the element to process. The second argument to `selector` represents the zero-based index of that element in the source sequence. This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example. It can also be useful if you want to retrieve the index of one or more elements.","nodes":[{"content":"The first argument to <ph id=\"ph1\">`selector`</ph> represents the element to process.","pos":[0,67],"source":"The first argument to `selector` represents the element to process."},{"content":"The second argument to <ph id=\"ph1\">`selector`</ph> represents the zero-based index of that element in the source sequence.","pos":[68,173],"source":" The second argument to `selector` represents the zero-based index of that element in the source sequence."},{"content":"This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.","pos":[174,310]},{"content":"It can also be useful if you want to retrieve the index of one or more elements.","pos":[311,391]}]}],"pos":[561607,564078],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to project.","nodes":[{"pos":[0,32],"content":"A sequence of values to project.","nodes":[{"content":"A sequence of values to project.","pos":[0,32]}]}],"pos":[565083,565116],"yaml":true},{"content":"A transform function to apply to each source element; the second parameter of the function represents the index of the source element.","nodes":[{"pos":[0,134],"content":"A transform function to apply to each source element; the second parameter of the function represents the index of the source element.","nodes":[{"content":"A transform function to apply to each source element; the second parameter of the function represents the index of the source element.","pos":[0,134]}]}],"pos":[565248,565383],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[565440,565489],"yaml":true},{"content":"The type of the elements of the sequence returned by <code>selector</code>.","nodes":[{"pos":[0,75],"content":"The type of the elements of the sequence returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">selector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of the sequence returned by <code>selector</code>."}],"pos":[565526,565602],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.","nodes":[{"pos":[0,179],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence."}],"pos":[565693,565873],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[566039,566095],"yaml":true},{"content":"Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.","nodes":[{"pos":[0,123],"content":"Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.","nodes":[{"content":"Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.","pos":[0,123]}]}],"pos":[567936,568060],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>. The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.","nodes":[{"pos":[0,790],"content":"The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>. The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for <ph id=\"ph2\">`TSource`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.","pos":[0,377],"source":"The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>."},{"content":"The default equality comparer, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.","pos":[378,608],"source":" The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface."},{"content":"To compare a custom data type, you need to implement this interface and provide your own <ph id=\"ph1\">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.","pos":[609,790],"source":" To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type."}]}],"pos":[568071,568862],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to compare to <code>second</code>.","nodes":[{"pos":[0,99],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">second</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to compare to <code>second</code>."}],"pos":[571684,571784],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to compare to the first sequence.","nodes":[{"pos":[0,98],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to compare to the first sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to compare to the first sequence."}],"pos":[571880,571979],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[572036,572085],"yaml":true},{"content":"`true` if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, `false`.","nodes":[{"pos":[0,176],"content":"<ph id=\"ph1\">`true`</ph> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, `false`."}],"pos":[572143,572322],"yaml":true},{"content":"<code>first</code> or <code>second</code> is `null`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>first</code> or <code>second</code> is `null`."}],"pos":[572491,572544],"yaml":true},{"content":"Determines whether two sequences are equal by comparing their elements by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.","nodes":[{"pos":[0,160],"content":"Determines whether two sequences are equal by comparing their elements by using a specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether two sequences are equal by comparing their elements by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>."}],"pos":[574597,574758],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <xref:System.Collections.Generic.IEqualityComparer%601>. If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements.","nodes":[{"pos":[0,548],"content":"The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <xref:System.Collections.Generic.IEqualityComparer%601>. If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>.","pos":[0,396],"source":"The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <xref:System.Collections.Generic.IEqualityComparer%601>."},{"content":"If c<ph id=\"ph1\">`omparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare elements.","pos":[397,548],"source":" If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements."}]}],"pos":[574769,575318],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to compare to <code>second</code>.","nodes":[{"pos":[0,99],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">second</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to compare to <code>second</code>."}],"pos":[576917,577017],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to compare to the first sequence.","nodes":[{"pos":[0,98],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to compare to the first sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to compare to the first sequence."}],"pos":[577113,577212],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to use to compare elements.","nodes":[{"pos":[0,98],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to use to compare elements.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to use to compare elements."}],"pos":[577316,577415],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[577472,577521],"yaml":true},{"content":"`true` if the two source sequences are of equal length and their corresponding elements compare equal according to <code>comparer</code>; otherwise, `false`.","nodes":[{"pos":[0,157],"content":"<ph id=\"ph1\">`true`</ph> if the two source sequences are of equal length and their corresponding elements compare equal according to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">comparer</ph><ept id=\"p1\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the two source sequences are of equal length and their corresponding elements compare equal according to <code>comparer</code>; otherwise, `false`."}],"pos":[577579,577739],"yaml":true},{"content":"<code>first</code> or <code>second</code> is `null`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>first</code> or <code>second</code> is `null`."}],"pos":[577908,577961],"yaml":true},{"content":"Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.","nodes":[{"pos":[0,138],"content":"Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.","nodes":[{"content":"Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.","pos":[0,138]}]}],"pos":[579727,579866],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if the input sequence contains no matching element. To instead return `null` when no matching element is found, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.","nodes":[{"pos":[0,341],"content":"The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if the input sequence contains no matching element. To instead return `null` when no matching element is found, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if the input sequence contains no matching element.","pos":[0,227],"source":"The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if the input sequence contains no matching element."},{"content":"To instead return <ph id=\"ph1\">`null`</ph> when no matching element is found, use <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.","pos":[228,341],"source":" To instead return `null` when no matching element is found, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>."}]}],"pos":[579877,580219],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return a single element from.","nodes":[{"pos":[0,97],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return a single element from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return a single element from."}],"pos":[581630,581728],"yaml":true},{"content":"A function to test an element for a condition.","nodes":[{"pos":[0,46],"content":"A function to test an element for a condition.","nodes":[{"content":"A function to test an element for a condition.","pos":[0,46]}]}],"pos":[581815,581862],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[581919,581968],"yaml":true},{"content":"The single element of the input sequence that satisfies a condition.","nodes":[{"pos":[0,68],"content":"The single element of the input sequence that satisfies a condition.","nodes":[{"content":"The single element of the input sequence that satisfies a condition.","pos":[0,68]}]}],"pos":[582019,582088],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[582250,582307],"yaml":true},{"content":"No element satisfies the condition in <code>predicate</code>.  \n  \n -or-  \n  \n More than one element satisfies the condition in <code>predicate</code>.  \n  \n -or-  \n  \n The source sequence is empty.","nodes":[{"pos":[0,61],"content":"No element satisfies the condition in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"No element satisfies the condition in <code>predicate</code>."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,151],"content":"More than one element satisfies the condition in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"More than one element satisfies the condition in <code>predicate</code>."},{"pos":[158,162],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[169,198],"content":"The source sequence is empty.","nodes":[{"content":"The source sequence is empty.","pos":[0,29]}]}],"pos":[582417,582626],"yaml":true},{"content":"Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.","nodes":[{"pos":[0,116],"content":"Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.","nodes":[{"content":"Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.","pos":[0,116]}]}],"pos":[584227,584344],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if the input sequence is empty. To instead return `null` when the input sequence is empty, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.","nodes":[{"pos":[0,276],"content":"The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if the input sequence is empty. To instead return `null` when the input sequence is empty, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if the input sequence is empty.","pos":[0,163],"source":"The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if the input sequence is empty."},{"content":"To instead return <ph id=\"ph1\">`null`</ph> when the input sequence is empty, use <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.","pos":[164,276],"source":" To instead return `null` when the input sequence is empty, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>."}]}],"pos":[584355,584632],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the single element of.","nodes":[{"pos":[0,97],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return the single element of.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the single element of."}],"pos":[585869,585967],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[586024,586073],"yaml":true},{"content":"The single element of the input sequence.","nodes":[{"pos":[0,41],"content":"The single element of the input sequence.","nodes":[{"content":"The single element of the input sequence.","pos":[0,41]}]}],"pos":[586124,586166],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[586328,586359],"yaml":true},{"content":"The input sequence contains more than one element.  \n  \n -or-  \n  \n The input sequence is empty.","nodes":[{"pos":[0,50],"content":"The input sequence contains more than one element.","nodes":[{"content":"The input sequence contains more than one element.","pos":[0,50]}]},{"pos":[57,61],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[68,96],"content":"The input sequence is empty.","nodes":[{"content":"The input sequence is empty.","pos":[0,28]}]}],"pos":[586469,586572],"yaml":true},{"content":"Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.","nodes":[{"pos":[0,167],"content":"Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.","nodes":[{"content":"Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.","pos":[0,167]}]}],"pos":[588227,588395],"yaml":true},{"content":"The default value for reference and nullable types is `null`.  \n  \n The <xref:System.Linq.Enumerable.SingleOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.","nodes":[{"pos":[0,61],"content":"The default value for reference and nullable types is <ph id=\"ph1\">`null`</ph>.","source":"The default value for reference and nullable types is `null`."},{"pos":[68,419],"content":"The <xref:System.Linq.Enumerable.SingleOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.","pos":[0,110],"source":"The <xref:System.Linq.Enumerable.SingleOrDefault%2A> method does not provide a way to specify a default value."},{"content":"If you want to specify a default value other than <ph id=\"ph1\">`default(TSource)`</ph>, use the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.","pos":[111,351],"source":" If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section."}]}],"pos":[588406,588830],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the single element of.","nodes":[{"pos":[0,97],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return the single element of.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the single element of."}],"pos":[591539,591637],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[591694,591743],"yaml":true},{"content":"The single element of the input sequence, or `default`(<code>TSource</code>) if the sequence contains no elements.","nodes":[{"pos":[0,114],"content":"The single element of the input sequence, or <ph id=\"ph1\">`default`</ph>(<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>) if the sequence contains no elements.","source":"The single element of the input sequence, or `default`(<code>TSource</code>) if the sequence contains no elements."}],"pos":[591794,591909],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[592080,592111],"yaml":true},{"content":"The input sequence contains more than one element.","nodes":[{"pos":[0,50],"content":"The input sequence contains more than one element.","nodes":[{"content":"The input sequence contains more than one element.","pos":[0,50]}]}],"pos":[592221,592272],"yaml":true},{"content":"Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.","nodes":[{"pos":[0,203],"content":"Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.","nodes":[{"content":"Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.","pos":[0,203]}]}],"pos":[594092,594296],"yaml":true},{"content":"The default value for reference and nullable types is `null`.","nodes":[{"pos":[0,61],"content":"The default value for reference and nullable types is <ph id=\"ph1\">`null`</ph>.","source":"The default value for reference and nullable types is `null`."}],"pos":[594307,594369],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return a single element from.","nodes":[{"pos":[0,97],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return a single element from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return a single element from."}],"pos":[595811,595909],"yaml":true},{"content":"A function to test an element for a condition.","nodes":[{"pos":[0,46],"content":"A function to test an element for a condition.","nodes":[{"content":"A function to test an element for a condition.","pos":[0,46]}]}],"pos":[595996,596043],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[596100,596149],"yaml":true},{"content":"The single element of the input sequence that satisfies the condition, or `default`(<code>TSource</code>) if no such element is found.","nodes":[{"pos":[0,134],"content":"The single element of the input sequence that satisfies the condition, or <ph id=\"ph1\">`default`</ph>(<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>) if no such element is found.","source":"The single element of the input sequence that satisfies the condition, or `default`(<code>TSource</code>) if no such element is found."}],"pos":[596200,596335],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[596506,596563],"yaml":true},{"content":"Bypasses a specified number of elements in a sequence and then returns the remaining elements.","nodes":[{"pos":[0,94],"content":"Bypasses a specified number of elements in a sequence and then returns the remaining elements.","nodes":[{"content":"Bypasses a specified number of elements in a sequence and then returns the remaining elements.","pos":[0,94]}]}],"pos":[598212,598307],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n If `source` contains fewer than `count` elements, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned. If `count` is less than or equal to zero, all elements of `source` are yielded.  \n  \n The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements. Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Skip` clause translates to an invocation of <xref:System.Linq.Enumerable.Skip%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,644],"content":"If `source` contains fewer than `count` elements, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned. If `count` is less than or equal to zero, all elements of `source` are yielded.","nodes":[{"content":"If <ph id=\"ph1\">`source`</ph> contains fewer than <ph id=\"ph2\">`count`</ph> elements, an empty <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.","pos":[0,121],"source":"If `source` contains fewer than `count` elements, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned."},{"content":"If <ph id=\"ph1\">`count`</ph> is less than or equal to zero, all elements of <ph id=\"ph2\">`source`</ph> are yielded.","pos":[122,201],"source":" If `count` is less than or equal to zero, all elements of `source` are yielded."}]},{"pos":[651,913],"content":"The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements. Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are functional complements.","pos":[0,119],"source":"The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements."},{"content":"Given a sequence <ph id=\"ph1\">`coll`</ph> and an integer <ph id=\"ph2\">`n`</ph>, concatenating the results of <ph id=\"ph3\">`coll.Take(n)`</ph> and <ph id=\"ph4\">`coll.Skip(n)`</ph> yields the same sequence as <ph id=\"ph5\">`coll`</ph>.","pos":[120,262],"source":" Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`."}]},{"pos":[920,1077],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id=\"ph2\">`Skip`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Skip` clause translates to an invocation of <xref:System.Linq.Enumerable.Skip%2A>."}],"pos":[598318,599404],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return elements from.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return elements from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return elements from."}],"pos":[600168,600258],"yaml":true},{"content":"The number of elements to skip before returning the remaining elements.","nodes":[{"pos":[0,71],"content":"The number of elements to skip before returning the remaining elements.","nodes":[{"content":"The number of elements to skip before returning the remaining elements.","pos":[0,71]}]}],"pos":[600318,600390],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[600447,600496],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements that occur after the specified index in the input sequence.","nodes":[{"pos":[0,151],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements that occur after the specified index in the input sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements that occur after the specified index in the input sequence."}],"pos":[600587,600739],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[600899,600930],"yaml":true},{"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.","nodes":[{"pos":[0,113],"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.","nodes":[{"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.","pos":[0,113]}]}],"pos":[604042,604156],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n This method tests each element of `source` by using `predicate` and skips the element if the result is `true`. After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.  \n  \n If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.  \n  \n The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements. Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.","nodes":[{"pos":[0,583],"content":"The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method is implemented by using deferred execution.","pos":[0,202],"source":"The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method is implemented by using deferred execution."},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[203,314]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[315,583],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[590,875],"content":"This method tests each element of `source` by using `predicate` and skips the element if the result is `true`. After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.","nodes":[{"content":"This method tests each element of <ph id=\"ph1\">`source`</ph> by using <ph id=\"ph2\">`predicate`</ph> and skips the element if the result is <ph id=\"ph3\">`true`</ph>.","pos":[0,110],"source":"This method tests each element of `source` by using `predicate` and skips the element if the result is `true`."},{"content":"After the predicate function returns <ph id=\"ph1\">`false`</ph> for an element, that element and the remaining elements in <ph id=\"ph2\">`source`</ph> are yielded and there are no more invocations of <ph id=\"ph3\">`predicate`</ph>.","pos":[111,285],"source":" After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`."}]},{"pos":[882,1017],"content":"If <ph id=\"ph1\">`predicate`</ph> returns <ph id=\"ph2\">`true`</ph> for all elements in the sequence, an empty <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.","source":"If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned."},{"pos":[1024,1311],"content":"The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements. Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.","pos":[0,129],"source":"The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements."},{"content":"Given a sequence <ph id=\"ph1\">`coll`</ph> and a pure function <ph id=\"ph2\">`p`</ph>, concatenating the results of <ph id=\"ph3\">`coll.TakeWhile(p)`</ph> and <ph id=\"ph4\">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id=\"ph5\">`coll`</ph>.","pos":[130,287],"source":" Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`."}]},{"pos":[1318,1486],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id=\"ph2\">`Skip While`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>."}],"pos":[604167,605664],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return elements from.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return elements from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return elements from."}],"pos":[606531,606621],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[606708,606757],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[606814,606863],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.","nodes":[{"pos":[0,231],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>."}],"pos":[606954,607186],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[607351,607408],"yaml":true},{"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.","nodes":[{"pos":[0,181],"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.","nodes":[{"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.","pos":[0,181],"nodes":[{"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.","pos":[0,113]},{"content":"The element's index is used in the logic of the predicate function.","pos":[114,181]}]}]}],"pos":[609249,609431],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and skips the element if the result is `true`. After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.  \n  \n If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.  \n  \n The first argument of `predicate` represents the element to test. The second argument represents the zero-based index of the element within `source`.  \n  \n The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements. Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,890],"content":"The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and skips the element if the result is `true`. After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id=\"ph2\">`source`</ph> by using <ph id=\"ph3\">`predicate`</ph> and skips the element if the result is <ph id=\"ph4\">`true`</ph>.","pos":[0,272],"source":"The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and skips the element if the result is `true`."},{"content":"After the predicate function returns <ph id=\"ph1\">`false`</ph> for an element, that element and the remaining elements in <ph id=\"ph2\">`source`</ph> are yielded and there are no more invocations of <ph id=\"ph3\">`predicate`</ph>.","pos":[273,447],"source":" After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`."}]},{"pos":[897,1032],"content":"If <ph id=\"ph1\">`predicate`</ph> returns <ph id=\"ph2\">`true`</ph> for all elements in the sequence, an empty <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.","source":"If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned."},{"pos":[1039,1188],"content":"The first argument of `predicate` represents the element to test. The second argument represents the zero-based index of the element within `source`.","nodes":[{"content":"The first argument of <ph id=\"ph1\">`predicate`</ph> represents the element to test.","pos":[0,65],"source":"The first argument of `predicate` represents the element to test."},{"content":"The second argument represents the zero-based index of the element within <ph id=\"ph1\">`source`</ph>.","pos":[66,149],"source":" The second argument represents the zero-based index of the element within `source`."}]},{"pos":[1195,1482],"content":"The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements. Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.","pos":[0,129],"source":"The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements."},{"content":"Given a sequence <ph id=\"ph1\">`coll`</ph> and a pure function <ph id=\"ph2\">`p`</ph>, concatenating the results of <ph id=\"ph3\">`coll.TakeWhile(p)`</ph> and <ph id=\"ph4\">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id=\"ph5\">`coll`</ph>.","pos":[130,287],"source":" Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`."}]},{"pos":[1489,1657],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id=\"ph2\">`Skip While`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>."}],"pos":[609442,611112],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return elements from.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to return elements from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return elements from."}],"pos":[612034,612124],"yaml":true},{"content":"A function to test each source element for a condition; the second parameter of the function represents the index of the source element.","nodes":[{"pos":[0,136],"content":"A function to test each source element for a condition; the second parameter of the function represents the index of the source element.","nodes":[{"content":"A function to test each source element for a condition; the second parameter of the function represents the index of the source element.","pos":[0,136]}]}],"pos":[612224,612361],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[612418,612467],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.","nodes":[{"pos":[0,231],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>."}],"pos":[612558,612790],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[612955,613012],"yaml":true},{"content":"Computes the sum of a sequence of nullable <xref href=\"System.Int32\"></xref> values.","nodes":[{"pos":[0,84],"content":"Computes the sum of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of nullable <xref href=\"System.Int32\"></xref> values."}],"pos":[614661,614746],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n The result does not include values that are `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,116],"content":"The result does not include values that are <ph id=\"ph1\">`null`</ph>.","source":"The result does not include values that are `null`."},{"pos":[123,296],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[614757,615060],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Int32\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,88],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of nullable <xref href=\"System.Int32\"></xref> values to calculate the sum of."}],"pos":[615936,616025],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[616098,616137],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[616293,616324],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[616418,616485],"yaml":true},{"content":"Computes the sum of a sequence of nullable <xref href=\"System.Single\"></xref> values.","nodes":[{"pos":[0,85],"content":"Computes the sum of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of nullable <xref href=\"System.Single\"></xref> values."}],"pos":[618140,618226],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n The result does not include values that are `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,116],"content":"The result does not include values that are <ph id=\"ph1\">`null`</ph>.","source":"The result does not include values that are `null`."},{"pos":[123,296],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[618237,618540],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Single\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,89],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of nullable <xref href=\"System.Single\"></xref> values to calculate the sum of."}],"pos":[619307,619397],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[619471,619510],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[619666,619697],"yaml":true},{"content":"Computes the sum of a sequence of <xref href=\"System.Single\"></xref> values.","nodes":[{"pos":[0,76],"content":"Computes the sum of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of <xref href=\"System.Single\"></xref> values."}],"pos":[621249,621326],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,238],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[621337,621580],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Single\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,80],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of <xref href=\"System.Single\"></xref> values to calculate the sum of."}],"pos":[622289,622370],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[622427,622466],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[622622,622653],"yaml":true},{"content":"Computes the sum of a sequence of nullable <xref href=\"System.Int64\"></xref> values.","nodes":[{"pos":[0,84],"content":"Computes the sum of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of nullable <xref href=\"System.Int64\"></xref> values."}],"pos":[624302,624387],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n The result does not include values that are `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,116],"content":"The result does not include values that are <ph id=\"ph1\">`null`</ph>.","source":"The result does not include values that are `null`."},{"pos":[123,296],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[624398,624701],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Int64\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,88],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of nullable <xref href=\"System.Int64\"></xref> values to calculate the sum of."}],"pos":[625579,625668],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[625741,625780],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[625936,625967],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[626061,626128],"yaml":true},{"content":"Computes the sum of a sequence of nullable <xref href=\"System.Double\"></xref> values.","nodes":[{"pos":[0,85],"content":"Computes the sum of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of nullable <xref href=\"System.Double\"></xref> values."}],"pos":[627783,627869],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n The result does not include values that are `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,116],"content":"The result does not include values that are <ph id=\"ph1\">`null`</ph>.","source":"The result does not include values that are `null`."},{"pos":[123,296],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[627880,628183],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Double\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,89],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of nullable <xref href=\"System.Double\"></xref> values to calculate the sum of."}],"pos":[629066,629156],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[629230,629269],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[629425,629456],"yaml":true},{"content":"Computes the sum of a sequence of <xref href=\"System.Double\"></xref> values.","nodes":[{"pos":[0,76],"content":"Computes the sum of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of <xref href=\"System.Double\"></xref> values."}],"pos":[631030,631107],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,238],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[631118,631361],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Double\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,80],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of <xref href=\"System.Double\"></xref> values to calculate the sum of."}],"pos":[632186,632267],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[632324,632363],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[632519,632550],"yaml":true},{"content":"Computes the sum of a sequence of <xref href=\"System.Int64\"></xref> values.","nodes":[{"pos":[0,75],"content":"Computes the sum of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of <xref href=\"System.Int64\"></xref> values."}],"pos":[634118,634194],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,238],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[634205,634448],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Int64\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,79],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of <xref href=\"System.Int64\"></xref> values to calculate the sum of."}],"pos":[635268,635348],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[635404,635443],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[635599,635630],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[635724,635791],"yaml":true},{"content":"Computes the sum of a sequence of <xref href=\"System.Int32\"></xref> values.","nodes":[{"pos":[0,75],"content":"Computes the sum of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of <xref href=\"System.Int32\"></xref> values."}],"pos":[637359,637435],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,238],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[637446,637689],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Int32\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,79],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of <xref href=\"System.Int32\"></xref> values to calculate the sum of."}],"pos":[638507,638587],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[638643,638682],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[638838,638869],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[638963,639030],"yaml":true},{"content":"Computes the sum of a sequence of <xref href=\"System.Decimal\"></xref> values.","nodes":[{"pos":[0,77],"content":"Computes the sum of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of <xref href=\"System.Decimal\"></xref> values."}],"pos":[640588,640666],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method returns zero if `source` contains no elements.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,155],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method returns zero if <ph id=\"ph2\">`source`</ph> contains no elements.","source":"The <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method returns zero if `source` contains no elements."},{"pos":[162,335],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[640677,641017],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Decimal\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,81],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of <xref href=\"System.Decimal\"></xref> values to calculate the sum of."}],"pos":[641845,641927],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[641985,642024],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[642180,642211],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,68],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[642305,642374],"yaml":true},{"content":"Computes the sum of a sequence of nullable <xref href=\"System.Decimal\"></xref> values.","nodes":[{"pos":[0,86],"content":"Computes the sum of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of nullable <xref href=\"System.Decimal\"></xref> values."}],"pos":[644035,644122],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n The result doesnot include values that are `null`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,115],"content":"The result doesnot include values that are <ph id=\"ph1\">`null`</ph>.","source":"The result doesnot include values that are `null`."},{"pos":[122,295],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[644133,644435],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Decimal\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,90],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of nullable <xref href=\"System.Decimal\"></xref> values to calculate the sum of."}],"pos":[645321,645412],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[645487,645526],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[645682,645713],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,68],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[645807,645876],"yaml":true},{"content":"Computes the sum of the sequence of <xref href=\"System.Single\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,167],"content":"Computes the sum of the sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the sum of the sequence of <xref href=\"System.Single\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[647618,647786],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method returns zero if `source` contains no elements.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,198],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method returns zero if <ph id=\"ph2\">`source`</ph> contains no elements.","source":"The <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method returns zero if `source` contains no elements."},{"pos":[205,397],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Single&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>."},{"pos":[404,577],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[647797,648381],"yaml":true,"extradata":"MT"},{"content":"A sequence of values that are used to calculate a sum.","nodes":[{"pos":[0,54],"content":"A sequence of values that are used to calculate a sum.","nodes":[{"content":"A sequence of values that are used to calculate a sum.","pos":[0,54]}]}],"pos":[649275,649330],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[649415,649462],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[649519,649568],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[649625,649658],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[649817,649873],"yaml":true},{"content":"Computes the sum of the sequence of nullable <xref href=\"System.Single\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,176],"content":"Computes the sum of the sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the sum of the sequence of nullable <xref href=\"System.Single\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[651696,651873],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n The result does not include values that are `null`.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,116],"content":"The result does not include values that are <ph id=\"ph1\">`null`</ph>.","source":"The result does not include values that are `null`."},{"pos":[123,391],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Single&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Single)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[398,571],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[651884,652464],"yaml":true,"extradata":"MT"},{"content":"A sequence of values that are used to calculate a sum.","nodes":[{"pos":[0,54],"content":"A sequence of values that are used to calculate a sum.","nodes":[{"content":"A sequence of values that are used to calculate a sum.","pos":[0,54]}]}],"pos":[653378,653433],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[653535,653582],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[653639,653688],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[653762,653795],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[653954,654010],"yaml":true},{"content":"Computes the sum of the sequence of nullable <xref href=\"System.Int64\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,175],"content":"Computes the sum of the sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the sum of the sequence of nullable <xref href=\"System.Int64\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[655827,656003],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n The result does not include values that are `null`.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,116],"content":"The result does not include values that are <ph id=\"ph1\">`null`</ph>.","source":"The result does not include values that are `null`."},{"pos":[123,388],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Int64)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]"},{"pos":[395,568],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[656014,656591],"yaml":true,"extradata":"MT"},{"content":"A sequence of values that are used to calculate a sum.","nodes":[{"pos":[0,54],"content":"A sequence of values that are used to calculate a sum.","nodes":[{"content":"A sequence of values that are used to calculate a sum.","pos":[0,54]}]}],"pos":[657503,657558],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[657659,657706],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[657763,657812],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[657885,657918],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[658077,658133],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[658227,658294],"yaml":true},{"content":"Computes the sum of the sequence of nullable <xref href=\"System.Int32\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,175],"content":"Computes the sum of the sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the sum of the sequence of nullable <xref href=\"System.Int32\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[660111,660287],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n The result does not include values that are `null`.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,116],"content":"The result does not include values that are <ph id=\"ph1\">`null`</ph>.","source":"The result does not include values that are `null`."},{"pos":[123,389],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Int32)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[396,569],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[660298,660876],"yaml":true,"extradata":"MT"},{"content":"A sequence of values that are used to calculate a sum.","nodes":[{"pos":[0,54],"content":"A sequence of values that are used to calculate a sum.","nodes":[{"content":"A sequence of values that are used to calculate a sum.","pos":[0,54]}]}],"pos":[661786,661841],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[661942,661989],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[662046,662095],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[662168,662201],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[662360,662416],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[662510,662577],"yaml":true},{"content":"Computes the sum of the sequence of nullable <xref href=\"System.Double\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,176],"content":"Computes the sum of the sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the sum of the sequence of nullable <xref href=\"System.Double\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[664400,664577],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n The result does not include values that are `null`.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,116],"content":"The result does not include values that are <ph id=\"ph1\">`null`</ph>.","source":"The result does not include values that are `null`."},{"pos":[123,391],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Double&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Double)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[398,571],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[664588,665168],"yaml":true,"extradata":"MT"},{"content":"A sequence of values that are used to calculate a sum.","nodes":[{"pos":[0,54],"content":"A sequence of values that are used to calculate a sum.","nodes":[{"content":"A sequence of values that are used to calculate a sum.","pos":[0,54]}]}],"pos":[666084,666139],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[666241,666288],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[666345,666394],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[666468,666501],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[666660,666716],"yaml":true},{"content":"Computes the sum of the sequence of nullable <xref href=\"System.Decimal\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,177],"content":"Computes the sum of the sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the sum of the sequence of nullable <xref href=\"System.Decimal\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[668545,668723],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n The result does not included values that are `null`.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,117],"content":"The result does not included values that are <ph id=\"ph1\">`null`</ph>.","source":"The result does not included values that are `null`."},{"pos":[124,394],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id=\"ph4\">`Nullable(Of Decimal)`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"pos":[401,574],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[668734,669317],"yaml":true,"extradata":"MT"},{"content":"A sequence of values that are used to calculate a sum.","nodes":[{"pos":[0,54],"content":"A sequence of values that are used to calculate a sum.","nodes":[{"content":"A sequence of values that are used to calculate a sum.","pos":[0,54]}]}],"pos":[670235,670290],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[670393,670440],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[670497,670546],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[670621,670654],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[670813,670869],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,68],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[670963,671032],"yaml":true},{"content":"Computes the sum of the sequence of <xref href=\"System.Int64\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,166],"content":"Computes the sum of the sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the sum of the sequence of <xref href=\"System.Int64\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[672768,672935],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,256],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Int64&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>."},{"pos":[263,436],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[672946,673389],"yaml":true,"extradata":"MT"},{"content":"A sequence of values that are used to calculate a sum.","nodes":[{"pos":[0,54],"content":"A sequence of values that are used to calculate a sum.","nodes":[{"content":"A sequence of values that are used to calculate a sum.","pos":[0,54]}]}],"pos":[674281,674336],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[674420,674467],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[674524,674573],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[674629,674662],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[674821,674877],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[674971,675038],"yaml":true},{"content":"Computes the sum of the sequence of <xref href=\"System.Int32\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,166],"content":"Computes the sum of the sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the sum of the sequence of <xref href=\"System.Int32\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[676774,676941],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,256],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Int32&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>."},{"pos":[263,436],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[676952,677395],"yaml":true,"extradata":"MT"},{"content":"A sequence of values that are used to calculate a sum.","nodes":[{"pos":[0,54],"content":"A sequence of values that are used to calculate a sum.","nodes":[{"content":"A sequence of values that are used to calculate a sum.","pos":[0,54]}]}],"pos":[678285,678340],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[678424,678471],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[678528,678577],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[678633,678666],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[678825,678881],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[678975,679042],"yaml":true},{"content":"Computes the sum of the sequence of <xref href=\"System.Double\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,167],"content":"Computes the sum of the sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the sum of the sequence of <xref href=\"System.Double\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[680784,680952],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,257],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>."},{"pos":[264,437],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[680963,681407],"yaml":true,"extradata":"MT"},{"content":"A sequence of values that are used to calculate a sum.","nodes":[{"pos":[0,54],"content":"A sequence of values that are used to calculate a sum.","nodes":[{"content":"A sequence of values that are used to calculate a sum.","pos":[0,54]}]}],"pos":[682203,682258],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[682343,682390],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[682447,682496],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[682553,682586],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[682745,682801],"yaml":true},{"content":"Computes the sum of the sequence of <xref href=\"System.Decimal\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.","nodes":[{"pos":[0,168],"content":"Computes the sum of the sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.","source":"Computes the sum of the sequence of <xref href=\"System.Decimal\"></xref> values that are obtained by invoking a transform function on each element of the input sequence."}],"pos":[684549,684718],"yaml":true},{"content":"This method returns zero if `source` contains no elements.  \n  \n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.","nodes":[{"pos":[0,58],"content":"This method returns zero if <ph id=\"ph1\">`source`</ph> contains no elements.","source":"This method returns zero if `source` contains no elements."},{"pos":[65,258],"content":"You can apply this method to a sequence of arbitrary values if you provide a function, <ph id=\"ph1\">`selector`</ph>, that projects the members of <ph id=\"ph2\">`source`</ph> into a numeric type, specifically <ph id=\"ph3\">&lt;xref:System.Decimal&gt;</ph>.","source":"You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>."},{"pos":[265,438],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>."}],"pos":[684729,685174],"yaml":true,"extradata":"MT"},{"content":"A sequence of values that are used to calculate a sum.","nodes":[{"pos":[0,54],"content":"A sequence of values that are used to calculate a sum.","nodes":[{"content":"A sequence of values that are used to calculate a sum.","pos":[0,54]}]}],"pos":[686072,686127],"yaml":true},{"content":"A transform function to apply to each element.","nodes":[{"pos":[0,46],"content":"A transform function to apply to each element.","nodes":[{"content":"A transform function to apply to each element.","pos":[0,46]}]}],"pos":[686213,686260],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[686317,686366],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[686424,686457],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[686616,686672],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,68],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[686766,686835],"yaml":true},{"content":"Returns a specified number of contiguous elements from the start of a sequence.","nodes":[{"pos":[0,79],"content":"Returns a specified number of contiguous elements from the start of a sequence.","nodes":[{"content":"Returns a specified number of contiguous elements from the start of a sequence.","pos":[0,79]}]}],"pos":[688484,688564],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n <xref:System.Linq.Enumerable.Take%2A> enumerates `source` and yields elements until `count` elements have been yielded or `source` contains no more elements. If `count` exceeds the number of elements in `source`, all elements of `source` are returned.  \n  \n If `count` is less than or equal to zero, `source` is not enumerated and an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.  \n  \n The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements. Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Take` clause translates to an invocation of <xref:System.Linq.Enumerable.Take%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,694],"content":"<xref:System.Linq.Enumerable.Take%2A> enumerates `source` and yields elements until `count` elements have been yielded or `source` contains no more elements. If `count` exceeds the number of elements in `source`, all elements of `source` are returned.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> enumerates <ph id=\"ph2\">`source`</ph> and yields elements until <ph id=\"ph3\">`count`</ph> elements have been yielded or <ph id=\"ph4\">`source`</ph> contains no more elements.","pos":[0,157],"source":"<xref:System.Linq.Enumerable.Take%2A> enumerates `source` and yields elements until `count` elements have been yielded or `source` contains no more elements."},{"content":"If <ph id=\"ph1\">`count`</ph> exceeds the number of elements in <ph id=\"ph2\">`source`</ph>, all elements of <ph id=\"ph3\">`source`</ph> are returned.","pos":[158,251],"source":" If `count` exceeds the number of elements in `source`, all elements of `source` are returned."}]},{"pos":[701,845],"content":"If <ph id=\"ph1\">`count`</ph> is less than or equal to zero, <ph id=\"ph2\">`source`</ph> is not enumerated and an empty <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.","source":"If `count` is less than or equal to zero, `source` is not enumerated and an empty <xref:System.Collections.Generic.IEnumerable%601> is returned."},{"pos":[852,1114],"content":"The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements. Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are functional complements.","pos":[0,119],"source":"The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements."},{"content":"Given a sequence <ph id=\"ph1\">`coll`</ph> and an integer <ph id=\"ph2\">`n`</ph>, concatenating the results of <ph id=\"ph3\">`coll.Take(n)`</ph> and <ph id=\"ph4\">`coll.Skip(n)`</ph> yields the same sequence as <ph id=\"ph5\">`coll`</ph>.","pos":[120,262],"source":" Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`."}]},{"pos":[1121,1278],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id=\"ph2\">`Take`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Take` clause translates to an invocation of <xref:System.Linq.Enumerable.Take%2A>."}],"pos":[688575,689864],"yaml":true,"extradata":"MT"},{"content":"The sequence to return elements from.","nodes":[{"pos":[0,37],"content":"The sequence to return elements from.","nodes":[{"content":"The sequence to return elements from.","pos":[0,37]}]}],"pos":[690585,690623],"yaml":true},{"content":"The number of elements to return.","nodes":[{"pos":[0,33],"content":"The number of elements to return.","nodes":[{"content":"The number of elements to return.","pos":[0,33]}]}],"pos":[690683,690717],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[690774,690823],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the specified number of elements from the start of the input sequence.","nodes":[{"pos":[0,149],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains the specified number of elements from the start of the input sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the specified number of elements from the start of the input sequence."}],"pos":[690914,691064],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[691224,691255],"yaml":true},{"content":"Returns elements from a sequence as long as a specified condition is true.","nodes":[{"pos":[0,74],"content":"Returns elements from a sequence as long as a specified condition is true.","nodes":[{"content":"Returns elements from a sequence as long as a specified condition is true.","pos":[0,74]}]}],"pos":[694345,694420],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`. Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.  \n  \n The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements. Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,822],"content":"The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`. Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id=\"ph2\">`source`</ph> by using <ph id=\"ph3\">`predicate`</ph> and yields the element if the result is <ph id=\"ph4\">`true`</ph>.","pos":[0,258],"source":"The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`."},{"content":"Enumeration stops when the predicate function returns <ph id=\"ph1\">`false`</ph> for an element or when <ph id=\"ph2\">`source`</ph> contains no more elements.","pos":[259,379],"source":" Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements."}]},{"pos":[829,1116],"content":"The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements. Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.","pos":[0,129],"source":"The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements."},{"content":"Given a sequence <ph id=\"ph1\">`coll`</ph> and a pure function <ph id=\"ph2\">`p`</ph>, concatenating the results of <ph id=\"ph3\">`coll.TakeWhile(p)`</ph> and <ph id=\"ph4\">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id=\"ph5\">`coll`</ph>.","pos":[130,287],"source":" Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`."}]},{"pos":[1123,1291],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id=\"ph2\">`Take While`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>."}],"pos":[694431,695731],"yaml":true,"extradata":"MT"},{"content":"A sequence to return elements from.","nodes":[{"pos":[0,35],"content":"A sequence to return elements from.","nodes":[{"content":"A sequence to return elements from.","pos":[0,35]}]}],"pos":[696621,696657],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[696744,696793],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[696850,696899],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from the input sequence that occur before the element at which the test no longer passes.","nodes":[{"pos":[0,181],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements from the input sequence that occur before the element at which the test no longer passes.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from the input sequence that occur before the element at which the test no longer passes."}],"pos":[696990,697172],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[697337,697394],"yaml":true},{"content":"Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.","nodes":[{"pos":[0,142],"content":"Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.","nodes":[{"content":"Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.","pos":[0,142],"nodes":[{"content":"Returns elements from a sequence as long as a specified condition is true.","pos":[0,74]},{"content":"The element's index is used in the logic of the predicate function.","pos":[75,142]}]}]}],"pos":[699213,699356],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`. Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.  \n  \n The first argument of `predicate` represents the element to test. The second argument represents the zero-based index of the element within `source`.  \n  \n The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements. Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,837],"content":"The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`. Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id=\"ph2\">`source`</ph> by using <ph id=\"ph3\">`predicate`</ph> and yields the element if the result is <ph id=\"ph4\">`true`</ph>.","pos":[0,273],"source":"The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`."},{"content":"Enumeration stops when the predicate function returns <ph id=\"ph1\">`false`</ph> for an element or when <ph id=\"ph2\">`source`</ph> contains no more elements.","pos":[274,394],"source":" Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements."}]},{"pos":[844,993],"content":"The first argument of `predicate` represents the element to test. The second argument represents the zero-based index of the element within `source`.","nodes":[{"content":"The first argument of <ph id=\"ph1\">`predicate`</ph> represents the element to test.","pos":[0,65],"source":"The first argument of `predicate` represents the element to test."},{"content":"The second argument represents the zero-based index of the element within <ph id=\"ph1\">`source`</ph>.","pos":[66,149],"source":" The second argument represents the zero-based index of the element within `source`."}]},{"pos":[1000,1287],"content":"The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements. Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.","pos":[0,129],"source":"The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements."},{"content":"Given a sequence <ph id=\"ph1\">`coll`</ph> and a pure function <ph id=\"ph2\">`p`</ph>, concatenating the results of <ph id=\"ph3\">`coll.TakeWhile(p)`</ph> and <ph id=\"ph4\">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id=\"ph5\">`coll`</ph>.","pos":[130,287],"source":" Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`."}]},{"pos":[1294,1462],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id=\"ph2\">`Take While`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>."}],"pos":[699367,700840],"yaml":true,"extradata":"MT"},{"content":"The sequence to return elements from.","nodes":[{"pos":[0,37],"content":"The sequence to return elements from.","nodes":[{"content":"The sequence to return elements from.","pos":[0,37]}]}],"pos":[701779,701817],"yaml":true},{"content":"A function to test each source element for a condition; the second parameter of the function represents the index of the source element.","nodes":[{"pos":[0,136],"content":"A function to test each source element for a condition; the second parameter of the function represents the index of the source element.","nodes":[{"content":"A function to test each source element for a condition; the second parameter of the function represents the index of the source element.","pos":[0,136]}]}],"pos":[701917,702054],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[702111,702160],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements from the input sequence that occur before the element at which the test no longer passes.","nodes":[{"pos":[0,177],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence that occur before the element at which the test no longer passes.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements from the input sequence that occur before the element at which the test no longer passes."}],"pos":[702251,702429],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[702594,702651],"yaml":true},{"content":"Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.","nodes":[{"pos":[0,110],"content":"Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.","nodes":[{"content":"Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.","pos":[0,110]}]}],"pos":[704564,704675],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \n  \n <xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.  \n  \n> [!NOTE]\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \n  \n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.  \n  \n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,677],"content":"To order a sequence by the values of the elements themselves, specify the identity function (<ph id=\"ph1\">`x =&gt; x`</ph> in <ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph3\">`Function(x) x`</ph> in <ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id=\"ph5\">`keySelector`</ph>.","source":"To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`."},{"pos":[684,1085],"content":"<xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.","nodes":[{"content":"<xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.","pos":[0,401],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id=\"ph3\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.","pos":[0,215],"source":"<xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods."},{"content":"This design enables you to specify multiple sort criteria by applying any number of <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.","pos":[216,401],"source":" This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods."}]}]},{"pos":[1093,1637],"content":"[!NOTE]\n Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","leadings":["","> "],"nodes":[{"content":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[8,542],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id=\"ph8\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.","pos":[1,439],"source":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>."},{"content":"Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[440,534]}]}]},{"pos":[1644,1772],"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.","source":"If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys."},{"pos":[1779,1996],"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[0,217],"nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.","pos":[0,123]},{"content":"In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[124,217]}]}]}],"pos":[704686,706696],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> that contains elements to sort.","nodes":[{"pos":[0,88],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains elements to sort.","source":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> that contains elements to sort."}],"pos":[707038,707127],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[707206,707253],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys."}],"pos":[707346,707426],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[707483,707532],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[707566,707624],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted according to a key.","nodes":[{"pos":[0,102],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted according to a key.","source":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted according to a key."}],"pos":[707707,707810],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[707972,708031],"yaml":true},{"content":"Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.","nodes":[{"pos":[0,99],"content":"Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.","nodes":[{"content":"Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.","pos":[0,99]}]}],"pos":[709767,709867],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \n  \n <xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.  \n  \n> [!NOTE]\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \n  \n This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.  \n  \n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.  \n  \n In query expression syntax, an `orderby [first criterion], [second criterion]` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Order By [first criterion], [second criterion]` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.ThenBy%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,677],"content":"To order a sequence by the values of the elements themselves, specify the identity function (<ph id=\"ph1\">`x =&gt; x`</ph> in <ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph3\">`Function(x) x`</ph> in <ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id=\"ph5\">`keySelector`</ph>.","source":"To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`."},{"pos":[684,1085],"content":"<xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.","nodes":[{"content":"<xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.","pos":[0,401],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id=\"ph3\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.","pos":[0,215],"source":"<xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods."},{"content":"This design enables you to specify multiple sort criteria by applying any number of <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.","pos":[216,401],"source":" This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods."}]}]},{"pos":[1093,1637],"content":"[!NOTE]\n Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","leadings":["","> "],"nodes":[{"content":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[8,542],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id=\"ph8\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.","pos":[1,439],"source":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>."},{"content":"Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[440,534]}]}]},{"pos":[1644,1758],"content":"This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.","nodes":[{"content":"This method compares keys by using the default comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.","pos":[0,114],"source":"This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>."}]},{"pos":[1765,1982],"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[0,217],"nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.","pos":[0,123]},{"content":"In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[124,217]}]}]},{"pos":[1989,2290],"content":"In query expression syntax, an <ph id=\"ph1\">`orderby [first criterion], [second criterion]`</ph> (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`Order By [first criterion], [second criterion]`</ph> (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>.","source":"In query expression syntax, an `orderby [first criterion], [second criterion]` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Order By [first criterion], [second criterion]` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.ThenBy%2A>."}],"pos":[709878,712184],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> that contains elements to sort.","nodes":[{"pos":[0,88],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains elements to sort.","source":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> that contains elements to sort."}],"pos":[713019,713108],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[713187,713234],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[713291,713340],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[713374,713432],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted according to a key.","nodes":[{"pos":[0,102],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted according to a key.","source":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted according to a key."}],"pos":[713515,713618],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[713780,713839],"yaml":true},{"content":"Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.","nodes":[{"pos":[0,101],"content":"Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.","nodes":[{"content":"Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.","pos":[0,101]}]}],"pos":[715635,715737],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \n  \n <xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.  \n  \n> [!NOTE]\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \n  \n This sorting method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.  \n  \n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.  \n  \n In [!INCLUDE[csprcs](~/includes/csprcs-md.md)] query expression syntax, an `orderby [first criterion], [second criterion] descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.  \n  \n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Order By [first criterion], [second criterion] Descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,677],"content":"To order a sequence by the values of the elements themselves, specify the identity function (<ph id=\"ph1\">`x =&gt; x`</ph> in <ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph3\">`Function(x) x`</ph> in <ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id=\"ph5\">`keySelector`</ph>.","source":"To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`."},{"pos":[684,1085],"content":"<xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.","nodes":[{"content":"<xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.","pos":[0,401],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id=\"ph3\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.","pos":[0,215],"source":"<xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods."},{"content":"This design enables you to specify multiple sort criteria by applying any number of <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.","pos":[216,401],"source":" This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods."}]}]},{"pos":[1093,1637],"content":"[!NOTE]\n Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","leadings":["","> "],"nodes":[{"content":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[8,542],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id=\"ph8\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.","pos":[1,439],"source":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>."},{"content":"Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[440,534]}]}]},{"pos":[1644,1766],"content":"This sorting method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.","nodes":[{"content":"This sorting method compares keys by using the default comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.","pos":[0,122],"source":"This sorting method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>."}]},{"pos":[1773,1990],"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[0,217],"nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.","pos":[0,123]},{"content":"In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[124,217]}]}]},{"pos":[1997,2219],"content":"In <ph id=\"ph1\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`orderby [first criterion], [second criterion] descending`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.","source":"In [!INCLUDE[csprcs](~/includes/csprcs-md.md)] query expression syntax, an `orderby [first criterion], [second criterion] descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>."},{"pos":[2226,2449],"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id=\"ph2\">`Order By [first criterion], [second criterion] Descending`</ph> clause translates to an invocation of <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.","source":"In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Order By [first criterion], [second criterion] Descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>."}],"pos":[715748,718215],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> that contains elements to sort.","nodes":[{"pos":[0,88],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains elements to sort.","source":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> that contains elements to sort."}],"pos":[718514,718603],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[718682,718729],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[718786,718835],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[718869,718927],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted in descending order according to a key.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted in descending order according to a key.","source":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted in descending order according to a key."}],"pos":[719010,719133],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[719305,719364],"yaml":true},{"content":"Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.","nodes":[{"pos":[0,111],"content":"Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.","nodes":[{"content":"Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.","pos":[0,111]}]}],"pos":[721337,721449],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \n  \n <xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.  \n  \n> [!NOTE]\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \n  \n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.  \n  \n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,677],"content":"To order a sequence by the values of the elements themselves, specify the identity function (<ph id=\"ph1\">`x =&gt; x`</ph> in <ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph3\">`Function(x) x`</ph> in <ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id=\"ph5\">`keySelector`</ph>.","source":"To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`."},{"pos":[684,1085],"content":"<xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.","nodes":[{"content":"<xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.","pos":[0,401],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id=\"ph3\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.","pos":[0,215],"source":"<xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods."},{"content":"This design enables you to specify multiple sort criteria by applying any number of <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.","pos":[216,401],"source":" This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods."}]}]},{"pos":[1093,1637],"content":"[!NOTE]\n Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","leadings":["","> "],"nodes":[{"content":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[8,542],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id=\"ph8\">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.","pos":[1,439],"source":" Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>."},{"content":"Doing this introduces a new primary ordering that ignores the previously established ordering.","pos":[440,534]}]}]},{"pos":[1644,1772],"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.","source":"If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys."},{"pos":[1779,1996],"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[0,217],"nodes":[{"content":"This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.","pos":[0,123]},{"content":"In contrast, an unstable sort does not preserve the order of elements that have the same key.","pos":[124,217]}]}]}],"pos":[721460,723470],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> that contains elements to sort.","nodes":[{"pos":[0,88],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains elements to sort.","source":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> that contains elements to sort."}],"pos":[724477,724566],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[724645,724692],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys."}],"pos":[724785,724865],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[724922,724971],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[725005,725063],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted in descending order according to a key.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted in descending order according to a key.","source":"An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted in descending order according to a key."}],"pos":[725146,725269],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[725441,725500],"yaml":true},{"content":"Creates an array from a <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.","nodes":[{"pos":[0,86],"content":"Creates an array from a <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an array from a <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>."}],"pos":[727107,727194],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns an array that contains the query results. You can append this method to your query in order to obtain a cached copy of the query results.  \n  \n <xref:System.Linq.Enumerable.ToList%2A> has similar behavior but returns a <xref:System.Collections.Generic.List%601> instead of an array.","nodes":[{"pos":[0,296],"content":"The <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns an array that contains the query results. You can append this method to your query in order to obtain a cached copy of the query results.","nodes":[{"content":"The <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns an array that contains the query results. You can append this method to your query in order to obtain a cached copy of the query results.","pos":[0,296],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method forces immediate query evaluation and returns an array that contains the query results.","pos":[0,200],"source":"The <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns an array that contains the query results."},{"content":"You can append this method to your query in order to obtain a cached copy of the query results.","pos":[201,296]}]}]},{"pos":[303,441],"content":"<xref:System.Linq.Enumerable.ToList%2A> has similar behavior but returns a <xref:System.Collections.Generic.List%601> instead of an array.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> has similar behavior but returns a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> instead of an array.","pos":[0,138],"source":"<xref:System.Linq.Enumerable.ToList%2A> has similar behavior but returns a <xref:System.Collections.Generic.List%601> instead of an array."}]}],"pos":[727205,727651],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create an array from.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to create an array from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create an array from."}],"pos":[728352,728442],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[728499,728548],"yaml":true},{"content":"An array that contains the elements from the input sequence.","nodes":[{"pos":[0,60],"content":"An array that contains the elements from the input sequence.","nodes":[{"content":"An array that contains the elements from the input sequence.","pos":[0,60]}]}],"pos":[728601,728662],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[728825,728856],"yaml":true},{"content":"Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to specified key selector and element selector functions.","nodes":[{"pos":[0,208],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> according to specified key selector and element selector functions.","source":"Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to specified key selector and element selector functions."}],"pos":[730793,731002],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.","nodes":[{"pos":[0,309],"content":"The <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method uses the default equality comparer <ph id=\"ph2\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> to compare keys.","pos":[0,309],"source":"The <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys."}]}],"pos":[731013,731323],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from.","nodes":[{"pos":[0,143],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to create a <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph> from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from."}],"pos":[731696,731840],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[731919,731966],"yaml":true},{"content":"A transform function to produce a result element value from each element.","nodes":[{"pos":[0,73],"content":"A transform function to produce a result element value from each element.","nodes":[{"content":"A transform function to produce a result element value from each element.","pos":[0,73]}]}],"pos":[732053,732127],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[732184,732233],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[732267,732325],"yaml":true},{"content":"The type of the value returned by <code>elementSelector</code>.","nodes":[{"pos":[0,63],"content":"The type of the value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">elementSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the value returned by <code>elementSelector</code>."}],"pos":[732363,732427],"yaml":true},{"content":"A <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains values of type <code>TElement</code> selected from the input sequence.","nodes":[{"pos":[0,147],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph> that contains values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TElement</ph><ept id=\"p1\">&lt;/code&gt;</ept> selected from the input sequence.","source":"A <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains values of type <code>TElement</code> selected from the input sequence."}],"pos":[732523,732671],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.  \n  \n -or-  \n  \n <code>keySelector</code> produces a key that is `null`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,163],"content":"<ph id=\"ph1\">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces a key that is <ph id=\"ph2\">`null`</ph>.","source":"<code>keySelector</code> produces a key that is `null`."}],"pos":[732839,733009],"yaml":true},{"content":"<code>keySelector</code> produces duplicate keys for two elements.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces duplicate keys for two elements.","source":"<code>keySelector</code> produces duplicate keys for two elements."}],"pos":[733103,733170],"yaml":true},{"content":"Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function, a comparer, and an element selector function.","nodes":[{"pos":[0,234],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> according to a specified key selector function, a comparer, and an element selector function.","source":"Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function, a comparer, and an element selector function."}],"pos":[735332,735567],"yaml":true},{"content":"If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.","nodes":[{"pos":[0,145],"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.","source":"If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys."}],"pos":[735578,735724],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from.","nodes":[{"pos":[0,143],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to create a <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph> from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from."}],"pos":[736158,736302],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[736381,736428],"yaml":true},{"content":"A transform function to produce a result element value from each element.","nodes":[{"pos":[0,73],"content":"A transform function to produce a result element value from each element.","nodes":[{"content":"A transform function to produce a result element value from each element.","pos":[0,73]}]}],"pos":[736515,736589],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys."}],"pos":[736690,736778],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[736835,736884],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[736918,736976],"yaml":true},{"content":"The type of the value returned by <code>elementSelector</code>.","nodes":[{"pos":[0,63],"content":"The type of the value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">elementSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the value returned by <code>elementSelector</code>."}],"pos":[737014,737078],"yaml":true},{"content":"A <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains values of type <code>TElement</code> selected from the input sequence.","nodes":[{"pos":[0,147],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph> that contains values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TElement</ph><ept id=\"p1\">&lt;/code&gt;</ept> selected from the input sequence.","source":"A <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains values of type <code>TElement</code> selected from the input sequence."}],"pos":[737174,737322],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.  \n  \n -or-  \n  \n <code>keySelector</code> produces a key that is `null`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,163],"content":"<ph id=\"ph1\">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces a key that is <ph id=\"ph2\">`null`</ph>.","source":"<code>keySelector</code> produces a key that is `null`."}],"pos":[737490,737660],"yaml":true},{"content":"<code>keySelector</code> produces duplicate keys for two elements.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces duplicate keys for two elements.","source":"<code>keySelector</code> produces duplicate keys for two elements."}],"pos":[737754,737821],"yaml":true},{"content":"Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function.","nodes":[{"pos":[0,188],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> according to a specified key selector function.","source":"Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function."}],"pos":[739596,739785],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.","nodes":[{"pos":[0,272],"content":"The <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method uses the default equality comparer <ph id=\"ph2\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> to compare keys.","pos":[0,272],"source":"The <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys."}]}],"pos":[739796,740069],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from.","nodes":[{"pos":[0,143],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to create a <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph> from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from."}],"pos":[740975,741119],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[741198,741245],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[741302,741351],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[741385,741443],"yaml":true},{"content":"A <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains keys and values.","nodes":[{"pos":[0,93],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph> that contains keys and values.","source":"A <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains keys and values."}],"pos":[741538,741632],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.  \n  \n -or-  \n  \n <code>keySelector</code> produces a key that is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,131],"content":"<ph id=\"ph1\">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces a key that is <ph id=\"ph2\">`null`</ph>.","source":"<code>keySelector</code> produces a key that is `null`."}],"pos":[741800,741938],"yaml":true},{"content":"<code>keySelector</code> produces duplicate keys for two elements.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces duplicate keys for two elements.","source":"<code>keySelector</code> produces duplicate keys for two elements."}],"pos":[742032,742099],"yaml":true},{"content":"Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function and key comparer.","nodes":[{"pos":[0,205],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> according to a specified key selector function and key comparer.","source":"Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function and key comparer."}],"pos":[744099,744305],"yaml":true},{"content":"If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.","nodes":[{"pos":[0,145],"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.","source":"If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys."}],"pos":[744316,744462],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from.","nodes":[{"pos":[0,143],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to create a <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph> from.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from."}],"pos":[744846,744990],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[745069,745116],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys."}],"pos":[745217,745305],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[745362,745411],"yaml":true},{"content":"The type of the keys returned by <code>keySelector</code>.","nodes":[{"pos":[0,58],"content":"The type of the keys returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the keys returned by <code>keySelector</code>."}],"pos":[745445,745504],"yaml":true},{"content":"A <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains keys and values.","nodes":[{"pos":[0,93],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Dictionary`2\"&gt;&lt;/xref&gt;</ph> that contains keys and values.","source":"A <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains keys and values."}],"pos":[745599,745693],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.  \n  \n -or-  \n  \n <code>keySelector</code> produces a key that is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,131],"content":"<ph id=\"ph1\">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces a key that is <ph id=\"ph2\">`null`</ph>.","source":"<code>keySelector</code> produces a key that is `null`."}],"pos":[745861,745999],"yaml":true},{"content":"<code>keySelector</code> produces duplicate keys for two elements.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces duplicate keys for two elements.","source":"<code>keySelector</code> produces duplicate keys for two elements."}],"pos":[746093,746160],"yaml":true},{"content":"Creates a <xref href=\"System.Collections.Generic.List`1\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.","nodes":[{"pos":[0,135],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Collections.Generic.List`1\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>."}],"pos":[750532,750668],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns a <xref:System.Collections.Generic.List%601> that contains the query results. You can append this method to your query in order to obtain a cached copy of the query results.  \n  \n <xref:System.Linq.Enumerable.ToArray%2A> has similar behavior but returns an array instead of a <xref:System.Collections.Generic.List%601>.","nodes":[{"pos":[0,331],"content":"The <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns a <xref:System.Collections.Generic.List%601> that contains the query results. You can append this method to your query in order to obtain a cached copy of the query results.","nodes":[{"content":"The <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns a <xref:System.Collections.Generic.List%601> that contains the query results. You can append this method to your query in order to obtain a cached copy of the query results.","pos":[0,331],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method forces immediate query evaluation and returns a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains the query results.","pos":[0,235],"source":"The <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns a <xref:System.Collections.Generic.List%601> that contains the query results."},{"content":"You can append this method to your query in order to obtain a cached copy of the query results.","pos":[236,331]}]}]},{"pos":[338,477],"content":"<xref:System.Linq.Enumerable.ToArray%2A> has similar behavior but returns an array instead of a <xref:System.Collections.Generic.List%601>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> has similar behavior but returns an array instead of a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[0,139],"source":"<xref:System.Linq.Enumerable.ToArray%2A> has similar behavior but returns an array instead of a <xref:System.Collections.Generic.List%601>."}]}],"pos":[750679,751161],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.List`1\"></xref> from.","nodes":[{"pos":[0,138],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to create a <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> from.","source":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.List`1\"></xref> from."}],"pos":[751948,752087],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[752144,752193],"yaml":true},{"content":"A <xref href=\"System.Collections.Generic.List`1\"></xref> that contains elements from the input sequence.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.List`1\"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence.","source":"A <xref href=\"System.Collections.Generic.List`1\"></xref> that contains elements from the input sequence."}],"pos":[752277,752382],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[752544,752575],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Lookup`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to specified key selector and element selector functions.","nodes":[{"pos":[0,189],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Lookup`2\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> according to specified key selector and element selector functions.","source":"Creates a <xref href=\"System.Linq.Lookup`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to specified key selector and element selector functions."}],"pos":[754488,754678],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.  \n  \n The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.","nodes":[{"pos":[0,453],"content":"The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.","nodes":[{"content":"The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.","pos":[0,453],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.","pos":[0,294],"source":"The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.","pos":[295,453],"source":" A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values."}]}]},{"pos":[460,580],"content":"The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.","nodes":[{"content":"The default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.","pos":[0,120],"source":"The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys."}]}],"pos":[754689,755274],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Linq.Lookup`2\"></xref> from.","nodes":[{"pos":[0,125],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to create a <ph id=\"ph2\">&lt;xref href=\"System.Linq.Lookup`2\"&gt;&lt;/xref&gt;</ph> from.","source":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Linq.Lookup`2\"></xref> from."}],"pos":[756264,756390],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[756469,756516],"yaml":true},{"content":"A transform function to produce a result element value from each element.","nodes":[{"pos":[0,73],"content":"A transform function to produce a result element value from each element.","nodes":[{"content":"A transform function to produce a result element value from each element.","pos":[0,73]}]}],"pos":[756603,756677],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[756734,756783],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[756817,756875],"yaml":true},{"content":"The type of the value returned by <code>elementSelector</code>.","nodes":[{"pos":[0,63],"content":"The type of the value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">elementSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the value returned by <code>elementSelector</code>."}],"pos":[756913,756977],"yaml":true},{"content":"A <xref href=\"System.Linq.Lookup`2\"></xref> that contains values of type <code>TElement</code> selected from the input sequence.","nodes":[{"pos":[0,128],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Lookup`2\"&gt;&lt;/xref&gt;</ph> that contains values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TElement</ph><ept id=\"p1\">&lt;/code&gt;</ept> selected from the input sequence.","source":"A <xref href=\"System.Linq.Lookup`2\"></xref> that contains values of type <code>TElement</code> selected from the input sequence."}],"pos":[757042,757171],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`."}],"pos":[757335,757426],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Lookup`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function, a comparer and an element selector function.","nodes":[{"pos":[0,214],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Lookup`2\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> according to a specified key selector function, a comparer and an element selector function.","source":"Creates a <xref href=\"System.Linq.Lookup`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function, a comparer and an element selector function."}],"pos":[759564,759779],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.  \n  \n If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.","nodes":[{"pos":[0,513],"content":"The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.","nodes":[{"content":"The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.","pos":[0,513],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.","pos":[0,354],"source":"The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.","pos":[355,513],"source":" A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values."}]}]},{"pos":[520,665],"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.","source":"If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys."}],"pos":[759790,760460],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Linq.Lookup`2\"></xref> from.","nodes":[{"pos":[0,125],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to create a <ph id=\"ph2\">&lt;xref href=\"System.Linq.Lookup`2\"&gt;&lt;/xref&gt;</ph> from.","source":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Linq.Lookup`2\"></xref> from."}],"pos":[760872,760998],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[761077,761124],"yaml":true},{"content":"A transform function to produce a result element value from each element.","nodes":[{"pos":[0,73],"content":"A transform function to produce a result element value from each element.","nodes":[{"content":"A transform function to produce a result element value from each element.","pos":[0,73]}]}],"pos":[761211,761285],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys."}],"pos":[761386,761474],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[761531,761580],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[761614,761672],"yaml":true},{"content":"The type of the value returned by <code>elementSelector</code>.","nodes":[{"pos":[0,63],"content":"The type of the value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">elementSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the value returned by <code>elementSelector</code>."}],"pos":[761710,761774],"yaml":true},{"content":"A <xref href=\"System.Linq.Lookup`2\"></xref> that contains values of type <code>TElement</code> selected from the input sequence.","nodes":[{"pos":[0,128],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Lookup`2\"&gt;&lt;/xref&gt;</ph> that contains values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TElement</ph><ept id=\"p1\">&lt;/code&gt;</ept> selected from the input sequence.","source":"A <xref href=\"System.Linq.Lookup`2\"></xref> that contains values of type <code>TElement</code> selected from the input sequence."}],"pos":[761839,761968],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`."}],"pos":[762132,762223],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Lookup`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function.","nodes":[{"pos":[0,169],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Lookup`2\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> according to a specified key selector function.","source":"Creates a <xref href=\"System.Linq.Lookup`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function."}],"pos":[763974,764144],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.  \n  \n The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.","nodes":[{"pos":[0,416],"content":"The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.","nodes":[{"content":"The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.","pos":[0,416],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.","pos":[0,257],"source":"The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.","pos":[258,416],"source":" A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values."}]}]},{"pos":[423,543],"content":"The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.","nodes":[{"content":"The default equality comparer <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.","pos":[0,120],"source":"The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys."}]}],"pos":[764155,764703],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Linq.Lookup`2\"></xref> from.","nodes":[{"pos":[0,125],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to create a <ph id=\"ph2\">&lt;xref href=\"System.Linq.Lookup`2\"&gt;&lt;/xref&gt;</ph> from.","source":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Linq.Lookup`2\"></xref> from."}],"pos":[765004,765130],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[765209,765256],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[765313,765362],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[765396,765454],"yaml":true},{"content":"A <xref href=\"System.Linq.Lookup`2\"></xref> that contains keys and values.","nodes":[{"pos":[0,74],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Lookup`2\"&gt;&lt;/xref&gt;</ph> that contains keys and values.","source":"A <xref href=\"System.Linq.Lookup`2\"></xref> that contains keys and values."}],"pos":[765531,765606],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[765770,765829],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Lookup`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function and key comparer.","nodes":[{"pos":[0,186],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Lookup`2\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> according to a specified key selector function and key comparer.","source":"Creates a <xref href=\"System.Linq.Lookup`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function and key comparer."}],"pos":[767805,767992],"yaml":true},{"content":"The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> is different to a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.  \n  \n If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.","nodes":[{"pos":[0,479],"content":"The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> is different to a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.","nodes":[{"content":"The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> is different to a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.","pos":[0,479],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.","pos":[0,317],"source":"The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Linq.Lookup%602&gt;</ph> is different to a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.","pos":[318,479],"source":" A <xref:System.Linq.Lookup%602> is different to a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values."}]}]},{"pos":[486,631],"content":"If <ph id=\"ph1\">`comparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.","source":"If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys."}],"pos":[768003,768639],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Linq.Lookup`2\"></xref> from.","nodes":[{"pos":[0,125],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to create a <ph id=\"ph2\">&lt;xref href=\"System.Linq.Lookup`2\"&gt;&lt;/xref&gt;</ph> from.","source":"The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Linq.Lookup`2\"></xref> from."}],"pos":[769001,769127],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[769206,769253],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys."}],"pos":[769354,769442],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[769499,769548],"yaml":true},{"content":"The type of the key returned by <code>keySelector</code>.","nodes":[{"pos":[0,57],"content":"The type of the key returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by <code>keySelector</code>."}],"pos":[769582,769640],"yaml":true},{"content":"A <xref href=\"System.Linq.Lookup`2\"></xref> that contains keys and values.","nodes":[{"pos":[0,74],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Lookup`2\"&gt;&lt;/xref&gt;</ph> that contains keys and values.","source":"A <xref href=\"System.Linq.Lookup`2\"></xref> that contains keys and values."}],"pos":[769717,769792],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[769956,770015],"yaml":true},{"content":"Produces the set union of two sequences by using the default equality comparer.","nodes":[{"pos":[0,79],"content":"Produces the set union of two sequences by using the default equality comparer.","nodes":[{"content":"Produces the set union of two sequences by using the default equality comparer.","pos":[0,79]}]}],"pos":[771808,771888],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n This method excludes duplicates from the return set. This is different behavior to the <xref:System.Linq.Enumerable.Concat%2A> method, which returns all the elements in the input sequences including duplicates.  \n  \n The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.  \n  \n When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,653],"content":"This method excludes duplicates from the return set. This is different behavior to the <xref:System.Linq.Enumerable.Concat%2A> method, which returns all the elements in the input sequences including duplicates.","nodes":[{"content":"This method excludes duplicates from the return set. This is different behavior to the <xref:System.Linq.Enumerable.Concat%2A> method, which returns all the elements in the input sequences including duplicates.","pos":[0,210],"nodes":[{"content":"This method excludes duplicates from the return set.","pos":[0,52]},{"content":"This is different behavior to the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method, which returns all the elements in the input sequences including duplicates.","pos":[53,210],"source":" This is different behavior to the <xref:System.Linq.Enumerable.Concat%2A> method, which returns all the elements in the input sequences including duplicates."}]}]},{"pos":[660,1072],"content":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.","nodes":[{"content":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.","pos":[0,412],"nodes":[{"content":"The default equality comparer, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.","pos":[0,230],"source":"The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface."},{"content":"To compare a custom data type, you need to implement this interface and provide your own <ph id=\"ph1\">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.","pos":[231,412],"source":" To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type."}]}]},{"pos":[1079,1277],"content":"When the object returned by this method is enumerated, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumerates <ph id=\"ph2\">`first`</ph> and <ph id=\"ph3\">`second`</ph> in that order and yields each element that has not already been yielded.","source":"When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded."}],"pos":[771899,773185],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements form the first set for the union.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose distinct elements form the first set for the union.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements form the first set for the union."}],"pos":[775354,775477],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements form the second set for the union.","nodes":[{"pos":[0,123],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose distinct elements form the second set for the union.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements form the second set for the union."}],"pos":[775573,775697],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[775754,775803],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from both input sequences, excluding duplicates.","nodes":[{"pos":[0,140],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements from both input sequences, excluding duplicates.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from both input sequences, excluding duplicates."}],"pos":[775894,776035],"yaml":true},{"content":"<code>first</code> or <code>second</code> is `null`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>first</code> or <code>second</code> is `null`."}],"pos":[776196,776249],"yaml":true},{"content":"Produces the set union of two sequences by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.","nodes":[{"pos":[0,129],"content":"Produces the set union of two sequences by using a specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Produces the set union of two sequences by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>."}],"pos":[778254,778384],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.  \n  \n When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.  \n  \n The <xref:System.Linq.Enumerable.Concat%2A> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%2A> method returns all the elements in the input sequences including duplicates, whereas <xref:System.Linq.Enumerable.Union%2A> returns only unique values.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,592],"content":"If c<ph id=\"ph1\">`omparer`</ph> is <ph id=\"ph2\">`null`</ph>, the default equality comparer, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.","source":"If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values."},{"pos":[599,797],"content":"When the object returned by this method is enumerated, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumerates <ph id=\"ph2\">`first`</ph> and <ph id=\"ph3\">`second`</ph> in that order and yields each element that has not already been yielded.","source":"When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded."},{"pos":[804,1121],"content":"The <xref:System.Linq.Enumerable.Concat%2A> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%2A> method returns all the elements in the input sequences including duplicates, whereas <xref:System.Linq.Enumerable.Union%2A> returns only unique values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method differs from the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method because the <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method returns all the elements in the input sequences including duplicates, whereas <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> returns only unique values.","pos":[0,317],"source":"The <xref:System.Linq.Enumerable.Concat%2A> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%2A> method returns all the elements in the input sequences including duplicates, whereas <xref:System.Linq.Enumerable.Union%2A> returns only unique values."}]}],"pos":[778395,779525],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements form the first set for the union.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose distinct elements form the first set for the union.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements form the first set for the union."}],"pos":[781060,781183],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements form the second set for the union.","nodes":[{"pos":[0,123],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose distinct elements form the second set for the union.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements form the second set for the union."}],"pos":[781279,781403],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"The <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[781507,781598],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[781655,781704],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from both input sequences, excluding duplicates.","nodes":[{"pos":[0,140],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements from both input sequences, excluding duplicates.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from both input sequences, excluding duplicates."}],"pos":[781795,781936],"yaml":true},{"content":"<code>first</code> or <code>second</code> is `null`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>first</code> or <code>second</code> is `null`."}],"pos":[782097,782150],"yaml":true},{"content":"Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.","nodes":[{"pos":[0,119],"content":"Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.","nodes":[{"content":"Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.","pos":[0,119],"nodes":[{"content":"Filters a sequence of values based on a predicate.","pos":[0,50]},{"content":"Each element's index is used in the logic of the predicate function.","pos":[51,119]}]}]}],"pos":[783945,784065],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The first argument of `predicate` represents the element to test. The second argument represents the zero-based index of the element within `source`.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,592],"content":"The first argument of `predicate` represents the element to test. The second argument represents the zero-based index of the element within `source`.","nodes":[{"content":"The first argument of <ph id=\"ph1\">`predicate`</ph> represents the element to test.","pos":[0,65],"source":"The first argument of `predicate` represents the element to test."},{"content":"The second argument represents the zero-based index of the element within <ph id=\"ph1\">`source`</ph>.","pos":[66,149],"source":" The second argument represents the zero-based index of the element within `source`."}]}],"pos":[784076,784673],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to filter.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to filter.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to filter."}],"pos":[785577,785653],"yaml":true},{"content":"A function to test each source element for a condition; the second parameter of the function represents the index of the source element.","nodes":[{"pos":[0,136],"content":"A function to test each source element for a condition; the second parameter of the function represents the index of the source element.","nodes":[{"content":"A function to test each source element for a condition; the second parameter of the function represents the index of the source element.","pos":[0,136]}]}],"pos":[785753,785890],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[785947,785996],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements from the input sequence that satisfy the condition.","nodes":[{"pos":[0,139],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence that satisfy the condition.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements from the input sequence that satisfy the condition."}],"pos":[786087,786227],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[786388,786445],"yaml":true},{"content":"Filters a sequence of values based on a predicate.","nodes":[{"pos":[0,50],"content":"Filters a sequence of values based on a predicate.","nodes":[{"content":"Filters a sequence of values based on a predicate.","pos":[0,50]}]}],"pos":[788183,788234],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n In query expression syntax, a `where` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Where` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,766],"content":"In query expression syntax, a <ph id=\"ph1\">`where`</ph> (<ph id=\"ph2\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id=\"ph3\">`Where`</ph> (<ph id=\"ph4\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>.","source":"In query expression syntax, a `where` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Where` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>."}],"pos":[788245,789016],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to filter.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to filter.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to filter."}],"pos":[789840,789916],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[790003,790052],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[790109,790158],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements from the input sequence that satisfy the condition.","nodes":[{"pos":[0,139],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence that satisfy the condition.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements from the input sequence that satisfy the condition."}],"pos":[790249,790389],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[790550,790607],"yaml":true},{"content":"Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.","nodes":[{"pos":[0,113],"content":"Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.","nodes":[{"content":"Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.","pos":[0,113]}]}],"pos":[792573,792687],"yaml":true},{"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \n  \n The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.","nodes":[{"pos":[0,436],"content":"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].","nodes":[{"content":"This method is implemented by using deferred execution.","pos":[0,55]},{"content":"The immediate return value is an object that stores all the information that is required to perform the action.","pos":[56,167]},{"content":"The query represented by this method is not executed until the object is enumerated either by calling its <ph id=\"ph1\">`GetEnumerator`</ph> method directly or by using <ph id=\"ph2\">`foreach`</ph> in <ph id=\"ph3\">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id=\"ph4\">`For Each`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[168,436],"source":" The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."}]},{"pos":[443,813],"content":"The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.","nodes":[{"content":"The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.","pos":[0,370],"nodes":[{"content":"The method merges each element of the first sequence with an element that has the same index in the second sequence.","pos":[0,116]},{"content":"If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.","pos":[117,243]},{"content":"For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.","pos":[244,370]}]}]}],"pos":[792698,793516],"yaml":true,"extradata":"MT"},{"content":"The first sequence to merge.","nodes":[{"pos":[0,28],"content":"The first sequence to merge.","nodes":[{"content":"The first sequence to merge.","pos":[0,28]}]}],"pos":[794326,794355],"yaml":true},{"content":"The second sequence to merge.","nodes":[{"pos":[0,29],"content":"The second sequence to merge.","nodes":[{"content":"The second sequence to merge.","pos":[0,29]}]}],"pos":[794451,794481],"yaml":true},{"content":"A function that specifies how to merge the elements from the two sequences.","nodes":[{"pos":[0,75],"content":"A function that specifies how to merge the elements from the two sequences.","nodes":[{"content":"A function that specifies how to merge the elements from the two sequences.","pos":[0,75]}]}],"pos":[794573,794649],"yaml":true},{"content":"The type of the elements of the first input sequence.","nodes":[{"pos":[0,53],"content":"The type of the elements of the first input sequence.","nodes":[{"content":"The type of the elements of the first input sequence.","pos":[0,53]}]}],"pos":[794705,794759],"yaml":true},{"content":"The type of the elements of the second input sequence.","nodes":[{"pos":[0,54],"content":"The type of the elements of the second input sequence.","nodes":[{"content":"The type of the elements of the second input sequence.","pos":[0,54]}]}],"pos":[794796,794851],"yaml":true},{"content":"The type of the elements of the result sequence.","nodes":[{"pos":[0,48],"content":"The type of the elements of the result sequence.","nodes":[{"content":"The type of the elements of the result sequence.","pos":[0,48]}]}],"pos":[794888,794937],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains merged elements of two input sequences.","nodes":[{"pos":[0,118],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains merged elements of two input sequences.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains merged elements of two input sequences."}],"pos":[795028,795147],"yaml":true},{"content":"<code>first</code> or <code>second</code> is `null`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>first</code> or <code>second</code> is `null`."}],"pos":[795306,795359],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  id: Enumerable\n  children:\n  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.Empty``1\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Range(System.Int32,System.Int32)\n  - System.Linq.Enumerable.Repeat``1(``0,System.Int32)\n  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  langs:\n  - csharp\n  name: Enumerable\n  nameWithType: Enumerable\n  fullName: System.Linq.Enumerable\n  type: Class\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Provides a set of `static` (`Shared` in Visual Basic) methods for querying objects that implement <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.\n  remarks: \"The methods in this class provide an implementation of the standard query operators for querying data sources that implement <xref:System.Collections.Generic.IEnumerable%601>. The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.  \\n  \\n The majority of the methods in this class are defined as extension methods that extend <xref:System.Collections.Generic.IEnumerable%601>. This means they can be called like an instance method on any object that implements <xref:System.Collections.Generic.IEnumerable%601>.  \\n  \\n Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated. This is known as deferred execution. Methods that are used in a query that returns a singleton value execute and consume the target data immediately.\"\n  syntax:\n    content: public static class Enumerable\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  commentId: M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  id: Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.\n  remarks: \"The <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> method makes it simple to perform a calculation over a sequence of values. This method works by calling `func` one time for each element in `source`. Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`). The value of the `seed` parameter is used as the initial aggregate value. The result of `func` replaces the previous aggregated value. The final result of `func` is passed to `resultSelector` to obtain the final result of <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.  \\n  \\n To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and a result selector.  \\n  \\n [!code-csharp[System.Linq.Enumerable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#3)]\\n [!code-vb[System.Linq.Enumerable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#3)]\"\n  syntax:\n    content: public static TResult Aggregate<TSource,TAccumulate,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate,TSource,TAccumulate> func, Func<TAccumulate,TResult> resultSelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to aggregate over.\n    - id: seed\n      type: TAccumulate\n      description: The initial accumulator value.\n    - id: func\n      type: System.Func{TAccumulate,TSource,TAccumulate}\n      description: An accumulator function to be invoked on each element.\n    - id: resultSelector\n      type: System.Func{TAccumulate,TResult}\n      description: A function to transform the final accumulator value into the result value.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TAccumulate\n      description: The type of the accumulator value.\n    - id: TResult\n      description: The type of the resulting value.\n    return:\n      type: TResult\n      description: The transformed final accumulator value.\n  overload: System.Linq.Enumerable.Aggregate``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>func</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  commentId: M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  id: Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.\n  remarks: \"The <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> method makes it simple to perform a calculation over a sequence of values. This method works by calling `func` one time for each element in `source`. Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`). The value of the `seed` parameter is used as the initial aggregate value. The result of `func` replaces the previous aggregated value. <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> returns the final result of `func`.  \\n  \\n To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and use a seed value.  \\n  \\n [!code-csharp[System.Linq.Enumerable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#2)]\\n [!code-vb[System.Linq.Enumerable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#2)]\"\n  syntax:\n    content: public static TAccumulate Aggregate<TSource,TAccumulate> (this System.Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate,TSource,TAccumulate> func);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to aggregate over.\n    - id: seed\n      type: TAccumulate\n      description: The initial accumulator value.\n    - id: func\n      type: System.Func{TAccumulate,TSource,TAccumulate}\n      description: An accumulator function to be invoked on each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TAccumulate\n      description: The type of the accumulator value.\n    return:\n      type: TAccumulate\n      description: The final accumulator value.\n  overload: System.Linq.Enumerable.Aggregate``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>func</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  commentId: M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  id: Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  fullName: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Applies an accumulator function over a sequence.\n  remarks: \"The <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> method makes it simple to perform a calculation over a sequence of values. This method works by calling `func` one time for each element in `source` except the first one. Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`). The first element of `source` is used as the initial aggregate value. The result of `func` replaces the previous aggregated value. <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> returns the final result of `func`.  \\n  \\n This overload of the <xref:System.Linq.Enumerable.Aggregate%2A>methodisn't suitable for all casesbecause it uses the first element of `source` as the initial aggregate value. You should choose another overload if the return value should include only the elements of `source` that meet a certain condition. For example, this overload isn't reliableif you want to calculate the sum of the even numbers in `source`. The result will be incorrect if the first element is odd instead of even.  \\n  \\n To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.\"\n  example:\n  - \"The following code example demonstrates how to reverse the order of words in a string by using<xref:System.Linq.Enumerable.Aggregate%2A>.  \\n  \\n [!code-csharp[System.Linq.Enumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#1)]\\n [!code-vb[System.Linq.Enumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#1)]\"\n  syntax:\n    content: public static TSource Aggregate<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TSource,TSource> func);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to aggregate over.\n    - id: func\n      type: System.Func{TSource,TSource,TSource}\n      description: An accumulator function to be invoked on each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The final accumulator value.\n  overload: System.Linq.Enumerable.Aggregate``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>func</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether all elements of a sequence satisfy a condition.\n  remarks: \"> [!NOTE]\\n>  This method does not return all the elements of a collection. Instead, it determines whether all the elements of a collection satisfy a condition.  \\n  \\n The enumeration of `source` is stopped as soon as the result can be determined.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into All()` clause translates to an invocation of <xref:System.Linq.Enumerable.All%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.All%2A> to determine whether all the elements in a sequence satisfy a condition. Variable `allStartWithB` is true if all the pet names start with \\\"B\\\" or if the `pets` array is empty.  \\n  \\n [!code-csharp[System.Linq.Enumerable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#4)]\\n [!code-vb[System.Linq.Enumerable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#4)]  \\n  \\n The Boolean value that the <xref:System.Linq.Enumerable.All%2A> method returns is typically used in the predicate of a `where` clause (`Where` clause in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) or a direct call to the <xref:System.Linq.Enumerable.Where%2A> method. The following example demonstrates this use of the `All` method.  \\n  \\n [!code-csharp[System.Linq.Enumerable#129](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#129)]\\n [!code-vb[System.Linq.Enumerable#129](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#129)]\"\n  syntax:\n    content: public static bool All<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements to apply the predicate to.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, `false`.'\n  overload: System.Linq.Enumerable.All``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  id: Any``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Any<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether a sequence contains any elements.\n  remarks: \"> [!NOTE]\\n>  This method does not return any one element of a collection. Instead, it determines whether the collection contains any elements.  \\n  \\n The enumeration of `source` is stopped as soon as the result can be determined.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether a sequence contains any elements.  \\n  \\n [!code-csharp[System.Linq.Enumerable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#5)]\\n [!code-vb[System.Linq.Enumerable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#5)]  \\n  \\n The Boolean value that the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns is typically used in the predicate of a `where` clause (`Where` clause in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) or a direct call to the <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method. The following example demonstrates this use of the `Any` method.  \\n  \\n [!code-csharp[System.Linq.Enumerable#130](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#130)]\\n [!code-vb[System.Linq.Enumerable#130](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#130)]\"\n  syntax:\n    content: public static bool Any<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to check for emptiness.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the source sequence contains any elements; otherwise, `false`.'\n  overload: System.Linq.Enumerable.Any``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether any element of a sequence satisfies a condition.\n  remarks: \"> [!NOTE]\\n>  This method does not return any one element of a collection. Instead, it determines whether any elements of a collection satisfy a condition.  \\n  \\n The enumeration of `source` is stopped as soon as the result can be determined.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether any element in a sequence satisfies a condition.  \\n  \\n [!code-csharp[System.Linq.Enumerable#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#6)]\\n [!code-vb[System.Linq.Enumerable#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#6)]\"\n  syntax:\n    content: public static bool Any<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to apply the predicate to.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if any elements in the source sequence pass the test in the specified predicate; otherwise, `false`.'\n  overload: System.Linq.Enumerable.Any``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  commentId: M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  id: Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Append<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n  type: Method\n  assemblies:\n  - System.Linq\n  - netstandard\n  - System.Core\n  namespace: System.Linq\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Append<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, TSource element);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: ''\n    - id: element\n      type: TSource\n      description: ''\n    typeParameters:\n    - id: TSource\n      description: ''\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: ''\n  overload: System.Linq.Enumerable.Append``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  id: AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: AsEnumerable<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the input typed as <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.\n  remarks: \"The <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method has no effect other than to change the compile-time type of `source` from a type that implements <xref:System.Collections.Generic.IEnumerable%601> to <xref:System.Collections.Generic.IEnumerable%601> itself.  \\n  \\n <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> can be used to choose between query implementations when a sequence implements <xref:System.Collections.Generic.IEnumerable%601> but also has a different set of public query methods available. For example, given a generic class `Table` that implements <xref:System.Collections.Generic.IEnumerable%601> and has its own methods such as `Where`, `Select`, and `SelectMany`, a call to `Where` would invoke the public `Where` method of `Table`. A `Table` type that represents a database table could have a `Where` method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution. If remote execution is not desired, for example because the predicate invokes a local method, the <xref:System.Linq.Enumerable.AsEnumerable%2A> method can be used to hide the custom methods and instead make the standard query operators available.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to hide a type's custom `Where` method when the standard query operator implementation is desired.  \\n  \\n [!code-csharp[System.Linq.Enumerable#108](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#108)]\\n [!code-vb[System.Linq.Enumerable#108](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#108)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The sequence to type as <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The input sequence typed as <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.\n  overload: System.Linq.Enumerable.AsEnumerable``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  id: Average(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average(IEnumerable<Single>)\n  nameWithType: Enumerable.Average(IEnumerable<Single>)\n  fullName: Enumerable.Average(IEnumerable<Single>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Single\"></xref> values.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]\\n [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]\"\n  syntax:\n    content: public static float Average (this System.Collections.Generic.IEnumerable<float> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Single}\n      description: A sequence of <xref href=\"System.Single\"></xref> values to calculate the average of.\n    return:\n      type: System.Single\n      description: The average of the sequence of values.\n  overload: System.Linq.Enumerable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Single>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Single\"></xref> values.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]\\n [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]\"\n  syntax:\n    content: public static Nullable<float> Average (this System.Collections.Generic.IEnumerable<Nullable<float>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}\n      description: A sequence of nullable <xref href=\"System.Single\"></xref> values to calculate the average of.\n    return:\n      type: System.Nullable{System.Single}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.\n  overload: System.Linq.Enumerable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Int64\"></xref> values.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.  \\n  \\n [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]\\n [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]\"\n  syntax:\n    content: public static Nullable<double> Average (this System.Collections.Generic.IEnumerable<Nullable<long>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}\n      description: A sequence of nullable <xref href=\"System.Int64\"></xref> values to calculate the average of.\n    return:\n      type: System.Nullable{System.Double}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.\n  overload: System.Linq.Enumerable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Int32\"></xref> values.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]\\n [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]\"\n  syntax:\n    content: public static Nullable<double> Average (this System.Collections.Generic.IEnumerable<Nullable<int>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}\n      description: A sequence of nullable <xref href=\"System.Int32\"></xref> values to calculate the average of.\n    return:\n      type: System.Nullable{System.Double}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.\n  overload: System.Linq.Enumerable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Double>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Double\"></xref> values.\n  remarks: \"If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]\\n [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]\"\n  syntax:\n    content: public static Nullable<double> Average (this System.Collections.Generic.IEnumerable<Nullable<double>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}\n      description: A sequence of nullable <xref href=\"System.Double\"></xref> values to calculate the average of.\n    return:\n      type: System.Nullable{System.Double}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.\n  overload: System.Linq.Enumerable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  id: Average(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average(IEnumerable<Int64>)\n  nameWithType: Enumerable.Average(IEnumerable<Int64>)\n  fullName: Enumerable.Average(IEnumerable<Int64>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Int64\"></xref> values.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]\\n [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]\"\n  syntax:\n    content: public static double Average (this System.Collections.Generic.IEnumerable<long> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int64}\n      description: A sequence of <xref href=\"System.Int64\"></xref> values to calculate the average of.\n    return:\n      type: System.Double\n      description: The average of the sequence of values.\n  overload: System.Linq.Enumerable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  id: Average(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average(IEnumerable<Int32>)\n  nameWithType: Enumerable.Average(IEnumerable<Int32>)\n  fullName: Enumerable.Average(IEnumerable<Int32>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Int32\"></xref> values.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.  \\n  \\n [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]\\n [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]\"\n  syntax:\n    content: public static double Average (this System.Collections.Generic.IEnumerable<int> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int32}\n      description: A sequence of <xref href=\"System.Int32\"></xref> values to calculate the average of.\n    return:\n      type: System.Double\n      description: The average of the sequence of values.\n  overload: System.Linq.Enumerable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  id: Average(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average(IEnumerable<Double>)\n  nameWithType: Enumerable.Average(IEnumerable<Double>)\n  fullName: Enumerable.Average(IEnumerable<Double>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Double\"></xref> values.\n  remarks: \"If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]\\n [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]\"\n  syntax:\n    content: public static double Average (this System.Collections.Generic.IEnumerable<double> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Double}\n      description: A sequence of <xref href=\"System.Double\"></xref> values to calculate the average of.\n    return:\n      type: System.Double\n      description: The average of the sequence of values.\n  overload: System.Linq.Enumerable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  id: Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Average(IEnumerable<Decimal>)\n  fullName: Enumerable.Average(IEnumerable<Decimal>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Decimal\"></xref> values.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]\\n [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]\"\n  syntax:\n    content: public static decimal Average (this System.Collections.Generic.IEnumerable<decimal> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Decimal}\n      description: A sequence of <xref href=\"System.Decimal\"></xref> values to calculate the average of.\n    return:\n      type: System.Decimal\n      description: The average of the sequence of values.\n  overload: System.Linq.Enumerable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Decimal\"></xref> values.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]\\n [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]\"\n  syntax:\n    content: public static Nullable<decimal> Average (this System.Collections.Generic.IEnumerable<Nullable<decimal>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}\n      description: A sequence of nullable <xref href=\"System.Decimal\"></xref> values to calculate the average of.\n    return:\n      type: System.Nullable{System.Decimal}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.\n  overload: System.Linq.Enumerable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum of the elements in the sequence is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Int32\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]\\n [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]\"\n  syntax:\n    content: public static Nullable<double> Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<int>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Int32}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Double}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.\n  overload: System.Linq.Enumerable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Single\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]\\n [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]\"\n  syntax:\n    content: public static float Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,float> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Func{TSource,System.Single}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Single\n      description: The average of the sequence of values.\n  overload: System.Linq.Enumerable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Single\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]\\n [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]\"\n  syntax:\n    content: public static Nullable<float> Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<float>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Single}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Single}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.\n  overload: System.Linq.Enumerable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Int64\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]\\n [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]\"\n  syntax:\n    content: public static Nullable<double> Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<long>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Int64}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Double}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.\n  overload: System.Linq.Enumerable.Average``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Double\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]\\n [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]\"\n  syntax:\n    content: public static Nullable<double> Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<double>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Double}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Double}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.\n  overload: System.Linq.Enumerable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Decimal\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]\\n [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]\"\n  syntax:\n    content: public static Nullable<decimal> Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<decimal>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Decimal}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Decimal}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only values that are `null`.\n  overload: System.Linq.Enumerable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum of the elements in the sequence is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Int64\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.  \\n  \\n [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]\\n [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]\"\n  syntax:\n    content: public static double Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,long> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Func{TSource,System.Int64}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of source.\n    return:\n      type: System.Double\n      description: The average of the sequence of values.\n  overload: System.Linq.Enumerable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Int32\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.  \\n  \\n [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]\\n [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]\"\n  syntax:\n    content: public static double Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Func{TSource,System.Int32}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Double\n      description: The average of the sequence of values.\n  overload: System.Linq.Enumerable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Double\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]\\n [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]\"\n  syntax:\n    content: public static double Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,double> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Func{TSource,System.Double}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Double\n      description: The average of the sequence of values.\n  overload: System.Linq.Enumerable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Decimal\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]\\n [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]\"\n  syntax:\n    content: public static decimal Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,decimal> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values that are used to calculate an average.\n    - id: selector\n      type: System.Func{TSource,System.Decimal}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Decimal\n      description: The average of the sequence of values.\n  overload: System.Linq.Enumerable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum of the elements in the sequence is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  id: Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Casts the elements of an <xref href=\"System.Collections.IEnumerable\"></xref> to the specified type.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information. For example, <xref:System.Collections.ArrayList> does not implement <xref:System.Collections.Generic.IEnumerable%601>, but by calling <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> on the <xref:System.Collections.ArrayList> object, the standard query operators can then be used to query the sequence.  \\n  \\n If an element cannot be cast to type `TResult`, this method will throw an exception. To obtain only those elements that can be cast to type `TResult`, use the <xref:System.Linq.Enumerable.OfType%2A> method instead of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.  \\n  \\n In a query expression, an explicitly typed iteration variable translates to an invocation of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>. This example shows the syntax for an explicitly typed range variable.  \\n  \\n```csharp  \\nfrom int i in objects  \\n```  \\n  \\n```vb  \\nFrom i As Integer In objects  \\n```\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> to enable the use of the standard query operators on an <xref:System.Collections.ArrayList>.  \\n  \\n [!code-csharp[System.Linq.Enumerable#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#19)]\\n [!code-vb[System.Linq.Enumerable#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#19)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> Cast<TResult> (this System.Collections.IEnumerable source);\n    parameters:\n    - id: source\n      type: System.Collections.IEnumerable\n      description: The <xref href=\"System.Collections.IEnumerable\"></xref> that contains the elements to be cast to type <code>TResult</code>.\n    typeParameters:\n    - id: TResult\n      description: The type to cast the elements of <code>source</code> to.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains each element of the source sequence cast to the specified type.\n  overload: System.Linq.Enumerable.Cast``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: An element in the sequence cannot be cast to type <code>TResult</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Concatenates two sequences.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns all the original elements in the input sequences. The <xref:System.Linq.Enumerable.Union%2A> method returns only unique elements.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to concatenate two sequences.  \\n  \\n [!code-csharp[System.Linq.Enumerable#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#20)]\\n [!code-vb[System.Linq.Enumerable#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#20)]  \\n  \\n An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <xref:System.Linq.Enumerable.SelectMany%2A> method, passing it the identity selector function. The following example demonstrates this use of <xref:System.Linq.Enumerable.SelectMany%2A>.  \\n  \\n [!code-csharp[System.Linq.Enumerable#112](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#112)]\\n [!code-vb[System.Linq.Enumerable#112](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#112)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Concat<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The first sequence to concatenate.\n    - id: second\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The sequence to concatenate to the first sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the concatenated elements of the two input sequences.\n  overload: System.Linq.Enumerable.Concat``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>first</code> or <code>second</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  id: Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Contains<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether a sequence contains a specified element by using the default equality comparer.\n  remarks: \"If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, the `Contains` method in that implementation is invoked to obtain the result. Otherwise, this method determines whether `source` contains the specified element.  \\n  \\n Enumeration is terminated as soon as a matching element is found.  \\n  \\n Elements are compared to the specified value by using the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to determine whether an array contains a specific element.  \\n  \\n [!code-csharp[System.Linq.Enumerable#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#21)]\\n [!code-vb[System.Linq.Enumerable#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#21)]\"\n  syntax:\n    content: public static bool Contains<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, TSource value);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence in which to locate a value.\n    - id: value\n      type: TSource\n      description: The value to locate in the sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the source sequence contains an element that has the specified value; otherwise, `false`.'\n  overload: System.Linq.Enumerable.Contains``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  id: Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether a sequence contains a specified element by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.\n  remarks: \"Enumeration is terminated as soon as a matching element is found.  \\n  \\n If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements to the specified value.\"\n  example:\n  - \"The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Contains%2A> method.  \\n  \\n [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]\\n [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  \\n  \\n After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Contains%2A> method, as shown in the following example.  \\n  \\n [!code-csharp[CSLINQCustomComparer#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#6)]\\n [!code-vb[CSLINQCustomComparer#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#6)]\"\n  syntax:\n    content: public static bool Contains<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, TSource value, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence in which to locate a value.\n    - id: value\n      type: TSource\n      description: The value to locate in the sequence.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: An equality comparer to compare values.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the source sequence contains an element that has the specified value; otherwise, `false`.'\n  overload: System.Linq.Enumerable.Contains``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  id: Count``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Count<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the number of elements in a sequence.\n  remarks: \"If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements. Otherwise, this method determines the count.  \\n  \\n Use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.  \\n  \\n [!code-csharp[System.Linq.Enumerable#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#22)]\\n [!code-vb[System.Linq.Enumerable#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#22)]\"\n  syntax:\n    content: public static int Count<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence that contains elements to be counted.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int32\n      description: The number of elements in the input sequence.\n  overload: System.Linq.Enumerable.Count``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The number of elements in <code>source</code> is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns a number that represents how many elements in the specified sequence satisfy a condition.\n  remarks: \"If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements. Otherwise, this method determines the count.  \\n  \\n You should use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.  \\n  \\n [!code-csharp[System.Linq.Enumerable#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#23)]\\n [!code-vb[System.Linq.Enumerable#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#23)]\"\n  syntax:\n    content: public static int Count<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence that contains elements to be tested and counted.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int32\n      description: A number that represents how many elements in the sequence satisfy the condition in the predicate function.\n  overload: System.Linq.Enumerable.Count``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The number of elements in <code>source</code> is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  id: DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method and specify a default value. The first sequence is not empty and the second sequence is empty.  \\n  \\n [!code-csharp[System.Linq.Enumerable#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#26)]\\n [!code-vb[System.Linq.Enumerable#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#26)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, TSource defaultValue);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The sequence to return the specified value for if it is empty.\n    - id: defaultValue\n      type: TSource\n      description: The value to return if the sequence is empty.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <code>defaultValue</code> if <code>source</code> is empty; otherwise, <code>source</code>.\n  overload: System.Linq.Enumerable.DefaultIfEmpty``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  id: DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The default value for reference and nullable types is `null`.  \\n  \\n This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.\"\n  example:\n  - \"The following code examples demonstrate how to use <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to provide a default value in case the source sequence is empty.  \\n  \\n This example uses a non-empty sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#24)]\\n [!code-vb[System.Linq.Enumerable#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#24)]  \\n  \\n This example uses an empty sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#25)]\\n [!code-vb[System.Linq.Enumerable#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#25)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The sequence to return a default value for if it is empty.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> object that contains the default value for the <code>TSource</code> type if <code>source</code> is empty; otherwise, <code>source</code>.\n  overload: System.Linq.Enumerable.DefaultIfEmpty``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  id: Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Distinct<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns distinct elements from a sequence by using the default equality comparer to compare values.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values. It uses the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Distinct` clause translates to an invocation of <xref:System.Linq.Enumerable.Distinct%2A>.  \\n  \\n The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.IEquatable%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.  \\n  \\n For an example that uses <xref:System.Collections.Generic.IEqualityComparer%601>to define a custom comparer, see <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return distinct elements from a sequence of integers.  \\n  \\n [!code-csharp[System.Linq.Enumerable#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#27)]\\n [!code-vb[System.Linq.Enumerable#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#27)]  \\n  \\n If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in the class. The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.  \\n  \\n [!code-csharp[CSLINQEncapsulatedComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#1)]\\n [!code-vb[CSLINQEncapsulatedComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#1)]  \\n  \\n After you implement this interface, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.  \\n  \\n [!code-csharp[CSLINQEncapsulatedComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#5)]\\n [!code-vb[CSLINQEncapsulatedComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#5)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Distinct<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The sequence to remove duplicate elements from.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains distinct elements from the source sequence.\n  overload: System.Linq.Enumerable.Distinct``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns distinct elements from a sequence by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values. If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.\"\n  example:\n  - \"The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Distinct%2A> method.  \\n  \\n [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]\\n [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  \\n  \\n After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%2A> method, as shown in the following example.  \\n  \\n [!code-csharp[CSLINQCustomComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#5)]\\n [!code-vb[CSLINQCustomComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#5)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Distinct<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The sequence to remove duplicate elements from.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains distinct elements from the source sequence.\n  overload: System.Linq.Enumerable.Distinct``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  commentId: M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  id: ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the element at a specified index in a sequence.\n  remarks: \"If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index. Otherwise, this method obtains the specified element.  \\n  \\n This method throws an exception if `index` is out of range. To instead return a default value when the specified index is out of range, use the <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> method.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAt%2A> to return an element at a specific position.  \\n  \\n [!code-csharp[System.Linq.Enumerable#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#28)]\\n [!code-vb[System.Linq.Enumerable#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#28)]\"\n  syntax:\n    content: public static TSource ElementAt<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, int index);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from.\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to retrieve.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The element at the specified position in the source sequence.\n  overload: System.Linq.Enumerable.ElementAt``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than 0 or greater than or equal to the number of elements in <code>source</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  commentId: M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  id: ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the element at a specified index in a sequence or a default value if the index is out of range.\n  remarks: \"If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index. Otherwise, this method obtains the specified element.  \\n  \\n The default value for reference and nullable types is `null`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>. This example uses an index that is outside the bounds of the array.  \\n  \\n [!code-csharp[System.Linq.Enumerable#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#29)]\\n [!code-vb[System.Linq.Enumerable#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#29)]\"\n  syntax:\n    content: public static TSource ElementAtOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, int index);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from.\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to retrieve.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: '`default`(<code>TSource</code>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.'\n  overload: System.Linq.Enumerable.ElementAtOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Empty``1\n  commentId: M:System.Linq.Enumerable.Empty``1\n  id: Empty``1\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Empty<TResult>()\n  nameWithType: Enumerable.Empty<TResult>()\n  fullName: Enumerable.Empty<TResult>()\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns an empty <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that has the specified type argument.\n  remarks: \"The <xref:System.Linq.Enumerable.Empty%60%601> method caches an empty sequence of type `TResult`. When the object it returns is enumerated, it yields no elements.  \\n  \\n In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref:System.Collections.Generic.IEnumerable%601>. It can also be used to generate a neutral element for methods such as <xref:System.Linq.Enumerable.Union%2A>. See the Example section for an example of this use of <xref:System.Linq.Enumerable.Empty%60%601>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Empty%60%601> to generate an empty <xref:System.Collections.Generic.IEnumerable%601>.  \\n  \\n [!code-csharp[System.Linq.Enumerable#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#30)]\\n [!code-vb[System.Linq.Enumerable#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#30)]  \\n  \\n The following code example demonstrates a possible application of the <xref:System.Linq.Enumerable.Empty%60%601> method. The <xref:System.Linq.Enumerable.Aggregate%2A> method is applied to a collection of string arrays. The elements of each array in the collection are added to the resulting <xref:System.Collections.Generic.IEnumerable%601> only if that array contains four or more elements. <xref:System.Linq.Enumerable.Empty%2A> is used to generate the seed value for <xref:System.Linq.Enumerable.Aggregate%2A> because if no array in the collection has four or more elements, only the empty sequence is returned.  \\n  \\n [!code-csharp[System.Linq.Enumerable#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#31)]\\n [!code-vb[System.Linq.Enumerable#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#31)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> Empty<TResult> ();\n    parameters: []\n    typeParameters:\n    - id: TResult\n      description: The type to assign to the type parameter of the returned generic <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An empty <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose type argument is <code>TResult</code>.\n  overload: System.Linq.Enumerable.Empty``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Produces the set difference of two sequences by using the default equality comparer to compare values.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The set difference of two sets is defined as the members of the first set that do not appear in the second set.  \\n  \\n> [!NOTE]\\n>  This method returns those elements in `first` that do not appear in `second`. It does not also return those elements in `second` that do not appear in `first`.  \\n  \\n The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method to compare two sequences of numbers and return elements that appear only in the first sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#34)]\\n [!code-vb[System.Linq.Enumerable#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#34)]  \\n  \\n If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helperclass. The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.  \\n  \\n [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  \\n  \\n After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.  \\n  \\n [!code-csharp[CSLINQEncapsulatedComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#7)]\\n [!code-vb[CSLINQEncapsulatedComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#7)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Except<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that are not also in <code>second</code> will be returned.\n    - id: second\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence that contains the set difference of the elements of two sequences.\n  overload: System.Linq.Enumerable.Except``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>first</code> or <code>second</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Produces the set difference of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n  remarks: If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.\n  example:\n  - \"The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Except%2A> method.  \\n  \\n [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]\\n [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  \\n  \\n After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Except%2A> method, as shown in the following example.  \\n  \\n [!code-csharp[CSLINQCustomComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#7)]\\n [!code-vb[CSLINQCustomComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#7)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Except<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that are not also in <code>second</code> will be returned.\n    - id: second\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence that contains the set difference of the elements of two sequences.\n  overload: System.Linq.Enumerable.Except``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>first</code> or <code>second</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  id: First``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: First<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the first element of a sequence.\n  remarks: The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements. To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the first element of an array.  \\n  \\n [!code-csharp[System.Linq.Enumerable#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#35)]\\n [!code-vb[System.Linq.Enumerable#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#35)]\"\n  syntax:\n    content: public static TSource First<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the first element of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The first element in the specified sequence.\n  overload: System.Linq.Enumerable.First``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source sequence is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the first element in a sequence that satisfies a specified condition.\n  remarks: The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`. To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the first element of an array that satisfies a condition.  \\n  \\n [!code-csharp[System.Linq.Enumerable#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#36)]\\n [!code-vb[System.Linq.Enumerable#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#36)]\"\n  syntax:\n    content: public static TSource First<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The first element in the sequence that passes the test in the specified predicate function.\n  overload: System.Linq.Enumerable.First``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"No element satisfies the condition in <code>predicate</code>.  \\n  \\n -or-  \\n  \\n The source sequence is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.\n  remarks: The default value for reference and nullable types is `null`.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate. In the second call to the method, there is no element in the array that satisfies the condition.  \\n  \\n [!code-csharp[System.Linq.Enumerable#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#38)]\\n [!code-vb[System.Linq.Enumerable#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#38)]\"\n  syntax:\n    content: public static TSource FirstOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: '`default`(<code>TSource</code>) if <code>source</code> is empty or if no element passes the test specified by <code>predicate</code>; otherwise, the first element in <code>source</code> that passes the test specified by <code>predicate</code>.'\n  overload: System.Linq.Enumerable.FirstOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the first element of a sequence, or a default value if the sequence contains no elements.\n  remarks: \"The default value for reference and nullable types is `null`.  \\n  \\n The <xref:System.Linq.Enumerable.FirstOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.  \\n  \\n [!code-csharp[System.Linq.Enumerable#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#37)]\\n [!code-vb[System.Linq.Enumerable#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#37)]  \\n  \\n Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty. Then, call <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the first element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty. Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query has finished executing. The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.  \\n  \\n [!code-csharp[System.Linq.Enumerable#126](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#126)]\\n [!code-vb[System.Linq.Enumerable#126](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#126)]\"\n  syntax:\n    content: public static TSource FirstOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the first element of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: '`default`(<code>TSource</code>) if <code>source</code> is empty; otherwise, the first element in <code>source</code>.'\n  overload: System.Linq.Enumerable.FirstOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  id: GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.\n  remarks: In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> to group the projected elements of a sequence and then project a sequence of results of type `TResult`.  \\n  \\n [!code-csharp[System.Linq.Enumerable#125](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#125)]\\n [!code-vb[System.Linq.Enumerable#125](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#125)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract the key for each element.\n    - id: elementSelector\n      type: System.Func{TSource,TElement}\n      description: A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    - id: resultSelector\n      type: System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}\n      description: A function to create a result value from each group.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    - id: TElement\n      description: The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    - id: TResult\n      description: The type of the result value returned by <code>resultSelector</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key.\n  overload: System.Linq.Enumerable.GroupBy``4*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract the key for each element.\n    - id: elementSelector\n      type: System.Func{TSource,TElement}\n      description: A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    - id: resultSelector\n      type: System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}\n      description: A function to create a result value from each group.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys with.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    - id: TElement\n      description: The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    - id: TResult\n      description: The type of the result value returned by <code>resultSelector</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key.\n  overload: System.Linq.Enumerable.GroupBy``4*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.  \\n  \\n The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>. Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.  \\n  \\n The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to group the elements of a sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#39)]\\n [!code-vb[System.Linq.Enumerable#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#39)]  \\n  \\n In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>. The translation of the query expression in the following example is equivalent to the query in the example above.  \\n  \\n [!code-csharp[System.Linq.Enumerable#122](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#122)]\\n [!code-vb[System.Linq.Enumerable#122](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#122)]  \\n  \\n> [!NOTE]\\n>  In a [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method.\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract the key for each element.\n    - id: elementSelector\n      type: System.Func{TSource,TElement}\n      description: A function to map each source element to an element in the <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    - id: TElement\n      description: The type of the elements in the <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{TKey,TElement}}\n      description: An <code>IEnumerable<IGrouping<TKey, TElement>></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a collection of objects of type <code>TElement</code> and a key.\n  overload: System.Linq.Enumerable.GroupBy``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n> [!NOTE]\\n>  For examples of `GroupBy`, see the following topics.  \\n>   \\n>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  \\n> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  \\n> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  \\n  \\n The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.  \\n  \\n The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>. Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.  \\n  \\n If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.  \\n  \\n If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.  \\n  \\n In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>. For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract the key for each element.\n    - id: elementSelector\n      type: System.Func{TSource,TElement}\n      description: A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    - id: TElement\n      description: The type of the elements in the <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{TKey,TElement}}\n      description: An <code>IEnumerable<IGrouping<TKey, TElement>></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a collection of objects of type <code>TElement</code> and a key.\n  overload: System.Linq.Enumerable.GroupBy``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.\n  remarks: In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> to group the elements of a sequence and project a sequence of results of type `TResult`.  \\n  \\n [!code-csharp[System.Linq.Enumerable#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#15)]\\n [!code-vb[System.Linq.Enumerable#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#15)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource,TKey,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult> resultSelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract the key for each element.\n    - id: resultSelector\n      type: System.Func{TKey,System.Collections.Generic.IEnumerable{TSource},TResult}\n      description: A function to create a result value from each group.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    - id: TResult\n      description: The type of the result value returned by <code>resultSelector</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key.\n  overload: System.Linq.Enumerable.GroupBy``3*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource,TKey,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract the key for each element.\n    - id: resultSelector\n      type: System.Func{TKey,System.Collections.Generic.IEnumerable{TSource},TResult}\n      description: A function to create a result value from each group.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys with.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    - id: TResult\n      description: The type of the result value returned by <code>resultSelector</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key.\n  overload: System.Linq.Enumerable.GroupBy``3*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n> [!NOTE]\\n>  For examples of `GroupBy`, see the following topics.  \\n>   \\n>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  \\n> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  \\n> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  \\n  \\n The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.  \\n  \\n The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>. Elements in a grouping are yielded in the order they appear in `source`.  \\n  \\n The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.  \\n  \\n In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>. For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract the key for each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{TKey,TSource}}\n      description: An <code>IEnumerable<IGrouping<TKey, TSource>></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a sequence of objects and a key.\n  overload: System.Linq.Enumerable.GroupBy``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n> [!NOTE]\\n>  For examples of `GroupBy`, see the following topics.  \\n>   \\n>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  \\n> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  \\n> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  \\n  \\n The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered. An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.  \\n  \\n The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>. Elements in a grouping are yielded in the order they appear in `source`.  \\n  \\n If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.  \\n  \\n If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.  \\n  \\n In query expression syntax, a `group by` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group By Into` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>. For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract the key for each element.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{TKey,TSource}}\n      description: An <code>IEnumerable<IGrouping<TKey, TSource>></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a collection of objects and a key.\n  overload: System.Linq.Enumerable.GroupBy``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  id: GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.  \\n  \\n <xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`. `GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.  \\n  \\n> [!NOTE]\\n>  If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.  \\n  \\n The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element. This differs from the <xref:System.Linq.Enumerable.Join%2A> method in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.  \\n  \\n `GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.  \\n  \\n <xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms. However, this method does implement a superset of inner joins and left outer joins. Both of these operations can be written in terms of a grouped join. See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: outer\n      type: System.Collections.Generic.IEnumerable{TOuter}\n      description: The first sequence to join.\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{TInner}\n      description: The sequence to join to the first sequence.\n    - id: outerKeySelector\n      type: System.Func{TOuter,TKey}\n      description: A function to extract the join key from each element of the first sequence.\n    - id: innerKeySelector\n      type: System.Func{TInner,TKey}\n      description: A function to extract the join key from each element of the second sequence.\n    - id: resultSelector\n      type: System.Func{TOuter,System.Collections.Generic.IEnumerable{TInner},TResult}\n      description: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to hash and compare keys.\n    typeParameters:\n    - id: TOuter\n      description: The type of the elements of the first sequence.\n    - id: TInner\n      description: The type of the elements of the second sequence.\n    - id: TKey\n      description: The type of the keys returned by the key selector functions.\n    - id: TResult\n      description: The type of the result elements.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements of type <code>TResult</code> that are obtained by performing a grouped join on two sequences.\n  overload: System.Linq.Enumerable.GroupJoin``4*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  id: GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.  \\n  \\n <xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`. `GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.  \\n  \\n> [!NOTE]\\n>  If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.  \\n  \\n The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element. This differs from the <xref:System.Linq.Enumerable.Join%2A> method, in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.  \\n  \\n `GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.  \\n  \\n <xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms. However, this method does implement a superset of inner joins and left outer joins. Both of these operations can be written in terms of a grouped join. See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).  \\n  \\n In query expression syntax, a `join … into` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Group Join` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupJoin%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> to perform a grouped join on two sequences.  \\n  \\n [!code-csharp[System.Linq.Enumerable#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#40)]\\n [!code-vb[System.Linq.Enumerable#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#40)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector);\n    parameters:\n    - id: outer\n      type: System.Collections.Generic.IEnumerable{TOuter}\n      description: The first sequence to join.\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{TInner}\n      description: The sequence to join to the first sequence.\n    - id: outerKeySelector\n      type: System.Func{TOuter,TKey}\n      description: A function to extract the join key from each element of the first sequence.\n    - id: innerKeySelector\n      type: System.Func{TInner,TKey}\n      description: A function to extract the join key from each element of the second sequence.\n    - id: resultSelector\n      type: System.Func{TOuter,System.Collections.Generic.IEnumerable{TInner},TResult}\n      description: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.\n    typeParameters:\n    - id: TOuter\n      description: The type of the elements of the first sequence.\n    - id: TInner\n      description: The type of the elements of the second sequence.\n    - id: TKey\n      description: The type of the keys returned by the key selector functions.\n    - id: TResult\n      description: The type of the result elements.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements of type <code>TResult</code> that are obtained by performing a grouped join on two sequences.\n  overload: System.Linq.Enumerable.GroupJoin``4*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Produces the set intersection of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.  \\n  \\n When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`.  \\n  \\n If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.\"\n  example:\n  - \"The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Intersect%2A> method.  \\n  \\n [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]\\n [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  \\n  \\n After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Intersect%2A> method, as shown in the following example.  \\n  \\n [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]\\n [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  \\n[!code-csharp[CSLINQCustomComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#3)]\\n[!code-vb[CSLINQCustomComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#3)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Intersect<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in <code>second</code> will be returned.\n    - id: second\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in the first sequence will be returned.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence that contains the elements that form the set intersection of two sequences.\n  overload: System.Linq.Enumerable.Intersect``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>first</code> or <code>second</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Produces the set intersection of two sequences by using the default equality comparer to compare values.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.  \\n  \\n When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`.  \\n  \\n The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the elements that appear in each of two sequences of integers.  \\n  \\n [!code-csharp[System.Linq.Enumerable#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#41)]\\n [!code-vb[System.Linq.Enumerable#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#41)]  \\n  \\n If you want to compare sequences of objects of a custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helper class. The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.  \\n  \\n [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  \\n  \\n After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Intersect%2A> method, as shown in the following example.  \\n  \\n [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  \\n[!code-csharp[CSLINQEncapsulatedComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#3)]\\n[!code-vb[CSLINQEncapsulatedComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#3)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Intersect<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in <code>second</code> will be returned.\n    - id: second\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in the first sequence will be returned.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence that contains the elements that form the set intersection of two sequences.\n  overload: System.Linq.Enumerable.Intersect``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>first</code> or <code>second</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  id: Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.  \\n  \\n A join refers to the operation of correlating the elements of two sources of information based on a common key. <xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call. This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.  \\n  \\n <xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.  \\n  \\n In query expression syntax, a `join` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Join` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.Join%2A>.  \\n  \\n In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin. 'Inner' means that only elements that have a match in the other sequence are included in the results. An 'equijoin' is a join in which the keys are compared for equality. A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method. See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> to perform an inner join of two sequences based on a common key.  \\n  \\n [!code-csharp[System.Linq.Enumerable#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#42)]\\n [!code-vb[System.Linq.Enumerable#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#42)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,TInner,TResult> resultSelector);\n    parameters:\n    - id: outer\n      type: System.Collections.Generic.IEnumerable{TOuter}\n      description: The first sequence to join.\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{TInner}\n      description: The sequence to join to the first sequence.\n    - id: outerKeySelector\n      type: System.Func{TOuter,TKey}\n      description: A function to extract the join key from each element of the first sequence.\n    - id: innerKeySelector\n      type: System.Func{TInner,TKey}\n      description: A function to extract the join key from each element of the second sequence.\n    - id: resultSelector\n      type: System.Func{TOuter,TInner,TResult}\n      description: A function to create a result element from two matching elements.\n    typeParameters:\n    - id: TOuter\n      description: The type of the elements of the first sequence.\n    - id: TInner\n      description: The type of the elements of the second sequence.\n    - id: TKey\n      description: The type of the keys returned by the key selector functions.\n    - id: TResult\n      description: The type of the result elements.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that has elements of type <code>TResult</code> that are obtained by performing an inner join on two sequences.\n  overload: System.Linq.Enumerable.Join``4*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  id: Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Correlates the elements of two sequences based on matching keys. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.  \\n  \\n A join refers to the operation of correlating the elements of two sources of information based on a common key. <xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call. This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.  \\n  \\n <xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.  \\n  \\n In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin. 'Inner' means that only elements that have a match in the other sequence are included in the results. An 'equijoin' is a join in which the keys are compared for equality. A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method. See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,TInner,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: outer\n      type: System.Collections.Generic.IEnumerable{TOuter}\n      description: The first sequence to join.\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{TInner}\n      description: The sequence to join to the first sequence.\n    - id: outerKeySelector\n      type: System.Func{TOuter,TKey}\n      description: A function to extract the join key from each element of the first sequence.\n    - id: innerKeySelector\n      type: System.Func{TInner,TKey}\n      description: A function to extract the join key from each element of the second sequence.\n    - id: resultSelector\n      type: System.Func{TOuter,TInner,TResult}\n      description: A function to create a result element from two matching elements.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to hash and compare keys.\n    typeParameters:\n    - id: TOuter\n      description: The type of the elements of the first sequence.\n    - id: TInner\n      description: The type of the elements of the second sequence.\n    - id: TKey\n      description: The type of the keys returned by the key selector functions.\n    - id: TResult\n      description: The type of the result elements.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that has elements of type <code>TResult</code> that are obtained by performing an inner join on two sequences.\n  overload: System.Linq.Enumerable.Join``4*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  id: Last``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Last<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the last element of a sequence.\n  remarks: The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements. To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the last element of an array.  \\n  \\n [!code-csharp[System.Linq.Enumerable#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#43)]\\n [!code-vb[System.Linq.Enumerable#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#43)]\"\n  syntax:\n    content: public static TSource Last<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the last element of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The value at the last position in the source sequence.\n  overload: System.Linq.Enumerable.Last``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source sequence is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the last element of a sequence that satisfies a specified condition.\n  remarks: The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`. To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the last element of an array that satisfies a condition.  \\n  \\n [!code-csharp[System.Linq.Enumerable#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#44)]\\n [!code-vb[System.Linq.Enumerable#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#44)]\"\n  syntax:\n    content: public static TSource Last<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The last element in the sequence that passes the test in the specified predicate function.\n  overload: System.Linq.Enumerable.Last``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"No element satisfies the condition in <code>predicate</code>.  \\n  \\n -or-  \\n  \\n The source sequence is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  id: LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: LastOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the last element of a sequence, or a default value if the sequence contains no elements.\n  remarks: \"The default value for reference and nullable types is `null`.  \\n  \\n The <xref:System.Linq.Enumerable.LastOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.  \\n  \\n [!code-csharp[System.Linq.Enumerable#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#45)]\\n [!code-vb[System.Linq.Enumerable#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#45)]  \\n  \\n Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty. Then, call <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the last element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty. Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query has finished executing. The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.  \\n  \\n [!code-csharp[System.Linq.Enumerable#127](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#127)]\\n [!code-vb[System.Linq.Enumerable#127](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#127)]\"\n  syntax:\n    content: public static TSource LastOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the last element of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: '`default`(<code>TSource</code>) if the source sequence is empty; otherwise, the last element in the <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.'\n  overload: System.Linq.Enumerable.LastOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.\n  remarks: The default value for reference and nullable types is `null`.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate. In the second call to the method, there is no element in the sequence that satisfies the condition.  \\n  \\n [!code-csharp[System.Linq.Enumerable#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#46)]\\n [!code-vb[System.Linq.Enumerable#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#46)]\"\n  syntax:\n    content: public static TSource LastOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return an element from.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: '`default`(<code>TSource</code>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.'\n  overload: System.Linq.Enumerable.LastOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns an <xref href=\"System.Int64\"></xref> that represents how many elements in a sequence satisfy a condition.\n  remarks: \"Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.  \\n  \\n [!code-csharp[System.Linq.Enumerable#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#48)]\\n [!code-vb[System.Linq.Enumerable#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#48)]\"\n  syntax:\n    content: public static long LongCount<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements to be counted.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int64\n      description: A number that represents how many elements in the sequence satisfy the condition in the predicate function.\n  overload: System.Linq.Enumerable.LongCount``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The number of matching elements exceeds <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  id: LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: LongCount<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns an <xref href=\"System.Int64\"></xref> that represents the total number of elements in a sequence.\n  remarks: \"Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.  \\n  \\n [!code-csharp[System.Linq.Enumerable#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#47)]\\n [!code-vb[System.Linq.Enumerable#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#47)]\"\n  syntax:\n    content: public static long LongCount<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements to be counted.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int64\n      description: The number of elements in the source sequence.\n  overload: System.Linq.Enumerable.LongCount``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The number of elements exceeds <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Single>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the maximum value in a sequence of nullable <xref href=\"System.Single\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]\\n [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]\"\n  syntax:\n    content: public static Nullable<float> Max (this System.Collections.Generic.IEnumerable<Nullable<float>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}\n      description: A sequence of nullable <xref href=\"System.Single\"></xref> values to determine the maximum value of.\n    return:\n      type: System.Nullable{System.Single}\n      description: A value of type <code>Nullable<Single></code> in C# or <code>Nullable(Of Single)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  id: Max(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max(IEnumerable<Int32>)\n  nameWithType: Enumerable.Max(IEnumerable<Int32>)\n  fullName: Enumerable.Max(IEnumerable<Int32>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the maximum value in a sequence of <xref href=\"System.Int32\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]\\n [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]\"\n  syntax:\n    content: public static int Max (this System.Collections.Generic.IEnumerable<int> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int32}\n      description: A sequence of <xref href=\"System.Int32\"></xref> values to determine the maximum value of.\n    return:\n      type: System.Int32\n      description: The maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the maximum value in a sequence of nullable <xref href=\"System.Int64\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]\\n [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]\"\n  syntax:\n    content: public static Nullable<long> Max (this System.Collections.Generic.IEnumerable<Nullable<long>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}\n      description: A sequence of nullable <xref href=\"System.Int64\"></xref> values to determine the maximum value of.\n    return:\n      type: System.Nullable{System.Int64}\n      description: A value of type <code>Nullable<Int64></code> in C# or <code>Nullable(Of Int64)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  id: Max(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max(IEnumerable<Single>)\n  nameWithType: Enumerable.Max(IEnumerable<Single>)\n  fullName: Enumerable.Max(IEnumerable<Single>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the maximum value in a sequence of <xref href=\"System.Single\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]\\n [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]\"\n  syntax:\n    content: public static float Max (this System.Collections.Generic.IEnumerable<float> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Single}\n      description: A sequence of <xref href=\"System.Single\"></xref> values to determine the maximum value of.\n    return:\n      type: System.Single\n      description: The maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the maximum value in a sequence of nullable <xref href=\"System.Int32\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]\\n [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]\"\n  syntax:\n    content: public static Nullable<int> Max (this System.Collections.Generic.IEnumerable<Nullable<int>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}\n      description: A sequence of nullable <xref href=\"System.Int32\"></xref> values to determine the maximum value of.\n    return:\n      type: System.Nullable{System.Int32}\n      description: A value of type <code>Nullable<Int32></code> in C# or <code>Nullable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  id: Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Max(IEnumerable<Decimal>)\n  fullName: Enumerable.Max(IEnumerable<Decimal>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the maximum value in a sequence of <xref href=\"System.Decimal\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]\\n [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]\"\n  syntax:\n    content: public static decimal Max (this System.Collections.Generic.IEnumerable<decimal> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Decimal}\n      description: A sequence of <xref href=\"System.Decimal\"></xref> values to determine the maximum value of.\n    return:\n      type: System.Decimal\n      description: The maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the maximum value in a sequence of nullable <xref href=\"System.Decimal\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]\\n [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]\"\n  syntax:\n    content: public static Nullable<decimal> Max (this System.Collections.Generic.IEnumerable<Nullable<decimal>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}\n      description: A sequence of nullable <xref href=\"System.Decimal\"></xref> values to determine the maximum value of.\n    return:\n      type: System.Nullable{System.Decimal}\n      description: A value of type <code>Nullable<Decimal></code> in C# or <code>Nullable(Of Decimal)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  id: Max(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max(IEnumerable<Int64>)\n  nameWithType: Enumerable.Max(IEnumerable<Int64>)\n  fullName: Enumerable.Max(IEnumerable<Int64>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the maximum value in a sequence of <xref href=\"System.Int64\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]\\n [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]\"\n  syntax:\n    content: public static long Max (this System.Collections.Generic.IEnumerable<long> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int64}\n      description: A sequence of <xref href=\"System.Int64\"></xref> values to determine the maximum value of.\n    return:\n      type: System.Int64\n      description: The maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  id: Max(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max(IEnumerable<Double>)\n  nameWithType: Enumerable.Max(IEnumerable<Double>)\n  fullName: Enumerable.Max(IEnumerable<Double>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the maximum value in a sequence of <xref href=\"System.Double\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]\\n [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]\"\n  syntax:\n    content: public static double Max (this System.Collections.Generic.IEnumerable<double> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Double}\n      description: A sequence of <xref href=\"System.Double\"></xref> values to determine the maximum value of.\n    return:\n      type: System.Double\n      description: The maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Double>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the maximum value in a sequence of nullable <xref href=\"System.Double\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]\\n [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]\"\n  syntax:\n    content: public static Nullable<double> Max (this System.Collections.Generic.IEnumerable<Nullable<double>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}\n      description: A sequence of nullable <xref href=\"System.Double\"></xref> values to determine the maximum value of.\n    return:\n      type: System.Nullable{System.Double}\n      description: A value of type <code>Nullable<Double></code> in C# or <code>Nullable(Of Double)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.\n  remarks: \"If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values. Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]\\n [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]\"\n  syntax:\n    content: public static TResult Max<TSource,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TResult> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the maximum value of.\n    - id: selector\n      type: System.Func{TSource,TResult}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TResult\n      description: The type of the value returned by <code>selector</code>.\n    return:\n      type: TResult\n      description: The maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Single\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]\\n [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]\"\n  syntax:\n    content: public static float Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,float> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the maximum value of.\n    - id: selector\n      type: System.Func{TSource,System.Single}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Single\n      description: The maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Single\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]\\n [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]\"\n  syntax:\n    content: public static Nullable<float> Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<float>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the maximum value of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Single}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Single}\n      description: The value of type <code>Nullable<Single></code> in C# or <code>Nullable(Of Single)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Int64\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]\\n [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]\"\n  syntax:\n    content: public static Nullable<long> Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<long>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the maximum value of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Int64}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Int64}\n      description: The value of type <code>Nullable<Int64></code> in C# or <code>Nullable(Of Int64)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Int32\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]\\n [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]\"\n  syntax:\n    content: public static Nullable<int> Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<int>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the maximum value of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Int32}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Int32}\n      description: The value of type <code>Nullable<Int32></code> in C# or <code>Nullable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Double\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]\\n [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]\"\n  syntax:\n    content: public static Nullable<double> Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<double>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the maximum value of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Double}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Double}\n      description: The value of type <code>Nullable<Double></code> in C# or <code>Nullable(Of Double)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Int64\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]\\n [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]\"\n  syntax:\n    content: public static long Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,long> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the maximum value of.\n    - id: selector\n      type: System.Func{TSource,System.Int64}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int64\n      description: The maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Int32\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.  \\n  \\n [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]\\n [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]\"\n  syntax:\n    content: public static int Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the maximum value of.\n    - id: selector\n      type: System.Func{TSource,System.Int32}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int32\n      description: The maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Double\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]\\n [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]\"\n  syntax:\n    content: public static double Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,double> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the maximum value of.\n    - id: selector\n      type: System.Func{TSource,System.Double}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Double\n      description: The maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Decimal\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]\\n [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]\"\n  syntax:\n    content: public static decimal Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,decimal> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the maximum value of.\n    - id: selector\n      type: System.Func{TSource,System.Decimal}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Decimal\n      description: The maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the maximum value in a generic sequence.\n  remarks: \"If type `TSource` implements <xref:System.IComparable%601>, the <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method uses that implementation to compare values. Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.  \\n  \\n If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this method returns `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the maximum value in a sequence of <xref:System.IComparable%601> objects.  \\n  \\n [!code-csharp[System.Linq.Enumerable#57](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#57)]\\n [!code-vb[System.Linq.Enumerable#57](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#57)]\"\n  syntax:\n    content: public static TSource Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the maximum value of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Decimal\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]\\n [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]\"\n  syntax:\n    content: public static Nullable<decimal> Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<decimal>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the maximum value of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Decimal}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Decimal}\n      description: The value of type <code>Nullable<Decimal></code> in C# or <code>Nullable(Of Decimal)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the maximum value in the sequence.\n  overload: System.Linq.Enumerable.Max``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the minimum value in a sequence of nullable <xref href=\"System.Int64\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]\\n [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]\"\n  syntax:\n    content: public static Nullable<long> Min (this System.Collections.Generic.IEnumerable<Nullable<long>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}\n      description: A sequence of nullable <xref href=\"System.Int64\"></xref> values to determine the minimum value of.\n    return:\n      type: System.Nullable{System.Int64}\n      description: A value of type <code>Nullable<Int64></code> in C# or <code>Nullable(Of Int64)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the minimum value in a sequence of nullable <xref href=\"System.Int32\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]\\n [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]\"\n  syntax:\n    content: public static Nullable<int> Min (this System.Collections.Generic.IEnumerable<Nullable<int>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}\n      description: A sequence of nullable <xref href=\"System.Int32\"></xref> values to determine the minimum value of.\n    return:\n      type: System.Nullable{System.Int32}\n      description: A value of type <code>Nullable<Int32></code> in C# or <code>Nullable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  id: Min(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min(IEnumerable<Single>)\n  nameWithType: Enumerable.Min(IEnumerable<Single>)\n  fullName: Enumerable.Min(IEnumerable<Single>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the minimum value in a sequence of <xref href=\"System.Single\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]\\n [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]\"\n  syntax:\n    content: public static float Min (this System.Collections.Generic.IEnumerable<float> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Single}\n      description: A sequence of <xref href=\"System.Single\"></xref> values to determine the minimum value of.\n    return:\n      type: System.Single\n      description: The minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Single>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the minimum value in a sequence of nullable <xref href=\"System.Single\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]\\n [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]\"\n  syntax:\n    content: public static Nullable<float> Min (this System.Collections.Generic.IEnumerable<Nullable<float>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}\n      description: A sequence of nullable <xref href=\"System.Single\"></xref> values to determine the minimum value of.\n    return:\n      type: System.Nullable{System.Single}\n      description: A value of type <code>Nullable<Single></code> in C# or <code>Nullable(Of Single)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Double>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the minimum value in a sequence of nullable <xref href=\"System.Double\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]\\n [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]\"\n  syntax:\n    content: public static Nullable<double> Min (this System.Collections.Generic.IEnumerable<Nullable<double>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}\n      description: A sequence of nullable <xref href=\"System.Double\"></xref> values to determine the minimum value of.\n    return:\n      type: System.Nullable{System.Double}\n      description: A value of type <code>Nullable<Double></code> in C# or <code>Nullable(Of Double)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  id: Min(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min(IEnumerable<Double>)\n  nameWithType: Enumerable.Min(IEnumerable<Double>)\n  fullName: Enumerable.Min(IEnumerable<Double>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the minimum value in a sequence of <xref href=\"System.Double\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]\\n [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]\"\n  syntax:\n    content: public static double Min (this System.Collections.Generic.IEnumerable<double> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Double}\n      description: A sequence of <xref href=\"System.Double\"></xref> values to determine the minimum value of.\n    return:\n      type: System.Double\n      description: The minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  id: Min(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min(IEnumerable<Int64>)\n  nameWithType: Enumerable.Min(IEnumerable<Int64>)\n  fullName: Enumerable.Min(IEnumerable<Int64>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the minimum value in a sequence of <xref href=\"System.Int64\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]\\n [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]\"\n  syntax:\n    content: public static long Min (this System.Collections.Generic.IEnumerable<long> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int64}\n      description: A sequence of <xref href=\"System.Int64\"></xref> values to determine the minimum value of.\n    return:\n      type: System.Int64\n      description: The minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  id: Min(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min(IEnumerable<Int32>)\n  nameWithType: Enumerable.Min(IEnumerable<Int32>)\n  fullName: Enumerable.Min(IEnumerable<Int32>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the minimum value in a sequence of <xref href=\"System.Int32\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]\\n [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]\"\n  syntax:\n    content: public static int Min (this System.Collections.Generic.IEnumerable<int> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int32}\n      description: A sequence of <xref href=\"System.Int32\"></xref> values to determine the minimum value of.\n    return:\n      type: System.Int32\n      description: The minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the minimum value in a sequence of nullable <xref href=\"System.Decimal\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n If the source sequence is empty or contains only values that are `null`, this function returns `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]\\n [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]\"\n  syntax:\n    content: public static Nullable<decimal> Min (this System.Collections.Generic.IEnumerable<Nullable<decimal>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}\n      description: A sequence of nullable <xref href=\"System.Decimal\"></xref> values to determine the minimum value of.\n    return:\n      type: System.Nullable{System.Decimal}\n      description: A value of type <code>Nullable<Decimal></code> in C# or <code>Nullable(Of Decimal)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  id: Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Min(IEnumerable<Decimal>)\n  fullName: Enumerable.Min(IEnumerable<Decimal>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the minimum value in a sequence of <xref href=\"System.Decimal\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]\\n [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]\"\n  syntax:\n    content: public static decimal Min (this System.Collections.Generic.IEnumerable<decimal> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Decimal}\n      description: A sequence of <xref href=\"System.Decimal\"></xref> values to determine the minimum value of.\n    return:\n      type: System.Decimal\n      description: The minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.\n  remarks: \"If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values. Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]\\n [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]\"\n  syntax:\n    content: public static TResult Min<TSource,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TResult> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the minimum value of.\n    - id: selector\n      type: System.Func{TSource,TResult}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TResult\n      description: The type of the value returned by <code>selector</code>.\n    return:\n      type: TResult\n      description: The minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Single\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]\\n [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]\"\n  syntax:\n    content: public static float Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,float> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the minimum value of.\n    - id: selector\n      type: System.Func{TSource,System.Single}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Single\n      description: The minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Single\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]\\n [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]\"\n  syntax:\n    content: public static Nullable<float> Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<float>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the minimum value of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Single}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Single}\n      description: The value of type <code>Nullable<Single></code> in C# or <code>Nullable(Of Single)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Int64\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]\\n [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]\"\n  syntax:\n    content: public static Nullable<long> Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<long>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the minimum value of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Int64}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Int64}\n      description: The value of type <code>Nullable<Int64></code> in C# or <code>Nullable(Of Int64)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Int32\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of source into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]\\n [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]\"\n  syntax:\n    content: public static Nullable<int> Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<int>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the minimum value of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Int32}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Int32}\n      description: The value of type <code>Nullable<Int32></code> in C# or <code>Nullable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Double\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]\\n [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]\"\n  syntax:\n    content: public static Nullable<double> Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<double>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the minimum value of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Double}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Double}\n      description: The value of type <code>Nullable<Double></code> in C# or <code>Nullable(Of Double)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Int64\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]\\n [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]\"\n  syntax:\n    content: public static long Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,long> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the minimum value of.\n    - id: selector\n      type: System.Func{TSource,System.Int64}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int64\n      description: The minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Int32\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.  \\n  \\n [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]\\n [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]\"\n  syntax:\n    content: public static int Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the minimum value of.\n    - id: selector\n      type: System.Func{TSource,System.Int32}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int32\n      description: The minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Double\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]\\n [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]\"\n  syntax:\n    content: public static double Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,double> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the minimum value of.\n    - id: selector\n      type: System.Func{TSource,System.Double}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Double\n      description: The minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Decimal\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]\\n [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]\"\n  syntax:\n    content: public static decimal Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,decimal> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the minimum value of.\n    - id: selector\n      type: System.Func{TSource,System.Decimal}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Decimal\n      description: The minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the minimum value in a generic sequence.\n  remarks: \"If type `TSource` implements <xref:System.IComparable%601>, this method uses that implementation to compare values. Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.  \\n  \\n If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this function returns `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the minimum value in a sequence of <xref:System.IComparable%601> objects.  \\n  \\n [!code-csharp[System.Linq.Enumerable#67](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#67)]\\n [!code-vb[System.Linq.Enumerable#67](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#67)]\"\n  syntax:\n    content: public static TSource Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the minimum value of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Decimal\"></xref> value.\n  remarks: \"The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]\\n [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]\"\n  syntax:\n    content: public static Nullable<decimal> Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<decimal>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to determine the minimum value of.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Decimal}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Decimal}\n      description: The value of type <code>Nullable<Decimal></code> in C# or <code>Nullable(Of Decimal)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that corresponds to the minimum value in the sequence.\n  overload: System.Linq.Enumerable.Min``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  id: OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Filters the elements of an <xref href=\"System.Collections.IEnumerable\"></xref> based on a specified type.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> method returns only those elements in `source` that can be cast to type `TResult`. To instead receive an exception if an element cannot be cast to type `TResult`, use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.  \\n  \\n This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref:System.Collections.ArrayList>. This is because <xref:System.Linq.Enumerable.OfType%2A> extends the type <xref:System.Collections.IEnumerable>. <xref:System.Linq.Enumerable.OfType%2A> cannot only be applied to collections that are based on the parameterized <xref:System.Collections.Generic.IEnumerable%601> type, but collections that are based on the non-parameterized <xref:System.Collections.IEnumerable> type also.  \\n  \\n By applying <xref:System.Linq.Enumerable.OfType%2A> to a collection that implements <xref:System.Collections.IEnumerable>, you gain the ability to query the collection by using the standard query operators. For example, specifying a type argument of <xref:System.Object> to <xref:System.Linq.Enumerable.OfType%2A> would return an object of type `IEnumerable<Object>` in C# or `IEnumerable(Of Object)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], to which the standard query operators can be applied.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.OfType%2A> to filter the elements of an <xref:System.Collections.IEnumerable>.  \\n  \\n [!code-csharp[System.Linq.Enumerable#69](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#69)]\\n [!code-vb[System.Linq.Enumerable#69](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#69)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> OfType<TResult> (this System.Collections.IEnumerable source);\n    parameters:\n    - id: source\n      type: System.Collections.IEnumerable\n      description: The <xref href=\"System.Collections.IEnumerable\"></xref> whose elements to filter.\n    typeParameters:\n    - id: TResult\n      description: The type to filter the elements of the sequence on.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements from the input sequence of type <code>TResult</code>.\n  overload: System.Linq.Enumerable.OfType``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Sorts the elements of a sequence in ascending order according to a key.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \\n  \\n Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method. These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence. `ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.  \\n  \\n> [!NOTE]\\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \\n  \\n This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.  \\n  \\n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.  \\n  \\n In query expression syntax, an `orderby` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Order By` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderBy%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to sort the elements of a sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#70](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#70)]\\n [!code-vb[System.Linq.Enumerable#70](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#70)]\"\n  syntax:\n    content: public static System.Linq.IOrderedEnumerable<TSource> OrderBy<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to order.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from an element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedEnumerable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted according to a key.\n  overload: System.Linq.Enumerable.OrderBy``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Sorts the elements of a sequence in ascending order by using a specified comparer.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \\n  \\n Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method. These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence. `ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.  \\n  \\n> [!NOTE]\\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \\n  \\n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.  \\n  \\n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.\"\n  syntax:\n    content: public static System.Linq.IOrderedEnumerable<TSource> OrderBy<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to order.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from an element.\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedEnumerable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted according to a key.\n  overload: System.Linq.Enumerable.OrderBy``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Sorts the elements of a sequence in descending order by using a specified comparer.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \\n  \\n Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method. These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence. `ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.  \\n  \\n> [!NOTE]\\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \\n  \\n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.  \\n  \\n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.  \\n  \\n [!code-csharp[System.Linq.Enumerable#71](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#71)]\\n [!code-vb[System.Linq.Enumerable#71](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#71)]\"\n  syntax:\n    content: public static System.Linq.IOrderedEnumerable<TSource> OrderByDescending<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to order.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from an element.\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedEnumerable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted in descending order according to a key.\n  overload: System.Linq.Enumerable.OrderByDescending``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Sorts the elements of a sequence in descending order according to a key.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \\n  \\n For an example of this method, see <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.  \\n  \\n Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method. These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence. `ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.  \\n  \\n> [!NOTE]\\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \\n  \\n This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.  \\n  \\n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.  \\n  \\n In query expression syntax, an `orderby descending` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Order By Descending` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderByDescending%2A>.\"\n  syntax:\n    content: public static System.Linq.IOrderedEnumerable<TSource> OrderByDescending<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to order.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from an element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedEnumerable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted in descending order according to a key.\n  overload: System.Linq.Enumerable.OrderByDescending``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  commentId: M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  id: Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Prepend<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n  type: Method\n  assemblies:\n  - System.Linq\n  - netstandard\n  - System.Core\n  namespace: System.Linq\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Prepend<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, TSource element);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: ''\n    - id: element\n      type: TSource\n      description: ''\n    typeParameters:\n    - id: TSource\n      description: ''\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: ''\n  overload: System.Linq.Enumerable.Prepend``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Range(System.Int32,System.Int32)\n  commentId: M:System.Linq.Enumerable.Range(System.Int32,System.Int32)\n  id: Range(System.Int32,System.Int32)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Range(Int32, Int32)\n  nameWithType: Enumerable.Range(Int32, Int32)\n  fullName: Enumerable.Range(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Generates a sequence of integral numbers within a specified range.\n  remarks: This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Range%2A> to generate a sequence of values.  \\n  \\n [!code-csharp[System.Linq.Enumerable#72](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#72)]\\n [!code-vb[System.Linq.Enumerable#72](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#72)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<int> Range (int start, int count);\n    parameters:\n    - id: start\n      type: System.Int32\n      description: The value of the first integer in the sequence.\n    - id: count\n      type: System.Int32\n      description: The number of sequential integers to generate.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Int32}\n      description: An <code>IEnumerable<Int32></code> in C# or <code>IEnumerable(Of Int32)</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] that contains a range of sequential integral numbers.\n  overload: System.Linq.Enumerable.Range*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>start</code> + <code>count</code> -1 is larger than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Repeat``1(``0,System.Int32)\n  commentId: M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)\n  id: Repeat``1(``0,System.Int32)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Repeat<TResult>(TResult, Int32)\n  nameWithType: Enumerable.Repeat<TResult>(TResult, Int32)\n  fullName: Enumerable.Repeat<TResult>(TResult, Int32)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Generates a sequence that contains one repeated value.\n  remarks: This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Repeat%2A> to generate a sequence of a repeated value.  \\n  \\n [!code-csharp[System.Linq.Enumerable#73](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#73)]\\n [!code-vb[System.Linq.Enumerable#73](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#73)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> Repeat<TResult> (TResult element, int count);\n    parameters:\n    - id: element\n      type: TResult\n      description: The value to be repeated.\n    - id: count\n      type: System.Int32\n      description: The number of times to repeat the value in the generated sequence.\n    typeParameters:\n    - id: TResult\n      description: The type of the value to be repeated in the result sequence.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains a repeated value.\n  overload: System.Linq.Enumerable.Repeat``1*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>count</code> is less than 0.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  id: Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Reverse<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Inverts the order of the elements in a sequence.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n Unlike <xref:System.Linq.Enumerable.OrderBy%2A>, this sorting method does not consider the actual values themselves in determining the order. Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Reverse%2A> to reverse the order of elements in an array.  \\n  \\n [!code-csharp[System.Linq.Enumerable#74](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#74)]\\n [!code-vb[System.Linq.Enumerable#74](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#74)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Reverse<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to reverse.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence whose elements correspond to those of the input sequence in reverse order.\n  overload: System.Linq.Enumerable.Reverse``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  id: Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Projects each element of a sequence into a new form by incorporating the element's index.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The first argument to `selector` represents the element to process. The second argument to `selector` represents the zero-based index of that element in the source sequence. This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example. It can also be useful if you want to retrieve the index of one or more elements.  \\n  \\n This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`. If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually. In such a situation, it might be better for your query to return a single coalesced sequence of values. To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>. Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> to project over a sequence of values and use the index of each element.  \\n  \\n [!code-csharp[System.Linq.Enumerable#76](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#76)]\\n [!code-vb[System.Linq.Enumerable#76](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#76)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> Select<TSource,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int,TResult> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to invoke a transform function on.\n    - id: selector\n      type: System.Func{TSource,System.Int32,TResult}\n      description: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TResult\n      description: The type of the value returned by <code>selector</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the transform function on each element of <code>source</code>.\n  overload: System.Linq.Enumerable.Select``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Projects each element of a sequence into a new form.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`. If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually. In such a situation, it might be better for your query to return a single coalesced sequence of values. To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>. Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.  \\n  \\n In query expression syntax, a `select` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Select` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.Select%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to project over a sequence of values.  \\n  \\n [!code-csharp[System.Linq.Enumerable#75](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#75)]\\n [!code-vb[System.Linq.Enumerable#75](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#75)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> Select<TSource,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TResult> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to invoke a transform function on.\n    - id: selector\n      type: System.Func{TSource,TResult}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TResult\n      description: The type of the value returned by <code>selector</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the transform function on each element of <code>source</code>.\n  overload: System.Linq.Enumerable.Select``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  id: SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>. See the Example section for a code example. If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>. Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.  \\n  \\n In query expression syntax, each `from` clause ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `From` clause ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to `Select`.  \\n  \\n [!code-csharp[System.Linq.Enumerable#124](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#124)]\\n [!code-vb[System.Linq.Enumerable#124](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#124)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource,TCollection,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource,TCollection,TResult> resultSelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to project.\n    - id: collectionSelector\n      type: System.Func{TSource,System.Collections.Generic.IEnumerable{TCollection}}\n      description: A transform function to apply to each element of the input sequence.\n    - id: resultSelector\n      type: System.Func{TSource,TCollection,TResult}\n      description: A transform function to apply to each element of the intermediate sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TCollection\n      description: The type of the intermediate elements collected by <code>collectionSelector</code>.\n    - id: TResult\n      description: The type of the elements of the resulting sequence.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the one-to-many transform function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding source element to a result element.\n  overload: System.Linq.Enumerable.SelectMany``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  id: SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>. See the Example section for a code example. If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>. Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource,TCollection,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int,System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource,TCollection,TResult> resultSelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to project.\n    - id: collectionSelector\n      type: System.Func{TSource,System.Int32,System.Collections.Generic.IEnumerable{TCollection}}\n      description: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\n    - id: resultSelector\n      type: System.Func{TSource,TCollection,TResult}\n      description: A transform function to apply to each element of the intermediate sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TCollection\n      description: The type of the intermediate elements collected by <code>collectionSelector</code>.\n    - id: TResult\n      description: The type of the elements of the resulting sequence.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the one-to-many transform function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding source element to a result element.\n  overload: System.Linq.Enumerable.SelectMany``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  id: SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and flattens the resulting sequences into one sequence.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object. That is, for each element of `source`, `selector` is invoked and a sequence of values is returned. <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it. For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In query expression syntax, each `from` clause ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `From` clause ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array.  \\n  \\n [!code-csharp[System.Linq.Enumerable#77](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#77)]\\n [!code-vb[System.Linq.Enumerable#77](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#77)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,System.Collections.Generic.IEnumerable<TResult>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to project.\n    - id: selector\n      type: System.Func{TSource,System.Collections.Generic.IEnumerable{TResult}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TResult\n      description: The type of the elements of the sequence returned by <code>selector</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.\n  overload: System.Linq.Enumerable.SelectMany``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  id: SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object. That is, for each element of `source`, `selector` is invoked and a sequence of values is returned. <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it. For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The first argument to `selector` represents the element to process. The second argument to `selector` represents the zero-based index of that element in the source sequence. This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example. It can also be useful if you want to retrieve the index of one or more elements.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array and use the index of each outer element.  \\n  \\n [!code-csharp[System.Linq.Enumerable#78](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#78)]\\n [!code-vb[System.Linq.Enumerable#78](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#78)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int,System.Collections.Generic.IEnumerable<TResult>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values to project.\n    - id: selector\n      type: System.Func{TSource,System.Int32,System.Collections.Generic.IEnumerable{TResult}}\n      description: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TResult\n      description: The type of the elements of the sequence returned by <code>selector</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.\n  overload: System.Linq.Enumerable.SelectMany``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.\n  remarks: The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>. The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.\n  example:\n  - \"The following code examples demonstrate how to use <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine whether two sequences are equal. In the first two examples, the method determines whether the compared sequences contain references to the same objects. In the third and fourth examples, the method compares the actual data of the objects within the sequences.  \\n  \\n In this example the sequences are equal.  \\n  \\n [!code-csharp[System.Linq.Enumerable#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#32)]\\n [!code-vb[System.Linq.Enumerable#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#32)]  \\n  \\n The following code example compares two sequences that are not equal. Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.  \\n  \\n [!code-csharp[System.Linq.Enumerable#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#33)]\\n [!code-vb[System.Linq.Enumerable#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#33)]  \\n  \\n If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in your class. The following code example shows how to implement this interface in a helper class and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.  \\n  \\n [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  \\n  \\n After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.  \\n  \\n [!code-csharp[CSLINQEncapsulatedComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#8)]\\n [!code-vb[CSLINQEncapsulatedComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#8)]\"\n  syntax:\n    content: public static bool SequenceEqual<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to compare to <code>second</code>.\n    - id: second\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to compare to the first sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Boolean\n      description: '`true` if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, `false`.'\n  overload: System.Linq.Enumerable.SequenceEqual``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>first</code> or <code>second</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether two sequences are equal by comparing their elements by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.\n  remarks: The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <xref:System.Collections.Generic.IEqualityComparer%601>. If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements.\n  example:\n  - \"The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method.  \\n  \\n [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]\\n [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  \\n  \\n After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method, as shown in the following example.  \\n  \\n [!code-csharp[CSLINQCustomComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#8)]\\n [!code-vb[CSLINQCustomComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#8)]\"\n  syntax:\n    content: public static bool SequenceEqual<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to compare to <code>second</code>.\n    - id: second\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to compare to the first sequence.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to use to compare elements.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Boolean\n      description: '`true` if the two source sequences are of equal length and their corresponding elements compare equal according to <code>comparer</code>; otherwise, `false`.'\n  overload: System.Linq.Enumerable.SequenceEqual``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>first</code> or <code>second</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.\n  remarks: The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if the input sequence contains no matching element. To instead return `null` when no matching element is found, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.  \\n  \\n [!code-csharp[System.Linq.Enumerable#81](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#81)]\\n [!code-vb[System.Linq.Enumerable#81](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#81)]  \\n  \\n The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> throws an exception when the sequence does not contain exactly one element that satisfies the condition.  \\n  \\n [!code-csharp[System.Linq.Enumerable#82](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#82)]\\n [!code-vb[System.Linq.Enumerable#82](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#82)]\"\n  syntax:\n    content: public static TSource Single<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return a single element from.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test an element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The single element of the input sequence that satisfies a condition.\n  overload: System.Linq.Enumerable.Single``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"No element satisfies the condition in <code>predicate</code>.  \\n  \\n -or-  \\n  \\n More than one element satisfies the condition in <code>predicate</code>.  \\n  \\n -or-  \\n  \\n The source sequence is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  id: Single``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Single<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.\n  remarks: The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if the input sequence is empty. To instead return `null` when the input sequence is empty, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.  \\n  \\n [!code-csharp[System.Linq.Enumerable#79](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#79)]\\n [!code-vb[System.Linq.Enumerable#79](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#79)]  \\n  \\n The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> throws an exception when the sequence does not contain exactly one element.  \\n  \\n [!code-csharp[System.Linq.Enumerable#80](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#80)]\\n [!code-vb[System.Linq.Enumerable#80](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#80)]\"\n  syntax:\n    content: public static TSource Single<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the single element of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The single element of the input sequence.\n  overload: System.Linq.Enumerable.Single``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The input sequence contains more than one element.  \\n  \\n -or-  \\n  \\n The input sequence is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  id: SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.\n  remarks: \"The default value for reference and nullable types is `null`.  \\n  \\n The <xref:System.Linq.Enumerable.SingleOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.  \\n  \\n [!code-csharp[System.Linq.Enumerable#83](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#83)]\\n [!code-vb[System.Linq.Enumerable#83](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#83)]  \\n  \\n The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns a default value when the sequence does not contain exactly one element.  \\n  \\n [!code-csharp[System.Linq.Enumerable#84](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#84)]\\n [!code-vb[System.Linq.Enumerable#84](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#84)]  \\n  \\n Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty. Then, call <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the element. The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty. Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query has finished executing. The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.  \\n  \\n [!code-csharp[System.Linq.Enumerable#128](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#128)]\\n [!code-vb[System.Linq.Enumerable#128](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#128)]\"\n  syntax:\n    content: public static TSource SingleOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return the single element of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The single element of the input sequence, or `default`(<code>TSource</code>) if the sequence contains no elements.\n  overload: System.Linq.Enumerable.SingleOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The input sequence contains more than one element.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.\n  remarks: The default value for reference and nullable types is `null`.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.  \\n  \\n [!code-csharp[System.Linq.Enumerable#85](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#85)]\\n [!code-vb[System.Linq.Enumerable#85](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#85)]  \\n  \\n The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> returns a default value when the sequence does not contain exactly one element that satisfies the condition.  \\n  \\n [!code-csharp[System.Linq.Enumerable#86](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#86)]\\n [!code-vb[System.Linq.Enumerable#86](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#86)]\"\n  syntax:\n    content: public static TSource SingleOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return a single element from.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test an element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The single element of the input sequence that satisfies the condition, or `default`(<code>TSource</code>) if no such element is found.\n  overload: System.Linq.Enumerable.SingleOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  commentId: M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  id: Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Skip<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Bypasses a specified number of elements in a sequence and then returns the remaining elements.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n If `source` contains fewer than `count` elements, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned. If `count` is less than or equal to zero, all elements of `source` are yielded.  \\n  \\n The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements. Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Skip` clause translates to an invocation of <xref:System.Linq.Enumerable.Skip%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Skip%2A> to skip a specified number of elements in a sorted array and return the remaining elements.  \\n  \\n [!code-csharp[System.Linq.Enumerable#87](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#87)]\\n [!code-vb[System.Linq.Enumerable#87](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#87)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Skip<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, int count);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return elements from.\n    - id: count\n      type: System.Int32\n      description: The number of elements to skip before returning the remaining elements.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements that occur after the specified index in the input sequence.\n  overload: System.Linq.Enumerable.Skip``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  commentId: M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  id: SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  type: Method\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> SkipLast<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, int count);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    typeParameters:\n    - id: TSource\n      description: ''\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: ''\n  overload: System.Linq.Enumerable.SkipLast``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.\n  remarks: \"The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n This method tests each element of `source` by using `predicate` and skips the element if the result is `true`. After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.  \\n  \\n If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.  \\n  \\n The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements. Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition is true.  \\n  \\n [!code-csharp[System.Linq.Enumerable#88](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#88)]\\n [!code-vb[System.Linq.Enumerable#88](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#88)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> SkipWhile<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return elements from.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.\n  overload: System.Linq.Enumerable.SkipWhile``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  id: SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and skips the element if the result is `true`. After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.  \\n  \\n If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.  \\n  \\n The first argument of `predicate` represents the element to test. The second argument represents the zero-based index of the element within `source`.  \\n  \\n The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements. Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition that depends on the element's index is true.  \\n  \\n [!code-csharp[System.Linq.Enumerable#89](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#89)]\\n [!code-vb[System.Linq.Enumerable#89](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#89)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> SkipWhile<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to return elements from.\n    - id: predicate\n      type: System.Func{TSource,System.Int32,System.Boolean}\n      description: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.\n  overload: System.Linq.Enumerable.SkipWhile``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of nullable <xref href=\"System.Int32\"></xref> values.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n The result does not include values that are `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]\\n [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]\"\n  syntax:\n    content: public static Nullable<int> Sum (this System.Collections.Generic.IEnumerable<Nullable<int>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}\n      description: A sequence of nullable <xref href=\"System.Int32\"></xref> values to calculate the sum of.\n    return:\n      type: System.Nullable{System.Int32}\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Enumerable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of nullable <xref href=\"System.Single\"></xref> values.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n The result does not include values that are `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]\\n [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]\"\n  syntax:\n    content: public static Nullable<float> Sum (this System.Collections.Generic.IEnumerable<Nullable<float>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}\n      description: A sequence of nullable <xref href=\"System.Single\"></xref> values to calculate the sum of.\n    return:\n      type: System.Nullable{System.Single}\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Enumerable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum(IEnumerable<Single>)\n  nameWithType: Enumerable.Sum(IEnumerable<Single>)\n  fullName: Enumerable.Sum(IEnumerable<Single>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of <xref href=\"System.Single\"></xref> values.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]\\n [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]\"\n  syntax:\n    content: public static float Sum (this System.Collections.Generic.IEnumerable<float> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Single}\n      description: A sequence of <xref href=\"System.Single\"></xref> values to calculate the sum of.\n    return:\n      type: System.Single\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Enumerable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of nullable <xref href=\"System.Int64\"></xref> values.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n The result does not include values that are `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]\\n [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]\"\n  syntax:\n    content: public static Nullable<long> Sum (this System.Collections.Generic.IEnumerable<Nullable<long>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}\n      description: A sequence of nullable <xref href=\"System.Int64\"></xref> values to calculate the sum of.\n    return:\n      type: System.Nullable{System.Int64}\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Enumerable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of nullable <xref href=\"System.Double\"></xref> values.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n The result does not include values that are `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]\\n [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]\"\n  syntax:\n    content: public static Nullable<double> Sum (this System.Collections.Generic.IEnumerable<Nullable<double>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}\n      description: A sequence of nullable <xref href=\"System.Double\"></xref> values to calculate the sum of.\n    return:\n      type: System.Nullable{System.Double}\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Enumerable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum(IEnumerable<Double>)\n  nameWithType: Enumerable.Sum(IEnumerable<Double>)\n  fullName: Enumerable.Sum(IEnumerable<Double>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of <xref href=\"System.Double\"></xref> values.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]\\n [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]\"\n  syntax:\n    content: public static double Sum (this System.Collections.Generic.IEnumerable<double> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Double}\n      description: A sequence of <xref href=\"System.Double\"></xref> values to calculate the sum of.\n    return:\n      type: System.Double\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Enumerable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum(IEnumerable<Int64>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int64>)\n  fullName: Enumerable.Sum(IEnumerable<Int64>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of <xref href=\"System.Int64\"></xref> values.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]\\n [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]\"\n  syntax:\n    content: public static long Sum (this System.Collections.Generic.IEnumerable<long> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int64}\n      description: A sequence of <xref href=\"System.Int64\"></xref> values to calculate the sum of.\n    return:\n      type: System.Int64\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Enumerable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum(IEnumerable<Int32>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int32>)\n  fullName: Enumerable.Sum(IEnumerable<Int32>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of <xref href=\"System.Int32\"></xref> values.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]\\n [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]\"\n  syntax:\n    content: public static int Sum (this System.Collections.Generic.IEnumerable<int> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int32}\n      description: A sequence of <xref href=\"System.Int32\"></xref> values to calculate the sum of.\n    return:\n      type: System.Int32\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Enumerable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)\n  fullName: Enumerable.Sum(IEnumerable<Decimal>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of <xref href=\"System.Decimal\"></xref> values.\n  remarks: \"The <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method returns zero if `source` contains no elements.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]\\n [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]\"\n  syntax:\n    content: public static decimal Sum (this System.Collections.Generic.IEnumerable<decimal> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Decimal}\n      description: A sequence of <xref href=\"System.Decimal\"></xref> values to calculate the sum of.\n    return:\n      type: System.Decimal\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Enumerable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of nullable <xref href=\"System.Decimal\"></xref> values.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n The result doesnot include values that are `null`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]\\n [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]\"\n  syntax:\n    content: public static Nullable<decimal> Sum (this System.Collections.Generic.IEnumerable<Nullable<decimal>> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}\n      description: A sequence of nullable <xref href=\"System.Decimal\"></xref> values to calculate the sum of.\n    return:\n      type: System.Nullable{System.Decimal}\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Enumerable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of <xref href=\"System.Single\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: \"The <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method returns zero if `source` contains no elements.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]\\n [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]\"\n  syntax:\n    content: public static float Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,float> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values that are used to calculate a sum.\n    - id: selector\n      type: System.Func{TSource,System.Single}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Single\n      description: The sum of the projected values.\n  overload: System.Linq.Enumerable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of nullable <xref href=\"System.Single\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n The result does not include values that are `null`.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]\\n [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]\"\n  syntax:\n    content: public static Nullable<float> Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<float>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values that are used to calculate a sum.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Single}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Single}\n      description: The sum of the projected values.\n  overload: System.Linq.Enumerable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of nullable <xref href=\"System.Int64\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n The result does not include values that are `null`.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]\\n [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]\"\n  syntax:\n    content: public static Nullable<long> Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<long>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values that are used to calculate a sum.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Int64}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Int64}\n      description: The sum of the projected values.\n  overload: System.Linq.Enumerable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of nullable <xref href=\"System.Int32\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n The result does not include values that are `null`.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]\\n [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]\"\n  syntax:\n    content: public static Nullable<int> Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<int>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values that are used to calculate a sum.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Int32}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Int32}\n      description: The sum of the projected values.\n  overload: System.Linq.Enumerable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of nullable <xref href=\"System.Double\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n The result does not include values that are `null`.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]\\n [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]\"\n  syntax:\n    content: public static Nullable<double> Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<double>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values that are used to calculate a sum.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Double}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Double}\n      description: The sum of the projected values.\n  overload: System.Linq.Enumerable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of nullable <xref href=\"System.Decimal\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n The result does not included values that are `null`.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]\\n [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]\"\n  syntax:\n    content: public static Nullable<decimal> Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<decimal>> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values that are used to calculate a sum.\n    - id: selector\n      type: System.Func{TSource,System.Nullable{System.Decimal}}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Decimal}\n      description: The sum of the projected values.\n  overload: System.Linq.Enumerable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of <xref href=\"System.Int64\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]\\n [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]\"\n  syntax:\n    content: public static long Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,long> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values that are used to calculate a sum.\n    - id: selector\n      type: System.Func{TSource,System.Int64}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int64\n      description: The sum of the projected values.\n  overload: System.Linq.Enumerable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of <xref href=\"System.Int32\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]\\n [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]\"\n  syntax:\n    content: public static int Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values that are used to calculate a sum.\n    - id: selector\n      type: System.Func{TSource,System.Int32}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int32\n      description: The sum of the projected values.\n  overload: System.Linq.Enumerable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of <xref href=\"System.Double\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]\\n [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]\"\n  syntax:\n    content: public static double Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,double> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values that are used to calculate a sum.\n    - id: selector\n      type: System.Func{TSource,System.Double}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Double\n      description: The sum of the projected values.\n  overload: System.Linq.Enumerable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of <xref href=\"System.Decimal\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.\n  remarks: \"This method returns zero if `source` contains no elements.  \\n  \\n You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]\\n [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]\"\n  syntax:\n    content: public static decimal Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,decimal> selector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence of values that are used to calculate a sum.\n    - id: selector\n      type: System.Func{TSource,System.Decimal}\n      description: A transform function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Decimal\n      description: The sum of the projected values.\n  overload: System.Linq.Enumerable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  commentId: M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  id: Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Take<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns a specified number of contiguous elements from the start of a sequence.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n <xref:System.Linq.Enumerable.Take%2A> enumerates `source` and yields elements until `count` elements have been yielded or `source` contains no more elements. If `count` exceeds the number of elements in `source`, all elements of `source` are returned.  \\n  \\n If `count` is less than or equal to zero, `source` is not enumerated and an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.  \\n  \\n The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements. Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Take` clause translates to an invocation of <xref:System.Linq.Enumerable.Take%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Take%2A> to return elements from the start of a sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#99](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#99)]\\n [!code-vb[System.Linq.Enumerable#99](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#99)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Take<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, int count);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The sequence to return elements from.\n    - id: count\n      type: System.Int32\n      description: The number of elements to return.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the specified number of elements from the start of the input sequence.\n  overload: System.Linq.Enumerable.Take``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  commentId: M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  id: TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  type: Method\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> TakeLast<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, int count);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    typeParameters:\n    - id: TSource\n      description: ''\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: ''\n  overload: System.Linq.Enumerable.TakeLast``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns elements from a sequence as long as a specified condition is true.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`. Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.  \\n  \\n The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements. Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition is true.  \\n  \\n [!code-csharp[System.Linq.Enumerable#100](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#100)]\\n [!code-vb[System.Linq.Enumerable#100](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#100)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> TakeWhile<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence to return elements from.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from the input sequence that occur before the element at which the test no longer passes.\n  overload: System.Linq.Enumerable.TakeWhile``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  id: TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`. Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.  \\n  \\n The first argument of `predicate` represents the element to test. The second argument represents the zero-based index of the element within `source`.  \\n  \\n The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements. Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition that uses the element's index is true.  \\n  \\n [!code-csharp[System.Linq.Enumerable#101](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#101)]\\n [!code-vb[System.Linq.Enumerable#101](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#101)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> TakeWhile<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The sequence to return elements from.\n    - id: predicate\n      type: System.Func{TSource,System.Int32,System.Boolean}\n      description: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements from the input sequence that occur before the element at which the test no longer passes.\n  overload: System.Linq.Enumerable.TakeWhile``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ThenBy<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.ThenBy<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.ThenBy<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \\n  \\n <xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.  \\n  \\n> [!NOTE]\\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \\n  \\n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.  \\n  \\n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.\"\n  syntax:\n    content: public static System.Linq.IOrderedEnumerable<TSource> ThenBy<TSource,TKey> (this System.Linq.IOrderedEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedEnumerable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> that contains elements to sort.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from each element.\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedEnumerable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted according to a key.\n  overload: System.Linq.Enumerable.ThenBy``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  id: ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ThenBy<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ThenBy<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ThenBy<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \\n  \\n <xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.  \\n  \\n> [!NOTE]\\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \\n  \\n This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.  \\n  \\n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.  \\n  \\n In query expression syntax, an `orderby [first criterion], [second criterion]` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Order By [first criterion], [second criterion]` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.ThenBy%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to perform a secondary ordering of the elements in a sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#102](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#102)]\\n [!code-vb[System.Linq.Enumerable#102](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#102)]\"\n  syntax:\n    content: public static System.Linq.IOrderedEnumerable<TSource> ThenBy<TSource,TKey> (this System.Linq.IOrderedEnumerable<TSource> source, Func<TSource,TKey> keySelector);\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedEnumerable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> that contains elements to sort.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedEnumerable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted according to a key.\n  overload: System.Linq.Enumerable.ThenBy``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  id: ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ThenByDescending<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ThenByDescending<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ThenByDescending<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \\n  \\n <xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.  \\n  \\n> [!NOTE]\\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \\n  \\n This sorting method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.  \\n  \\n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.  \\n  \\n In [!INCLUDE[csprcs](~/includes/csprcs-md.md)] query expression syntax, an `orderby [first criterion], [second criterion] descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.  \\n  \\n In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] query expression syntax, an `Order By [first criterion], [second criterion] Descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.\"\n  syntax:\n    content: public static System.Linq.IOrderedEnumerable<TSource> ThenByDescending<TSource,TKey> (this System.Linq.IOrderedEnumerable<TSource> source, Func<TSource,TKey> keySelector);\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedEnumerable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> that contains elements to sort.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedEnumerable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted in descending order according to a key.\n  overload: System.Linq.Enumerable.ThenByDescending``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ThenByDescending<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.ThenByDescending<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.ThenByDescending<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `Function(x) x` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) for `keySelector`.  \\n  \\n <xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.  \\n  \\n> [!NOTE]\\n>  Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>. Doing this introduces a new primary ordering that ignores the previously established ordering.  \\n  \\n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.  \\n  \\n This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.  \\n  \\n [!code-csharp[System.Linq.Enumerable#103](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#103)]\\n [!code-vb[System.Linq.Enumerable#103](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#103)]\"\n  syntax:\n    content: public static System.Linq.IOrderedEnumerable<TSource> ThenByDescending<TSource,TKey> (this System.Linq.IOrderedEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedEnumerable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> that contains elements to sort.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from each element.\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedEnumerable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedEnumerable`1\"></xref> whose elements are sorted in descending order according to a key.\n  overload: System.Linq.Enumerable.ThenByDescending``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  id: ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ToArray<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Creates an array from a <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.\n  remarks: \"The <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns an array that contains the query results. You can append this method to your query in order to obtain a cached copy of the query results.  \\n  \\n <xref:System.Linq.Enumerable.ToList%2A> has similar behavior but returns a <xref:System.Collections.Generic.List%601> instead of an array.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToArray%2A> to force immediate query evaluation and return an array of results.  \\n  \\n [!code-csharp[System.Linq.Enumerable#104](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#104)]\\n [!code-vb[System.Linq.Enumerable#104](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#104)]\"\n  syntax:\n    content: public static TSource[] ToArray<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create an array from.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource[]\n      description: An array that contains the elements from the input sequence.\n  overload: System.Linq.Enumerable.ToArray``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  id: ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to specified key selector and element selector functions.\n  remarks: The <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.\n  syntax:\n    content: public static System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource,TKey,TElement> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from each element.\n    - id: elementSelector\n      type: System.Func{TSource,TElement}\n      description: A transform function to produce a result element value from each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    - id: TElement\n      description: The type of the value returned by <code>elementSelector</code>.\n    return:\n      type: System.Collections.Generic.Dictionary{TKey,TElement}\n      description: A <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains values of type <code>TElement</code> selected from the input sequence.\n  overload: System.Linq.Enumerable.ToDictionary``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>keySelector</code> produces a key that is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>keySelector</code> produces duplicate keys for two elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  id: ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function, a comparer, and an element selector function.\n  remarks: If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.\n  syntax:\n    content: public static System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource,TKey,TElement> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from each element.\n    - id: elementSelector\n      type: System.Func{TSource,TElement}\n      description: A transform function to produce a result element value from each element.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    - id: TElement\n      description: The type of the value returned by <code>elementSelector</code>.\n    return:\n      type: System.Collections.Generic.Dictionary{TKey,TElement}\n      description: A <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains values of type <code>TElement</code> selected from the input sequence.\n  overload: System.Linq.Enumerable.ToDictionary``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>keySelector</code> produces a key that is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>keySelector</code> produces duplicate keys for two elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function.\n  remarks: The <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to create a <xref:System.Collections.Generic.Dictionary%602> by using a key selector.  \\n  \\n [!code-csharp[System.Linq.Enumerable#105](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#105)]\\n [!code-vb[System.Linq.Enumerable#105](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#105)]\"\n  syntax:\n    content: public static System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Collections.Generic.Dictionary{TKey,TSource}\n      description: A <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains keys and values.\n  overload: System.Linq.Enumerable.ToDictionary``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> or <code>keySelector</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>keySelector</code> produces a key that is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>keySelector</code> produces duplicate keys for two elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  id: ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function and key comparer.\n  remarks: If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.\n  syntax:\n    content: public static System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from each element.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the keys returned by <code>keySelector</code>.\n    return:\n      type: System.Collections.Generic.Dictionary{TKey,TSource}\n      description: A <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains keys and values.\n  overload: System.Linq.Enumerable.ToDictionary``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> or <code>keySelector</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>keySelector</code> produces a key that is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>keySelector</code> produces duplicate keys for two elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  syntax:\n    content: public static System.Collections.Generic.HashSet<TSource> ToHashSet<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: ''\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: ''\n    typeParameters:\n    - id: TSource\n      description: ''\n    return:\n      type: System.Collections.Generic.HashSet{TSource}\n      description: ''\n  overload: System.Linq.Enumerable.ToHashSet``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  id: ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ToHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  syntax:\n    content: public static System.Collections.Generic.HashSet<TSource> ToHashSet<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: ''\n    typeParameters:\n    - id: TSource\n      description: ''\n    return:\n      type: System.Collections.Generic.HashSet{TSource}\n      description: ''\n  overload: System.Linq.Enumerable.ToHashSet``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  id: ToList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ToList<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Creates a <xref href=\"System.Collections.Generic.List`1\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref>.\n  remarks: \"The <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns a <xref:System.Collections.Generic.List%601> that contains the query results. You can append this method to your query in order to obtain a cached copy of the query results.  \\n  \\n <xref:System.Linq.Enumerable.ToArray%2A> has similar behavior but returns an array instead of a <xref:System.Collections.Generic.List%601>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToList%2A> to force immediate query evaluation and return a <xref:System.Collections.Generic.List%601> that contains the query results.  \\n  \\n [!code-csharp[System.Linq.Enumerable#106](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#106)]\\n [!code-vb[System.Linq.Enumerable#106](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#106)]\"\n  syntax:\n    content: public static System.Collections.Generic.List<TSource> ToList<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Collections.Generic.List`1\"></xref> from.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.List{TSource}\n      description: A <xref href=\"System.Collections.Generic.List`1\"></xref> that contains elements from the input sequence.\n  overload: System.Linq.Enumerable.ToList``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  id: ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Creates a <xref href=\"System.Linq.Lookup`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to specified key selector and element selector functions.\n  remarks: \"The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.  \\n  \\n The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to create a <xref:System.Linq.Lookup%602> by using a key selector function and an element selector function.  \\n  \\n [!code-csharp[System.Linq.Enumerable#107](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#107)]\\n [!code-vb[System.Linq.Enumerable#107](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#107)]\"\n  syntax:\n    content: public static System.Linq.ILookup<TKey,TElement> ToLookup<TSource,TKey,TElement> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Linq.Lookup`2\"></xref> from.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from each element.\n    - id: elementSelector\n      type: System.Func{TSource,TElement}\n      description: A transform function to produce a result element value from each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    - id: TElement\n      description: The type of the value returned by <code>elementSelector</code>.\n    return:\n      type: System.Linq.ILookup`2\n      description: A <xref href=\"System.Linq.Lookup`2\"></xref> that contains values of type <code>TElement</code> selected from the input sequence.\n  overload: System.Linq.Enumerable.ToLookup``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  id: ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Creates a <xref href=\"System.Linq.Lookup`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function, a comparer and an element selector function.\n  remarks: \"The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.  \\n  \\n If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.\"\n  syntax:\n    content: public static System.Linq.ILookup<TKey,TElement> ToLookup<TSource,TKey,TElement> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Linq.Lookup`2\"></xref> from.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from each element.\n    - id: elementSelector\n      type: System.Func{TSource,TElement}\n      description: A transform function to produce a result element value from each element.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    - id: TElement\n      description: The type of the value returned by <code>elementSelector</code>.\n    return:\n      type: System.Linq.ILookup`2\n      description: A <xref href=\"System.Linq.Lookup`2\"></xref> that contains values of type <code>TElement</code> selected from the input sequence.\n  overload: System.Linq.Enumerable.ToLookup``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Creates a <xref href=\"System.Linq.Lookup`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function.\n  remarks: \"The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.  \\n  \\n The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.\"\n  syntax:\n    content: public static System.Linq.ILookup<TKey,TSource> ToLookup<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Linq.Lookup`2\"></xref> from.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Linq.ILookup{TKey,TSource}\n      description: A <xref href=\"System.Linq.Lookup`2\"></xref> that contains keys and values.\n  overload: System.Linq.Enumerable.ToLookup``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  id: ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Creates a <xref href=\"System.Linq.Lookup`2\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> according to a specified key selector function and key comparer.\n  remarks: \"The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values. A <xref:System.Linq.Lookup%602> is different to a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.  \\n  \\n If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.\"\n  syntax:\n    content: public static System.Linq.ILookup<TKey,TSource> ToLookup<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to create a <xref href=\"System.Linq.Lookup`2\"></xref> from.\n    - id: keySelector\n      type: System.Func{TSource,TKey}\n      description: A function to extract a key from each element.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by <code>keySelector</code>.\n    return:\n      type: System.Linq.ILookup{TKey,TSource}\n      description: A <xref href=\"System.Linq.Lookup`2\"></xref> that contains keys and values.\n  overload: System.Linq.Enumerable.ToLookup``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Produces the set union of two sequences by using the default equality comparer.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n This method excludes duplicates from the return set. This is different behavior to the <xref:System.Linq.Enumerable.Concat%2A> method, which returns all the elements in the input sequences including duplicates.  \\n  \\n The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.  \\n  \\n When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the union of two sequences of integers.  \\n  \\n [!code-csharp[System.Linq.Enumerable#109](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#109)]\\n [!code-vb[System.Linq.Enumerable#109](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#109)]  \\n  \\n If you want to compare sequences of objects of a custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helperclass. The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.  \\n  \\n [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  \\n  \\n After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.  \\n  \\n [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  \\n[!code-csharp[CSLINQEncapsulatedComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#4)]\\n[!code-vb[CSLINQEncapsulatedComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#4)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Union<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements form the first set for the union.\n    - id: second\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements form the second set for the union.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from both input sequences, excluding duplicates.\n  overload: System.Linq.Enumerable.Union``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>first</code> or <code>second</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Produces the set union of two sequences by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.  \\n  \\n When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.  \\n  \\n The <xref:System.Linq.Enumerable.Concat%2A> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%2A> method returns all the elements in the input sequences including duplicates, whereas <xref:System.Linq.Enumerable.Union%2A> returns only unique values.\"\n  example:\n  - \"The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Union%2A> method.  \\n  \\n [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]\\n [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  \\n  \\n After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Union%2A> method, as shown in the following example.  \\n  \\n [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]\\n [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  \\n[!code-csharp[CSLINQCustomComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#4)]\\n[!code-vb[CSLINQCustomComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#4)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Union<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements form the first set for the union.\n    - id: second\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements form the second set for the union.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: The <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains the elements from both input sequences, excluding duplicates.\n  overload: System.Linq.Enumerable.Union``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>first</code> or <code>second</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  id: Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The first argument of `predicate` represents the element to test. The second argument represents the zero-based index of the element within `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to filter a sequence based on a predicate that involves the index of each element.  \\n  \\n [!code-csharp[System.Linq.Enumerable#111](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#111)]\\n [!code-vb[System.Linq.Enumerable#111](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#111)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Where<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to filter.\n    - id: predicate\n      type: System.Func{TSource,System.Int32,System.Boolean}\n      description: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements from the input sequence that satisfy the condition.\n  overload: System.Linq.Enumerable.Where``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Filters a sequence of values based on a predicate.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n In query expression syntax, a `where` ([!INCLUDE[csprcs](~/includes/csprcs-md.md)]) or `Where` ([!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) clause translates to an invocation of <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to filter a sequence.  \\n  \\n [!code-csharp[System.Linq.Enumerable#110](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#110)]\\n [!code-vb[System.Linq.Enumerable#110](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#110)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TSource> Where<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to filter.\n    - id: predicate\n      type: System.Func{TSource,System.Boolean}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains elements from the input sequence that satisfy the condition.\n  overload: System.Linq.Enumerable.Where``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  commentId: M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  id: Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  name: Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  fullName: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  type: Method\n  assemblies:\n  - System.Linq\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.\n  remarks: \"This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in [!INCLUDE[csprcs](~/includes/csprcs-md.md)] or `For Each` in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].  \\n  \\n The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Zip%2A> method to merge two sequences.  \\n  \\n [!code-csharp[System.Linq.Enumerable#200](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#200)]\\n [!code-vb[System.Linq.Enumerable#200](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#200)]\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<TResult> Zip<TFirst,TSecond,TResult> (this System.Collections.Generic.IEnumerable<TFirst> first, System.Collections.Generic.IEnumerable<TSecond> second, Func<TFirst,TSecond,TResult> resultSelector);\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{TFirst}\n      description: The first sequence to merge.\n    - id: second\n      type: System.Collections.Generic.IEnumerable{TSecond}\n      description: The second sequence to merge.\n    - id: resultSelector\n      type: System.Func{TFirst,TSecond,TResult}\n      description: A function that specifies how to merge the elements from the two sequences.\n    typeParameters:\n    - id: TFirst\n      description: The type of the elements of the first input sequence.\n    - id: TSecond\n      description: The type of the elements of the second input sequence.\n    - id: TResult\n      description: The type of the elements of the result sequence.\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains merged elements of two input sequences.\n  overload: System.Linq.Enumerable.Zip``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>first</code> or <code>second</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.OverflowException\n  parent: System\n  isExternal: false\n  name: OverflowException\n  nameWithType: OverflowException\n  fullName: System.OverflowException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)\n- uid: TResult\n  isExternal: true\n  name: TResult\n  nameWithType: TResult\n  fullName: TResult\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: TSource\n  name: TSource\n  nameWithType: TSource\n  fullName: TSource\n- uid: System.Collections.Generic.IEnumerable{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSource>\n  nameWithType: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: TAccumulate\n  isExternal: true\n  name: TAccumulate\n  nameWithType: TAccumulate\n  fullName: TAccumulate\n- uid: System.Func`3\n  name: Func<T1,T2,TResult>\n  nameWithType: Func<T1,T2,TResult>\n  fullName: System.Func<T1,T2,TResult>\n- uid: System.Func{TAccumulate,TSource,TAccumulate}\n  parent: System\n  isExternal: false\n  name: Func<TAccumulate,TSource,TAccumulate>\n  nameWithType: Func<TAccumulate,TSource,TAccumulate>\n  fullName: System.Func<TAccumulate,TSource,TAccumulate>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TAccumulate\n    name: TAccumulate\n    nameWithType: TAccumulate\n    fullName: TAccumulate\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TAccumulate\n    name: TAccumulate\n    nameWithType: TAccumulate\n    fullName: TAccumulate\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func`2\n  name: Func<T,TResult>\n  nameWithType: Func<T,TResult>\n  fullName: System.Func<T,TResult>\n- uid: System.Func{TAccumulate,TResult}\n  parent: System\n  isExternal: false\n  name: Func<TAccumulate,TResult>\n  nameWithType: Func<TAccumulate,TResult>\n  fullName: System.Func<TAccumulate,TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TAccumulate\n    name: TAccumulate\n    nameWithType: TAccumulate\n    fullName: TAccumulate\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n  fullName: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)\n- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n  fullName: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)\n- uid: System.Func{TSource,TSource,TSource}\n  parent: System\n  isExternal: false\n  name: Func<TSource,TSource,TSource>\n  nameWithType: Func<TSource,TSource,TSource>\n  fullName: System.Func<TSource,TSource,TSource>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Func{TSource,System.Boolean}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Boolean>\n  nameWithType: Func<TSource,Boolean>\n  fullName: System.Func<TSource,System.Boolean>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Append<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: AsEnumerable<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Single>)\n  nameWithType: Enumerable.Average(IEnumerable<Single>)\n  fullName: Enumerable.Average(IEnumerable<Single>)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Collections.Generic.IEnumerable{System.Single}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Single>\n  nameWithType: IEnumerable<Single>\n  fullName: System.Collections.Generic.IEnumerable<System.Single>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Single>>)\n- uid: System.Nullable`1\n  name: Nullable<T>\n  nameWithType: Nullable<T>\n  fullName: System.Nullable<T>\n- uid: System.Nullable{System.Single}\n  parent: System\n  isExternal: false\n  name: Nullable<Single>\n  nameWithType: Nullable<Single>\n  fullName: System.Nullable<System.Single>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Nullable<Single>>\n  nameWithType: IEnumerable<Nullable<Single>>\n  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n- uid: System.Double\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Nullable{System.Double}\n  parent: System\n  isExternal: false\n  name: Nullable<Double>\n  nameWithType: Nullable<Double>\n  fullName: System.Nullable<System.Double>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Int64\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Nullable<Int64>>\n  nameWithType: IEnumerable<Nullable<Int64>>\n  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n- uid: System.Int32\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Nullable<Int32>>\n  nameWithType: IEnumerable<Nullable<Int32>>\n  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Double>>)\n- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Nullable<Double>>\n  nameWithType: IEnumerable<Nullable<Double>>\n  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int64>)\n  nameWithType: Enumerable.Average(IEnumerable<Int64>)\n  fullName: Enumerable.Average(IEnumerable<Int64>)\n- uid: System.Collections.Generic.IEnumerable{System.Int64}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Int64>\n  nameWithType: IEnumerable<Int64>\n  fullName: System.Collections.Generic.IEnumerable<System.Int64>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Int32>)\n  nameWithType: Enumerable.Average(IEnumerable<Int32>)\n  fullName: Enumerable.Average(IEnumerable<Int32>)\n- uid: System.Collections.Generic.IEnumerable{System.Int32}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Int32>\n  nameWithType: IEnumerable<Int32>\n  fullName: System.Collections.Generic.IEnumerable<System.Int32>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Double>)\n  nameWithType: Enumerable.Average(IEnumerable<Double>)\n  fullName: Enumerable.Average(IEnumerable<Double>)\n- uid: System.Collections.Generic.IEnumerable{System.Double}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Double>\n  nameWithType: IEnumerable<Double>\n  fullName: System.Collections.Generic.IEnumerable<System.Double>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Average(IEnumerable<Decimal>)\n  fullName: Enumerable.Average(IEnumerable<Decimal>)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: System.Collections.Generic.IEnumerable{System.Decimal}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Decimal>\n  nameWithType: IEnumerable<Decimal>\n  fullName: System.Collections.Generic.IEnumerable<System.Decimal>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    nameWithType: Decimal\n    fullName: System.Decimal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n- uid: System.Nullable{System.Decimal}\n  parent: System\n  isExternal: false\n  name: Nullable<Decimal>\n  nameWithType: Nullable<Decimal>\n  fullName: System.Nullable<System.Decimal>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    nameWithType: Decimal\n    fullName: System.Decimal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Nullable<Decimal>>\n  nameWithType: IEnumerable<Nullable<Decimal>>\n  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    nameWithType: Decimal\n    fullName: System.Decimal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Func{TSource,System.Nullable{System.Int32}}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Nullable<Int32>>\n  nameWithType: Func<TSource,Nullable<Int32>>\n  fullName: System.Func<TSource,System.Nullable<System.Int32>>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Func{TSource,System.Single}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Single>\n  nameWithType: Func<TSource,Single>\n  fullName: System.Func<TSource,System.Single>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Func{TSource,System.Nullable{System.Single}}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Nullable<Single>>\n  nameWithType: Func<TSource,Nullable<Single>>\n  fullName: System.Func<TSource,System.Nullable<System.Single>>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Func{TSource,System.Nullable{System.Int64}}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Nullable<Int64>>\n  nameWithType: Func<TSource,Nullable<Int64>>\n  fullName: System.Func<TSource,System.Nullable<System.Int64>>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Func{TSource,System.Nullable{System.Double}}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Nullable<Double>>\n  nameWithType: Func<TSource,Nullable<Double>>\n  fullName: System.Func<TSource,System.Nullable<System.Double>>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Func{TSource,System.Nullable{System.Decimal}}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Nullable<Decimal>>\n  nameWithType: Func<TSource,Nullable<Decimal>>\n  fullName: System.Func<TSource,System.Nullable<System.Decimal>>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    nameWithType: Decimal\n    fullName: System.Decimal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Func{TSource,System.Int64}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Int64>\n  nameWithType: Func<TSource,Int64>\n  fullName: System.Func<TSource,System.Int64>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Func{TSource,System.Int32}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Int32>\n  nameWithType: Func<TSource,Int32>\n  fullName: System.Func<TSource,System.Int32>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Func{TSource,System.Double}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Double>\n  nameWithType: Func<TSource,Double>\n  fullName: System.Func<TSource,System.Double>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Func{TSource,System.Decimal}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Decimal>\n  nameWithType: Func<TSource,Decimal>\n  fullName: System.Func<TSource,System.Decimal>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Decimal\n    name: Decimal\n    nameWithType: Decimal\n    fullName: System.Decimal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Collections.Generic.IEnumerable{TResult}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TResult>\n  nameWithType: IEnumerable<TResult>\n  fullName: System.Collections.Generic.IEnumerable<TResult>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  nameWithType: IEnumerable\n  fullName: System.Collections.IEnumerable\n- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n- uid: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<T>\n  nameWithType: IEqualityComparer<T>\n  fullName: System.Collections.Generic.IEqualityComparer<T>\n- uid: System.Collections.Generic.IEqualityComparer{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEqualityComparer<TSource>\n  nameWithType: IEqualityComparer<TSource>\n  fullName: System.Collections.Generic.IEqualityComparer<TSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    nameWithType: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.Empty``1\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Empty<TResult>()\n  nameWithType: Enumerable.Empty<TResult>()\n  fullName: Enumerable.Empty<TResult>()\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)\n- uid: TKey\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Func{TSource,TKey}\n  parent: System\n  isExternal: false\n  name: Func<TSource,TKey>\n  nameWithType: Func<TSource,TKey>\n  fullName: System.Func<TSource,TKey>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: TElement\n  name: TElement\n  nameWithType: TElement\n  fullName: TElement\n- uid: System.Func{TSource,TElement}\n  parent: System\n  isExternal: false\n  name: Func<TSource,TElement>\n  nameWithType: Func<TSource,TElement>\n  fullName: System.Func<TSource,TElement>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TElement\n    name: TElement\n    nameWithType: TElement\n    fullName: TElement\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}\n  parent: System\n  isExternal: false\n  name: Func<TKey,IEnumerable<TElement>,TResult>\n  nameWithType: Func<TKey,IEnumerable<TElement>,TResult>\n  fullName: System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TElement\n    name: TElement\n    nameWithType: TElement\n    fullName: TElement\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Collections.Generic.IEqualityComparer{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEqualityComparer<TKey>\n  nameWithType: IEqualityComparer<TKey>\n  fullName: System.Collections.Generic.IEqualityComparer<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    nameWithType: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.IGrouping`2\n  name: IGrouping<TKey,TElement>\n  nameWithType: IGrouping<TKey,TElement>\n  fullName: System.Linq.IGrouping<TKey,TElement>\n- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{TKey,TElement}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<IGrouping<TKey,TElement>>\n  nameWithType: IEnumerable<IGrouping<TKey,TElement>>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    nameWithType: IGrouping\n    fullName: System.Linq.IGrouping\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TElement\n    name: TElement\n    nameWithType: TElement\n    fullName: TElement\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)\n- uid: System.Func{TKey,System.Collections.Generic.IEnumerable{TSource},TResult}\n  parent: System\n  isExternal: false\n  name: Func<TKey,IEnumerable<TSource>,TResult>\n  nameWithType: Func<TKey,IEnumerable<TSource>,TResult>\n  fullName: System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{TKey,TSource}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<IGrouping<TKey,TSource>>\n  nameWithType: IEnumerable<IGrouping<TKey,TSource>>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TSource>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    nameWithType: IGrouping\n    fullName: System.Linq.IGrouping\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)\n- uid: TOuter\n  name: TOuter\n  nameWithType: TOuter\n  fullName: TOuter\n- uid: System.Collections.Generic.IEnumerable{TOuter}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TOuter>\n  nameWithType: IEnumerable<TOuter>\n  fullName: System.Collections.Generic.IEnumerable<TOuter>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TOuter\n    name: TOuter\n    nameWithType: TOuter\n    fullName: TOuter\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: TInner\n  name: TInner\n  nameWithType: TInner\n  fullName: TInner\n- uid: System.Collections.Generic.IEnumerable{TInner}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TInner>\n  nameWithType: IEnumerable<TInner>\n  fullName: System.Collections.Generic.IEnumerable<TInner>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TInner\n    name: TInner\n    nameWithType: TInner\n    fullName: TInner\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func{TOuter,TKey}\n  parent: System\n  isExternal: false\n  name: Func<TOuter,TKey>\n  nameWithType: Func<TOuter,TKey>\n  fullName: System.Func<TOuter,TKey>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TOuter\n    name: TOuter\n    nameWithType: TOuter\n    fullName: TOuter\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func{TInner,TKey}\n  parent: System\n  isExternal: false\n  name: Func<TInner,TKey>\n  nameWithType: Func<TInner,TKey>\n  fullName: System.Func<TInner,TKey>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TInner\n    name: TInner\n    nameWithType: TInner\n    fullName: TInner\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func{TOuter,System.Collections.Generic.IEnumerable{TInner},TResult}\n  parent: System\n  isExternal: false\n  name: Func<TOuter,IEnumerable<TInner>,TResult>\n  nameWithType: Func<TOuter,IEnumerable<TInner>,TResult>\n  fullName: System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TOuter\n    name: TOuter\n    nameWithType: TOuter\n    fullName: TOuter\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TInner\n    name: TInner\n    nameWithType: TInner\n    fullName: TInner\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)\n- uid: System.Func{TOuter,TInner,TResult}\n  parent: System\n  isExternal: false\n  name: Func<TOuter,TInner,TResult>\n  nameWithType: Func<TOuter,TInner,TResult>\n  fullName: System.Func<TOuter,TInner,TResult>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TOuter\n    name: TOuter\n    nameWithType: TOuter\n    fullName: TOuter\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TInner\n    name: TInner\n    nameWithType: TInner\n    fullName: TInner\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int32>)\n  nameWithType: Enumerable.Max(IEnumerable<Int32>)\n  fullName: Enumerable.Max(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n- uid: System.Nullable{System.Int64}\n  parent: System\n  isExternal: false\n  name: Nullable<Int64>\n  nameWithType: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Single>)\n  nameWithType: Enumerable.Max(IEnumerable<Single>)\n  fullName: Enumerable.Max(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n- uid: System.Nullable{System.Int32}\n  parent: System\n  isExternal: false\n  name: Nullable<Int32>\n  nameWithType: Nullable<Int32>\n  fullName: System.Nullable<System.Int32>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Max(IEnumerable<Decimal>)\n  fullName: Enumerable.Max(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Int64>)\n  nameWithType: Enumerable.Max(IEnumerable<Int64>)\n  fullName: Enumerable.Max(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Double>)\n  nameWithType: Enumerable.Max(IEnumerable<Double>)\n  fullName: Enumerable.Max(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Max(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Func{TSource,TResult}\n  parent: System\n  isExternal: false\n  name: Func<TSource,TResult>\n  nameWithType: Func<TSource,TResult>\n  fullName: System.Func<TSource,TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Single>)\n  nameWithType: Enumerable.Min(IEnumerable<Single>)\n  fullName: Enumerable.Min(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Double>)\n  nameWithType: Enumerable.Min(IEnumerable<Double>)\n  fullName: Enumerable.Min(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int64>)\n  nameWithType: Enumerable.Min(IEnumerable<Int64>)\n  fullName: Enumerable.Min(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Int32>)\n  nameWithType: Enumerable.Min(IEnumerable<Int32>)\n  fullName: Enumerable.Min(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Min(IEnumerable<Decimal>)\n  fullName: Enumerable.Min(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.IOrderedEnumerable`1\n  name: IOrderedEnumerable<TElement>\n  nameWithType: IOrderedEnumerable<TElement>\n  fullName: System.Linq.IOrderedEnumerable<TElement>\n- uid: System.Linq.IOrderedEnumerable{TSource}\n  parent: System.Linq\n  isExternal: false\n  name: IOrderedEnumerable<TSource>\n  nameWithType: IOrderedEnumerable<TSource>\n  fullName: System.Linq.IOrderedEnumerable<TSource>\n  spec.csharp:\n  - uid: System.Linq.IOrderedEnumerable`1\n    name: IOrderedEnumerable\n    nameWithType: IOrderedEnumerable\n    fullName: System.Linq.IOrderedEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Collections.Generic.IComparer`1\n  name: IComparer<T>\n  nameWithType: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n- uid: System.Collections.Generic.IComparer{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IComparer<TKey>\n  nameWithType: IComparer<TKey>\n  fullName: System.Collections.Generic.IComparer<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    nameWithType: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Prepend<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n  fullName: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n- uid: System.Linq.Enumerable.Range(System.Int32,System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Range(Int32, Int32)\n  nameWithType: Enumerable.Range(Int32, Int32)\n  fullName: Enumerable.Range(Int32, Int32)\n- uid: System.Linq.Enumerable.Repeat``1(``0,System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Repeat<TResult>(TResult, Int32)\n  nameWithType: Enumerable.Repeat<TResult>(TResult, Int32)\n  fullName: Enumerable.Repeat<TResult>(TResult, Int32)\n- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Reverse<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)\n- uid: System.Func{TSource,System.Int32,TResult}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Int32,TResult>\n  nameWithType: Func<TSource,Int32,TResult>\n  fullName: System.Func<TSource,System.Int32,TResult>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: TCollection\n  name: TCollection\n  nameWithType: TCollection\n  fullName: TCollection\n- uid: System.Func{TSource,System.Collections.Generic.IEnumerable{TCollection}}\n  parent: System\n  isExternal: false\n  name: Func<TSource,IEnumerable<TCollection>>\n  nameWithType: Func<TSource,IEnumerable<TCollection>>\n  fullName: System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TCollection\n    name: TCollection\n    nameWithType: TCollection\n    fullName: TCollection\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func{TSource,TCollection,TResult}\n  parent: System\n  isExternal: false\n  name: Func<TSource,TCollection,TResult>\n  nameWithType: Func<TSource,TCollection,TResult>\n  fullName: System.Func<TSource,TCollection,TResult>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TCollection\n    name: TCollection\n    nameWithType: TCollection\n    fullName: TCollection\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)\n- uid: System.Func{TSource,System.Int32,System.Collections.Generic.IEnumerable{TCollection}}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Int32,IEnumerable<TCollection>>\n  nameWithType: Func<TSource,Int32,IEnumerable<TCollection>>\n  fullName: System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TCollection\n    name: TCollection\n    nameWithType: TCollection\n    fullName: TCollection\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)\n- uid: System.Func{TSource,System.Collections.Generic.IEnumerable{TResult}}\n  parent: System\n  isExternal: false\n  name: Func<TSource,IEnumerable<TResult>>\n  nameWithType: Func<TSource,IEnumerable<TResult>>\n  fullName: System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)\n- uid: System.Func{TSource,System.Int32,System.Collections.Generic.IEnumerable{TResult}}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Int32,IEnumerable<TResult>>\n  nameWithType: Func<TSource,Int32,IEnumerable<TResult>>\n  fullName: System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Skip<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Func{TSource,System.Int32,System.Boolean}\n  parent: System\n  isExternal: false\n  name: Func<TSource,Int32,Boolean>\n  nameWithType: Func<TSource,Int32,Boolean>\n  fullName: System.Func<TSource,System.Int32,System.Boolean>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int32>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Single>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Single>)\n  nameWithType: Enumerable.Sum(IEnumerable<Single>)\n  fullName: Enumerable.Sum(IEnumerable<Single>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Int64>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Double>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Double>)\n  nameWithType: Enumerable.Sum(IEnumerable<Double>)\n  fullName: Enumerable.Sum(IEnumerable<Double>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int64>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int64>)\n  fullName: Enumerable.Sum(IEnumerable<Int64>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Int32>)\n  nameWithType: Enumerable.Sum(IEnumerable<Int32>)\n  fullName: Enumerable.Sum(IEnumerable<Int32>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Decimal>)\n  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)\n  fullName: Enumerable.Sum(IEnumerable<Decimal>)\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum(IEnumerable<Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n  fullName: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)\n- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Take<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n  fullName: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ThenBy<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.ThenBy<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.ThenBy<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ThenBy<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ThenBy<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ThenBy<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ThenByDescending<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ThenByDescending<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ThenByDescending<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ThenByDescending<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  nameWithType: Enumerable.ThenByDescending<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n  fullName: Enumerable.ThenByDescending<TSource,TKey>(IOrderedEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)\n- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToArray<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n- uid: TSource[]\n  isExternal: true\n  name: TSource[]\n  nameWithType: TSource[]\n  fullName: TSource[]\n  spec.csharp:\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Collections.Generic.Dictionary`2\n  name: Dictionary<TKey,TValue>\n  nameWithType: Dictionary<TKey,TValue>\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>\n- uid: System.Collections.Generic.Dictionary{TKey,TElement}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: Dictionary<TKey,TElement>\n  nameWithType: Dictionary<TKey,TElement>\n  fullName: System.Collections.Generic.Dictionary<TKey,TElement>\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    nameWithType: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TElement\n    name: TElement\n    nameWithType: TElement\n    fullName: TElement\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Collections.Generic.Dictionary{TKey,TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: Dictionary<TKey,TSource>\n  nameWithType: Dictionary<TKey,TSource>\n  fullName: System.Collections.Generic.Dictionary<TKey,TSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    nameWithType: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Collections.Generic.HashSet`1\n  name: HashSet<T>\n  nameWithType: HashSet<T>\n  fullName: System.Collections.Generic.HashSet<T>\n- uid: System.Collections.Generic.HashSet{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: HashSet<TSource>\n  nameWithType: HashSet<TSource>\n  fullName: System.Collections.Generic.HashSet<TSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.HashSet`1\n    name: HashSet\n    nameWithType: HashSet\n    fullName: System.Collections.Generic.HashSet\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToList<TSource>(IEnumerable<TSource>)\n  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n  fullName: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Generic.List`1\n  name: List<T>\n  nameWithType: List<T>\n  fullName: System.Collections.Generic.List<T>\n- uid: System.Collections.Generic.List{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<TSource>\n  nameWithType: List<TSource>\n  fullName: System.Collections.Generic.List<TSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    nameWithType: List\n    fullName: System.Collections.Generic.List\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)\n- uid: System.Linq.ILookup`2\n  parent: System.Linq\n  isExternal: false\n  name: ILookup<TKey,TElement>\n  nameWithType: ILookup<TKey,TElement>\n  fullName: System.Linq.ILookup<TKey,TElement>\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)\n- uid: System.Linq.ILookup{TKey,TSource}\n  parent: System.Linq\n  isExternal: false\n  name: ILookup<TKey,TSource>\n  nameWithType: ILookup<TKey,TSource>\n  fullName: System.Linq.ILookup<TKey,TSource>\n  spec.csharp:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    nameWithType: ILookup\n    fullName: System.Linq.ILookup\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)\n- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n  fullName: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)\n- uid: TFirst\n  name: TFirst\n  nameWithType: TFirst\n  fullName: TFirst\n- uid: System.Collections.Generic.IEnumerable{TFirst}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TFirst>\n  nameWithType: IEnumerable<TFirst>\n  fullName: System.Collections.Generic.IEnumerable<TFirst>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TFirst\n    name: TFirst\n    nameWithType: TFirst\n    fullName: TFirst\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: TSecond\n  name: TSecond\n  nameWithType: TSecond\n  fullName: TSecond\n- uid: System.Collections.Generic.IEnumerable{TSecond}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSecond>\n  nameWithType: IEnumerable<TSecond>\n  fullName: System.Collections.Generic.IEnumerable<TSecond>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSecond\n    name: TSecond\n    nameWithType: TSecond\n    fullName: TSecond\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func{TFirst,TSecond,TResult}\n  parent: System\n  isExternal: false\n  name: Func<TFirst,TSecond,TResult>\n  nameWithType: Func<TFirst,TSecond,TResult>\n  fullName: System.Func<TFirst,TSecond,TResult>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TFirst\n    name: TFirst\n    nameWithType: TFirst\n    fullName: TFirst\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSecond\n    name: TSecond\n    nameWithType: TSecond\n    fullName: TSecond\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Enumerable.Distinct``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Distinct<TSource>\n  nameWithType: Enumerable.Distinct<TSource>\n  fullName: Enumerable.Distinct<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Aggregate``3*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>\n  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Aggregate``2*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>\n  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>\n  fullName: Enumerable.Aggregate<TSource,TAccumulate>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Aggregate``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Aggregate<TSource>\n  nameWithType: Enumerable.Aggregate<TSource>\n  fullName: Enumerable.Aggregate<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.All``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: All<TSource>\n  nameWithType: Enumerable.All<TSource>\n  fullName: Enumerable.All<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Any``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Any<TSource>\n  nameWithType: Enumerable.Any<TSource>\n  fullName: Enumerable.Any<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Append``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Append<TSource>\n  nameWithType: Enumerable.Append<TSource>\n  fullName: Enumerable.Append<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.AsEnumerable``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: AsEnumerable<TSource>\n  nameWithType: Enumerable.AsEnumerable<TSource>\n  fullName: Enumerable.AsEnumerable<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Average*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average\n  nameWithType: Enumerable.Average\n  fullName: Enumerable.Average\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Average``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Average<TSource>\n  nameWithType: Enumerable.Average<TSource>\n  fullName: Enumerable.Average<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Cast``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>\n  nameWithType: Enumerable.Cast<TResult>\n  fullName: Enumerable.Cast<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Concat``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Concat<TSource>\n  nameWithType: Enumerable.Concat<TSource>\n  fullName: Enumerable.Concat<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Contains``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Contains<TSource>\n  nameWithType: Enumerable.Contains<TSource>\n  fullName: Enumerable.Contains<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Count``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Count<TSource>\n  nameWithType: Enumerable.Count<TSource>\n  fullName: Enumerable.Count<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>\n  fullName: Enumerable.DefaultIfEmpty<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ElementAt``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAt<TSource>\n  nameWithType: Enumerable.ElementAt<TSource>\n  fullName: Enumerable.ElementAt<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ElementAtOrDefault``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>\n  nameWithType: Enumerable.ElementAtOrDefault<TSource>\n  fullName: Enumerable.ElementAtOrDefault<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Empty``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Empty<TResult>\n  nameWithType: Enumerable.Empty<TResult>\n  fullName: Enumerable.Empty<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Except``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Except<TSource>\n  nameWithType: Enumerable.Except<TSource>\n  fullName: Enumerable.Except<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.First``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: First<TSource>\n  nameWithType: Enumerable.First<TSource>\n  fullName: Enumerable.First<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.FirstOrDefault``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: FirstOrDefault<TSource>\n  nameWithType: Enumerable.FirstOrDefault<TSource>\n  fullName: Enumerable.FirstOrDefault<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.GroupBy``4*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.GroupBy``3*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>\n  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>\n  fullName: Enumerable.GroupBy<TSource,TKey,TElement>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.GroupBy``2*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupBy<TSource,TKey>\n  nameWithType: Enumerable.GroupBy<TSource,TKey>\n  fullName: Enumerable.GroupBy<TSource,TKey>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.GroupJoin``4*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>\n  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>\n  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Intersect``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Intersect<TSource>\n  nameWithType: Enumerable.Intersect<TSource>\n  fullName: Enumerable.Intersect<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Join``4*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>\n  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>\n  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Last``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Last<TSource>\n  nameWithType: Enumerable.Last<TSource>\n  fullName: Enumerable.Last<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.LastOrDefault``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LastOrDefault<TSource>\n  nameWithType: Enumerable.LastOrDefault<TSource>\n  fullName: Enumerable.LastOrDefault<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.LongCount``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: LongCount<TSource>\n  nameWithType: Enumerable.LongCount<TSource>\n  fullName: Enumerable.LongCount<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Max*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max\n  nameWithType: Enumerable.Max\n  fullName: Enumerable.Max\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Max``2*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource,TResult>\n  nameWithType: Enumerable.Max<TSource,TResult>\n  fullName: Enumerable.Max<TSource,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Max``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Max<TSource>\n  nameWithType: Enumerable.Max<TSource>\n  fullName: Enumerable.Max<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Min*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min\n  nameWithType: Enumerable.Min\n  fullName: Enumerable.Min\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Min``2*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource,TResult>\n  nameWithType: Enumerable.Min<TSource,TResult>\n  fullName: Enumerable.Min<TSource,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Min``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Min<TSource>\n  nameWithType: Enumerable.Min<TSource>\n  fullName: Enumerable.Min<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.OfType``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>\n  nameWithType: Enumerable.OfType<TResult>\n  fullName: Enumerable.OfType<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.OrderBy``2*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderBy<TSource,TKey>\n  nameWithType: Enumerable.OrderBy<TSource,TKey>\n  fullName: Enumerable.OrderBy<TSource,TKey>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.OrderByDescending``2*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>\n  nameWithType: Enumerable.OrderByDescending<TSource,TKey>\n  fullName: Enumerable.OrderByDescending<TSource,TKey>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Prepend``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Prepend<TSource>\n  nameWithType: Enumerable.Prepend<TSource>\n  fullName: Enumerable.Prepend<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Range*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Range\n  nameWithType: Enumerable.Range\n  fullName: Enumerable.Range\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Repeat``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Repeat<TResult>\n  nameWithType: Enumerable.Repeat<TResult>\n  fullName: Enumerable.Repeat<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Reverse``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Reverse<TSource>\n  nameWithType: Enumerable.Reverse<TSource>\n  fullName: Enumerable.Reverse<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Select``2*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Select<TSource,TResult>\n  nameWithType: Enumerable.Select<TSource,TResult>\n  fullName: Enumerable.Select<TSource,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.SelectMany``3*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>\n  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>\n  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.SelectMany``2*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SelectMany<TSource,TResult>\n  nameWithType: Enumerable.SelectMany<TSource,TResult>\n  fullName: Enumerable.SelectMany<TSource,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.SequenceEqual``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SequenceEqual<TSource>\n  nameWithType: Enumerable.SequenceEqual<TSource>\n  fullName: Enumerable.SequenceEqual<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Single``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Single<TSource>\n  nameWithType: Enumerable.Single<TSource>\n  fullName: Enumerable.Single<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.SingleOrDefault``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SingleOrDefault<TSource>\n  nameWithType: Enumerable.SingleOrDefault<TSource>\n  fullName: Enumerable.SingleOrDefault<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Skip``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Skip<TSource>\n  nameWithType: Enumerable.Skip<TSource>\n  fullName: Enumerable.Skip<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.SkipLast``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipLast<TSource>\n  nameWithType: Enumerable.SkipLast<TSource>\n  fullName: Enumerable.SkipLast<TSource>\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.SkipWhile``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: SkipWhile<TSource>\n  nameWithType: Enumerable.SkipWhile<TSource>\n  fullName: Enumerable.SkipWhile<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Sum*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum\n  nameWithType: Enumerable.Sum\n  fullName: Enumerable.Sum\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Sum``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Sum<TSource>\n  nameWithType: Enumerable.Sum<TSource>\n  fullName: Enumerable.Sum<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Take``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Take<TSource>\n  nameWithType: Enumerable.Take<TSource>\n  fullName: Enumerable.Take<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.TakeLast``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeLast<TSource>\n  nameWithType: Enumerable.TakeLast<TSource>\n  fullName: Enumerable.TakeLast<TSource>\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.TakeWhile``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: TakeWhile<TSource>\n  nameWithType: Enumerable.TakeWhile<TSource>\n  fullName: Enumerable.TakeWhile<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ThenBy``2*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ThenBy<TSource,TKey>\n  nameWithType: Enumerable.ThenBy<TSource,TKey>\n  fullName: Enumerable.ThenBy<TSource,TKey>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ThenByDescending``2*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ThenByDescending<TSource,TKey>\n  nameWithType: Enumerable.ThenByDescending<TSource,TKey>\n  fullName: Enumerable.ThenByDescending<TSource,TKey>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ToArray``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToArray<TSource>\n  nameWithType: Enumerable.ToArray<TSource>\n  fullName: Enumerable.ToArray<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ToDictionary``3*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey,TElement>\n  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>\n  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ToDictionary``2*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToDictionary<TSource,TKey>\n  nameWithType: Enumerable.ToDictionary<TSource,TKey>\n  fullName: Enumerable.ToDictionary<TSource,TKey>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ToHashSet``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToHashSet<TSource>\n  nameWithType: Enumerable.ToHashSet<TSource>\n  fullName: Enumerable.ToHashSet<TSource>\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ToList``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToList<TSource>\n  nameWithType: Enumerable.ToList<TSource>\n  fullName: Enumerable.ToList<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ToLookup``3*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey,TElement>\n  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>\n  fullName: Enumerable.ToLookup<TSource,TKey,TElement>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.ToLookup``2*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: ToLookup<TSource,TKey>\n  nameWithType: Enumerable.ToLookup<TSource,TKey>\n  fullName: Enumerable.ToLookup<TSource,TKey>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Union``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Union<TSource>\n  nameWithType: Enumerable.Union<TSource>\n  fullName: Enumerable.Union<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Where``1*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Where<TSource>\n  nameWithType: Enumerable.Where<TSource>\n  fullName: Enumerable.Where<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Linq.Enumerable.Zip``3*\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>\n  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>\n  fullName: Enumerable.Zip<TFirst,TSecond,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Enumerable.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}