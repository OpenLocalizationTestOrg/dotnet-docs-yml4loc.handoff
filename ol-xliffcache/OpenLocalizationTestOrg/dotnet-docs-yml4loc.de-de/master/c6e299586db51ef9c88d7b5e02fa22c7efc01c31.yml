### YamlMime:ManagedReference
items:
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  id: Expression
  children:
  - System.Linq.Expressions.Expression.#ctor
  - System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)
  - System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.CanReduce
  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Constant(System.Object)
  - System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Default(System.Type)
  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Empty
  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  - System.Linq.Expressions.Expression.GetActionType(System.Type[])
  - System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  - System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Label
  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Label(System.String)
  - System.Linq.Expressions.Expression.Label(System.Type)
  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Label(System.Type,System.String)
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  - System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  - System.Linq.Expressions.Expression.New(System.Type)
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.NodeType
  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  - System.Linq.Expressions.Expression.Parameter(System.Type)
  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Reduce
  - System.Linq.Expressions.Expression.ReduceAndCheck
  - System.Linq.Expressions.Expression.ReduceExtensions
  - System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Rethrow(System.Type)
  - System.Linq.Expressions.Expression.Rethrow
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.ToString
  - System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  - System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  - System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  - System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  - System.Linq.Expressions.Expression.Type
  - System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  - System.Linq.Expressions.Expression.Variable(System.Type)
  - System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  langs:
  - csharp
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
  type: Class
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Provides the base class from which the classes that represent expression tree nodes are derived. It also contains `static` (`Shared` in Visual Basic) factory methods to create the various node types. This is an `abstract` class.
  remarks: ''
  example:
  - "The following code example shows how to create a block expression. The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]"
  syntax:
    content: public abstract class Expression
  inheritance:
  - System.Object
  derivedClasses:
  - System.Linq.Expressions.BinaryExpression
  - System.Linq.Expressions.BlockExpression
  - System.Linq.Expressions.ConditionalExpression
  - System.Linq.Expressions.ConstantExpression
  - System.Linq.Expressions.DebugInfoExpression
  - System.Linq.Expressions.DefaultExpression
  - System.Linq.Expressions.DynamicExpression
  - System.Linq.Expressions.GotoExpression
  - System.Linq.Expressions.IndexExpression
  - System.Linq.Expressions.InvocationExpression
  - System.Linq.Expressions.LabelExpression
  - System.Linq.Expressions.LambdaExpression
  - System.Linq.Expressions.ListInitExpression
  - System.Linq.Expressions.LoopExpression
  - System.Linq.Expressions.MemberExpression
  - System.Linq.Expressions.MemberInitExpression
  - System.Linq.Expressions.MethodCallExpression
  - System.Linq.Expressions.NewArrayExpression
  - System.Linq.Expressions.NewExpression
  - System.Linq.Expressions.ParameterExpression
  - System.Linq.Expressions.RuntimeVariablesExpression
  - System.Linq.Expressions.SwitchExpression
  - System.Linq.Expressions.TryExpression
  - System.Linq.Expressions.TypeBinaryExpression
  - System.Linq.Expressions.UnaryExpression
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.#ctor
  commentId: M:System.Linq.Expressions.Expression.#ctor
  id: '#ctor'
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Expression()
  nameWithType: Expression.Expression()
  fullName: Expression.Expression()
  type: Constructor
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Constructs a new instance of <xref href="System.Linq.Expressions.Expression"></xref>.
  syntax:
    content: protected Expression ();
    parameters: []
  overload: System.Linq.Expressions.Expression.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)
  commentId: M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)
  id: '#ctor(System.Linq.Expressions.ExpressionType,System.Type)'
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Expression(ExpressionType, Type)
  nameWithType: Expression.Expression(ExpressionType, Type)
  fullName: Expression.Expression(ExpressionType, Type)
  type: Constructor
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Initializes a new instance of the <xref href="System.Linq.Expressions.Expression"></xref> class.
  remarks: This constructor is called from constructors in derived classes.
  syntax:
    content: >-
      [System.Obsolete("use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.")]

      protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);
    parameters:
    - id: nodeType
      type: System.Linq.Expressions.ExpressionType
      description: The <xref href="System.Linq.Expressions.ExpressionType"></xref> to set as the node type.
    - id: type
      type: System.Type
      description: The <xref href="System.Linq.Expressions.Expression.Type"></xref> of this <xref href="System.Linq.Expressions.Expression"></xref>.
  overload: System.Linq.Expressions.Expression.#ctor*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  commentId: M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  id: Accept(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Accept(ExpressionVisitor)
  nameWithType: Expression.Accept(ExpressionVisitor)
  fullName: Expression.Accept(ExpressionVisitor)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Dispatches to the specific visit method for this node type. For example, <xref href="System.Linq.Expressions.MethodCallExpression"></xref> calls the <xref href="System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)"></xref>.
  remarks: This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.
  syntax:
    content: protected virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
      description: The visitor to visit this node with.
    return:
      type: System.Linq.Expressions.Expression
      description: The result of visiting this node.
  overload: System.Linq.Expressions.Expression.Accept*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Add(Expression, Expression)
  nameWithType: Expression.Add(Expression, Expression)
  fullName: Expression.Add(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic addition operation that does not have overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator."
  example:
  - "The following code example shows how to create an expression that adds two integers.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#1)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#1)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Add"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Add(Expression, Expression, MethodInfo)
  nameWithType: Expression.Add(Expression, Expression, MethodInfo)
  fullName: Expression.Add(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Add"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddAssign(Expression, Expression)
  nameWithType: Expression.AddAssign(Expression, Expression)
  fullName: Expression.AddAssign(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an addition assignment operation that does not have overflow checking.
  remarks: ''
  example:
  - "The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#18)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#18)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AddAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.AddAssign(Expression, Expression, MethodInfo)
  fullName: Expression.AddAssign(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an addition assignment operation that does not have overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AddAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an addition assignment operation that does not have overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AddAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddAssignChecked(Expression, Expression)
  nameWithType: Expression.AddAssignChecked(Expression, Expression)
  fullName: Expression.AddAssignChecked(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an addition assignment operation that has overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AddAssignChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddAssignChecked*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddAssignChecked(Expression, Expression, MethodInfo)
  nameWithType: Expression.AddAssignChecked(Expression, Expression, MethodInfo)
  fullName: Expression.AddAssignChecked(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an addition assignment operation that has overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AddAssignChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddAssignChecked*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an addition assignment operation that has overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AddAssignChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddAssignChecked*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddChecked(Expression, Expression)
  nameWithType: Expression.AddChecked(Expression, Expression)
  fullName: Expression.AddChecked(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic addition operation that has overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AddChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddChecked*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddChecked(Expression, Expression, MethodInfo)
  nameWithType: Expression.AddChecked(Expression, Expression, MethodInfo)
  fullName: Expression.AddChecked(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AddChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddChecked*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: And(Expression, Expression)
  nameWithType: Expression.And(Expression, Expression)
  fullName: Expression.And(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise `AND` operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `AND` operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator."
  example:
  - "The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#2)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#2)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.And"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.And*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: And(Expression, Expression, MethodInfo)
  nameWithType: Expression.And(Expression, Expression, MethodInfo)
  fullName: Expression.And(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise `AND` operation. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `AND` operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.And"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.And*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AndAlso(Expression, Expression, MethodInfo)
  nameWithType: Expression.AndAlso(Expression, Expression, MethodInfo)
  fullName: Expression.AndAlso(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a conditional `AND` operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n    > [!NOTE]\n    >  The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   `left`.Type and `right`.Type are the same Boolean type.  \n  \n-   If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `AND` operator.  \n  \n-   If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AndAlso"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AndAlso*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>method</code> is `null` and the bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \n  \n -or-  \n  \n <code>method</code> is `null` and <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AndAlso(Expression, Expression)
  nameWithType: Expression.AndAlso(Expression, Expression)
  fullName: Expression.AndAlso(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a conditional `AND` operation that evaluates the second operand only if the first operand evaluates to `true`.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n    > [!NOTE]\n    >  The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   `left`.Type and `right`.Type are the same Boolean type.  \n  \n-   If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `AND` operator.  \n  \n-   If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator."
  example:
  - "The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to `true`.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#19)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#19)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AndAlso"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AndAlso*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \n  \n -or-  \n  \n <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AndAssign(Expression, Expression)
  nameWithType: Expression.AndAssign(Expression, Expression)
  fullName: Expression.AndAssign(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise AND assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AndAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AndAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AndAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.AndAssign(Expression, Expression, MethodInfo)
  fullName: Expression.AndAssign(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise AND assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AndAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AndAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AndAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise AND assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.AndAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AndAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ArrayAccess(Expression, IEnumerable<Expression>)
  nameWithType: Expression.ArrayAccess(Expression, IEnumerable<Expression>)
  fullName: Expression.ArrayAccess(Expression, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.IndexExpression"></xref> to access a multidimensional array.
  remarks: The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.
  example:
  - "The following code example shows how to change the value of an element in a multidimensional array by using the `ArrayAccess` method.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#21)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#21)]"
  syntax:
    content: public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> indexes);
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An expression that represents the multidimensional array.
    - id: indexes
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> containing expressions used to index the array.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <xref href="System.Linq.Expressions.IndexExpression"></xref>.
  overload: System.Linq.Expressions.Expression.ArrayAccess*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ArrayAccess(Expression, Expression[])
  nameWithType: Expression.ArrayAccess(Expression, Expression[])
  fullName: Expression.ArrayAccess(Expression, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.IndexExpression"></xref> to access an array.
  remarks: "The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.  \n  \n For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method."
  example:
  - "The following code example shows how to change a value of an array element by using the `ArrayAccess` method.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#20)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#20)]"
  syntax:
    content: public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An expression representing the array to index.
    - id: indexes
      type: System.Linq.Expressions.Expression[]
      description: An array that contains expressions used to index the array.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <xref href="System.Linq.Expressions.IndexExpression"></xref>.
  overload: System.Linq.Expressions.Expression.ArrayAccess*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ArrayIndex(Expression, Expression[])
  nameWithType: Expression.ArrayIndex(Expression, Expression[])
  fullName: Expression.ArrayIndex(Expression, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents applying an array index operator to a multidimensional array.
  remarks: "Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.  \n  \n If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>. The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of the<xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.  \n  \n If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>. The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]\n [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]"
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> instances - indexes for the array index operation.
    - id: indexes
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MethodCallExpression.Arguments"></xref> collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> and <xref href="System.Linq.Expressions.MethodCallExpression.Arguments"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ArrayIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> or <code>indexes</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>.Type does not represent an array type.  \n  \n -or-  \n  \n The rank of <code>array</code>.Type does not match the number of elements in <code>indexes</code>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>indexes</code> does not represent the <xref href=\"System.Int32\"></xref> type."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ArrayIndex(Expression, IEnumerable<Expression>)
  nameWithType: Expression.ArrayIndex(Expression, IEnumerable<Expression>)
  fullName: Expression.ArrayIndex(Expression, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents applying an array index operator to an array of rank more than one.
  remarks: "Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.  \n  \n If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>. The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.  \n  \n If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>. The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]\n [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]"
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> indexes);
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> property equal to.
    - id: indexes
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MethodCallExpression.Arguments"></xref> collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> and <xref href="System.Linq.Expressions.MethodCallExpression.Arguments"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ArrayIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> or <code>indexes</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>.Type does not represent an array type.  \n  \n -or-  \n  \n The rank of <code>array</code>.Type does not match the number of elements in <code>indexes</code>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>indexes</code> does not represent the <xref href=\"System.Int32\"></xref> type."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ArrayIndex(Expression, Expression)
  nameWithType: Expression.ArrayIndex(Expression, Expression)
  fullName: Expression.ArrayIndex(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents applying an array index operator to an array of rank one.
  remarks: "`index` must represent an index of type <xref:System.Int32>.  \n  \n The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of `array`.Type. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: index
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ArrayIndex"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ArrayIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> or <code>index</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>.Type does not represent an array type.  \n  \n -or-  \n  \n <code>array</code>.Type represents an array type whose rank is not 1.  \n  \n -or-  \n  \n <code>index</code>.Type does not represent the <xref href=\"System.Int32\"></xref> type."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  id: ArrayLength(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ArrayLength(Expression)
  nameWithType: Expression.ArrayLength(Expression)
  fullName: Expression.ArrayLength(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents an expression for obtaining the length of a one-dimensional array.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ArrayLength"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to <code>array</code>.
  overload: System.Linq.Expressions.Expression.ArrayLength*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>array</code>.Type does not represent an array type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Assign(Expression, Expression)
  nameWithType: Expression.Assign(Expression, Expression)
  fullName: Expression.Assign(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an assignment operation.
  remarks: The `Assign` expression copies a value for value types, and it copies a reference for reference types.
  example:
  - "The following code example shows how to create an expression that represents an assignment operation.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#12)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#12)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Assign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Assign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  id: Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Bind(MemberInfo, Expression)
  nameWithType: Expression.Bind(MemberInfo, Expression)
  fullName: Expression.Bind(MemberInfo, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberAssignment"></xref> that represents the initialization of a field or property.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of `member`.
  syntax:
    content: public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: A <xref href="System.Reflection.MemberInfo"></xref> to set the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> property equal to.
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.MemberAssignment.Expression"></xref> property equal to.
    return:
      type: System.Linq.Expressions.MemberAssignment
      description: A <xref href="System.Linq.Expressions.MemberAssignment"></xref> that has <xref href="System.Linq.Expressions.MemberBinding.BindingType"></xref> equal to <xref href="System.Linq.Expressions.MemberBindingType.Assignment"></xref> and the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> and <xref href="System.Linq.Expressions.MemberAssignment.Expression"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Bind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>member</code> or <code>expression</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>member</code> does not represent a field or property.  \n  \n -or-  \n  \n The property represented by <code>member</code> does not have a `set` accessor.  \n  \n -or-  \n  \n <code>expression</code>.Type is not assignable to the type of the field or property that <code>member</code> represents."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  id: Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Bind(MethodInfo, Expression)
  nameWithType: Expression.Bind(MethodInfo, Expression)
  fullName: Expression.Bind(MethodInfo, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberAssignment"></xref> that represents the initialization of a member by using a property accessor method.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in `propertyAccessor`.
  syntax:
    content: public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents a property accessor method.
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.MemberAssignment.Expression"></xref> property equal to.
    return:
      type: System.Linq.Expressions.MemberAssignment
      description: A <xref href="System.Linq.Expressions.MemberAssignment"></xref> that has the <xref href="System.Linq.Expressions.MemberBinding.BindingType"></xref> property equal to <xref href="System.Linq.Expressions.MemberBindingType.Assignment"></xref>, the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> property set to the <xref href="System.Reflection.PropertyInfo"></xref> that represents the property accessed in <code>propertyAccessor</code>, and the <xref href="System.Linq.Expressions.MemberAssignment.Expression"></xref> property set to <code>expression</code>.
  overload: System.Linq.Expressions.Expression.Bind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>propertyAccessor</code> or <code>expression</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>propertyAccessor</code> does not represent a property accessor method.  \n  \n -or-  \n  \n The property accessed by <code>propertyAccessor</code> does not have a `set` accessor.  \n  \n -or-  \n  \n <code>expression</code>.Type is not assignable to the type of the field or property that <code>member</code> represents."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)
  nameWithType: Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)
  fullName: Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BlockExpression"></xref> that contains the given variables and expressions.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the block.
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The variables in the block.
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Block*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Expression, Expression, Expression)
  nameWithType: Expression.Block(Expression, Expression, Expression)
  fullName: Expression.Block(Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BlockExpression"></xref> that contains three expressions and has no variables.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Block*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Expression, Expression, Expression, Expression, Expression)
  nameWithType: Expression.Block(Expression, Expression, Expression, Expression, Expression)
  fullName: Expression.Block(Expression, Expression, Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BlockExpression"></xref> that contains five expressions and has no variables.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third expression in the block.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The fourth expression in the block.
    - id: arg4
      type: System.Linq.Expressions.Expression
      description: The fifth expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Block*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Type, IEnumerable<ParameterExpression>, Expression[])
  nameWithType: Expression.Block(Type, IEnumerable<ParameterExpression>, Expression[])
  fullName: Expression.Block(Type, IEnumerable<ParameterExpression>, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BlockExpression"></xref> that contains the given variables and expressions.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Linq.Expressions.Expression[] expressions);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the block.
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The variables in the block.
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Block*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  id: Block(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Type, Expression[])
  nameWithType: Expression.Block(Type, Expression[])
  fullName: Expression.Block(Type, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BlockExpression"></xref> that contains the given expressions, has no variables and has specific result type.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Linq.Expressions.Expression[] expressions);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the block.
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Block*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Expression, Expression, Expression, Expression)
  nameWithType: Expression.Block(Expression, Expression, Expression, Expression)
  fullName: Expression.Block(Expression, Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BlockExpression"></xref> that contains four expressions and has no variables.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third expression in the block.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The fourth expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Block*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Expression, Expression)
  nameWithType: Expression.Block(Expression, Expression)
  fullName: Expression.Block(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BlockExpression"></xref> that contains two expressions and has no variables.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Block*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(IEnumerable<ParameterExpression>, Expression[])
  nameWithType: Expression.Block(IEnumerable<ParameterExpression>, Expression[])
  fullName: Expression.Block(IEnumerable<ParameterExpression>, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BlockExpression"></xref> that contains the given variables and expressions.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Linq.Expressions.Expression[] expressions);
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The variables in the block.
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Block*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)
  nameWithType: Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)
  fullName: Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BlockExpression"></xref> that contains the given variables and expressions.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  example:
  - "The following code example shows how to pass a parameter to a block expression and process this parameter within a block.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#14)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#14)]"
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The variables in the block.
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Block*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  id: Block(System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Expression[])
  nameWithType: Expression.Block(Expression[])
  fullName: Expression.Block(Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BlockExpression"></xref> that contains the given expressions and has no variables.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  example:
  - "The following code example shows how to create a block expression. The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]"
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression[] expressions);
    parameters:
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Block*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(IEnumerable<Expression>)
  nameWithType: Expression.Block(IEnumerable<Expression>)
  fullName: Expression.Block(IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BlockExpression"></xref> that contains the given expressions and has no variables.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);
    parameters:
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Block*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Type, IEnumerable<Expression>)
  nameWithType: Expression.Block(Type, IEnumerable<Expression>)
  fullName: Expression.Block(Type, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BlockExpression"></xref> that contains the given expressions, has no variables and has specific result type.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the block.
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Block*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  id: Break(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Break(LabelTarget)
  nameWithType: Expression.Break(LabelTarget)
  fullName: Expression.Break(LabelTarget)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a break statement.
  remarks: ''
  example:
  - "The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LoopExpression> object that uses the <xref:System.Linq.Expressions.Expression.Break%2A> method.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]"
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Break, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Break*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Break(LabelTarget, Expression)
  nameWithType: Expression.Break(LabelTarget, Expression)
  fullName: Expression.Break(LabelTarget, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a break statement. The value passed to the label upon jumping can be specified.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Break, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Break*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  id: Break(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Break(LabelTarget, Type)
  nameWithType: Expression.Break(LabelTarget, Type)
  fullName: Expression.Break(LabelTarget, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a break statement with the specified type.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    - id: type
      type: System.Type
      description: An <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Break, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, and the <xref href="System.Linq.Expressions.Expression.Type"></xref> property set to <code>type</code>.
  overload: System.Linq.Expressions.Expression.Break*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Break(LabelTarget, Expression, Type)
  nameWithType: Expression.Break(LabelTarget, Expression, Type)
  fullName: Expression.Break(LabelTarget, Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    - id: type
      type: System.Type
      description: An <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Break, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, the <xref href="System.Linq.Expressions.Expression.Type"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Break*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)
  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)
  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a static method that takes five arguments.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the second argument.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the third argument.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the fourth argument.
    - id: arg4
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the fifth argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> and <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>method</code> is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Expression, MethodInfo, Expression, Expression, Expression)
  nameWithType: Expression.Call(Expression, MethodInfo, Expression, Expression, Expression)
  fullName: Expression.Call(Expression, MethodInfo, Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a method that takes three arguments.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: The <xref href="System.Reflection.MethodInfo"></xref> that represents the target method.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the second argument.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the third argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> and <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  id: Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Type, String, Type[], Expression[])
  nameWithType: Expression.Call(Type, String, Type[], Expression[])
  fullName: Expression.Call(Type, String, Type[], Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a `static` (`Shared` in Visual Basic) method by calling the appropriate factory method.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`. The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Type"></xref> that specifies the type that contains the specified `static` (`Shared` in Visual Basic) method.
    - id: methodName
      type: System.String
      description: The name of the method.
    - id: typeArguments
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects that represent the arguments to the method.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref>, the <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> property set to the <xref href="System.Reflection.MethodInfo"></xref> that represents the specified `static` (`Shared` in Visual Basic) method, and the <xref href="System.Linq.Expressions.MethodCallExpression.Arguments"></xref> property set to the specified arguments.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> or <code>methodName</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>type</code> or its base types.  \n  \n -or-  \n  \n More than one method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>type</code> or its base types."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo, Expression, Expression, Expression)
  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression)
  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a static method that takes three arguments.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the second argument.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the third argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> and <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>method</code> is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  id: Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Expression, String, Type[], Expression[])
  nameWithType: Expression.Call(Expression, String, Type[], Expression[])
  fullName: Expression.Call(Expression, String, Type[], Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a method by calling the appropriate factory method.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> whose <xref href="System.Linq.Expressions.Expression.Type"></xref> property value will be searched for a specific method.
    - id: methodName
      type: System.String
      description: The name of the method.
    - id: typeArguments
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects that represents the arguments to the method.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref>, the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> property equal to <code>instance</code>, <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> set to the <xref href="System.Reflection.MethodInfo"></xref> that represents the specified instance method, and <xref href="System.Linq.Expressions.MethodCallExpression.Arguments"></xref> set to the specified arguments.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>instance</code> or <code>methodName</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>instance</code>.Type or its base types.  \n  \n -or-  \n  \n More than one method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>instance</code>.Type or its base types."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Expression, MethodInfo, Expression, Expression)
  nameWithType: Expression.Call(Expression, MethodInfo, Expression, Expression)
  fullName: Expression.Call(Expression, MethodInfo, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a method that takes two arguments.
  remarks: ''
  example:
  - "The following code example shows how to create an expression that calls an instance method that has two arguments.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#17)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#17)]"
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: The <xref href="System.Reflection.MethodInfo"></xref> that represents the target method.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the second argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> and <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo, Expression, Expression, Expression, Expression)
  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression)
  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a static method that takes four arguments.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the second argument.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the third argument.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the fourth argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> and <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>method</code> is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Expression, MethodInfo, Expression[])
  nameWithType: Expression.Call(Expression, MethodInfo, Expression[])
  fullName: Expression.Call(Expression, MethodInfo, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a method that takes arguments.
  remarks: "To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.  \n  \n If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.  \n  \n If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`. Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.  \n  \n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments`, some of which may be quoted.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`."
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that specifies the instance for an instance method call (pass `null` for a `static` (`Shared` in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> property equal to.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MethodCallExpression.Arguments"></xref> collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref>, <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref>, and <xref href="System.Linq.Expressions.MethodCallExpression.Arguments"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code> is `null`.  \n  \n -or-  \n  \n <code>instance</code> is `null` and <code>method</code> represents an instance method.  \n  \n -or-  \n  \n <code>arguments</code> is not `null` and one or more of its elements is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>.  \n  \n -or-  \n  \n The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>.  \n  \n -or-  \n  \n One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Expression, MethodInfo, IEnumerable<Expression>)
  nameWithType: Expression.Call(Expression, MethodInfo, IEnumerable<Expression>)
  fullName: Expression.Call(Expression, MethodInfo, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a method that takes arguments.
  remarks: "To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.  \n  \n If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.  \n  \n If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`. Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.  \n  \n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments`, some of which may be quoted.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`."
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> property equal to (pass `null` for a `static` (`Shared` in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MethodCallExpression.Arguments"></xref> collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref>, <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref>, and <xref href="System.Linq.Expressions.MethodCallExpression.Arguments"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code> is `null`.  \n  \n -or-  \n  \n <code>instance</code> is `null` and <code>method</code> represents an instance method."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>.  \n  \n -or-  \n  \n The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>.  \n  \n -or-  \n  \n One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo, Expression[])
  nameWithType: Expression.Call(MethodInfo, Expression[])
  fullName: Expression.Call(MethodInfo, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a `static` (`Shared` in Visual Basic) method that has arguments.
  remarks: "If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`. Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.  \n  \n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments`, some of which may be quoted.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`. The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`."
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents a `static` (`Shared` in Visual Basic) method to set the <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> property equal to.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MethodCallExpression.Arguments"></xref> collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> and <xref href="System.Linq.Expressions.MethodCallExpression.Arguments"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>method</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>.  \n  \n -or-  \n  \n One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo, Expression)
  nameWithType: Expression.Call(MethodInfo, Expression)
  fullName: Expression.Call(MethodInfo, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a `static` (`Shared` in Visual Basic) method that takes one argument.
  remarks: ''
  example:
  - "The following example demonstrates how to create an expression that calls a `static` (`Shared` in Visual Basic) method that takes one argument.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#16)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#16)]"
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the first argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> and <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>method</code> is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo, IEnumerable<Expression>)
  nameWithType: Expression.Call(MethodInfo, IEnumerable<Expression>)
  fullName: Expression.Call(MethodInfo, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a static (Shared in Visual Basic) method.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: The <xref href="System.Reflection.MethodInfo"></xref> that represents the target method.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: A collection of <xref href="System.Linq.Expressions.Expression"></xref> that represents the call arguments.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> and <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Expression, MethodInfo)
  nameWithType: Expression.Call(Expression, MethodInfo)
  fullName: Expression.Call(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a method that takes no arguments.
  remarks: "To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method.  \n  \n If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.  \n  \n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by `method`."
  example:
  - "The following code example shows how to create an expression that calls a method without arguments.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#15)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#15)]"
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that specifies the instance for an instance method call (pass `null` for a `static` (`Shared` in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> and <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code> is `null`.  \n  \n -or-  \n  \n <code>instance</code> is `null` and <code>method</code> represents an instance method."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo, Expression, Expression)
  nameWithType: Expression.Call(MethodInfo, Expression, Expression)
  fullName: Expression.Call(MethodInfo, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that represents a call to a static method that takes two arguments.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The <xref href="System.Linq.Expressions.Expression"></xref> that represents the second argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.MethodCallExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Call"></xref> and the <xref href="System.Linq.Expressions.MethodCallExpression.Object"></xref> and <xref href="System.Linq.Expressions.MethodCallExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>method</code> is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.CanReduce
  commentId: P:System.Linq.Expressions.Expression.CanReduce
  id: CanReduce
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: CanReduce
  nameWithType: Expression.CanReduce
  fullName: Expression.CanReduce
  type: Property
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.
  syntax:
    content: public virtual bool CanReduce { get; }
    return:
      type: System.Boolean
      description: True if the node can be reduced, otherwise false.
  overload: System.Linq.Expressions.Expression.CanReduce*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Catch(ParameterExpression, Expression)
  nameWithType: Expression.Catch(ParameterExpression, Expression)
  fullName: Expression.Catch(ParameterExpression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.CatchBlock"></xref> representing a catch statement with a reference to the caught <xref href="System.Exception"></xref> object for use in the handler body.
  syntax:
    content: public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: A <xref href="System.Linq.Expressions.ParameterExpression"></xref> representing a reference to the <xref href="System.Exception"></xref> object caught by this handler.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created <xref href="System.Linq.Expressions.CatchBlock"></xref>.
  overload: System.Linq.Expressions.Expression.Catch*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  id: Catch(System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Catch(Type, Expression)
  nameWithType: Expression.Catch(Type, Expression)
  fullName: Expression.Catch(Type, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.CatchBlock"></xref> representing a catch statement.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.
  syntax:
    content: public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Linq.Expressions.Expression.Type"></xref> of <xref href="System.Exception"></xref> this <xref href="System.Linq.Expressions.CatchBlock"></xref> will handle.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created <xref href="System.Linq.Expressions.CatchBlock"></xref>.
  overload: System.Linq.Expressions.Expression.Catch*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Catch(ParameterExpression, Expression, Expression)
  nameWithType: Expression.Catch(ParameterExpression, Expression, Expression)
  fullName: Expression.Catch(ParameterExpression, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.CatchBlock"></xref> representing a catch statement with an <xref href="System.Exception"></xref> filter and a reference to the caught <xref href="System.Exception"></xref> object.
  syntax:
    content: public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: A <xref href="System.Linq.Expressions.ParameterExpression"></xref> representing a reference to the <xref href="System.Exception"></xref> object caught by this handler.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    - id: filter
      type: System.Linq.Expressions.Expression
      description: The body of the <xref href="System.Exception"></xref> filter.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created <xref href="System.Linq.Expressions.CatchBlock"></xref>.
  overload: System.Linq.Expressions.Expression.Catch*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Catch(Type, Expression, Expression)
  nameWithType: Expression.Catch(Type, Expression, Expression)
  fullName: Expression.Catch(Type, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.CatchBlock"></xref> representing a catch statement with an <xref href="System.Exception"></xref> filter but no reference to the caught <xref href="System.Exception"></xref> object.
  syntax:
    content: public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Linq.Expressions.Expression.Type"></xref> of <xref href="System.Exception"></xref> this <xref href="System.Linq.Expressions.CatchBlock"></xref> will handle.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    - id: filter
      type: System.Linq.Expressions.Expression
      description: The body of the <xref href="System.Exception"></xref> filter.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created <xref href="System.Linq.Expressions.CatchBlock"></xref>.
  overload: System.Linq.Expressions.Expression.Catch*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  commentId: M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  id: ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ClearDebugInfo(SymbolDocumentInfo)
  nameWithType: Expression.ClearDebugInfo(SymbolDocumentInfo)
  fullName: Expression.ClearDebugInfo(SymbolDocumentInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DebugInfoExpression"></xref> for clearing a sequence point.
  syntax:
    content: public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);
    parameters:
    - id: document
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: The <xref href="System.Linq.Expressions.SymbolDocumentInfo"></xref> that represents the source file.
    return:
      type: System.Linq.Expressions.DebugInfoExpression
      description: An instance of <xref href="System.Linq.Expressions.DebugInfoExpression"></xref> for clearning a sequence point.
  overload: System.Linq.Expressions.Expression.ClearDebugInfo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Coalesce(Expression, Expression, LambdaExpression)
  nameWithType: Expression.Coalesce(Expression, Expression, LambdaExpression)
  fullName: Expression.Coalesce(Expression, Expression, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a coalescing operation, given a conversion function.
  remarks: "The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.  \n  \n The following rules determine the result type:  \n  \n-   If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.  \n  \n-   Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.  \n  \n-   Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Coalesce"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Coalesce*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>left</code>.Type and <code>right</code>.Type are not convertible to each other.  \n  \n -or-  \n  \n <code>conversion</code> is not `null` and <code>conversion</code>.Type is a delegate type that does not take exactly one argument."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of <code>left</code> does not represent a reference type or a nullable value type.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of <code>left</code> represents a type that is not assignable to the parameter type of the delegate type <code>conversion</code>.Type.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of <code>right</code> is not equal to the return type of the delegate type <code>conversion</code>.Type."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Coalesce(Expression, Expression)
  nameWithType: Expression.Coalesce(Expression, Expression)
  fullName: Expression.Coalesce(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a coalescing operation.
  remarks: "The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n#### Result Type  \n The following rules determine the result type:  \n  \n-   If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.  \n  \n-   Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.  \n  \n-   Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Coalesce"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Coalesce*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Linq.Expressions.Expression.Type"></xref> property of <code>left</code> does not represent a reference type or a nullable value type.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>left</code>.Type and <code>right</code>.Type are not convertible to each other.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Condition(Expression, Expression, Expression)
  nameWithType: Expression.Condition(Expression, Expression, Expression)
  fullName: Expression.Condition(Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ConditionalExpression"></xref> that represents a conditional statement.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `ifTrue`.
  example:
  - "The following code example shows how to create an expression that represents a conditional statement. If the first argument evaluates to `true`, the second argument is executed; otherwise, the third argument is executed.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#3)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#3)]"
  syntax:
    content: public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.ConditionalExpression.Test"></xref> property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.ConditionalExpression.IfTrue"></xref> property equal to.
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.ConditionalExpression.IfFalse"></xref> property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: A <xref href="System.Linq.Expressions.ConditionalExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Conditional"></xref> and the <xref href="System.Linq.Expressions.ConditionalExpression.Test"></xref>, <xref href="System.Linq.Expressions.ConditionalExpression.IfTrue"></xref>, and <xref href="System.Linq.Expressions.ConditionalExpression.IfFalse"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Condition*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>test</code> or <code>ifTrue</code> or <code>ifFalse</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>test</code>.Type is not <xref href=\"System.Boolean\"></xref>.  \n  \n -or-  \n  \n <code>ifTrue</code>.Type is not equal to <code>ifFalse</code>.Type."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Condition(Expression, Expression, Expression, Type)
  nameWithType: Expression.Condition(Expression, Expression, Expression, Type)
  fullName: Expression.Condition(Expression, Expression, Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ConditionalExpression"></xref> that represents a conditional statement.
  remarks: This method allows explicitly unifying the result type of the conditional expression in cases where the types of `ifTrue` and `ifFalse` expressions are not equal. Types of both `ifTrue` and `ifFalse` must be implicitly reference assignable to the result type. The `type` is allowed to be <xref:System.Void>.
  syntax:
    content: public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.ConditionalExpression.Test"></xref> property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.ConditionalExpression.IfTrue"></xref> property equal to.
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.ConditionalExpression.IfFalse"></xref> property equal to.
    - id: type
      type: System.Type
      description: A <xref href="System.Linq.Expressions.Expression.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: A <xref href="System.Linq.Expressions.ConditionalExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Conditional"></xref> and the <xref href="System.Linq.Expressions.ConditionalExpression.Test"></xref>, <xref href="System.Linq.Expressions.ConditionalExpression.IfTrue"></xref>, and <xref href="System.Linq.Expressions.ConditionalExpression.IfFalse"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Condition*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Constant(System.Object)
  commentId: M:System.Linq.Expressions.Expression.Constant(System.Object)
  id: Constant(System.Object)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Constant(Object)
  nameWithType: Expression.Constant(Object)
  fullName: Expression.Constant(Object)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ConstantExpression"></xref> that has the <xref href="System.Linq.Expressions.ConstantExpression.Value"></xref> property set to the specified value.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of `value`. If `value` is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.  \n  \n To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type."
  example:
  - "The following code example shows how to create an expression that represents a constant value.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#4)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#4)]"
  syntax:
    content: public static System.Linq.Expressions.ConstantExpression Constant (object value);
    parameters:
    - id: value
      type: System.Object
      description: An <xref href="System.Object"></xref> to set the <xref href="System.Linq.Expressions.ConstantExpression.Value"></xref> property equal to.
    return:
      type: System.Linq.Expressions.ConstantExpression
      description: A <xref href="System.Linq.Expressions.ConstantExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Constant"></xref> and the <xref href="System.Linq.Expressions.ConstantExpression.Value"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.Constant*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  id: Constant(System.Object,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Constant(Object, Type)
  nameWithType: Expression.Constant(Object, Type)
  fullName: Expression.Constant(Object, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ConstantExpression"></xref> that has the <xref href="System.Linq.Expressions.ConstantExpression.Value"></xref> and <xref href="System.Linq.Expressions.Expression.Type"></xref> properties set to the specified values.
  remarks: This method can be useful for representing values of nullable types.
  example:
  - "The following code example shows how to create an expression that represents a constant of the nullable type and set its value to `null`.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#22)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#22)]"
  syntax:
    content: public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);
    parameters:
    - id: value
      type: System.Object
      description: An <xref href="System.Object"></xref> to set the <xref href="System.Linq.Expressions.ConstantExpression.Value"></xref> property equal to.
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.ConstantExpression
      description: A <xref href="System.Linq.Expressions.ConstantExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Constant"></xref> and the <xref href="System.Linq.Expressions.ConstantExpression.Value"></xref> and <xref href="System.Linq.Expressions.Expression.Type"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Constant*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is not `null` and <code>type</code> is not assignable from the dynamic type of <code>value</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  id: Continue(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Continue(LabelTarget)
  nameWithType: Expression.Continue(LabelTarget)
  fullName: Expression.Continue(LabelTarget)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a continue statement.
  remarks: ''
  example:
  - "The following example demonstrates how to create a loop expression that uses the <xref:System.Linq.Expressions.Expression.Continue%2A> method.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#46)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#46)]"
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Continue, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Continue*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  id: Continue(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Continue(LabelTarget, Type)
  nameWithType: Expression.Continue(LabelTarget, Type)
  fullName: Expression.Continue(LabelTarget, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a continue statement with the specified type.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    - id: type
      type: System.Type
      description: An <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Continue, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, the <xref href="System.Linq.Expressions.Expression.Type"></xref> property set to <code>type</code>, and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Continue*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  id: Convert(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Convert(Expression, Type)
  nameWithType: Expression.Convert(Expression, Type)
  fullName: Expression.Convert(Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a type conversion operation.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise:  \n  \n    -   If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \n  \n    -   If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.  \n  \n#### Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.  \n  \n-   If one or both of `expression`.Type or `type` is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \n  \n If the implementing method is `null`:  \n  \n-   If both `expression`.Type and `type` are non-nullable, the node is not lifted.  \n  \n-   Otherwise the node is lifted."
  example:
  - "The following code example shows how to create an expression that represents a type convertion operation.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#23)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#23)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Convert"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> and <xref href="System.Linq.Expressions.Expression.Type"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Convert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> or <code>type</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Convert(Expression, Type, MethodInfo)
  nameWithType: Expression.Convert(Expression, Type, MethodInfo)
  fullName: Expression.Convert(Expression, Type, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a conversion operation for which the implementing method is specified.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If method is not `null`, it is the implementing method. It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.  \n  \n-   Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise:  \n  \n    -   If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \n  \n    -   If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.  \n  \n#### Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.  \n  \n-   If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \n  \n If the implementing method is `null`:  \n  \n-   If both `expression`.Type and `type` are non-nullable, the node is not lifted.  \n  \n-   Otherwise the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Convert"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref>, <xref href="System.Linq.Expressions.Expression.Type"></xref>, and <xref href="System.Linq.Expressions.UnaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Convert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> or <code>type</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.  \n  \n -or-  \n  \n <code>expression</code>.Type is not assignable to the argument type of the method represented by <code>method</code>.  \n  \n -or-  \n  \n The return type of the method represented by <code>method</code> is not assignable to <code>type</code>.  \n  \n -or-  \n  \n <code>expression</code>.Type or <code>type</code> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <code>method</code>."
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one method that matches the <code>method</code> description was found.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ConvertChecked(Expression, Type)
  nameWithType: Expression.ConvertChecked(Expression, Type)
  fullName: Expression.ConvertChecked(Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a conversion operation that throws an exception if the target type is overflowed.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise:  \n  \n    -   If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \n  \n    -   If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.  \n  \n#### Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.  \n  \n-   If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \n  \n If the implementing method is `null`:  \n  \n-   If both `expression`.Type and `type` are non-nullable, the node is not lifted.  \n  \n-   Otherwise the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ConvertChecked"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> and <xref href="System.Linq.Expressions.Expression.Type"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ConvertChecked*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> or <code>type</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ConvertChecked(Expression, Type, MethodInfo)
  nameWithType: Expression.ConvertChecked(Expression, Type, MethodInfo)
  fullName: Expression.ConvertChecked(Expression, Type, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If method is not `null`, it is the implementing method. It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.  \n  \n-   Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise:  \n  \n    -   If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \n  \n    -   If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.  \n  \n#### Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.  \n  \n-   If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \n  \n If the implementing method is `null`:  \n  \n-   If both `expression`.Type and `type` are non-nullable, the node is not lifted.  \n  \n-   Otherwise the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ConvertChecked"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref>, <xref href="System.Linq.Expressions.Expression.Type"></xref>, and <xref href="System.Linq.Expressions.UnaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ConvertChecked*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> or <code>type</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.  \n  \n -or-  \n  \n <code>expression</code>.Type is not assignable to the argument type of the method represented by <code>method</code>.  \n  \n -or-  \n  \n The return type of the method represented by <code>method</code> is not assignable to <code>type</code>.  \n  \n -or-  \n  \n <code>expression</code>.Type or <code>type</code> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <code>method</code>."
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one method that matches the <code>method</code> description was found.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)
  nameWithType: Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)
  fullName: Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DebugInfoExpression"></xref> with the specified span.
  syntax:
    content: public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);
    parameters:
    - id: document
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: The <xref href="System.Linq.Expressions.SymbolDocumentInfo"></xref> that represents the source file.
    - id: startLine
      type: System.Int32
      description: The start line of this <xref href="System.Linq.Expressions.DebugInfoExpression"></xref>. Must be greater than 0.
    - id: startColumn
      type: System.Int32
      description: The start column of this <xref href="System.Linq.Expressions.DebugInfoExpression"></xref>. Must be greater than 0.
    - id: endLine
      type: System.Int32
      description: The end line of this <xref href="System.Linq.Expressions.DebugInfoExpression"></xref>. Must be greater or equal than the start line.
    - id: endColumn
      type: System.Int32
      description: The end column of this <xref href="System.Linq.Expressions.DebugInfoExpression"></xref>. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.
    return:
      type: System.Linq.Expressions.DebugInfoExpression
      description: An instance of <xref href="System.Linq.Expressions.DebugInfoExpression"></xref>.
  overload: System.Linq.Expressions.Expression.DebugInfo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  id: Decrement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Decrement(Expression)
  nameWithType: Expression.Decrement(Expression)
  fullName: Expression.Decrement(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the decrementing of the expression by 1.
  remarks: This expression is functional and does not change the value of the object passed to it.
  example:
  - "The following code example shows how to create an expression that substracts 1 from a given value.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#5)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#5)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to decrement.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the decremented expression.
  overload: System.Linq.Expressions.Expression.Decrement*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Decrement(Expression, MethodInfo)
  nameWithType: Expression.Decrement(Expression, MethodInfo)
  fullName: Expression.Decrement(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the decrementing of the expression by 1.
  remarks: This expression is functional and does not change the value of the object passed to it.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to decrement.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the decremented expression.
  overload: System.Linq.Expressions.Expression.Decrement*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Default(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Default(System.Type)
  id: Default(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Default(Type)
  nameWithType: Expression.Default(Type)
  fullName: Expression.Default(Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DefaultExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.Type"></xref> property set to the specified type.
  remarks: ''
  example:
  - "The following code example shows how to create an expression that represents a default vaule for a given type.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#6)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#6)]"
  syntax:
    content: public static System.Linq.Expressions.DefaultExpression Default (Type type);
    parameters:
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.DefaultExpression
      description: A <xref href="System.Linq.Expressions.DefaultExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Default"></xref> and the <xref href="System.Linq.Expressions.Expression.Type"></xref> property set to the specified type.
  overload: System.Linq.Expressions.Expression.Default*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Divide(Expression, Expression)
  nameWithType: Expression.Divide(Expression, Expression)
  fullName: Expression.Divide(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic division operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator."
  example:
  - "The following code example shows how to create an expression that divides divides its first argument by its second argument.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#7)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#7)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Divide"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Divide*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The division operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Divide(Expression, Expression, MethodInfo)
  nameWithType: Expression.Divide(Expression, Expression, MethodInfo)
  fullName: Expression.Divide(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic division operation. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Divide"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Divide*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the division operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: DivideAssign(Expression, Expression)
  nameWithType: Expression.DivideAssign(Expression, Expression)
  fullName: Expression.DivideAssign(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a division assignment operation that does not have overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.DivideAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.DivideAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: DivideAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.DivideAssign(Expression, Expression, MethodInfo)
  fullName: Expression.DivideAssign(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a division assignment operation that does not have overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.DivideAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.DivideAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a division assignment operation that does not have overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.DivideAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.DivideAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)
  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DynamicExpression"></xref> that represents a dynamic operation bound by the provided <xref href="System.Runtime.CompilerServices.CallSiteBinder"></xref>.
  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: returnType
      type: System.Type
      description: The result type of the dynamic expression.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second argument to the dynamic operation.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third argument to the dynamic operation.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The fourth argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <xref href="System.Linq.Expressions.DynamicExpression"></xref> that has <xref href="System.Linq.Expressions.Expression.NodeType"></xref> equal to <xref href="System.Linq.Expressions.ExpressionType.Dynamic"></xref> and has the <xref href="System.Linq.Expressions.DynamicExpression.Binder"></xref> and <xref href="System.Linq.Expressions.DynamicExpression.Arguments"></xref> set to the specified values.
  overload: System.Linq.Expressions.Expression.Dynamic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Dynamic(CallSiteBinder, Type, Expression, Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression)
  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression)
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DynamicExpression"></xref> that represents a dynamic operation bound by the provided <xref href="System.Runtime.CompilerServices.CallSiteBinder"></xref>.
  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: returnType
      type: System.Type
      description: The result type of the dynamic expression.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <xref href="System.Linq.Expressions.DynamicExpression"></xref> that has <xref href="System.Linq.Expressions.Expression.NodeType"></xref> equal to <xref href="System.Linq.Expressions.ExpressionType.Dynamic"></xref> and has the <xref href="System.Linq.Expressions.DynamicExpression.Binder"></xref> and <xref href="System.Linq.Expressions.DynamicExpression.Arguments"></xref> set to the specified values.
  overload: System.Linq.Expressions.Expression.Dynamic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)
  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DynamicExpression"></xref> that represents a dynamic operation bound by the provided <xref href="System.Runtime.CompilerServices.CallSiteBinder"></xref>.
  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: returnType
      type: System.Type
      description: The result type of the dynamic expression.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second argument to the dynamic operation.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <xref href="System.Linq.Expressions.DynamicExpression"></xref> that has <xref href="System.Linq.Expressions.Expression.NodeType"></xref> equal to <xref href="System.Linq.Expressions.ExpressionType.Dynamic"></xref> and has the <xref href="System.Linq.Expressions.DynamicExpression.Binder"></xref> and <xref href="System.Linq.Expressions.DynamicExpression.Arguments"></xref> set to the specified values.
  overload: System.Linq.Expressions.Expression.Dynamic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Dynamic(CallSiteBinder, Type, Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression)
  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression)
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DynamicExpression"></xref> that represents a dynamic operation bound by the provided <xref href="System.Runtime.CompilerServices.CallSiteBinder"></xref>.
  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: returnType
      type: System.Type
      description: The result type of the dynamic expression.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <xref href="System.Linq.Expressions.DynamicExpression"></xref> that has <xref href="System.Linq.Expressions.Expression.NodeType"></xref> equal to <xref href="System.Linq.Expressions.ExpressionType.Dynamic"></xref> and has the <xref href="System.Linq.Expressions.DynamicExpression.Binder"></xref> and <xref href="System.Linq.Expressions.DynamicExpression.Arguments"></xref> set to the specified values.
  overload: System.Linq.Expressions.Expression.Dynamic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)
  nameWithType: Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)
  fullName: Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DynamicExpression"></xref> that represents a dynamic operation bound by the provided <xref href="System.Runtime.CompilerServices.CallSiteBinder"></xref>.
  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: returnType
      type: System.Type
      description: The result type of the dynamic expression.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The arguments to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <xref href="System.Linq.Expressions.DynamicExpression"></xref> that has <xref href="System.Linq.Expressions.Expression.NodeType"></xref> equal to <xref href="System.Linq.Expressions.ExpressionType.Dynamic"></xref> and has the <xref href="System.Linq.Expressions.DynamicExpression.Binder"></xref> and <xref href="System.Linq.Expressions.DynamicExpression.Arguments"></xref> set to the specified values.
  overload: System.Linq.Expressions.Expression.Dynamic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Dynamic(CallSiteBinder, Type, Expression[])
  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression[])
  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression[])
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DynamicExpression"></xref> that represents a dynamic operation bound by the provided <xref href="System.Runtime.CompilerServices.CallSiteBinder"></xref>.
  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: returnType
      type: System.Type
      description: The result type of the dynamic expression.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: The arguments to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <xref href="System.Linq.Expressions.DynamicExpression"></xref> that has <xref href="System.Linq.Expressions.Expression.NodeType"></xref> equal to <xref href="System.Linq.Expressions.ExpressionType.Dynamic"></xref> and has the <xref href="System.Linq.Expressions.DynamicExpression.Binder"></xref> and <xref href="System.Linq.Expressions.DynamicExpression.Arguments"></xref> set to the specified values.
  overload: System.Linq.Expressions.Expression.Dynamic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ElementInit(MethodInfo, IEnumerable<Expression>)
  nameWithType: Expression.ElementInit(MethodInfo, IEnumerable<Expression>)
  fullName: Expression.ElementInit(MethodInfo, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.ElementInit"></xref>, given an <xref href="System.Collections.Generic.IEnumerable`1"></xref> as the second argument.
  remarks: "The `addMethod` parameter must represent an instance method named \"Add\" (case insensitive). The add method must have the same number of parameters as the number of elements in `arguments`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]\n [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]"
  syntax:
    content: public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.ElementInit.AddMethod"></xref> property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.Expression"></xref> objects to set the <xref href="System.Linq.Expressions.ElementInit.Arguments"></xref> property equal to.
    return:
      type: System.Linq.Expressions.ElementInit
      description: An <xref href="System.Linq.Expressions.ElementInit"></xref> that has the <xref href="System.Linq.Expressions.ElementInit.AddMethod"></xref> and <xref href="System.Linq.Expressions.ElementInit.Arguments"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ElementInit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>addMethod</code> or <code>arguments</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The method that <code>addMethod</code> represents is not named \"Add\" (case insensitive).  \n  \n -or-  \n  \n The method that <code>addMethod</code> represents is not an instance method.  \n  \n -or-  \n  \n <code>arguments</code> does not contain the same number of elements as the number of parameters for the method that <code>addMethod</code> represents.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>arguments</code> is not assignable to the type of the corresponding parameter of the method that <code>addMethod</code> represents."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ElementInit(MethodInfo, Expression[])
  nameWithType: Expression.ElementInit(MethodInfo, Expression[])
  fullName: Expression.ElementInit(MethodInfo, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.ElementInit"></xref>, given an array of values as the second argument.
  remarks: "The `addMethod` parameter must represent an instance method named \"Add\" (case insensitive). The add method must have the same number of parameters as the number of elements in `arguments`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]\n [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]"
  syntax:
    content: public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.ElementInit.AddMethod"></xref> property equal to.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects to set the <xref href="System.Linq.Expressions.ElementInit.Arguments"></xref> property equal to.
    return:
      type: System.Linq.Expressions.ElementInit
      description: An <xref href="System.Linq.Expressions.ElementInit"></xref> that has the <xref href="System.Linq.Expressions.ElementInit.AddMethod"></xref> and <xref href="System.Linq.Expressions.ElementInit.Arguments"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ElementInit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>addMethod</code> or <code>arguments</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The method that addMethod represents is not named \"Add\" (case insensitive).  \n  \n -or-  \n  \n The method that addMethod represents is not an instance method.  \n  \n -or-  \n  \n arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>arguments</code> is not assignable to the type of the corresponding parameter of the method that <code>addMethod</code> represents."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Empty
  commentId: M:System.Linq.Expressions.Expression.Empty
  id: Empty
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Empty()
  nameWithType: Expression.Empty()
  fullName: Expression.Empty()
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an empty expression that has <xref href="System.Void"></xref> type.
  remarks: An empty expression can be used where an expression is expected but no action is desired. For example, you can use an empty expression as the last expression in a block expression. In this case, the block expression's return value is void.
  example:
  - "The following code example shows how to create an empty expression and add it to a block expression.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#31)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#31)]"
  syntax:
    content: public static System.Linq.Expressions.DefaultExpression Empty ();
    parameters: []
    return:
      type: System.Linq.Expressions.DefaultExpression
      description: A <xref href="System.Linq.Expressions.DefaultExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Default"></xref> and the <xref href="System.Linq.Expressions.Expression.Type"></xref> property set to <xref href="System.Void"></xref>.
  overload: System.Linq.Expressions.Expression.Empty*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Equal(Expression, Expression)
  nameWithType: Expression.Equal(Expression, Expression)
  fullName: Expression.Equal(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an equality comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>."
  example:
  - "The following code example shows how to create an expression that checks whether the values of its two arguments are equal.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#8)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#8)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Equal"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Equal*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The equality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Equal(Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.Equal(Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.Equal(Expression, Expression, Boolean, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an equality comparison. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `true`; `false` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Equal"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Equal*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the equality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ExclusiveOr(Expression, Expression, MethodInfo)
  nameWithType: Expression.ExclusiveOr(Expression, Expression, MethodInfo)
  fullName: Expression.ExclusiveOr(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise `XOR` operation, using <code>op_ExclusiveOr</code> for user-defined types. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the chosen implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined `XOR` operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ExclusiveOr"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ExclusiveOr*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the `XOR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ExclusiveOr(Expression, Expression)
  nameWithType: Expression.ExclusiveOr(Expression, Expression)
  fullName: Expression.ExclusiveOr(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise `XOR` operation, using <code>op_ExclusiveOr</code> for user-defined types.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined `XOR` operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator."
  example:
  - "The following code example shows how to create an expression that represents the logical XOR operation.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#9)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#9)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ExclusiveOr"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ExclusiveOr*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The `XOR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ExclusiveOrAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ExclusiveOrAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ExclusiveOrAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo)
  fullName: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ExclusiveOrAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ExclusiveOrAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ExclusiveOrAssign(Expression, Expression)
  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression)
  fullName: Expression.ExclusiveOrAssign(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ExclusiveOrAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ExclusiveOrAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  id: Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Field(Expression, FieldInfo)
  nameWithType: Expression.Field(Expression, FieldInfo)
  fullName: Expression.Field(Expression, FieldInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberExpression"></xref> that represents accessing a field.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of `field`.
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.MemberExpression.Expression"></xref> property equal to. For `static` (`Shared` in Visual Basic), <code>expression</code> must be `null`.
    - id: field
      type: System.Reflection.FieldInfo
      description: The <xref href="System.Reflection.FieldInfo"></xref> to set the <xref href="System.Linq.Expressions.MemberExpression.Member"></xref> property equal to.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A <xref href="System.Linq.Expressions.MemberExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MemberAccess"></xref> and the <xref href="System.Linq.Expressions.MemberExpression.Expression"></xref> and <xref href="System.Linq.Expressions.MemberExpression.Member"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Field*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>field</code> is `null`.  \n  \n -or-  \n  \n The field represented by <code>field</code> is not `static` (`Shared` in Visual Basic) and <code>expression</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>expression</code>.Type is not assignable to the declaring type of the field represented by <code>field</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  id: Field(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Field(Expression, String)
  nameWithType: Expression.Field(Expression, String)
  fullName: Expression.Field(Expression, String)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberExpression"></xref> that represents accessing a field given the name of the field.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by `fieldName`.  \n  \n This method searches `expression`.Type and its base types for a field that has the name `fieldName`. Public fields are given preference over non-public fields. If a matching field is found, this method passes `expression` and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>."
  example:
  - "The following code example shows how to create an expression that represents accessing a field.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#37)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#37)]"
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> whose <xref href="System.Linq.Expressions.Expression.Type"></xref> contains a field named <code>fieldName</code>. This can be null for static fields.
    - id: fieldName
      type: System.String
      description: The name of a field to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A <xref href="System.Linq.Expressions.MemberExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MemberAccess"></xref>, the <xref href="System.Linq.Expressions.MemberExpression.Expression"></xref> property set to <code>expression</code>, and the <xref href="System.Linq.Expressions.MemberExpression.Member"></xref> property set to the <xref href="System.Reflection.FieldInfo"></xref> that represents the field denoted by <code>fieldName</code>.
  overload: System.Linq.Expressions.Expression.Field*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> or <code>fieldName</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: No field named <code>fieldName</code> is defined in <code>expression</code>.Type or its base types.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  id: Field(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Field(Expression, Type, String)
  nameWithType: Expression.Field(Expression, Type, String)
  fullName: Expression.Field(Expression, Type, String)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberExpression"></xref> that represents accessing a field.
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The containing object of the field. This can be null for static fields.
    - id: type
      type: System.Type
      description: The <xref href="System.Linq.Expressions.Expression.Type"></xref> that contains the field.
    - id: fieldName
      type: System.String
      description: The field to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: The created <xref href="System.Linq.Expressions.MemberExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Field*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])
  commentId: M:System.Linq.Expressions.Expression.GetActionType(System.Type[])
  id: GetActionType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GetActionType(Type[])
  nameWithType: Expression.GetActionType(Type[])
  fullName: Expression.GetActionType(Type[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Type"></xref> object that represents a generic <code>System.Action</code> delegate type that has specific type arguments.
  remarks: As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic.
  syntax:
    content: public static Type GetActionType (Type[] typeArgs);
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: An array of up to sixteen <xref href="System.Type"></xref> objects that specify the type arguments for the `System.Action` delegate type.
    return:
      type: System.Type
      description: The type of a <code>System.Action</code> delegate that has the specified type arguments.
  overload: System.Linq.Expressions.Expression.GetActionType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>typeArgs</code> contains more than sixteen elements.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeArgs</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  commentId: M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  id: GetDelegateType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GetDelegateType(Type[])
  nameWithType: Expression.GetDelegateType(Type[])
  fullName: Expression.GetDelegateType(Type[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Gets a <xref href="System.Linq.Expressions.Expression.Type"></xref> object that represents a generic <code>System.Func</code> or <code>System.Action</code> delegate type that has specific type arguments.
  remarks: "The last type argument determines the return type of the delegate. If no Func or Action is large enough, it will generate a custom delegate type.  \n  \n As with Func, the last argument is the return type. It can be set to System.Void to produce an Action."
  syntax:
    content: public static Type GetDelegateType (Type[] typeArgs);
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: The type arguments of the delegate.
    return:
      type: System.Type
      description: The delegate type.
  overload: System.Linq.Expressions.Expression.GetDelegateType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  commentId: M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  id: GetFuncType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GetFuncType(Type[])
  nameWithType: Expression.GetFuncType(Type[])
  fullName: Expression.GetFuncType(Type[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.Expression.Type"></xref> object that represents a generic <code>System.Func</code> delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.
  remarks: "`typeArgs` must contain at least one and at most seventeen elements.  \n  \n As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic."
  syntax:
    content: public static Type GetFuncType (Type[] typeArgs);
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: An array of one to seventeen <xref href="System.Type"></xref> objects that specify the type arguments for the `System.Func` delegate type.
    return:
      type: System.Type
      description: The type of a <code>System.Func</code> delegate that has the specified type arguments.
  overload: System.Linq.Expressions.Expression.GetFuncType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>typeArgs</code> contains fewer than one or more than seventeen elements.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeArgs</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Goto(LabelTarget, Expression, Type)
  nameWithType: Expression.Goto(LabelTarget, Expression, Type)
  fullName: Expression.Goto(LabelTarget, Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a "go to" statement with the specified type. The value passed to the label upon jumping can be specified.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    - id: type
      type: System.Type
      description: An <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Goto, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, the <xref href="System.Linq.Expressions.Expression.Type"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Goto*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Goto(LabelTarget, Type)
  nameWithType: Expression.Goto(LabelTarget, Type)
  fullName: Expression.Goto(LabelTarget, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a "go to" statement with the specified type.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    - id: type
      type: System.Type
      description: An <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Goto, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to the specified value, the <xref href="System.Linq.Expressions.Expression.Type"></xref> property set to <code>type</code>, and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Goto*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  id: Goto(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Goto(LabelTarget)
  nameWithType: Expression.Goto(LabelTarget)
  fullName: Expression.Goto(LabelTarget)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a "go to" statement.
  remarks: ''
  example:
  - "The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.GotoExpression> object.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#45)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#45)]"
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Goto, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to the specified value, and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Goto*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Goto(LabelTarget, Expression)
  nameWithType: Expression.Goto(LabelTarget, Expression)
  fullName: Expression.Goto(LabelTarget, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a "go to" statement. The value passed to the label upon jumping can be specified.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Goto, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Goto*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GreaterThan(Expression, Expression)
  nameWithType: Expression.GreaterThan(Expression, Expression)
  fullName: Expression.GreaterThan(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a "greater than" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"greater than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>."
  example:
  - "The following code example shows how to create an expression that compares two integers.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#10)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#10)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.GreaterThan"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.GreaterThan*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The "greater than" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GreaterThan(Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.GreaterThan(Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.GreaterThan(Expression, Expression, Boolean, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a "greater than" numeric comparison. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation :  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"greater than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `true`; `false` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.GreaterThan"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.GreaterThan*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the "greater than" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GreaterThanOrEqual(Expression, Expression)
  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression)
  fullName: Expression.GreaterThanOrEqual(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a "greater than or equal" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"greater than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>."
  example:
  - "The following code example shows how to create an expression that compares two integers.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#11)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#11)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.GreaterThanOrEqual"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.GreaterThanOrEqual*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The "greater than or equal" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a "greater than or equal" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"greater than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `true`; `false` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.GreaterThanOrEqual"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.GreaterThanOrEqual*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the "greater than or equal" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: IfThen(Expression, Expression)
  nameWithType: Expression.IfThen(Expression, Expression)
  fullName: Expression.IfThen(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ConditionalExpression"></xref> that represents a conditional block with an `if` statement.
  remarks: ''
  example:
  - "The following code example shows how to create an expression that represents a conditional block.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#32)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#32)]"
  syntax:
    content: public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.ConditionalExpression.Test"></xref> property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.ConditionalExpression.IfTrue"></xref> property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: A <xref href="System.Linq.Expressions.ConditionalExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Conditional"></xref> and the <xref href="System.Linq.Expressions.ConditionalExpression.Test"></xref>, <xref href="System.Linq.Expressions.ConditionalExpression.IfTrue"></xref>, properties set to the specified values. The <xref href="System.Linq.Expressions.ConditionalExpression.IfFalse"></xref> property is set to default expression and the type of the resulting <xref href="System.Linq.Expressions.ConditionalExpression"></xref> returned by this method is <xref href="System.Void"></xref>.
  overload: System.Linq.Expressions.Expression.IfThen*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: IfThenElse(Expression, Expression, Expression)
  nameWithType: Expression.IfThenElse(Expression, Expression, Expression)
  fullName: Expression.IfThenElse(Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ConditionalExpression"></xref> that represents a conditional block with `if` and `else` statements.
  remarks: ''
  example:
  - "The following code example shows how to create an expression that represents a conditional block.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#33)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#33)]"
  syntax:
    content: public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.ConditionalExpression.Test"></xref> property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.ConditionalExpression.IfTrue"></xref> property equal to.
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.ConditionalExpression.IfFalse"></xref> property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: A <xref href="System.Linq.Expressions.ConditionalExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Conditional"></xref> and the <xref href="System.Linq.Expressions.ConditionalExpression.Test"></xref>, <xref href="System.Linq.Expressions.ConditionalExpression.IfTrue"></xref>, and <xref href="System.Linq.Expressions.ConditionalExpression.IfFalse"></xref> properties set to the specified values. The type of the resulting <xref href="System.Linq.Expressions.ConditionalExpression"></xref> returned by this method is <xref href="System.Void"></xref>.
  overload: System.Linq.Expressions.Expression.IfThenElse*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Increment(Expression, MethodInfo)
  nameWithType: Expression.Increment(Expression, MethodInfo)
  fullName: Expression.Increment(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the incrementing of the expression by 1.
  remarks: This expression is functional and does not change the value of the object that is passed to it.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to increment.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the incremented expression.
  overload: System.Linq.Expressions.Expression.Increment*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  id: Increment(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Increment(Expression)
  nameWithType: Expression.Increment(Expression)
  fullName: Expression.Increment(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the incrementing of the expression value by 1.
  remarks: This expression is functional and does not change the value of the object that is passed to it.
  example:
  - "The following code example shows how to create an expression that represents an increment operation.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#24)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#24)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to increment.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the incremented expression.
  overload: System.Linq.Expressions.Expression.Increment*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Invoke(Expression, Expression[])
  nameWithType: Expression.Invoke(Expression, Expression[])
  fullName: Expression.Invoke(Expression, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.InvocationExpression"></xref> that applies a delegate or lambda expression to a list of argument expressions.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.  \n  \n The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]\n [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]"
  syntax:
    content: public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that represents the delegate or lambda expression to be applied.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects that represent the arguments that the delegate or lambda expression is applied to.
    return:
      type: System.Linq.Expressions.InvocationExpression
      description: An <xref href="System.Linq.Expressions.InvocationExpression"></xref> that applies the specified delegate or lambda expression to the provided arguments.
  overload: System.Linq.Expressions.Expression.Invoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>expression</code>.Type does not represent a delegate type or an <xref href=\"System.Linq.Expressions.Expression`1\"></xref>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the delegate represented by <code>expression</code>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>arguments</code> does not contain the same number of elements as the list of parameters for the delegate represented by <code>expression</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Invoke(Expression, IEnumerable<Expression>)
  nameWithType: Expression.Invoke(Expression, IEnumerable<Expression>)
  fullName: Expression.Invoke(Expression, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.InvocationExpression"></xref> that applies a delegate or lambda expression to a list of argument expressions.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.  \n  \n The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]\n [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]"
  syntax:
    content: public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that represents the delegate or lambda expression to be applied to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.Expression"></xref> objects that represent the arguments that the delegate or lambda expression is applied to.
    return:
      type: System.Linq.Expressions.InvocationExpression
      description: An <xref href="System.Linq.Expressions.InvocationExpression"></xref> that applies the specified delegate or lambda expression to the provided arguments.
  overload: System.Linq.Expressions.Expression.Invoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>expression</code>.Type does not represent a delegate type or an <xref href=\"System.Linq.Expressions.Expression`1\"></xref>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the delegate represented by <code>expression</code>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>arguments</code> does not contain the same number of elements as the list of parameters for the delegate represented by <code>expression</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  id: IsFalse(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: IsFalse(Expression)
  nameWithType: Expression.IsFalse(Expression)
  fullName: Expression.IsFalse(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Returns whether the expression evaluates to false.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to evaluate.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <xref href="System.Linq.Expressions.UnaryExpression"></xref>.
  overload: System.Linq.Expressions.Expression.IsFalse*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: IsFalse(Expression, MethodInfo)
  nameWithType: Expression.IsFalse(Expression, MethodInfo)
  fullName: Expression.IsFalse(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Returns whether the expression evaluates to false.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to evaluate.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <xref href="System.Linq.Expressions.UnaryExpression"></xref>.
  overload: System.Linq.Expressions.Expression.IsFalse*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  id: IsTrue(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: IsTrue(Expression)
  nameWithType: Expression.IsTrue(Expression)
  fullName: Expression.IsTrue(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Returns whether the expression evaluates to true.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to evaluate.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <xref href="System.Linq.Expressions.UnaryExpression"></xref>.
  overload: System.Linq.Expressions.Expression.IsTrue*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: IsTrue(Expression, MethodInfo)
  nameWithType: Expression.IsTrue(Expression, MethodInfo)
  fullName: Expression.IsTrue(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Returns whether the expression evaluates to true.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to evaluate.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <xref href="System.Linq.Expressions.UnaryExpression"></xref>.
  overload: System.Linq.Expressions.Expression.IsTrue*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Label
  commentId: M:System.Linq.Expressions.Expression.Label
  id: Label
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Label()
  nameWithType: Expression.Label()
  fullName: Expression.Label()
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.LabelTarget"></xref> representing a label with void type and no name.
  remarks: ''
  example:
  - "The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LabelTarget> object.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]"
  syntax:
    content: public static System.Linq.Expressions.LabelTarget Label ();
    parameters: []
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new <xref href="System.Linq.Expressions.LabelTarget"></xref>.
  overload: System.Linq.Expressions.Expression.Label*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  id: Label(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Label(LabelTarget)
  nameWithType: Expression.Label(LabelTarget)
  fullName: Expression.Label(LabelTarget)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.LabelExpression"></xref> representing a label without a default value.
  syntax:
    content: public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> which this <xref href="System.Linq.Expressions.LabelExpression"></xref> will be associated with.
    return:
      type: System.Linq.Expressions.LabelExpression
      description: A <xref href="System.Linq.Expressions.LabelExpression"></xref> without a default value.
  overload: System.Linq.Expressions.Expression.Label*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Label(System.String)
  commentId: M:System.Linq.Expressions.Expression.Label(System.String)
  id: Label(System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Label(String)
  nameWithType: Expression.Label(String)
  fullName: Expression.Label(String)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.LabelTarget"></xref> representing a label with void type and the given name.
  syntax:
    content: public static System.Linq.Expressions.LabelTarget Label (string name);
    parameters:
    - id: name
      type: System.String
      description: The name of the label.
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new <xref href="System.Linq.Expressions.LabelTarget"></xref>.
  overload: System.Linq.Expressions.Expression.Label*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Label(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Type)
  id: Label(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Label(Type)
  nameWithType: Expression.Label(Type)
  fullName: Expression.Label(Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.LabelTarget"></xref> representing a label with the given type.
  remarks: ''
  example:
  - "The following example demonstrates how to use a <xref:System.Linq.Expressions.LabelTarget> object in a loop expression.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]"
  syntax:
    content: public static System.Linq.Expressions.LabelTarget Label (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type of value that is passed when jumping to the label.
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new <xref href="System.Linq.Expressions.LabelTarget"></xref>.
  overload: System.Linq.Expressions.Expression.Label*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Label(LabelTarget, Expression)
  nameWithType: Expression.Label(LabelTarget, Expression)
  fullName: Expression.Label(LabelTarget, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.LabelExpression"></xref> representing a label with the given default value.
  syntax:
    content: public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> which this <xref href="System.Linq.Expressions.LabelExpression"></xref> will be associated with.
    - id: defaultValue
      type: System.Linq.Expressions.Expression
      description: The value of this <xref href="System.Linq.Expressions.LabelExpression"></xref> when the label is reached through regular control flow.
    return:
      type: System.Linq.Expressions.LabelExpression
      description: A <xref href="System.Linq.Expressions.LabelExpression"></xref> with the given default value.
  overload: System.Linq.Expressions.Expression.Label*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Type,System.String)
  id: Label(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Label(Type, String)
  nameWithType: Expression.Label(Type, String)
  fullName: Expression.Label(Type, String)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.LabelTarget"></xref> representing a label with the given type and name.
  syntax:
    content: public static System.Linq.Expressions.LabelTarget Label (Type type, string name);
    parameters:
    - id: type
      type: System.Type
      description: The type of value that is passed when jumping to the label.
    - id: name
      type: System.String
      description: The name of the label.
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new <xref href="System.Linq.Expressions.LabelTarget"></xref>.
  overload: System.Linq.Expressions.Expression.Label*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: delegateType
      type: System.Type
      description: A <xref href="System.Linq.Expressions.Expression.Type"></xref> representing the delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: name
      type: System.String
      description: The name for the lambda. Used for emitting debug information.
    - id: tailCall
      type: System.Boolean
      description: A <xref href="System.Boolean"></xref> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> that has the <xref href="System.Linq.Expressions.LambdaExpression.NodeType"></xref> property equal to Lambda and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: delegateType
      type: System.Type
      description: A <xref href="System.Linq.Expressions.Expression.Type"></xref> representing the delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: name
      type: System.String
      description: The name for the lambda. Used for emitting debug information.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> that has the <xref href="System.Linq.Expressions.LambdaExpression.NodeType"></xref> property equal to Lambda and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: delegateType
      type: System.Type
      description: A <xref href="System.Linq.Expressions.Expression.Type"></xref> representing the delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: tailCall
      type: System.Boolean
      description: A <xref href="System.Boolean"></xref> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> that has the <xref href="System.Linq.Expressions.LambdaExpression.NodeType"></xref> property equal to Lambda and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: name
      type: System.String
      description: The name for the lambda. Used for emitting debug information.
    - id: tailCall
      type: System.Boolean
      description: A <xref href="System.Boolean"></xref> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> that has the <xref href="System.Linq.Expressions.LambdaExpression.NodeType"></xref> property equal to Lambda and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Type, Expression, ParameterExpression[])
  nameWithType: Expression.Lambda(Type, Expression, ParameterExpression[])
  fullName: Expression.Lambda(Type, Expression, ParameterExpression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.LambdaExpression"></xref> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.
  remarks: "The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.  \n  \n The number of parameters for the delegate type represented by `delegateType` must equal the length of `parameters`.  \n  \n The elements of `parameters` must be reference equal to the parameter expressions in `body`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection."
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);
    parameters:
    - id: delegateType
      type: System.Type
      description: A <xref href="System.Type"></xref> that represents a delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array of <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: An object that represents a lambda expression which has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Lambda"></xref> and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>delegateType</code> or <code>body</code> is `null`.  \n  \n -or-  \n  \n One or more elements in <code>parameters</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>delegateType</code> does not represent a delegate type.  \n  \n -or-  \n  \n <code>body</code>.Type represents a type that is not assignable to the return type of the delegate type represented by <code>delegateType</code>.  \n  \n -or-  \n  \n <code>parameters</code> does not contain the same number of elements as the list of parameters for the delegate type represented by <code>delegateType</code>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of the delegate type represented by <code>delegateType</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Type, Expression, Boolean, ParameterExpression[])
  nameWithType: Expression.Lambda(Type, Expression, Boolean, ParameterExpression[])
  fullName: Expression.Lambda(Type, Expression, Boolean, ParameterExpression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);
    parameters:
    - id: delegateType
      type: System.Type
      description: A <xref href="System.Linq.Expressions.Expression.Type"></xref> representing the delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: tailCall
      type: System.Boolean
      description: A <xref href="System.Boolean"></xref> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> that has the <xref href="System.Linq.Expressions.LambdaExpression.NodeType"></xref> property equal to Lambda and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression, String, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression, String, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Expression, String, IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: name
      type: System.String
      description: The name for the lambda. Used for emitting debug information.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> that has the <xref href="System.Linq.Expressions.LambdaExpression.NodeType"></xref> property equal to Lambda and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression, Boolean, ParameterExpression[])
  nameWithType: Expression.Lambda(Expression, Boolean, ParameterExpression[])
  fullName: Expression.Lambda(Expression, Boolean, ParameterExpression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: tailCall
      type: System.Boolean
      description: A <xref href="System.Boolean"></xref> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> that has the <xref href="System.Linq.Expressions.LambdaExpression.NodeType"></xref> property equal to Lambda and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: tailCall
      type: System.Boolean
      description: A <xref href="System.Boolean"></xref> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> that has the <xref href="System.Linq.Expressions.LambdaExpression.NodeType"></xref> property equal to Lambda and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Type, Expression, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.LambdaExpression"></xref> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.
  remarks: "The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.  \n  \n The number of parameters for the delegate type represented by`delegateType` must equal the length of `parameters`.  \n  \n The elements of `parameters` must be reference equal to the parameter expressions in `body`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection."
  example:
  - "The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#42)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#42)]"
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: delegateType
      type: System.Type
      description: A <xref href="System.Type"></xref> that represents a delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: An object that represents a lambda expression which has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Lambda"></xref> and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>delegateType</code> or <code>body</code> is `null`.  \n  \n -or-  \n  \n One or more elements in <code>parameters</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>delegateType</code> does not represent a delegate type.  \n  \n -or-  \n  \n <code>body</code>.Type represents a type that is not assignable to the return type of the delegate type represented by <code>delegateType</code>.  \n  \n -or-  \n  \n <code>parameters</code> does not contain the same number of elements as the list of parameters for the delegate type represented by <code>delegateType</code>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of the delegate type represented by <code>delegateType</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression, ParameterExpression[])
  nameWithType: Expression.Lambda(Expression, ParameterExpression[])
  fullName: Expression.Lambda(Expression, ParameterExpression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.LambdaExpression"></xref> by first constructing a delegate type.
  remarks: "The `parameters` parameter must not have more than sixteen elements.  \n  \n The elements of `parameters` must be reference equal to the parameter expressions in `body`.  \n  \n This method constructs an appropriate delegate type from one of the `System.Func` generic delegates. It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType.Lambda> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>."
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array of <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Lambda"></xref> and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>body</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>parameters</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>parameters</code> contains more than sixteen elements.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Expression, IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> that has the <xref href="System.Linq.Expressions.LambdaExpression.NodeType"></xref> property equal to Lambda and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.Expression`1"></xref> where the delegate type is known at compile time.
  syntax:
    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: name
      type: System.String
      description: The name of the lambda. Used for generating debugging information.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    typeParameters:
    - id: TDelegate
      description: The delegate type.
    return:
      type: System.Linq.Expressions.Expression`1
      description: An <xref href="System.Linq.Expressions.Expression`1"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Lambda"></xref> and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])
  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])
  fullName: Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.Expression`1"></xref> where the delegate type is known at compile time.
  syntax:
    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: tailCall
      type: System.Boolean
      description: A <xref href="System.Boolean"></xref> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    typeParameters:
    - id: TDelegate
      description: The delegate type.
    return:
      type: System.Linq.Expressions.Expression`1
      description: An <xref href="System.Linq.Expressions.Expression`1"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Lambda"></xref> and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.Expression`1"></xref> where the delegate type is known at compile time.
  syntax:
    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: name
      type: System.String
      description: The name of the lambda. Used for generating debugging info.
    - id: tailCall
      type: System.Boolean
      description: A <xref href="System.Boolean"></xref> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    typeParameters:
    - id: TDelegate
      description: The delegate type.
    return:
      type: System.Linq.Expressions.Expression`1
      description: An <xref href="System.Linq.Expressions.Expression`1"></xref> that has the <xref href="System.Linq.Expressions.LambdaExpression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Lambda"></xref> and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda<TDelegate>(Expression, ParameterExpression[])
  nameWithType: Expression.Lambda<TDelegate>(Expression, ParameterExpression[])
  fullName: Expression.Lambda<TDelegate>(Expression, ParameterExpression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.Expression`1"></xref> where the delegate type is known at compile time.
  remarks: "The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.  \n  \n The elements of `parameters` must be reference equal to the parameter expressions in`body`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection."
  syntax:
    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array of <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    typeParameters:
    - id: TDelegate
      description: A delegate type.
    return:
      type: System.Linq.Expressions.Expression`1
      description: An <xref href="System.Linq.Expressions.Expression`1"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Lambda"></xref> and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>body</code> is `null`.  \n  \n -or-  \n  \n One or more elements in <code>parameters</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>TDelegate</code> is not a delegate type.  \n  \n -or-  \n  \n <code>body</code>.Type represents a type that is not assignable to the return type of <code>TDelegate</code>.  \n  \n -or-  \n  \n <code>parameters</code> does not contain the same number of elements as the list of parameters for <code>TDelegate</code>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of <code>TDelegate</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.Expression`1"></xref> where the delegate type is known at compile time.
  remarks: "The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.  \n  \n The elements of `parameters` must be reference equal to the parameter expressions in `body`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection."
  syntax:
    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    typeParameters:
    - id: TDelegate
      description: A delegate type.
    return:
      type: System.Linq.Expressions.Expression`1
      description: An <xref href="System.Linq.Expressions.Expression`1"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Lambda"></xref> and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>body</code> is `null`.  \n  \n -or-  \n  \n One or more elements in <code>parameters</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>TDelegate</code> is not a delegate type.  \n  \n -or-  \n  \n <code>body</code>.Type represents a type that is not assignable to the return type of <code>TDelegate</code>.  \n  \n -or-  \n  \n <code>parameters</code> does not contain the same number of elements as the list of parameters for <code>TDelegate</code>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of <code>TDelegate</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.Expression`1"></xref> where the delegate type is known at compile time.
  syntax:
    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> property equal to.
    - id: tailCall
      type: System.Boolean
      description: A <xref href="System.Boolean"></xref> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> collection.
    typeParameters:
    - id: TDelegate
      description: The delegate type.
    return:
      type: System.Linq.Expressions.Expression`1
      description: An <xref href="System.Linq.Expressions.Expression`1"></xref> that has the <xref href="System.Linq.Expressions.LambdaExpression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Lambda"></xref> and the <xref href="System.Linq.Expressions.LambdaExpression.Body"></xref> and <xref href="System.Linq.Expressions.LambdaExpression.Parameters"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LeftShift(Expression, Expression)
  nameWithType: Expression.LeftShift(Expression, Expression)
  fullName: Expression.LeftShift(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise left-shift operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.LeftShift"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LeftShift*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The left-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LeftShift(Expression, Expression, MethodInfo)
  nameWithType: Expression.LeftShift(Expression, Expression, MethodInfo)
  fullName: Expression.LeftShift(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise left-shift operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.LeftShift"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LeftShift*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the left-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LeftShiftAssign(Expression, Expression)
  nameWithType: Expression.LeftShiftAssign(Expression, Expression)
  fullName: Expression.LeftShiftAssign(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise left-shift assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.LeftShiftAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LeftShiftAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LeftShiftAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.LeftShiftAssign(Expression, Expression, MethodInfo)
  fullName: Expression.LeftShiftAssign(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise left-shift assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.LeftShiftAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LeftShiftAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise left-shift assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.LeftShiftAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LeftShiftAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LessThan(Expression, Expression)
  nameWithType: Expression.LessThan(Expression, Expression)
  fullName: Expression.LessThan(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a "less than" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"less than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>."
  example:
  - "The following code example shows how to create an expression that compares two integers.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#25)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#25)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.LessThan"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LessThan*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The "less than" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LessThan(Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.LessThan(Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.LessThan(Expression, Expression, Boolean, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a "less than" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"less than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `true`; `false` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.LessThan"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LessThan*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the "less than" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LessThanOrEqual(Expression, Expression)
  nameWithType: Expression.LessThanOrEqual(Expression, Expression)
  fullName: Expression.LessThanOrEqual(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a " less than or equal" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"less than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>."
  example:
  - "The following code example shows how to create an expression that compares two integers.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#26)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#26)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.LessThanOrEqual"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LessThanOrEqual*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The "less than or equal" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a "less than or equal" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"less than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `true`; `false` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.LessThanOrEqual"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LessThanOrEqual*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the "less than or equal" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  id: ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListBind(MethodInfo, ElementInit[])
  nameWithType: Expression.ListBind(MethodInfo, ElementInit[])
  fullName: Expression.ListBind(MethodInfo, ElementInit[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberListBinding"></xref> object based on a specified property accessor method.
  syntax:
    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.ElementInit[] initializers);
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents a property accessor method.
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: An array of <xref href="System.Linq.Expressions.ElementInit"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MemberListBinding.Initializers"></xref> collection.
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: A <xref href="System.Linq.Expressions.MemberListBinding"></xref> that has the <xref href="System.Linq.Expressions.MemberBinding.BindingType"></xref> property equal to <xref href="System.Linq.Expressions.MemberBindingType.ListBinding"></xref>, the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> property set to the <xref href="System.Reflection.MemberInfo"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href="System.Linq.Expressions.MemberListBinding.Initializers"></xref> populated with the elements of <code>initializers</code>.
  overload: System.Linq.Expressions.Expression.ListBind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>propertyAccessor</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>propertyAccessor</code> does not represent a property accessor method.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref> of the property that the method represented by <code>propertyAccessor</code> accesses does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListBind(MethodInfo, IEnumerable<ElementInit>)
  nameWithType: Expression.ListBind(MethodInfo, IEnumerable<ElementInit>)
  fullName: Expression.ListBind(MethodInfo, IEnumerable<ElementInit>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberListBinding"></xref> based on a specified property accessor method.
  syntax:
    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers);
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents a property accessor method.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ElementInit"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MemberListBinding.Initializers"></xref> collection.
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: A <xref href="System.Linq.Expressions.MemberListBinding"></xref> that has the <xref href="System.Linq.Expressions.MemberBinding.BindingType"></xref> property equal to <xref href="System.Linq.Expressions.MemberBindingType.ListBinding"></xref>, the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> property set to the <xref href="System.Reflection.MemberInfo"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href="System.Linq.Expressions.MemberListBinding.Initializers"></xref> populated with the elements of <code>initializers</code>.
  overload: System.Linq.Expressions.Expression.ListBind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>propertyAccessor</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>propertyAccessor</code> does not represent a property accessor method.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref> of the property that the method represented by <code>propertyAccessor</code> accesses does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListBind(MemberInfo, IEnumerable<ElementInit>)
  nameWithType: Expression.ListBind(MemberInfo, IEnumerable<ElementInit>)
  fullName: Expression.ListBind(MemberInfo, IEnumerable<ElementInit>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberListBinding"></xref> where the member is a field or property.
  syntax:
    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: A <xref href="System.Reflection.MemberInfo"></xref> that represents a field or property to set the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> property equal to.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ElementInit"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MemberListBinding.Initializers"></xref> collection.
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: A <xref href="System.Linq.Expressions.MemberListBinding"></xref> that has the <xref href="System.Linq.Expressions.MemberBinding.BindingType"></xref> property equal to <xref href="System.Linq.Expressions.MemberBindingType.ListBinding"></xref> and the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> and <xref href="System.Linq.Expressions.MemberListBinding.Initializers"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ListBind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>member</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>member</code> does not represent a field or property.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.FieldInfo.FieldType\"></xref> or <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref> of the field or property that <code>member</code> represents does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  id: ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListBind(MemberInfo, ElementInit[])
  nameWithType: Expression.ListBind(MemberInfo, ElementInit[])
  fullName: Expression.ListBind(MemberInfo, ElementInit[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberListBinding"></xref> where the member is a field or property.
  syntax:
    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Linq.Expressions.ElementInit[] initializers);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: A <xref href="System.Reflection.MemberInfo"></xref> that represents a field or property to set the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> property equal to.
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: An array of <xref href="System.Linq.Expressions.ElementInit"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MemberListBinding.Initializers"></xref> collection.
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: A <xref href="System.Linq.Expressions.MemberListBinding"></xref> that has the <xref href="System.Linq.Expressions.MemberBinding.BindingType"></xref> property equal to <xref href="System.Linq.Expressions.MemberBindingType.ListBinding"></xref> and the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> and <xref href="System.Linq.Expressions.MemberListBinding.Initializers"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ListBind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>member</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>member</code> does not represent a field or property.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.FieldInfo.FieldType\"></xref> or <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref> of the field or property that <code>member</code> represents does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListInit(NewExpression, IEnumerable<ElementInit>)
  nameWithType: Expression.ListInit(NewExpression, IEnumerable<ElementInit>)
  fullName: Expression.ListInit(NewExpression, IEnumerable<ElementInit>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ListInitExpression"></xref> that uses specified <xref href="System.Linq.Expressions.ElementInit"></xref> objects to initialize a collection.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]\n [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]"
  syntax:
    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> to set the <xref href="System.Linq.Expressions.ListInitExpression.NewExpression"></xref> property equal to.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.ElementInit"></xref> objects to use to populate the <xref href="System.Linq.Expressions.ListInitExpression.Initializers"></xref> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <xref href="System.Linq.Expressions.ListInitExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ListInit"></xref> and the <xref href="System.Linq.Expressions.ListInitExpression.NewExpression"></xref> and <xref href="System.Linq.Expressions.ListInitExpression.Initializers"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ListInit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newExpression</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>newExpression</code>.Type does not implement <xref href="System.Collections.IEnumerable"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListInit(NewExpression, IEnumerable<Expression>)
  nameWithType: Expression.ListInit(NewExpression, IEnumerable<Expression>)
  fullName: Expression.ListInit(NewExpression, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ListInitExpression"></xref> that uses a method named "Add" to add elements to a collection.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.  \n  \n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type."
  syntax:
    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> to set the <xref href="System.Linq.Expressions.ListInitExpression.NewExpression"></xref> property equal to.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.ListInitExpression.Initializers"></xref> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <xref href="System.Linq.Expressions.ListInitExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ListInit"></xref> and the <xref href="System.Linq.Expressions.ListInitExpression.NewExpression"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.ListInit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newExpression</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>newExpression</code>.Type does not implement <xref href="System.Collections.IEnumerable"></xref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "There is no instance method named \"Add\" (case insensitive) declared in <code>newExpression</code>.Type or its base type.  \n  \n -or-  \n  \n The add method on <code>newExpression</code>.Type or its base type does not take exactly one argument.  \n  \n -or-  \n  \n The type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of the first element of <code>initializers</code> is not assignable to the argument type of the add method on <code>newExpression</code>.Type or its base type.  \n  \n -or-  \n  \n More than one argument-compatible method named \"Add\" (case-insensitive) exists on <code>newExpression</code>.Type and/or its base type."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListInit(NewExpression, ElementInit[])
  nameWithType: Expression.ListInit(NewExpression, ElementInit[])
  fullName: Expression.ListInit(NewExpression, ElementInit[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ListInitExpression"></xref> that uses specified <xref href="System.Linq.Expressions.ElementInit"></xref> objects to initialize a collection.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression>that represents the initialization of a new dictionary instance with two key-value pairs.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]\n [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]"
  syntax:
    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.ElementInit[] initializers);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> to set the <xref href="System.Linq.Expressions.ListInitExpression.NewExpression"></xref> property equal to.
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: An array of <xref href="System.Linq.Expressions.ElementInit"></xref> objects to use to populate the <xref href="System.Linq.Expressions.ListInitExpression.Initializers"></xref> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <xref href="System.Linq.Expressions.ListInitExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ListInit"></xref> and the <xref href="System.Linq.Expressions.ListInitExpression.NewExpression"></xref> and <xref href="System.Linq.Expressions.ListInitExpression.Initializers"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ListInit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newExpression</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>newExpression</code>.Type does not implement <xref href="System.Collections.IEnumerable"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListInit(NewExpression, Expression[])
  nameWithType: Expression.ListInit(NewExpression, Expression[])
  fullName: Expression.ListInit(NewExpression, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ListInitExpression"></xref> that uses a method named "Add" to add elements to a collection.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.  \n  \n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type."
  syntax:
    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.Expression[] initializers);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> to set the <xref href="System.Linq.Expressions.ListInitExpression.NewExpression"></xref> property equal to.
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.ListInitExpression.Initializers"></xref> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <xref href="System.Linq.Expressions.ListInitExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ListInit"></xref> and the <xref href="System.Linq.Expressions.ListInitExpression.NewExpression"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.ListInit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newExpression</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>newExpression</code>.Type does not implement <xref href="System.Collections.IEnumerable"></xref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "There is no instance method named \"Add\" (case insensitive) declared in <code>newExpression</code>.Type or its base type.  \n  \n -or-  \n  \n The add method on <code>newExpression</code>.Type or its base type does not take exactly one argument.  \n  \n -or-  \n  \n The type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of the first element of <code>initializers</code> is not assignable to the argument type of the add method on <code>newExpression</code>.Type or its base type.  \n  \n -or-  \n  \n More than one argument-compatible method named \"Add\" (case-insensitive) exists on <code>newExpression</code>.Type and/or its base type."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)
  nameWithType: Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)
  fullName: Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ListInitExpression"></xref> that uses a specified method to add elements to a collection.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. If `addMethod` is not `null`, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter. The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.  \n  \n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type."
  syntax:
    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> to set the <xref href="System.Linq.Expressions.ListInitExpression.NewExpression"></xref> property equal to.
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.ListInitExpression.Initializers"></xref> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <xref href="System.Linq.Expressions.ListInitExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ListInit"></xref> and the <xref href="System.Linq.Expressions.ListInitExpression.NewExpression"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.ListInit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newExpression</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.  \n  \n -or-  \n  \n <code>addMethod</code> is not `null` and it does not represent an instance method named \"Add\" (case insensitive) that takes exactly one argument.  \n  \n -or-  \n  \n <code>addMethod</code> is not `null` and the type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>initializers</code> is not assignable to the argument type of the method that <code>addMethod</code> represents."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>addMethod</code> is `null` and no instance method named "Add" that takes one type-compatible argument exists on <code>newExpression</code>.Type or its base type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListInit(NewExpression, MethodInfo, Expression[])
  nameWithType: Expression.ListInit(NewExpression, MethodInfo, Expression[])
  fullName: Expression.ListInit(NewExpression, MethodInfo, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ListInitExpression"></xref> that uses a specified method to add elements to a collection.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. If `addMethod` is not `null`, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter. The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.  \n  \n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type."
  syntax:
    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] initializers);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> to set the <xref href="System.Linq.Expressions.ListInitExpression.NewExpression"></xref> property equal to.
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents an instance method that takes one argument, that adds an element to a collection.
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.ListInitExpression.Initializers"></xref> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <xref href="System.Linq.Expressions.ListInitExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ListInit"></xref> and the <xref href="System.Linq.Expressions.ListInitExpression.NewExpression"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.ListInit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newExpression</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.  \n  \n -or-  \n  \n <code>addMethod</code> is not `null` and it does not represent an instance method named \"Add\" (case insensitive) that takes exactly one argument.  \n  \n -or-  \n  \n <code>addMethod</code> is not `null` and the type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>initializers</code> is not assignable to the argument type of the method that <code>addMethod</code> represents."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>addMethod</code> is `null` and no instance method named "Add" that takes one type-compatible argument exists on <code>newExpression</code>.Type or its base type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  id: Loop(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Loop(Expression)
  nameWithType: Expression.Loop(Expression)
  fullName: Expression.Loop(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.LoopExpression"></xref> with the given body.
  syntax:
    content: public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the loop.
    return:
      type: System.Linq.Expressions.LoopExpression
      description: The created <xref href="System.Linq.Expressions.LoopExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Loop*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Loop(Expression, LabelTarget)
  nameWithType: Expression.Loop(Expression, LabelTarget)
  fullName: Expression.Loop(Expression, LabelTarget)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.LoopExpression"></xref> with the given body and break target.
  remarks: ''
  example:
  - "The following example demonstrates how to create a block expression that contains a <xref:System.Linq.Expressions.LoopExpression> object.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]"
  syntax:
    content: public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the loop.
    - id: break
      type: System.Linq.Expressions.LabelTarget
      description: The break target used by the loop body.
    return:
      type: System.Linq.Expressions.LoopExpression
      description: The created <xref href="System.Linq.Expressions.LoopExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Loop*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Loop(Expression, LabelTarget, LabelTarget)
  nameWithType: Expression.Loop(Expression, LabelTarget, LabelTarget)
  fullName: Expression.Loop(Expression, LabelTarget, LabelTarget)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.LoopExpression"></xref> with the given body.
  syntax:
    content: public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the loop.
    - id: break
      type: System.Linq.Expressions.LabelTarget
      description: The break target used by the loop body.
    - id: continue
      type: System.Linq.Expressions.LabelTarget
      description: The continue target used by the loop body.
    return:
      type: System.Linq.Expressions.LoopExpression
      description: The created <xref href="System.Linq.Expressions.LoopExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Loop*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeBinary(ExpressionType, Expression, Expression)
  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression)
  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref>, given the left and right operands, by calling an appropriate factory method.
  remarks: The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls. For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> method to create a <xref:System.Linq.Expressions.BinaryExpression> that represents the subtraction of one number from another.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]\n [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: The <xref href="System.Linq.Expressions.ExpressionType"></xref> that specifies the type of binary operation.
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that represents the left operand.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that represents the right operand.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: The <xref href="System.Linq.Expressions.BinaryExpression"></xref> that results from calling the appropriate factory method.
  overload: System.Linq.Expressions.Expression.MakeBinary*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>binaryType</code> does not correspond to a binary expression node.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref>, given the left operand, right operand and implementing method, by calling the appropriate factory method.
  remarks: The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call. For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>. The `liftToNull` and `method` parameters are ignored if the appropriate factory method does not have a corresponding parameter.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: The <xref href="System.Linq.Expressions.ExpressionType"></xref> that specifies the type of binary operation.
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that represents the left operand.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that represents the right operand.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `true`; `false` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that specifies the implementing method.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: The <xref href="System.Linq.Expressions.BinaryExpression"></xref> that results from calling the appropriate factory method.
  overload: System.Linq.Expressions.Expression.MakeBinary*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>binaryType</code> does not correspond to a binary expression node.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)
  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)
  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref>, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.
  remarks: The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call. For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>. The `liftToNull`, `method` and `conversion` parameters are ignored if the appropriate factory method does not have a corresponding parameter.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: The <xref href="System.Linq.Expressions.ExpressionType"></xref> that specifies the type of binary operation.
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that represents the left operand.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that represents the right operand.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `true`; `false` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that specifies the implementing method.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> that represents a type conversion function. This parameter is used only if <code>binaryType</code> is <xref href="System.Linq.Expressions.ExpressionType.Coalesce"></xref> or compound assignment..
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: The <xref href="System.Linq.Expressions.BinaryExpression"></xref> that results from calling the appropriate factory method.
  overload: System.Linq.Expressions.Expression.MakeBinary*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>binaryType</code> does not correspond to a binary expression node.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeCatchBlock(Type, ParameterExpression, Expression, Expression)
  nameWithType: Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression)
  fullName: Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.CatchBlock"></xref> representing a catch statement with the specified elements.
  remarks: '`type` must be non-null and match the type of `variable` (if it is supplied).'
  syntax:
    content: public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Linq.Expressions.Expression.Type"></xref> of <xref href="System.Exception"></xref> this <xref href="System.Linq.Expressions.CatchBlock"></xref> will handle.
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: A <xref href="System.Linq.Expressions.ParameterExpression"></xref> representing a reference to the <xref href="System.Exception"></xref> object caught by this handler.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    - id: filter
      type: System.Linq.Expressions.Expression
      description: The body of the <xref href="System.Exception"></xref> filter.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created <xref href="System.Linq.Expressions.CatchBlock"></xref>.
  overload: System.Linq.Expressions.Expression.MakeCatchBlock*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)
  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)
  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DynamicExpression"></xref> that represents a dynamic operation bound by the provided <xref href="System.Runtime.CompilerServices.CallSiteBinder"></xref> and four arguments.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate used by the <xref href="System.Runtime.CompilerServices.CallSite"></xref>.
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second argument to the dynamic operation.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third argument to the dynamic operation.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The fourth argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <xref href="System.Linq.Expressions.DynamicExpression"></xref> that has <xref href="System.Linq.Expressions.Expression.NodeType"></xref> equal to <xref href="System.Linq.Expressions.ExpressionType.Dynamic"></xref> and has the <xref href="System.Linq.Expressions.DynamicExpression.DelegateType"></xref>, <xref href="System.Linq.Expressions.DynamicExpression.Binder"></xref>, and <xref href="System.Linq.Expressions.DynamicExpression.Arguments"></xref> set to the specified values.
  overload: System.Linq.Expressions.Expression.MakeDynamic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression)
  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)
  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DynamicExpression"></xref> that represents a dynamic operation bound by the provided <xref href="System.Runtime.CompilerServices.CallSiteBinder"></xref> and two arguments.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate used by the <xref href="System.Runtime.CompilerServices.CallSite"></xref>.
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <xref href="System.Linq.Expressions.DynamicExpression"></xref> that has <xref href="System.Linq.Expressions.Expression.NodeType"></xref> equal to <xref href="System.Linq.Expressions.ExpressionType.Dynamic"></xref> and has the <xref href="System.Linq.Expressions.DynamicExpression.DelegateType"></xref>, <xref href="System.Linq.Expressions.DynamicExpression.Binder"></xref>, and <xref href="System.Linq.Expressions.DynamicExpression.Arguments"></xref> set to the specified values.
  overload: System.Linq.Expressions.Expression.MakeDynamic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)
  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)
  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DynamicExpression"></xref> that represents a dynamic operation bound by the provided <xref href="System.Runtime.CompilerServices.CallSiteBinder"></xref> and three arguments.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate used by the <xref href="System.Runtime.CompilerServices.CallSite"></xref>.
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second argument to the dynamic operation.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <xref href="System.Linq.Expressions.DynamicExpression"></xref> that has <xref href="System.Linq.Expressions.Expression.NodeType"></xref> equal to <xref href="System.Linq.Expressions.ExpressionType.Dynamic"></xref> and has the <xref href="System.Linq.Expressions.DynamicExpression.DelegateType"></xref>, <xref href="System.Linq.Expressions.DynamicExpression.Binder"></xref>, and <xref href="System.Linq.Expressions.DynamicExpression.Arguments"></xref> set to the specified values.
  overload: System.Linq.Expressions.Expression.MakeDynamic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeDynamic(Type, CallSiteBinder, Expression)
  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression)
  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression)
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DynamicExpression"></xref> that represents a dynamic operation bound by the provided <xref href="System.Runtime.CompilerServices.CallSiteBinder"></xref> and one argument.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate used by the <xref href="System.Runtime.CompilerServices.CallSite"></xref>.
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <xref href="System.Linq.Expressions.DynamicExpression"></xref> that has <xref href="System.Linq.Expressions.Expression.NodeType"></xref> equal to <xref href="System.Linq.Expressions.ExpressionType.Dynamic"></xref> and has the <xref href="System.Linq.Expressions.DynamicExpression.DelegateType"></xref>, <xref href="System.Linq.Expressions.DynamicExpression.Binder"></xref>, and <xref href="System.Linq.Expressions.DynamicExpression.Arguments"></xref> set to the specified values.
  overload: System.Linq.Expressions.Expression.MakeDynamic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)
  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)
  fullName: Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DynamicExpression"></xref> that represents a dynamic operation bound by the provided <xref href="System.Runtime.CompilerServices.CallSiteBinder"></xref>.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate used by the <xref href="System.Runtime.CompilerServices.CallSite"></xref>.
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The arguments to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <xref href="System.Linq.Expressions.DynamicExpression"></xref> that has <xref href="System.Linq.Expressions.Expression.NodeType"></xref> equal to <xref href="System.Linq.Expressions.ExpressionType.Dynamic"></xref> and has the <xref href="System.Linq.Expressions.DynamicExpression.DelegateType"></xref>, <xref href="System.Linq.Expressions.DynamicExpression.Binder"></xref>, and <xref href="System.Linq.Expressions.DynamicExpression.Arguments"></xref> set to the specified values.
  overload: System.Linq.Expressions.Expression.MakeDynamic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeDynamic(Type, CallSiteBinder, Expression[])
  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression[])
  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression[])
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.DynamicExpression"></xref> that represents a dynamic operation bound by the provided <xref href="System.Runtime.CompilerServices.CallSiteBinder"></xref>.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate used by the <xref href="System.Runtime.CompilerServices.CallSite"></xref>.
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: The arguments to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <xref href="System.Linq.Expressions.DynamicExpression"></xref> that has <xref href="System.Linq.Expressions.Expression.NodeType"></xref> equal to <xref href="System.Linq.Expressions.ExpressionType.Dynamic"></xref> and has the <xref href="System.Linq.Expressions.DynamicExpression.DelegateType"></xref>, <xref href="System.Linq.Expressions.DynamicExpression.Binder"></xref>, and <xref href="System.Linq.Expressions.DynamicExpression.Arguments"></xref> set to the specified values.
  overload: System.Linq.Expressions.Expression.MakeDynamic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)
  nameWithType: Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)
  fullName: Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a jump of the specified <xref href="System.Linq.Expressions.GotoExpressionKind"></xref>. The value passed to the label upon jumping can also be specified.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);
    parameters:
    - id: kind
      type: System.Linq.Expressions.GotoExpressionKind
      description: The <xref href="System.Linq.Expressions.GotoExpressionKind"></xref> of the <xref href="System.Linq.Expressions.GotoExpression"></xref>.
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    - id: type
      type: System.Type
      description: An <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to <code>kind</code>, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, the <xref href="System.Linq.Expressions.Expression.Type"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.MakeGoto*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)
  nameWithType: Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)
  fullName: Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.IndexExpression"></xref> that represents accessing an indexed property in an object.
  syntax:
    content: public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. It should be null if the property is `static` (`shared` in Visual Basic).
    - id: indexer
      type: System.Reflection.PropertyInfo
      description: An <xref href="System.Linq.Expressions.Expression"></xref> representing the property to index.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <code>IEnumerable<Expression></code> (<code>IEnumerable (Of Expression)</code> in Visual Basic) that contains the arguments that will be used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <xref href="System.Linq.Expressions.IndexExpression"></xref>.
  overload: System.Linq.Expressions.Expression.MakeIndex*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  commentId: M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  id: MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeMemberAccess(Expression, MemberInfo)
  nameWithType: Expression.MakeMemberAccess(Expression, MemberInfo)
  fullName: Expression.MakeMemberAccess(Expression, MemberInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberExpression"></xref> that represents accessing either a field or a property.
  remarks: This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of `member`. If `member` is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>. If `member` is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.
  syntax:
    content: public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that represents the object that the member belongs to. This can be null for static members.
    - id: member
      type: System.Reflection.MemberInfo
      description: The <xref href="System.Reflection.MemberInfo"></xref> that describes the field or property to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: The <xref href="System.Linq.Expressions.MemberExpression"></xref> that results from calling the appropriate factory method.
  overload: System.Linq.Expressions.Expression.MakeMemberAccess*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>member</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>member</code> does not represent a field or property.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  commentId: M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  id: MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)
  nameWithType: Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)
  fullName: Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.TryExpression"></xref> representing a try block with the specified elements.
  syntax:
    content: public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock> handlers);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the try expression. If null, bodh and all handlers must have identical type.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: finally
      type: System.Linq.Expressions.Expression
      description: The body of the finally block. Pass null if the try block has no finally block associated with it.
    - id: fault
      type: System.Linq.Expressions.Expression
      description: The body of the fault block. Pass null if the try block has no fault block associated with it.
    - id: handlers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}
      description: A collection of <xref href="System.Linq.Expressions.CatchBlock"></xref>s representing the catch statements to be associated with the try block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <xref href="System.Linq.Expressions.TryExpression"></xref>.
  overload: System.Linq.Expressions.Expression.MakeTry*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeUnary(ExpressionType, Expression, Type)
  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type)
  fullName: Expression.MakeUnary(ExpressionType, Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref>, given an operand, by calling the appropriate factory method.
  remarks: The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls. For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>. The `type`parameter is ignored if it does not apply to the factory method that is called.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);
    parameters:
    - id: unaryType
      type: System.Linq.Expressions.ExpressionType
      description: The <xref href="System.Linq.Expressions.ExpressionType"></xref> that specifies the type of unary operation.
    - id: operand
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that represents the operand.
    - id: type
      type: System.Type
      description: The <xref href="System.Type"></xref> that specifies the type to be converted to (pass `null` if not applicable).
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: The <xref href="System.Linq.Expressions.UnaryExpression"></xref> that results from calling the appropriate factory method.
  overload: System.Linq.Expressions.Expression.MakeUnary*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>operand</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>unaryType</code> does not correspond to a unary expression node.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeUnary(ExpressionType, Expression, Type, MethodInfo)
  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo)
  fullName: Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref>, given an operand and implementing method, by calling the appropriate factory method.
  remarks: The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls. For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>. The `type` and `method` parameters are ignored if they do not apply to the factory method that is called.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);
    parameters:
    - id: unaryType
      type: System.Linq.Expressions.ExpressionType
      description: The <xref href="System.Linq.Expressions.ExpressionType"></xref> that specifies the type of unary operation.
    - id: operand
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> that represents the operand.
    - id: type
      type: System.Type
      description: The <xref href="System.Type"></xref> that specifies the type to be converted to (pass `null` if not applicable).
    - id: method
      type: System.Reflection.MethodInfo
      description: The <xref href="System.Reflection.MethodInfo"></xref> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: The <xref href="System.Linq.Expressions.UnaryExpression"></xref> that results from calling the appropriate factory method.
  overload: System.Linq.Expressions.Expression.MakeUnary*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>operand</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>unaryType</code> does not correspond to a unary expression node.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  id: MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MemberBind(MethodInfo, MemberBinding[])
  nameWithType: Expression.MemberBind(MethodInfo, MemberBinding[])
  fullName: Expression.MemberBind(MethodInfo, MemberBinding[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberMemberBinding"></xref> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.
  syntax:
    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.MemberBinding[] bindings);
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: The <xref href="System.Reflection.MethodInfo"></xref> that represents a property accessor method.
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: An array of <xref href="System.Linq.Expressions.MemberBinding"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MemberMemberBinding.Bindings"></xref> collection.
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: A <xref href="System.Linq.Expressions.MemberMemberBinding"></xref> that has the <xref href="System.Linq.Expressions.MemberBinding.BindingType"></xref> property equal to <xref href="System.Linq.Expressions.MemberBindingType.MemberBinding"></xref>, the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> property set to the <xref href="System.Reflection.PropertyInfo"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href="System.Linq.Expressions.MemberMemberBinding.Bindings"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MemberBind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>propertyAccessor</code> or <code>bindings</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>propertyAccessor</code> does not represent a property accessor method.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the property accessed by the method that <code>propertyAccessor</code> represents."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MemberBind(MethodInfo, IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>)
  fullName: Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberMemberBinding"></xref> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.
  syntax:
    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings);
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: The <xref href="System.Reflection.MethodInfo"></xref> that represents a property accessor method.
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.MemberBinding"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MemberMemberBinding.Bindings"></xref> collection.
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: A <xref href="System.Linq.Expressions.MemberMemberBinding"></xref> that has the <xref href="System.Linq.Expressions.MemberBinding.BindingType"></xref> property equal to <xref href="System.Linq.Expressions.MemberBindingType.MemberBinding"></xref>, the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> property set to the <xref href="System.Reflection.PropertyInfo"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href="System.Linq.Expressions.MemberMemberBinding.Bindings"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MemberBind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>propertyAccessor</code> or <code>bindings</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>propertyAccessor</code> does not represent a property accessor method.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the property accessed by the method that <code>propertyAccessor</code> represents."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MemberBind(MemberInfo, IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>)
  fullName: Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberMemberBinding"></xref> that represents the recursive initialization of members of a field or property.
  remarks: The `member` parameter must represent a field or property.
  syntax:
    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: The <xref href="System.Reflection.MemberInfo"></xref> to set the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> property equal to.
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.MemberBinding"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MemberMemberBinding.Bindings"></xref> collection.
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: A <xref href="System.Linq.Expressions.MemberMemberBinding"></xref> that has the <xref href="System.Linq.Expressions.MemberBinding.BindingType"></xref> property equal to <xref href="System.Linq.Expressions.MemberBindingType.MemberBinding"></xref> and the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> and <xref href="System.Linq.Expressions.MemberMemberBinding.Bindings"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MemberBind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>member</code> or <code>bindings</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>member</code> does not represent a field or property.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the field or property that <code>member</code> represents."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  id: MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MemberBind(MemberInfo, MemberBinding[])
  nameWithType: Expression.MemberBind(MemberInfo, MemberBinding[])
  fullName: Expression.MemberBind(MemberInfo, MemberBinding[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberMemberBinding"></xref> that represents the recursive initialization of members of a field or property.
  remarks: The `member` parameter must represent a field or property.
  syntax:
    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Linq.Expressions.MemberBinding[] bindings);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: The <xref href="System.Reflection.MemberInfo"></xref> to set the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> property equal to.
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: An array of <xref href="System.Linq.Expressions.MemberBinding"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MemberMemberBinding.Bindings"></xref> collection.
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: A <xref href="System.Linq.Expressions.MemberMemberBinding"></xref> that has the <xref href="System.Linq.Expressions.MemberBinding.BindingType"></xref> property equal to <xref href="System.Linq.Expressions.MemberBindingType.MemberBinding"></xref> and the <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> and <xref href="System.Linq.Expressions.MemberMemberBinding.Bindings"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MemberBind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>member</code> or <code>bindings</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>member</code> does not represent a field or property.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the field or property that <code>member</code> represents."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  commentId: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MemberInit(NewExpression, IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>)
  fullName: Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Represents an expression that creates a new object and initializes a property of the object.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.
  example:
  - "The following example demonstrates an expression that creates a new object and initializes a property of the object.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#40)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#40)]"
  syntax:
    content: public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> to set the <xref href="System.Linq.Expressions.MemberInitExpression.NewExpression"></xref> property equal to.
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.MemberBinding"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MemberInitExpression.Bindings"></xref> collection.
    return:
      type: System.Linq.Expressions.MemberInitExpression
      description: A <xref href="System.Linq.Expressions.MemberInitExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MemberInit"></xref> and the <xref href="System.Linq.Expressions.MemberInitExpression.NewExpression"></xref> and <xref href="System.Linq.Expressions.MemberInitExpression.Bindings"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MemberInit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>newExpression</code> or <code>bindings</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> property of an element of <code>bindings</code> does not represent a member of the type that <code>newExpression</code>.Type represents.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  commentId: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  id: MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MemberInit(NewExpression, MemberBinding[])
  nameWithType: Expression.MemberInit(NewExpression, MemberBinding[])
  fullName: Expression.MemberInit(NewExpression, MemberBinding[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberInitExpression"></xref>.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> method to create a <xref:System.Linq.Expressions.MemberInitExpression> that represents the initialization of two members of a new object.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#9)]\n [!code-vb[System.Linq.Expressions.Expression#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#9)]"
  syntax:
    content: public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.MemberBinding[] bindings);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> to set the <xref href="System.Linq.Expressions.MemberInitExpression.NewExpression"></xref> property equal to.
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: An array of <xref href="System.Linq.Expressions.MemberBinding"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MemberInitExpression.Bindings"></xref> collection.
    return:
      type: System.Linq.Expressions.MemberInitExpression
      description: A <xref href="System.Linq.Expressions.MemberInitExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MemberInit"></xref> and the <xref href="System.Linq.Expressions.MemberInitExpression.NewExpression"></xref> and <xref href="System.Linq.Expressions.MemberInitExpression.Bindings"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MemberInit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>newExpression</code> or <code>bindings</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.Linq.Expressions.MemberBinding.Member"></xref> property of an element of <code>bindings</code> does not represent a member of the type that <code>newExpression</code>.Type represents.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Modulo(Expression, Expression)
  nameWithType: Expression.Modulo(Expression, Expression)
  fullName: Expression.Modulo(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic remainder operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Modulo"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Modulo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The modulus operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Modulo(Expression, Expression, MethodInfo)
  nameWithType: Expression.Modulo(Expression, Expression, MethodInfo)
  fullName: Expression.Modulo(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic remainder operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Modulo"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Modulo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the modulus operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ModuloAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.ModuloAssign(Expression, Expression, MethodInfo)
  fullName: Expression.ModuloAssign(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a remainder assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ModuloAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ModuloAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ModuloAssign(Expression, Expression)
  nameWithType: Expression.ModuloAssign(Expression, Expression)
  fullName: Expression.ModuloAssign(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a remainder assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ModuloAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ModuloAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a remainder assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ModuloAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ModuloAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Multiply(Expression, Expression, MethodInfo)
  nameWithType: Expression.Multiply(Expression, Expression, MethodInfo)
  fullName: Expression.Multiply(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic multiplication operation that does not have overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Multiply"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Multiply*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Multiply(Expression, Expression)
  nameWithType: Expression.Multiply(Expression, Expression)
  fullName: Expression.Multiply(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic multiplication operation that does not have overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator."
  example:
  - "The following code example shows how to create an expression that multiplies two values.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#27)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#27)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Multiply"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Multiply*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyAssign(Expression, Expression)
  nameWithType: Expression.MultiplyAssign(Expression, Expression)
  fullName: Expression.MultiplyAssign(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a multiplication assignment operation that does not have overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MultiplyAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.MultiplyAssign(Expression, Expression, MethodInfo)
  fullName: Expression.MultiplyAssign(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a multiplication assignment operation that does not have overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MultiplyAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a multiplication assignment operation that does not have overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MultiplyAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyAssignChecked(Expression, Expression)
  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression)
  fullName: Expression.MultiplyAssignChecked(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a multiplication assignment operation that has overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MultiplyAssignChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyAssignChecked*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyAssignChecked(Expression, Expression, MethodInfo)
  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo)
  fullName: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a multiplication assignment operation that has overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MultiplyAssignChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyAssignChecked*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a multiplication assignment operation that has overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MultiplyAssignChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyAssignChecked*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyChecked(Expression, Expression)
  nameWithType: Expression.MultiplyChecked(Expression, Expression)
  fullName: Expression.MultiplyChecked(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic multiplication operation that has overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MultiplyChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyChecked*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyChecked(Expression, Expression, MethodInfo)
  nameWithType: Expression.MultiplyChecked(Expression, Expression, MethodInfo)
  fullName: Expression.MultiplyChecked(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic multiplication operation that has overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MultiplyChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyChecked*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Negate(Expression, MethodInfo)
  nameWithType: Expression.Negate(Expression, MethodInfo)
  fullName: Expression.Negate(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents an arithmetic negation operation.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \n  \n-   If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Negate"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> and <xref href="System.Linq.Expressions.UnaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Negate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>method</code> is `null` and the unary minus operator is not defined for <code>expression</code>.Type.  \n  \n -or-  \n  \n <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  id: Negate(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Negate(Expression)
  nameWithType: Expression.Negate(Expression)
  fullName: Expression.Negate(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents an arithmetic negation operation.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  example:
  - "The following example demonstrates how to create an expression that represents an arithmetic negation operation.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#50)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#50)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Negate"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.Negate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The unary minus operator is not defined for <code>expression</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  id: NegateChecked(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NegateChecked(Expression)
  nameWithType: Expression.NegateChecked(Expression)
  fullName: Expression.NegateChecked(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents an arithmetic negation operation that has overflow checking.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.NegateChecked"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.NegateChecked*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The unary minus operator is not defined for <code>expression</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NegateChecked(Expression, MethodInfo)
  nameWithType: Expression.NegateChecked(Expression, MethodInfo)
  fullName: Expression.NegateChecked(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \n  \n-   If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.NegateChecked"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> and <xref href="System.Linq.Expressions.UnaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.NegateChecked*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>method</code> is `null` and the unary minus operator is not defined for <code>expression</code>.Type.  \n  \n -or-  \n  \n <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  id: New(System.Reflection.ConstructorInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: New(ConstructorInfo)
  nameWithType: Expression.New(ConstructorInfo)
  fullName: Expression.New(ConstructorInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.NewExpression"></xref> that represents calling the specified constructor that takes no arguments.
  remarks: The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections. The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by `constructor`.
  syntax:
    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The <xref href="System.Reflection.ConstructorInfo"></xref> to set the <xref href="System.Linq.Expressions.NewExpression.Constructor"></xref> property equal to.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.New"></xref> and the <xref href="System.Linq.Expressions.NewExpression.Constructor"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.New*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>constructor</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The constructor that <code>constructor</code> represents has at least one parameter.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.New(System.Type)
  commentId: M:System.Linq.Expressions.Expression.New(System.Type)
  id: New(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: New(Type)
  nameWithType: Expression.New(Type)
  fullName: Expression.New(Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.NewExpression"></xref> that represents calling the parameterless constructor of the specified type.
  remarks: "The `type` parameter must represent a type that has a constructor without parameters.  \n  \n The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to `type`."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.New%28System.Type%29> method to create a <xref:System.Linq.Expressions.NewExpression> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#10)]\n [!code-vb[System.Linq.Expressions.Expression#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#10)]"
  syntax:
    content: public static System.Linq.Expressions.NewExpression New (Type type);
    parameters:
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> that has a constructor that takes no arguments.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.New"></xref> and the <xref href="System.Linq.Expressions.NewExpression.Constructor"></xref> property set to the <xref href="System.Reflection.ConstructorInfo"></xref> that represents the constructor without parameters for the specified type.
  overload: System.Linq.Expressions.Expression.New*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The type that <code>type</code> represents does not have a constructor without parameters.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: New(ConstructorInfo, IEnumerable<Expression>)
  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>)
  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.NewExpression"></xref> that represents calling the specified constructor with the specified arguments.
  remarks: "The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`. The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection."
  syntax:
    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The <xref href="System.Reflection.ConstructorInfo"></xref> to set the <xref href="System.Linq.Expressions.NewExpression.Constructor"></xref> property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.NewExpression.Arguments"></xref> collection.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.New"></xref> and the <xref href="System.Linq.Expressions.NewExpression.Constructor"></xref> and <xref href="System.Linq.Expressions.NewExpression.Arguments"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.New*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>constructor</code> is `null`.  \n  \n -or-  \n  \n An element of <code>arguments</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  id: New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: New(ConstructorInfo, Expression[])
  nameWithType: Expression.New(ConstructorInfo, Expression[])
  fullName: Expression.New(ConstructorInfo, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.NewExpression"></xref> that represents calling the specified constructor with the specified arguments.
  remarks: "The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`. The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection."
  syntax:
    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The <xref href="System.Reflection.ConstructorInfo"></xref> to set the <xref href="System.Linq.Expressions.NewExpression.Constructor"></xref> property equal to.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.NewExpression.Arguments"></xref> collection.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.New"></xref> and the <xref href="System.Linq.Expressions.NewExpression.Constructor"></xref> and <xref href="System.Linq.Expressions.NewExpression.Arguments"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.New*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>constructor</code> is `null`.  \n  \n -or-  \n  \n An element of <code>arguments</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The length of <code>arguments</code> does match the number of parameters for the constructor that <code>constructor</code> represents.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)
  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)
  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.NewExpression"></xref> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.
  remarks: "The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \n  \n If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection. If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`. Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`. If it represents a property, the property must have a `get` accessor. The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents."
  syntax:
    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> members);
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The <xref href="System.Reflection.ConstructorInfo"></xref> to set the <xref href="System.Linq.Expressions.NewExpression.Constructor"></xref> property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.NewExpression.Arguments"></xref> collection.
    - id: members
      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Reflection.MemberInfo"></xref> objects to use to populate the <xref href="System.Linq.Expressions.NewExpression.Members"></xref> collection.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.New"></xref> and the <xref href="System.Linq.Expressions.NewExpression.Constructor"></xref>, <xref href="System.Linq.Expressions.NewExpression.Arguments"></xref> and <xref href="System.Linq.Expressions.NewExpression.Members"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.New*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>constructor</code> is `null`.  \n  \n -or-  \n  \n An element of <code>arguments</code> is `null`.  \n  \n -or-  \n  \n An element of <code>members</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.  \n  \n -or-  \n  \n The <code>members</code> parameter does not have the same number of elements as <code>arguments</code>.  \n  \n -or-  \n  \n An element of <code>arguments</code> has a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <code>members</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])
  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])
  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.NewExpression"></xref> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.
  remarks: "The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \n  \n If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection. If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`. Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`. If it represents a property, the property must be able to retrieve the value of the associated field. The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents."
  syntax:
    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments, System.Reflection.MemberInfo[] members);
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The <xref href="System.Reflection.ConstructorInfo"></xref> to set the <xref href="System.Linq.Expressions.NewExpression.Constructor"></xref> property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.NewExpression.Arguments"></xref> collection.
    - id: members
      type: System.Reflection.MemberInfo[]
      description: An array of <xref href="System.Reflection.MemberInfo"></xref> objects to use to populate the <xref href="System.Linq.Expressions.NewExpression.Members"></xref> collection.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.New"></xref> and the <xref href="System.Linq.Expressions.NewExpression.Constructor"></xref>, <xref href="System.Linq.Expressions.NewExpression.Arguments"></xref> and <xref href="System.Linq.Expressions.NewExpression.Members"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.New*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>constructor</code> is `null`.  \n  \n -or-  \n  \n An element of <code>arguments</code> is `null`.  \n  \n -or-  \n  \n An element of <code>members</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.  \n  \n -or-  \n  \n The <code>members</code> parameter does not have the same number of elements as <code>arguments</code>.  \n  \n -or-  \n  \n An element of <code>arguments</code> has a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <code>members</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  id: NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NewArrayBounds(Type, Expression[])
  nameWithType: Expression.NewArrayBounds(Type, Expression[])
  fullName: Expression.NewArrayBounds(Type, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.NewArrayExpression"></xref> that represents creating an array that has a specified rank.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]\n [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]"
  syntax:
    content: public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Linq.Expressions.Expression[] bounds);
    parameters:
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> that represents the element type of the array.
    - id: bounds
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.NewArrayExpression.Expressions"></xref> collection.
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: A <xref href="System.Linq.Expressions.NewArrayExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.NewArrayBounds"></xref> and the <xref href="System.Linq.Expressions.NewArrayExpression.Expressions"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.NewArrayBounds*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code> or <code>bounds</code> is `null`.  \n  \n -or-  \n  \n An element of <code>bounds</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.Linq.Expressions.Expression.Type"></xref> property of an element of <code>bounds</code> does not represent an integral type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NewArrayBounds(Type, IEnumerable<Expression>)
  nameWithType: Expression.NewArrayBounds(Type, IEnumerable<Expression>)
  fullName: Expression.NewArrayBounds(Type, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.NewArrayExpression"></xref> that represents creating an array that has a specified rank.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]\n [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]"
  syntax:
    content: public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> bounds);
    parameters:
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> that represents the element type of the array.
    - id: bounds
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.NewArrayExpression.Expressions"></xref> collection.
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: A <xref href="System.Linq.Expressions.NewArrayExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.NewArrayBounds"></xref> and the <xref href="System.Linq.Expressions.NewArrayExpression.Expressions"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.NewArrayBounds*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code> or <code>bounds</code> is `null`.  \n  \n -or-  \n  \n An element of <code>bounds</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.Linq.Expressions.Expression.Type"></xref> property of an element of <code>bounds</code> does not represent an integral type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NewArrayInit(Type, IEnumerable<Expression>)
  nameWithType: Expression.NewArrayInit(Type, IEnumerable<Expression>)
  fullName: Expression.NewArrayInit(Type, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.NewArrayExpression"></xref> that represents creating a one-dimensional array and initializing it from a list of elements.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.  \n  \n> [!NOTE]\n>  An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]\n [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]"
  syntax:
    content: public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers);
    parameters:
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> that represents the element type of the array.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> that contains <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.NewArrayExpression.Expressions"></xref> collection.
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: A <xref href="System.Linq.Expressions.NewArrayExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.NewArrayInit"></xref> and the <xref href="System.Linq.Expressions.NewArrayExpression.Expressions"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.NewArrayInit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n An element of <code>initializers</code> is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Linq.Expressions.Expression.Type"></xref> property of an element of <code>initializers</code> represents a type that is not assignable to the type that <code>type</code> represents.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  id: NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NewArrayInit(Type, Expression[])
  nameWithType: Expression.NewArrayInit(Type, Expression[])
  fullName: Expression.NewArrayInit(Type, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.NewArrayExpression"></xref> that represents creating a one-dimensional array and initializing it from a list of elements.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.  \n  \n> [!NOTE]\n>  An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]\n [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]"
  syntax:
    content: public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Linq.Expressions.Expression[] initializers);
    parameters:
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> that represents the element type of the array.
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.NewArrayExpression.Expressions"></xref> collection.
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: A <xref href="System.Linq.Expressions.NewArrayExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.NewArrayInit"></xref> and the <xref href="System.Linq.Expressions.NewArrayExpression.Expressions"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.NewArrayInit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n An element of <code>initializers</code> is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Linq.Expressions.Expression.Type"></xref> property of an element of <code>initializers</code> represents a type that is not assignable to the type <code>type</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.NodeType
  commentId: P:System.Linq.Expressions.Expression.NodeType
  id: NodeType
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NodeType
  nameWithType: Expression.NodeType
  fullName: Expression.NodeType
  type: Property
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Gets the node type of this <xref href="System.Linq.Expressions.Expression"></xref>.
  remarks: "The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type. For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a \"greater than\" operation. The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively.  \n  \n The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property."
  syntax:
    content: public virtual System.Linq.Expressions.ExpressionType NodeType { get; }
    return:
      type: System.Linq.Expressions.ExpressionType
      description: One of the <xref href="System.Linq.Expressions.ExpressionType"></xref> values.
  overload: System.Linq.Expressions.Expression.NodeType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  id: Not(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Not(Expression)
  nameWithType: Expression.Not(Expression)
  fullName: Expression.Not(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a bitwise complement operation.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric or Boolean type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  example:
  - "The following example demonstrates how to create an expression that represents a logical NOT operation.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#51)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#51)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Not"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.Not*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The unary not operator is not defined for <code>expression</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Not(Expression, MethodInfo)
  nameWithType: Expression.Not(Expression, MethodInfo)
  fullName: Expression.Not(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a bitwise complement operation. The implementing method can be specified.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \n  \n-   If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Not"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> and <xref href="System.Linq.Expressions.UnaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Not*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>method</code> is `null` and the unary not operator is not defined for <code>expression</code>.Type.  \n  \n -or-  \n  \n <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NotEqual(Expression, Expression)
  nameWithType: Expression.NotEqual(Expression, Expression)
  fullName: Expression.NotEqual(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an inequality comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.NotEqual"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.NotEqual*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The inequality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NotEqual(Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.NotEqual(Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.NotEqual(Expression, Expression, Boolean, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an inequality comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `true`; `false` to set <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.NotEqual"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.IsLiftedToNull"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.NotEqual*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the inequality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  id: OnesComplement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OnesComplement(Expression)
  nameWithType: Expression.OnesComplement(Expression)
  fullName: Expression.OnesComplement(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Returns the expression representing the ones complement.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref>.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <xref href="System.Linq.Expressions.UnaryExpression"></xref>.
  overload: System.Linq.Expressions.Expression.OnesComplement*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OnesComplement(Expression, MethodInfo)
  nameWithType: Expression.OnesComplement(Expression, MethodInfo)
  fullName: Expression.OnesComplement(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Returns the expression representing the ones complement.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref>.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <xref href="System.Linq.Expressions.UnaryExpression"></xref>.
  overload: System.Linq.Expressions.Expression.OnesComplement*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Or(Expression, Expression)
  nameWithType: Expression.Or(Expression, Expression)
  fullName: Expression.Or(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise `OR` operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `OR` operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator."
  example:
  - "The following code example shows how to create an expression that represents a logical OR operation.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#28)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#28)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Or"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Or*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Or(Expression, Expression, MethodInfo)
  nameWithType: Expression.Or(Expression, Expression, MethodInfo)
  fullName: Expression.Or(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise `OR` operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `OR` operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Or"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Or*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OrAssign(Expression, Expression)
  nameWithType: Expression.OrAssign(Expression, Expression)
  fullName: Expression.OrAssign(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise OR assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.OrAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.OrAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OrAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.OrAssign(Expression, Expression, MethodInfo)
  fullName: Expression.OrAssign(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise OR assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.OrAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.OrAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OrAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise OR assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.OrAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.OrAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OrElse(Expression, Expression)
  nameWithType: Expression.OrElse(Expression, Expression)
  fullName: Expression.OrElse(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a conditional `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n    > [!NOTE]\n    >  The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   `left`.Type and `right`.Type are the same Boolean type.  \n  \n-   If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `OR` operator.  \n  \n-   If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator."
  example:
  - "The following code example shows how to create an expression that represents a logical `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#29)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#29)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.OrElse"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.OrElse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \n  \n -or-  \n  \n <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OrElse(Expression, Expression, MethodInfo)
  nameWithType: Expression.OrElse(Expression, Expression, MethodInfo)
  fullName: Expression.OrElse(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a conditional `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A>property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n    > [!NOTE]\n    >  The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   `left`.Type and `right`.Type are the same Boolean type.  \n  \n-   If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `OR` operator.  \n  \n-   If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.OrElse"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.OrElse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>method</code> is `null` and the bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \n  \n -or-  \n  \n <code>method</code> is `null` and <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  id: Parameter(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Parameter(Type, String)
  nameWithType: Expression.Parameter(Type, String)
  fullName: Expression.Parameter(Type, String)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ParameterExpression"></xref> node that can be used to identify a parameter or a variable in an expression tree.
  syntax:
    content: public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);
    parameters:
    - id: type
      type: System.Type
      description: The type of the parameter or variable.
    - id: name
      type: System.String
      description: The name of the parameter or variable, used for debugging or printing purpose only.
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: A <xref href="System.Linq.Expressions.ParameterExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Parameter"></xref> and the <xref href="System.Linq.Expressions.Expression.Type"></xref> and <xref href="System.Linq.Expressions.ParameterExpression.Name"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Parameter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Parameter(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Parameter(System.Type)
  id: Parameter(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Parameter(Type)
  nameWithType: Expression.Parameter(Type)
  fullName: Expression.Parameter(Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ParameterExpression"></xref> node that can be used to identify a parameter or a variable in an expression tree.
  remarks: ''
  example:
  - "The following example demonstrates how to create a <xref:System.Linq.Expressions.MethodCallExpression> object that prints the value of a <xref:System.Linq.Expressions.ParameterExpression> object.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#49)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#49)]"
  syntax:
    content: public static System.Linq.Expressions.ParameterExpression Parameter (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type of the parameter or variable.
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: A <xref href="System.Linq.Expressions.ParameterExpression"></xref> node with the specified name and type.
  overload: System.Linq.Expressions.Expression.Parameter*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PostDecrementAssign(Expression, MethodInfo)
  nameWithType: Expression.PostDecrementAssign(Expression, MethodInfo)
  fullName: Expression.PostDecrementAssign(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to apply the operations on.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PostDecrementAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  id: PostDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PostDecrementAssign(Expression)
  nameWithType: Expression.PostDecrementAssign(Expression)
  fullName: Expression.PostDecrementAssign(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PostDecrementAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  id: PostIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PostIncrementAssign(Expression)
  nameWithType: Expression.PostIncrementAssign(Expression)
  fullName: Expression.PostIncrementAssign(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PostIncrementAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PostIncrementAssign(Expression, MethodInfo)
  nameWithType: Expression.PostIncrementAssign(Expression, MethodInfo)
  fullName: Expression.PostIncrementAssign(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to apply the operations on.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PostIncrementAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Power(Expression, Expression)
  nameWithType: Expression.Power(Expression, Expression)
  fullName: Expression.Power(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents raising a number to a power.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Power"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Power*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The exponentiation operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \n  \n -or-  \n  \n <code>left</code>.Type and/or <code>right</code>.Type are not <xref href=\"System.Double\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Power(Expression, Expression, MethodInfo)
  nameWithType: Expression.Power(Expression, Expression, MethodInfo)
  fullName: Expression.Power(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents raising a number to a power.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Power"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Power*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>method</code> is `null` and the exponentiation operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \n  \n -or-  \n  \n <code>method</code> is `null` and <code>left</code>.Type and/or <code>right</code>.Type are not <xref href=\"System.Double\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PowerAssign(Expression, Expression)
  nameWithType: Expression.PowerAssign(Expression, Expression)
  fullName: Expression.PowerAssign(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents raising an expression to a power and assigning the result back to the expression.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.PowerAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.PowerAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PowerAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.PowerAssign(Expression, Expression, MethodInfo)
  fullName: Expression.PowerAssign(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents raising an expression to a power and assigning the result back to the expression.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.PowerAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.PowerAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents raising an expression to a power and assigning the result back to the expression.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.PowerAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.PowerAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  id: PreDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PreDecrementAssign(Expression)
  nameWithType: Expression.PreDecrementAssign(Expression)
  fullName: Expression.PreDecrementAssign(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that decrements the expression by 1 and assigns the result back to the expression.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PreDecrementAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PreDecrementAssign(Expression, MethodInfo)
  nameWithType: Expression.PreDecrementAssign(Expression, MethodInfo)
  fullName: Expression.PreDecrementAssign(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that decrements the expression by 1 and assigns the result back to the expression.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to apply the operations on.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PreDecrementAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  id: PreIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PreIncrementAssign(Expression)
  nameWithType: Expression.PreIncrementAssign(Expression)
  fullName: Expression.PreIncrementAssign(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that increments the expression by 1 and assigns the result back to the expression.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PreIncrementAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PreIncrementAssign(Expression, MethodInfo)
  nameWithType: Expression.PreIncrementAssign(Expression, MethodInfo)
  fullName: Expression.PreIncrementAssign(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that increments the expression by 1 and assigns the result back to the expression.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to apply the operations on.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PreIncrementAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  id: Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression, String, Expression[])
  nameWithType: Expression.Property(Expression, String, Expression[])
  fullName: Expression.Property(Expression, String, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.IndexExpression"></xref> representing the access to an indexed property.
  syntax:
    content: public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. If the property is static/shared, it must be null.
    - id: propertyName
      type: System.String
      description: The name of the indexer.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects that are used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <xref href="System.Linq.Expressions.IndexExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Property*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression, PropertyInfo, Expression[])
  nameWithType: Expression.Property(Expression, PropertyInfo, Expression[])
  fullName: Expression.Property(Expression, PropertyInfo, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.IndexExpression"></xref> representing the access to an indexed property.
  syntax:
    content: public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. If the property is static/shared, it must be null.
    - id: indexer
      type: System.Reflection.PropertyInfo
      description: The <xref href="System.Reflection.PropertyInfo"></xref> that represents the property to index.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression"></xref> objects that are used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <xref href="System.Linq.Expressions.IndexExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Property*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression, PropertyInfo, IEnumerable<Expression>)
  nameWithType: Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>)
  fullName: Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an <xref href="System.Linq.Expressions.IndexExpression"></xref> representing the access to an indexed property.
  syntax:
    content: public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. If the property is static/shared, it must be null.
    - id: indexer
      type: System.Reflection.PropertyInfo
      description: The <xref href="System.Reflection.PropertyInfo"></xref> that represents the property to index.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Linq.Expressions.Expression"></xref> objects that are used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <xref href="System.Linq.Expressions.IndexExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Property*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  id: Property(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression, Type, String)
  nameWithType: Expression.Property(Expression, Type, String)
  fullName: Expression.Property(Expression, Type, String)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberExpression"></xref> accessing a property.
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The containing object of the property. This can be null for static properties.
    - id: type
      type: System.Type
      description: The <xref href="System.Linq.Expressions.Expression.Type"></xref> that contains the property.
    - id: propertyName
      type: System.String
      description: The property to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: The created <xref href="System.Linq.Expressions.MemberExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Property*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression, PropertyInfo)
  nameWithType: Expression.Property(Expression, PropertyInfo)
  fullName: Expression.Property(Expression, PropertyInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberExpression"></xref> that represents accessing a property.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.  \n  \n If the property represented by `property` is `static` (`Shared` in Visual Basic), `expression` can be `null`."
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.MemberExpression.Expression"></xref> property equal to. This can be null for static properties.
    - id: property
      type: System.Reflection.PropertyInfo
      description: The <xref href="System.Reflection.PropertyInfo"></xref> to set the <xref href="System.Linq.Expressions.MemberExpression.Member"></xref> property equal to.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A <xref href="System.Linq.Expressions.MemberExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MemberAccess"></xref> and the <xref href="System.Linq.Expressions.MemberExpression.Expression"></xref> and <xref href="System.Linq.Expressions.MemberExpression.Member"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Property*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>property</code> is `null`.  \n  \n -or-  \n  \n The property that <code>property</code> represents is not `static` (`Shared` in Visual Basic) and <code>expression</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>expression</code>.Type is not assignable to the declaring type of the property that <code>property</code> represents.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression, MethodInfo)
  nameWithType: Expression.Property(Expression, MethodInfo)
  fullName: Expression.Property(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberExpression"></xref> that represents accessing a property by using a property accessor method.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.  \n  \n If the method represented by `propertyAccessor` is `static` (`Shared` in Visual Basic), `expression` can be `null`."
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.MemberExpression.Expression"></xref> property equal to. This can be null for static properties.
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: The <xref href="System.Reflection.MethodInfo"></xref> that represents a property accessor method.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A <xref href="System.Linq.Expressions.MemberExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MemberAccess"></xref>, the <xref href="System.Linq.Expressions.MemberExpression.Expression"></xref> property set to <code>expression</code> and the <xref href="System.Linq.Expressions.MemberExpression.Member"></xref> property set to the <xref href="System.Reflection.PropertyInfo"></xref> that represents the property accessed in <code>propertyAccessor</code>.
  overload: System.Linq.Expressions.Expression.Property*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>propertyAccessor</code> is `null`.  \n  \n -or-  \n  \n The method that <code>propertyAccessor</code> represents is not `static` (`Shared` in Visual Basic) and <code>expression</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>expression</code>.Type is not assignable to the declaring type of the method represented by <code>propertyAccessor</code>.  \n  \n -or-  \n  \n The method that <code>propertyAccessor</code> represents is not a property accessor method."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  id: Property(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression, String)
  nameWithType: Expression.Property(Expression, String)
  fullName: Expression.Property(Expression, String)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberExpression"></xref> that represents accessing a property.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression>is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by `propertyName`.  \n  \n This method searches `expression`.Type and its base types for a property that has the name `propertyName`. Public properties are given preference over non-public properties. If a matching property is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>."
  example:
  - "The following example shows how to create an expression that represents accessing a property.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#38)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#38)]"
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> whose <xref href="System.Linq.Expressions.Expression.Type"></xref> contains a property named <code>propertyName</code>. This can be `null` for static properties.
    - id: propertyName
      type: System.String
      description: The name of a property to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A <xref href="System.Linq.Expressions.MemberExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MemberAccess"></xref>, the <xref href="System.Linq.Expressions.MemberExpression.Expression"></xref> property set to <code>expression</code>, and the <xref href="System.Linq.Expressions.MemberExpression.Member"></xref> property set to the <xref href="System.Reflection.PropertyInfo"></xref> that represents the property denoted by <code>propertyName</code>.
  overload: System.Linq.Expressions.Expression.Property*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> or <code>propertyName</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: No property named <code>propertyName</code> is defined in <code>expression</code>.Type or its base types.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  commentId: M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  id: PropertyOrField(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PropertyOrField(Expression, String)
  nameWithType: Expression.PropertyOrField(Expression, String)
  fullName: Expression.PropertyOrField(Expression, String)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.MemberExpression"></xref> that represents accessing a property or field.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by `propertyOrFieldName`.  \n  \n This method searches `expression`.Type and its base types for a property or field that has the name `propertyOrFieldName`. Public properties and fields are given preference over non-public properties and fields. Also, properties are given preference over fields. If a matching property or field is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively."
  example:
  - "The following example shows how to create an expression that represents accessing a property or field.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#39)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#39)]"
  syntax:
    content: public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> whose <xref href="System.Linq.Expressions.Expression.Type"></xref> contains a property or field named <code>propertyOrFieldName</code>. This can be null for static members.
    - id: propertyOrFieldName
      type: System.String
      description: The name of a property or field to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A <xref href="System.Linq.Expressions.MemberExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MemberAccess"></xref>, the <xref href="System.Linq.Expressions.MemberExpression.Expression"></xref> property set to <code>expression</code>, and the <xref href="System.Linq.Expressions.MemberExpression.Member"></xref> property set to the <xref href="System.Reflection.PropertyInfo"></xref> or <xref href="System.Reflection.FieldInfo"></xref> that represents the property or field denoted by <code>propertyOrFieldName</code>.
  overload: System.Linq.Expressions.Expression.PropertyOrField*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> or <code>propertyOrFieldName</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: No property or field named <code>propertyOrFieldName</code> is defined in <code>expression</code>.Type or its base types.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  id: Quote(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Quote(Expression)
  nameWithType: Expression.Quote(Expression)
  fullName: Expression.Quote(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents an expression that has a constant value of type <xref href="System.Linq.Expressions.Expression"></xref>.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by `expression`.Type. The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`. Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Quote"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.Quote*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Reduce
  commentId: M:System.Linq.Expressions.Expression.Reduce
  id: Reduce
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Reduce()
  nameWithType: Expression.Reduce()
  fullName: Expression.Reduce()
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.
  syntax:
    content: public virtual System.Linq.Expressions.Expression Reduce ();
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: The reduced expression.
  overload: System.Linq.Expressions.Expression.Reduce*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.ReduceAndCheck
  commentId: M:System.Linq.Expressions.Expression.ReduceAndCheck
  id: ReduceAndCheck
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ReduceAndCheck()
  nameWithType: Expression.ReduceAndCheck()
  fullName: Expression.ReduceAndCheck()
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.
  remarks: Unlike Reduce, this method checks that the reduced node satisfies certain invariants.
  syntax:
    content: public System.Linq.Expressions.Expression ReduceAndCheck ();
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: The reduced expression.
  overload: System.Linq.Expressions.Expression.ReduceAndCheck*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ReduceExtensions
  commentId: M:System.Linq.Expressions.Expression.ReduceExtensions
  id: ReduceExtensions
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ReduceExtensions()
  nameWithType: Expression.ReduceExtensions()
  fullName: Expression.ReduceExtensions()
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.
  syntax:
    content: public System.Linq.Expressions.Expression ReduceExtensions ();
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: The reduced expression.
  overload: System.Linq.Expressions.Expression.ReduceExtensions*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ReferenceEqual(Expression, Expression)
  nameWithType: Expression.ReferenceEqual(Expression, Expression)
  fullName: Expression.ReferenceEqual(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a reference equality comparison.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Equal"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ReferenceEqual*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ReferenceNotEqual(Expression, Expression)
  nameWithType: Expression.ReferenceNotEqual(Expression, Expression)
  fullName: Expression.ReferenceNotEqual(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a reference inequality comparison.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.NotEqual"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ReferenceNotEqual*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Rethrow(System.Type)
  id: Rethrow(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Rethrow(Type)
  nameWithType: Expression.Rethrow(Type)
  fullName: Expression.Rethrow(Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a rethrowing of an exception with a given type.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The new <xref href="System.Type"></xref> of the expression.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a rethrowing of an exception.
  overload: System.Linq.Expressions.Expression.Rethrow*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Rethrow
  commentId: M:System.Linq.Expressions.Expression.Rethrow
  id: Rethrow
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Rethrow()
  nameWithType: Expression.Rethrow()
  fullName: Expression.Rethrow()
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a rethrowing of an exception.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Rethrow ();
    parameters: []
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a rethrowing of an exception.
  overload: System.Linq.Expressions.Expression.Rethrow*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  id: Return(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Return(LabelTarget)
  nameWithType: Expression.Return(LabelTarget)
  fullName: Expression.Return(LabelTarget)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a return statement.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Return, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Return*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Return(LabelTarget, Expression)
  nameWithType: Expression.Return(LabelTarget, Expression)
  fullName: Expression.Return(LabelTarget, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a return statement. The value passed to the label upon jumping can be specified.
  remarks: ''
  example:
  - "The following example demonstrates how to create an expression that contains the <xref:System.Linq.Expressions.Expression.Return%2A> method.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]"
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Continue, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Return*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  id: Return(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Return(LabelTarget, Type)
  nameWithType: Expression.Return(LabelTarget, Type)
  fullName: Expression.Return(LabelTarget, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a return statement with the specified type.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    - id: type
      type: System.Type
      description: An <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Return, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, the <xref href="System.Linq.Expressions.Expression.Type"></xref> property set to <code>type</code>, and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Return*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Return(LabelTarget, Expression, Type)
  nameWithType: Expression.Return(LabelTarget, Expression, Type)
  fullName: Expression.Return(LabelTarget, Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.GotoExpression"></xref> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget"></xref> that the <xref href="System.Linq.Expressions.GotoExpression"></xref> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    - id: type
      type: System.Type
      description: An <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <xref href="System.Linq.Expressions.GotoExpression"></xref> with <xref href="System.Linq.Expressions.GotoExpression.Kind"></xref> equal to Continue, the <xref href="System.Linq.Expressions.GotoExpression.Target"></xref> property set to <code>target</code>, the <xref href="System.Linq.Expressions.Expression.Type"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Return*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RightShift(Expression, Expression)
  nameWithType: Expression.RightShift(Expression, Expression)
  fullName: Expression.RightShift(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise right-shift operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.RightShift"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.RightShift*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The right-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RightShift(Expression, Expression, MethodInfo)
  nameWithType: Expression.RightShift(Expression, Expression, MethodInfo)
  fullName: Expression.RightShift(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise right-shift operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.RightShift"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.RightShift*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the right-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RightShiftAssign(Expression, Expression)
  nameWithType: Expression.RightShiftAssign(Expression, Expression)
  fullName: Expression.RightShiftAssign(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise right-shift assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.RightShiftAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.RightShiftAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RightShiftAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.RightShiftAssign(Expression, Expression, MethodInfo)
  fullName: Expression.RightShiftAssign(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise right-shift assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.RightShiftAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.RightShiftAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a bitwise right-shift assignment operation.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.RightShiftAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.RightShiftAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  id: RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RuntimeVariables(ParameterExpression[])
  nameWithType: Expression.RuntimeVariables(ParameterExpression[])
  fullName: Expression.RuntimeVariables(ParameterExpression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an instance of <xref href="System.Linq.Expressions.RuntimeVariablesExpression"></xref>.
  syntax:
    content: public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Linq.Expressions.ParameterExpression[] variables);
    parameters:
    - id: variables
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array of <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.RuntimeVariablesExpression.Variables"></xref> collection.
    return:
      type: System.Linq.Expressions.RuntimeVariablesExpression
      description: An instance of <xref href="System.Linq.Expressions.RuntimeVariablesExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.RuntimeVariables"></xref> and the <xref href="System.Linq.Expressions.RuntimeVariablesExpression.Variables"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.RuntimeVariables*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RuntimeVariables(IEnumerable<ParameterExpression>)
  nameWithType: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)
  fullName: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an instance of <xref href="System.Linq.Expressions.RuntimeVariablesExpression"></xref>.
  syntax:
    content: public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables);
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: A collection of <xref href="System.Linq.Expressions.ParameterExpression"></xref> objects to use to populate the <xref href="System.Linq.Expressions.RuntimeVariablesExpression.Variables"></xref> collection.
    return:
      type: System.Linq.Expressions.RuntimeVariablesExpression
      description: An instance of <xref href="System.Linq.Expressions.RuntimeVariablesExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.RuntimeVariables"></xref> and the <xref href="System.Linq.Expressions.RuntimeVariablesExpression.Variables"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.RuntimeVariables*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Subtract(Expression, Expression)
  nameWithType: Expression.Subtract(Expression, Expression)
  fullName: Expression.Subtract(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic subtraction operation that does not have overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator."
  example:
  - "The following code example shows how to create an expression that subtracts the argument from the first argument.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#30)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#30)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Subtract"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Subtract*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Subtract(Expression, Expression, MethodInfo)
  nameWithType: Expression.Subtract(Expression, Expression, MethodInfo)
  fullName: Expression.Subtract(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic subtraction operation that does not have overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Subtract"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Subtract*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractAssign(Expression, Expression)
  nameWithType: Expression.SubtractAssign(Expression, Expression)
  fullName: Expression.SubtractAssign(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a subtraction assignment operation that does not have overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.SubtractAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.SubtractAssign(Expression, Expression, MethodInfo)
  fullName: Expression.SubtractAssign(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a subtraction assignment operation that does not have overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.SubtractAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a subtraction assignment operation that does not have overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.SubtractAssign"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractAssign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a subtraction assignment operation that has overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.SubtractAssignChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Conversion"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractAssignChecked*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractAssignChecked(Expression, Expression)
  nameWithType: Expression.SubtractAssignChecked(Expression, Expression)
  fullName: Expression.SubtractAssignChecked(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a subtraction assignment operation that has overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.SubtractAssignChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractAssignChecked*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractAssignChecked(Expression, Expression, MethodInfo)
  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo)
  fullName: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents a subtraction assignment operation that has overflow checking.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.SubtractAssignChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractAssignChecked*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractChecked(Expression, Expression, MethodInfo)
  nameWithType: Expression.SubtractChecked(Expression, Expression, MethodInfo)
  fullName: Expression.SubtractChecked(Expression, Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic subtraction operation that has overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation :  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.SubtractChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref>, <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref>, and <xref href="System.Linq.Expressions.BinaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractChecked*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>method</code> is `null` and the subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractChecked(Expression, Expression)
  nameWithType: Expression.SubtractChecked(Expression, Expression)
  fullName: Expression.SubtractChecked(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.BinaryExpression"></xref> that represents an arithmetic subtraction operation that has overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.SubtractChecked"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractChecked*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>left</code> or <code>right</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])
  nameWithType: Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])
  fullName: Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.SwitchExpression"></xref> that represents a `switch` statement that has a default case..
  syntax:
    content: public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the switch.
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if <code>switchValue</code> does not match any of the cases.
    - id: comparison
      type: System.Reflection.MethodInfo
      description: The equality comparison method to use.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <xref href="System.Linq.Expressions.SwitchExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Switch*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Switch(Expression, SwitchCase[])
  nameWithType: Expression.Switch(Expression, SwitchCase[])
  fullName: Expression.Switch(Expression, SwitchCase[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.SwitchExpression"></xref> that represents a `switch` statement without a default case.
  remarks: "All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  \n  \n Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.  \n  \n If `switchValue` does not match any of the cases, no exception is thrown."
  example:
  - "The following example demonstrates how to create an expression that represents a swtich statement without a default case.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#34)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#34)]"
  syntax:
    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.SwitchCase[] cases);
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <xref href="System.Linq.Expressions.SwitchExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Switch*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Switch(Expression, Expression, SwitchCase[])
  nameWithType: Expression.Switch(Expression, Expression, SwitchCase[])
  fullName: Expression.Switch(Expression, Expression, SwitchCase[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.SwitchExpression"></xref> that represents a `switch` statement that has a default case.
  remarks: "All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  \n  \n Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.  \n  \n If `switchValue` does not match any of the cases, the default case represented by `defaultBody` is run."
  example:
  - "The following example demonstrates how to create an expression that represents a swtich statement that has a default case.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]"
  syntax:
    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Linq.Expressions.SwitchCase[] cases);
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if <code>switchValue</code> does not match any of the cases.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <xref href="System.Linq.Expressions.SwitchExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Switch*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
  nameWithType: Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
  fullName: Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.SwitchExpression"></xref> that represents a `switch` statement that has a default case.
  syntax:
    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases);
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if <code>switchValue</code> does not match any of the cases.
    - id: comparison
      type: System.Reflection.MethodInfo
      description: The equality comparison method to use.
    - id: cases
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <xref href="System.Linq.Expressions.SwitchExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Switch*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Switch(Expression, Expression, MethodInfo, SwitchCase[])
  nameWithType: Expression.Switch(Expression, Expression, MethodInfo, SwitchCase[])
  fullName: Expression.Switch(Expression, Expression, MethodInfo, SwitchCase[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.SwitchExpression"></xref> that represents a `switch` statement that has a default case.
  syntax:
    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if <code>switchValue</code> does not match any of the cases.
    - id: comparison
      type: System.Reflection.MethodInfo
      description: The equality comparison method to use.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <xref href="System.Linq.Expressions.SwitchExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Switch*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
  nameWithType: Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
  fullName: Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.SwitchExpression"></xref> that represents a `switch` statement that has a default case.
  syntax:
    content: public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the switch.
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if <code>switchValue</code> does not match any of the cases.
    - id: comparison
      type: System.Reflection.MethodInfo
      description: The equality comparison method to use.
    - id: cases
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <xref href="System.Linq.Expressions.SwitchExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Switch*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SwitchCase(Expression, Expression[])
  nameWithType: Expression.SwitchCase(Expression, Expression[])
  fullName: Expression.SwitchCase(Expression, Expression[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.SwitchCase"></xref> for use in a <xref href="System.Linq.Expressions.SwitchExpression"></xref>.
  syntax:
    content: public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression[] testValues);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the case.
    - id: testValues
      type: System.Linq.Expressions.Expression[]
      description: The test values of the case.
    return:
      type: System.Linq.Expressions.SwitchCase
      description: The created <xref href="System.Linq.Expressions.SwitchCase"></xref>.
  overload: System.Linq.Expressions.Expression.SwitchCase*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SwitchCase(Expression, IEnumerable<Expression>)
  nameWithType: Expression.SwitchCase(Expression, IEnumerable<Expression>)
  fullName: Expression.SwitchCase(Expression, IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.SwitchCase"></xref> object to be used in a <xref href="System.Linq.Expressions.SwitchExpression"></xref> object.
  remarks: "All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  \n  \n Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another."
  example:
  - "The following example demonstrates how to create an expression that represents a swtich statement that has a default case.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]"
  syntax:
    content: public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> testValues);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the case.
    - id: testValues
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The test values of the case.
    return:
      type: System.Linq.Expressions.SwitchCase
      description: The created <xref href="System.Linq.Expressions.SwitchCase"></xref>.
  overload: System.Linq.Expressions.Expression.SwitchCase*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  id: SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SymbolDocument(String, Guid, Guid, Guid)
  nameWithType: Expression.SymbolDocument(String, Guid, Guid, Guid)
  fullName: Expression.SymbolDocument(String, Guid, Guid, Guid)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an instance of <xref href="System.Linq.Expressions.SymbolDocumentInfo"></xref>.
  syntax:
    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);
    parameters:
    - id: fileName
      type: System.String
      description: A <xref href="System.String"></xref> to set the <xref href="System.Linq.Expressions.SymbolDocumentInfo.FileName"></xref> equal to.
    - id: language
      type: System.Guid
      description: A <xref href="System.Guid"></xref> to set the <xref href="System.Linq.Expressions.SymbolDocumentInfo.Language"></xref> equal to.
    - id: languageVendor
      type: System.Guid
      description: A <xref href="System.Guid"></xref> to set the <xref href="System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor"></xref> equal to.
    - id: documentType
      type: System.Guid
      description: A <xref href="System.Guid"></xref> to set the <xref href="System.Linq.Expressions.SymbolDocumentInfo.DocumentType"></xref> equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A <xref href="System.Linq.Expressions.SymbolDocumentInfo"></xref> that has the <xref href="System.Linq.Expressions.SymbolDocumentInfo.FileName"></xref> and <xref href="System.Linq.Expressions.SymbolDocumentInfo.Language"></xref> and <xref href="System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor"></xref> and <xref href="System.Linq.Expressions.SymbolDocumentInfo.DocumentType"></xref> properties set to the specified value.
  overload: System.Linq.Expressions.Expression.SymbolDocument*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  id: SymbolDocument(System.String,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SymbolDocument(String, Guid, Guid)
  nameWithType: Expression.SymbolDocument(String, Guid, Guid)
  fullName: Expression.SymbolDocument(String, Guid, Guid)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an instance of <xref href="System.Linq.Expressions.SymbolDocumentInfo"></xref>.
  syntax:
    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);
    parameters:
    - id: fileName
      type: System.String
      description: A <xref href="System.String"></xref> to set the <xref href="System.Linq.Expressions.SymbolDocumentInfo.FileName"></xref> equal to.
    - id: language
      type: System.Guid
      description: A <xref href="System.Guid"></xref> to set the <xref href="System.Linq.Expressions.SymbolDocumentInfo.Language"></xref> equal to.
    - id: languageVendor
      type: System.Guid
      description: A <xref href="System.Guid"></xref> to set the <xref href="System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor"></xref> equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A <xref href="System.Linq.Expressions.SymbolDocumentInfo"></xref> that has the <xref href="System.Linq.Expressions.SymbolDocumentInfo.FileName"></xref> and <xref href="System.Linq.Expressions.SymbolDocumentInfo.Language"></xref> and <xref href="System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor"></xref> properties set to the specified value.
  overload: System.Linq.Expressions.Expression.SymbolDocument*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String)
  id: SymbolDocument(System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SymbolDocument(String)
  nameWithType: Expression.SymbolDocument(String)
  fullName: Expression.SymbolDocument(String)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an instance of <xref href="System.Linq.Expressions.SymbolDocumentInfo"></xref>.
  syntax:
    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: A <xref href="System.String"></xref> to set the <xref href="System.Linq.Expressions.SymbolDocumentInfo.FileName"></xref> equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A <xref href="System.Linq.Expressions.SymbolDocumentInfo"></xref> that has the <xref href="System.Linq.Expressions.SymbolDocumentInfo.FileName"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.SymbolDocument*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  id: SymbolDocument(System.String,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SymbolDocument(String, Guid)
  nameWithType: Expression.SymbolDocument(String, Guid)
  fullName: Expression.SymbolDocument(String, Guid)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates an instance of <xref href="System.Linq.Expressions.SymbolDocumentInfo"></xref>.
  syntax:
    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);
    parameters:
    - id: fileName
      type: System.String
      description: A <xref href="System.String"></xref> to set the <xref href="System.Linq.Expressions.SymbolDocumentInfo.FileName"></xref> equal to.
    - id: language
      type: System.Guid
      description: A <xref href="System.Guid"></xref> to set the <xref href="System.Linq.Expressions.SymbolDocumentInfo.Language"></xref> equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A <xref href="System.Linq.Expressions.SymbolDocumentInfo"></xref> that has the <xref href="System.Linq.Expressions.SymbolDocumentInfo.FileName"></xref> and <xref href="System.Linq.Expressions.SymbolDocumentInfo.Language"></xref> properties set to the specified value.
  overload: System.Linq.Expressions.Expression.SymbolDocument*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  id: Throw(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Throw(Expression)
  nameWithType: Expression.Throw(Expression)
  fullName: Expression.Throw(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a throwing of an exception.
  remarks: ''
  example:
  - "The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that uses the <xref:System.Linq.Expressions.Expression.Throw%2A> method.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref>.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the exception.
  overload: System.Linq.Expressions.Expression.Throw*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  id: Throw(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Throw(Expression, Type)
  nameWithType: Expression.Throw(Expression, Type)
  fullName: Expression.Throw(Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a throwing of an exception with a given type.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref>.
    - id: type
      type: System.Type
      description: The new <xref href="System.Type"></xref> of the expression.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents the exception.
  overload: System.Linq.Expressions.Expression.Throw*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.ToString
  commentId: M:System.Linq.Expressions.Expression.ToString
  id: ToString
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ToString()
  nameWithType: Expression.ToString()
  fullName: Expression.ToString()
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Returns a textual representation of the <xref href="System.Linq.Expressions.Expression"></xref>.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A textual representation of the <xref href="System.Linq.Expressions.Expression"></xref>.
  overload: System.Linq.Expressions.Expression.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  commentId: M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  id: TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TryCatch(Expression, CatchBlock[])
  nameWithType: Expression.TryCatch(Expression, CatchBlock[])
  fullName: Expression.TryCatch(Expression, CatchBlock[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.TryExpression"></xref> representing a try block with any number of catch statements and neither a fault nor finally block.
  remarks: ''
  example:
  - "The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]"
  syntax:
    content: public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, System.Linq.Expressions.CatchBlock[] handlers);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: handlers
      type: System.Linq.Expressions.CatchBlock[]
      description: The array of zero or more <xref href="System.Linq.Expressions.CatchBlock"></xref> expressions representing the catch statements to be associated with the try block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <xref href="System.Linq.Expressions.TryExpression"></xref>.
  overload: System.Linq.Expressions.Expression.TryCatch*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  commentId: M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  id: TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TryCatchFinally(Expression, Expression, CatchBlock[])
  nameWithType: Expression.TryCatchFinally(Expression, Expression, CatchBlock[])
  fullName: Expression.TryCatchFinally(Expression, Expression, CatchBlock[])
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.TryExpression"></xref> representing a try block with any number of catch statements and a finally block.
  remarks: ''
  example:
  - "The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement and a finally statement.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#48)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#48)]"
  syntax:
    content: public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.CatchBlock[] handlers);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: finally
      type: System.Linq.Expressions.Expression
      description: The body of the finally block.
    - id: handlers
      type: System.Linq.Expressions.CatchBlock[]
      description: The array of zero or more <xref href="System.Linq.Expressions.CatchBlock"></xref> expressions representing the catch statements to be associated with the try block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <xref href="System.Linq.Expressions.TryExpression"></xref>.
  overload: System.Linq.Expressions.Expression.TryCatchFinally*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TryFault(Expression, Expression)
  nameWithType: Expression.TryFault(Expression, Expression)
  fullName: Expression.TryFault(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.TryExpression"></xref> representing a try block with a fault block and no catch statements.
  syntax:
    content: public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: fault
      type: System.Linq.Expressions.Expression
      description: The body of the fault block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <xref href="System.Linq.Expressions.TryExpression"></xref>.
  overload: System.Linq.Expressions.Expression.TryFault*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TryFinally(Expression, Expression)
  nameWithType: Expression.TryFinally(Expression, Expression)
  fullName: Expression.TryFinally(Expression, Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.TryExpression"></xref> representing a try block with a finally block and no catch statements.
  syntax:
    content: public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: finally
      type: System.Linq.Expressions.Expression
      description: The body of the finally block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <xref href="System.Linq.Expressions.TryExpression"></xref>.
  overload: System.Linq.Expressions.Expression.TryFinally*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  commentId: M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  id: TryGetActionType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TryGetActionType(Type[], Type)
  nameWithType: Expression.TryGetActionType(Type[], Type)
  fullName: Expression.TryGetActionType(Type[], Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.Expression.Type"></xref> object that represents a generic System.Action delegate type that has specific type arguments.
  syntax:
    content: public static bool TryGetActionType (Type[] typeArgs, out Type actionType);
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: An array of Type objects that specify the type arguments for the System.Action delegate type.
    - id: actionType
      type: System.Type
      description: When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the <code>typeArgs</code>.This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: true if generic System.Action delegate type was created for specific <code>typeArgs</code>; false otherwise.
  overload: System.Linq.Expressions.Expression.TryGetActionType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  commentId: M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  id: TryGetFuncType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TryGetFuncType(Type[], Type)
  nameWithType: Expression.TryGetFuncType(Type[], Type)
  fullName: Expression.TryGetFuncType(Type[], Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.Expression.Type"></xref> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.
  syntax:
    content: public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: An array of Type objects that specify the type arguments for the System.Func delegate type.
    - id: funcType
      type: System.Type
      description: When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the <code>typeArgs</code>.This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: true if generic System.Func delegate type was created for specific <code>typeArgs</code>; false otherwise.
  overload: System.Linq.Expressions.Expression.TryGetFuncType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Type
  commentId: P:System.Linq.Expressions.Expression.Type
  id: Type
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Type
  nameWithType: Expression.Type
  fullName: Expression.Type
  type: Property
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Gets the static type of the expression that this <xref href="System.Linq.Expressions.Expression"></xref> represents.
  remarks: "The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents. For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)]"
  syntax:
    content: public virtual Type Type { get; }
    return:
      type: System.Type
      description: The <xref href="System.Type"></xref> that represents the static type of the expression.
  overload: System.Linq.Expressions.Expression.Type*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  id: TypeAs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TypeAs(Expression, Type)
  nameWithType: Expression.TypeAs(Expression, Type)
  fullName: Expression.TypeAs(Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents an explicit reference or boxing conversion where `null` is supplied if the conversion fails.
  remarks: The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`. The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.UnaryExpression> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#11)]\n [!code-vb[System.Linq.Expressions.Expression#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#11)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> to set the <xref href="System.Linq.Expressions.Expression.Type"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.TypeAs"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> and <xref href="System.Linq.Expressions.Expression.Type"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.TypeAs*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> or <code>type</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  id: TypeEqual(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TypeEqual(Expression, Type)
  nameWithType: Expression.TypeEqual(Expression, Type)
  fullName: Expression.TypeEqual(Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.TypeBinaryExpression"></xref> that compares run-time type identity.
  syntax:
    content: public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.Expression"></xref> property equal to.
    - id: type
      type: System.Type
      description: A <xref href="System.Linq.Expressions.Expression.Type"></xref> to set the <xref href="System.Linq.Expressions.TypeBinaryExpression.TypeOperand"></xref> property equal to.
    return:
      type: System.Linq.Expressions.TypeBinaryExpression
      description: A <xref href="System.Linq.Expressions.TypeBinaryExpression"></xref> for which the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property is equal to <xref href="System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)"></xref> and for which the <xref href="System.Linq.Expressions.Expression"></xref> and <xref href="System.Linq.Expressions.TypeBinaryExpression.TypeOperand"></xref> properties are set to the specified values.
  overload: System.Linq.Expressions.Expression.TypeEqual*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  id: TypeIs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TypeIs(Expression, Type)
  nameWithType: Expression.TypeIs(Expression, Type)
  fullName: Expression.TypeIs(Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.TypeBinaryExpression"></xref>.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.TypeBinaryExpression> that represents a type test of a string value against the <xref:System.Int32> type.  \n  \n [!code-csharp[System.Linq.Expressions.Expression#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#12)]\n [!code-vb[System.Linq.Expressions.Expression#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#12)]"
  syntax:
    content: public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.TypeBinaryExpression.Expression"></xref> property equal to.
    - id: type
      type: System.Type
      description: A <xref href="System.Linq.Expressions.Expression.Type"></xref> to set the <xref href="System.Linq.Expressions.TypeBinaryExpression.TypeOperand"></xref> property equal to.
    return:
      type: System.Linq.Expressions.TypeBinaryExpression
      description: A <xref href="System.Linq.Expressions.TypeBinaryExpression"></xref> for which the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property is equal to <xref href="System.Linq.Expressions.ExpressionType.TypeIs"></xref> and for which the <xref href="System.Linq.Expressions.TypeBinaryExpression.Expression"></xref> and <xref href="System.Linq.Expressions.TypeBinaryExpression.TypeOperand"></xref> properties are set to the specified values.
  overload: System.Linq.Expressions.Expression.TypeIs*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> or <code>type</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  ms.author: billchi
  manager: ghogen
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: UnaryPlus(Expression, MethodInfo)
  nameWithType: Expression.UnaryPlus(Expression, MethodInfo)
  fullName: Expression.UnaryPlus(Expression, MethodInfo)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a unary plus operation.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \n  \n-   If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Method"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.UnaryPlus"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> and <xref href="System.Linq.Expressions.UnaryExpression.Method"></xref> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.UnaryPlus*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>method</code> is `null` and the unary plus operator is not defined for <code>expression</code>.Type.  \n  \n -or-  \n  \n <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  id: UnaryPlus(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: UnaryPlus(Expression)
  nameWithType: Expression.UnaryPlus(Expression)
  fullName: Expression.UnaryPlus(Expression)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents a unary plus operation.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.UnaryPlus"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand"></xref> property set to the specified value.
  overload: System.Linq.Expressions.Expression.UnaryPlus*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>expression</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The unary plus operator is not defined for <code>expression</code>.Type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  id: Unbox(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Unbox(Expression, Type)
  nameWithType: Expression.Unbox(Expression, Type)
  fullName: Expression.Unbox(Expression, Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.UnaryExpression"></xref> that represents an explicit unboxing.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression"></xref> to unbox.
    - id: type
      type: System.Type
      description: The new <xref href="System.Type"></xref> of the expression.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <xref href="System.Linq.Expressions.UnaryExpression"></xref>.
  overload: System.Linq.Expressions.Expression.Unbox*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  id: Variable(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Variable(Type, String)
  nameWithType: Expression.Variable(Type, String)
  fullName: Expression.Variable(Type, String)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ParameterExpression"></xref> node that can be used to identify a parameter or a variable in an expression tree.
  syntax:
    content: public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);
    parameters:
    - id: type
      type: System.Type
      description: The type of the parameter or variable.
    - id: name
      type: System.String
      description: The name of the parameter or variable. This name is used for debugging or printing purpose only.
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: A <xref href="System.Linq.Expressions.ParameterExpression"></xref> node with the specified name and type.
  overload: System.Linq.Expressions.Expression.Variable*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.Variable(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Variable(System.Type)
  id: Variable(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Variable(Type)
  nameWithType: Expression.Variable(Type)
  fullName: Expression.Variable(Type)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Creates a <xref href="System.Linq.Expressions.ParameterExpression"></xref> node that can be used to identify a parameter or a variable in an expression tree.
  syntax:
    content: public static System.Linq.Expressions.ParameterExpression Variable (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type of the parameter or variable.
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: A <xref href="System.Linq.Expressions.ParameterExpression"></xref> node with the specified name and type
  overload: System.Linq.Expressions.Expression.Variable*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  commentId: M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  id: VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: VisitChildren(ExpressionVisitor)
  nameWithType: Expression.VisitChildren(ExpressionVisitor)
  fullName: Expression.VisitChildren(ExpressionVisitor)
  type: Method
  assemblies:
  - System.Linq.Expressions
  - System.Core
  - netstandard
  namespace: System.Linq.Expressions
  summary: Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.
  remarks: Override this method to provide logic to walk the node's children. A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.
  syntax:
    content: protected virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
      description: An instance of <xref href="System.Func`2"></xref>.
    return:
      type: System.Linq.Expressions.Expression
      description: The expression being visited, or an expression which should replace it in the tree.
  overload: System.Linq.Expressions.Expression.VisitChildren*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
  ms.technology:
  - dotnet-standard
  author: BillWagner
  ms.author: wiwagn
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.AmbiguousMatchException
  parent: System.Reflection
  isExternal: false
  name: AmbiguousMatchException
  nameWithType: AmbiguousMatchException
  fullName: System.Reflection.AmbiguousMatchException
- uid: System.Linq.Expressions.Expression.#ctor
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Expression()
  nameWithType: Expression.Expression()
  fullName: Expression.Expression()
- uid: System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Expression(ExpressionType, Type)
  nameWithType: Expression.Expression(ExpressionType, Type)
  fullName: Expression.Expression(ExpressionType, Type)
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Accept(ExpressionVisitor)
  nameWithType: Expression.Accept(ExpressionVisitor)
  fullName: Expression.Accept(ExpressionVisitor)
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.ExpressionVisitor
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionVisitor
  nameWithType: ExpressionVisitor
  fullName: System.Linq.Expressions.ExpressionVisitor
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Add(Expression, Expression)
  nameWithType: Expression.Add(Expression, Expression)
  fullName: Expression.Add(Expression, Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Add(Expression, Expression, MethodInfo)
  nameWithType: Expression.Add(Expression, Expression, MethodInfo)
  fullName: Expression.Add(Expression, Expression, MethodInfo)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssign(Expression, Expression)
  nameWithType: Expression.AddAssign(Expression, Expression)
  fullName: Expression.AddAssign(Expression, Expression)
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.AddAssign(Expression, Expression, MethodInfo)
  fullName: Expression.AddAssign(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssignChecked(Expression, Expression)
  nameWithType: Expression.AddAssignChecked(Expression, Expression)
  fullName: Expression.AddAssignChecked(Expression, Expression)
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssignChecked(Expression, Expression, MethodInfo)
  nameWithType: Expression.AddAssignChecked(Expression, Expression, MethodInfo)
  fullName: Expression.AddAssignChecked(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddChecked(Expression, Expression)
  nameWithType: Expression.AddChecked(Expression, Expression)
  fullName: Expression.AddChecked(Expression, Expression)
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddChecked(Expression, Expression, MethodInfo)
  nameWithType: Expression.AddChecked(Expression, Expression, MethodInfo)
  fullName: Expression.AddChecked(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: And(Expression, Expression)
  nameWithType: Expression.And(Expression, Expression)
  fullName: Expression.And(Expression, Expression)
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: And(Expression, Expression, MethodInfo)
  nameWithType: Expression.And(Expression, Expression, MethodInfo)
  fullName: Expression.And(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AndAlso(Expression, Expression, MethodInfo)
  nameWithType: Expression.AndAlso(Expression, Expression, MethodInfo)
  fullName: Expression.AndAlso(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AndAlso(Expression, Expression)
  nameWithType: Expression.AndAlso(Expression, Expression)
  fullName: Expression.AndAlso(Expression, Expression)
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AndAssign(Expression, Expression)
  nameWithType: Expression.AndAssign(Expression, Expression)
  fullName: Expression.AndAssign(Expression, Expression)
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AndAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.AndAssign(Expression, Expression, MethodInfo)
  fullName: Expression.AndAssign(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AndAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayAccess(Expression, IEnumerable<Expression>)
  nameWithType: Expression.ArrayAccess(Expression, IEnumerable<Expression>)
  fullName: Expression.ArrayAccess(Expression, IEnumerable<Expression>)
- uid: System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: IndexExpression
  nameWithType: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayAccess(Expression, Expression[])
  nameWithType: Expression.ArrayAccess(Expression, Expression[])
  fullName: Expression.ArrayAccess(Expression, Expression[])
- uid: System.Linq.Expressions.Expression[]
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression[]
  nameWithType: Expression[]
  fullName: System.Linq.Expressions.Expression[]
  spec.csharp:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayIndex(Expression, Expression[])
  nameWithType: Expression.ArrayIndex(Expression, Expression[])
  fullName: Expression.ArrayIndex(Expression, Expression[])
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayIndex(Expression, IEnumerable<Expression>)
  nameWithType: Expression.ArrayIndex(Expression, IEnumerable<Expression>)
  fullName: Expression.ArrayIndex(Expression, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayIndex(Expression, Expression)
  nameWithType: Expression.ArrayIndex(Expression, Expression)
  fullName: Expression.ArrayIndex(Expression, Expression)
- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayLength(Expression)
  nameWithType: Expression.ArrayLength(Expression)
  fullName: Expression.ArrayLength(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Assign(Expression, Expression)
  nameWithType: Expression.Assign(Expression, Expression)
  fullName: Expression.Assign(Expression, Expression)
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Bind(MemberInfo, Expression)
  nameWithType: Expression.Bind(MemberInfo, Expression)
  fullName: Expression.Bind(MemberInfo, Expression)
- uid: System.Linq.Expressions.MemberAssignment
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberAssignment
  nameWithType: MemberAssignment
  fullName: System.Linq.Expressions.MemberAssignment
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Bind(MethodInfo, Expression)
  nameWithType: Expression.Bind(MethodInfo, Expression)
  fullName: Expression.Bind(MethodInfo, Expression)
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)
  nameWithType: Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)
  fullName: Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Linq.Expressions.ParameterExpression
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Expression, Expression, Expression)
  nameWithType: Expression.Block(Expression, Expression, Expression)
  fullName: Expression.Block(Expression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Expression, Expression, Expression, Expression, Expression)
  nameWithType: Expression.Block(Expression, Expression, Expression, Expression, Expression)
  fullName: Expression.Block(Expression, Expression, Expression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Type, IEnumerable<ParameterExpression>, Expression[])
  nameWithType: Expression.Block(Type, IEnumerable<ParameterExpression>, Expression[])
  fullName: Expression.Block(Type, IEnumerable<ParameterExpression>, Expression[])
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Type, Expression[])
  nameWithType: Expression.Block(Type, Expression[])
  fullName: Expression.Block(Type, Expression[])
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Expression, Expression, Expression, Expression)
  nameWithType: Expression.Block(Expression, Expression, Expression, Expression)
  fullName: Expression.Block(Expression, Expression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Expression, Expression)
  nameWithType: Expression.Block(Expression, Expression)
  fullName: Expression.Block(Expression, Expression)
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(IEnumerable<ParameterExpression>, Expression[])
  nameWithType: Expression.Block(IEnumerable<ParameterExpression>, Expression[])
  fullName: Expression.Block(IEnumerable<ParameterExpression>, Expression[])
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)
  nameWithType: Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)
  fullName: Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Expression[])
  nameWithType: Expression.Block(Expression[])
  fullName: Expression.Block(Expression[])
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(IEnumerable<Expression>)
  nameWithType: Expression.Block(IEnumerable<Expression>)
  fullName: Expression.Block(IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Type, IEnumerable<Expression>)
  nameWithType: Expression.Block(Type, IEnumerable<Expression>)
  fullName: Expression.Block(Type, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Break(LabelTarget)
  nameWithType: Expression.Break(LabelTarget)
  fullName: Expression.Break(LabelTarget)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Break(LabelTarget, Expression)
  nameWithType: Expression.Break(LabelTarget, Expression)
  fullName: Expression.Break(LabelTarget, Expression)
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Break(LabelTarget, Type)
  nameWithType: Expression.Break(LabelTarget, Type)
  fullName: Expression.Break(LabelTarget, Type)
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Break(LabelTarget, Expression, Type)
  nameWithType: Expression.Break(LabelTarget, Expression, Type)
  fullName: Expression.Break(LabelTarget, Expression, Type)
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)
  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)
  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Expression, MethodInfo, Expression, Expression, Expression)
  nameWithType: Expression.Call(Expression, MethodInfo, Expression, Expression, Expression)
  fullName: Expression.Call(Expression, MethodInfo, Expression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Type, String, Type[], Expression[])
  nameWithType: Expression.Call(Type, String, Type[], Expression[])
  fullName: Expression.Call(Type, String, Type[], Expression[])
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type[]
  parent: System
  isExternal: false
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo, Expression, Expression, Expression)
  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression)
  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Expression, String, Type[], Expression[])
  nameWithType: Expression.Call(Expression, String, Type[], Expression[])
  fullName: Expression.Call(Expression, String, Type[], Expression[])
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Expression, MethodInfo, Expression, Expression)
  nameWithType: Expression.Call(Expression, MethodInfo, Expression, Expression)
  fullName: Expression.Call(Expression, MethodInfo, Expression, Expression)
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo, Expression, Expression, Expression, Expression)
  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression)
  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Expression, MethodInfo, Expression[])
  nameWithType: Expression.Call(Expression, MethodInfo, Expression[])
  fullName: Expression.Call(Expression, MethodInfo, Expression[])
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Expression, MethodInfo, IEnumerable<Expression>)
  nameWithType: Expression.Call(Expression, MethodInfo, IEnumerable<Expression>)
  fullName: Expression.Call(Expression, MethodInfo, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo, Expression[])
  nameWithType: Expression.Call(MethodInfo, Expression[])
  fullName: Expression.Call(MethodInfo, Expression[])
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo, Expression)
  nameWithType: Expression.Call(MethodInfo, Expression)
  fullName: Expression.Call(MethodInfo, Expression)
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo, IEnumerable<Expression>)
  nameWithType: Expression.Call(MethodInfo, IEnumerable<Expression>)
  fullName: Expression.Call(MethodInfo, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Expression, MethodInfo)
  nameWithType: Expression.Call(Expression, MethodInfo)
  fullName: Expression.Call(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo, Expression, Expression)
  nameWithType: Expression.Call(MethodInfo, Expression, Expression)
  fullName: Expression.Call(MethodInfo, Expression, Expression)
- uid: System.Linq.Expressions.Expression.CanReduce
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: CanReduce
  nameWithType: Expression.CanReduce
  fullName: Expression.CanReduce
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Catch(ParameterExpression, Expression)
  nameWithType: Expression.Catch(ParameterExpression, Expression)
  fullName: Expression.Catch(ParameterExpression, Expression)
- uid: System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock
  nameWithType: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Catch(Type, Expression)
  nameWithType: Expression.Catch(Type, Expression)
  fullName: Expression.Catch(Type, Expression)
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Catch(ParameterExpression, Expression, Expression)
  nameWithType: Expression.Catch(ParameterExpression, Expression, Expression)
  fullName: Expression.Catch(ParameterExpression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Catch(Type, Expression, Expression)
  nameWithType: Expression.Catch(Type, Expression, Expression)
  fullName: Expression.Catch(Type, Expression, Expression)
- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ClearDebugInfo(SymbolDocumentInfo)
  nameWithType: Expression.ClearDebugInfo(SymbolDocumentInfo)
  fullName: Expression.ClearDebugInfo(SymbolDocumentInfo)
- uid: System.Linq.Expressions.DebugInfoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DebugInfoExpression
  nameWithType: DebugInfoExpression
  fullName: System.Linq.Expressions.DebugInfoExpression
- uid: System.Linq.Expressions.SymbolDocumentInfo
  parent: System.Linq.Expressions
  isExternal: false
  name: SymbolDocumentInfo
  nameWithType: SymbolDocumentInfo
  fullName: System.Linq.Expressions.SymbolDocumentInfo
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Coalesce(Expression, Expression, LambdaExpression)
  nameWithType: Expression.Coalesce(Expression, Expression, LambdaExpression)
  fullName: Expression.Coalesce(Expression, Expression, LambdaExpression)
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Coalesce(Expression, Expression)
  nameWithType: Expression.Coalesce(Expression, Expression)
  fullName: Expression.Coalesce(Expression, Expression)
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Condition(Expression, Expression, Expression)
  nameWithType: Expression.Condition(Expression, Expression, Expression)
  fullName: Expression.Condition(Expression, Expression, Expression)
- uid: System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConditionalExpression
  nameWithType: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Condition(Expression, Expression, Expression, Type)
  nameWithType: Expression.Condition(Expression, Expression, Expression, Type)
  fullName: Expression.Condition(Expression, Expression, Expression, Type)
- uid: System.Linq.Expressions.Expression.Constant(System.Object)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Constant(Object)
  nameWithType: Expression.Constant(Object)
  fullName: Expression.Constant(Object)
- uid: System.Linq.Expressions.ConstantExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConstantExpression
  nameWithType: ConstantExpression
  fullName: System.Linq.Expressions.ConstantExpression
- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Constant(Object, Type)
  nameWithType: Expression.Constant(Object, Type)
  fullName: Expression.Constant(Object, Type)
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Continue(LabelTarget)
  nameWithType: Expression.Continue(LabelTarget)
  fullName: Expression.Continue(LabelTarget)
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Continue(LabelTarget, Type)
  nameWithType: Expression.Continue(LabelTarget, Type)
  fullName: Expression.Continue(LabelTarget, Type)
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Convert(Expression, Type)
  nameWithType: Expression.Convert(Expression, Type)
  fullName: Expression.Convert(Expression, Type)
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Convert(Expression, Type, MethodInfo)
  nameWithType: Expression.Convert(Expression, Type, MethodInfo)
  fullName: Expression.Convert(Expression, Type, MethodInfo)
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ConvertChecked(Expression, Type)
  nameWithType: Expression.ConvertChecked(Expression, Type)
  fullName: Expression.ConvertChecked(Expression, Type)
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ConvertChecked(Expression, Type, MethodInfo)
  nameWithType: Expression.ConvertChecked(Expression, Type, MethodInfo)
  fullName: Expression.ConvertChecked(Expression, Type, MethodInfo)
- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)
  nameWithType: Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)
  fullName: Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Decrement(Expression)
  nameWithType: Expression.Decrement(Expression)
  fullName: Expression.Decrement(Expression)
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Decrement(Expression, MethodInfo)
  nameWithType: Expression.Decrement(Expression, MethodInfo)
  fullName: Expression.Decrement(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.Default(System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Default(Type)
  nameWithType: Expression.Default(Type)
  fullName: Expression.Default(Type)
- uid: System.Linq.Expressions.DefaultExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DefaultExpression
  nameWithType: DefaultExpression
  fullName: System.Linq.Expressions.DefaultExpression
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Divide(Expression, Expression)
  nameWithType: Expression.Divide(Expression, Expression)
  fullName: Expression.Divide(Expression, Expression)
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Divide(Expression, Expression, MethodInfo)
  nameWithType: Expression.Divide(Expression, Expression, MethodInfo)
  fullName: Expression.Divide(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: DivideAssign(Expression, Expression)
  nameWithType: Expression.DivideAssign(Expression, Expression)
  fullName: Expression.DivideAssign(Expression, Expression)
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: DivideAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.DivideAssign(Expression, Expression, MethodInfo)
  fullName: Expression.DivideAssign(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)
  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic(CallSiteBinder, Type, Expression, Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression)
  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression)
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)
  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic(CallSiteBinder, Type, Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression)
  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression)
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)
  nameWithType: Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)
  fullName: Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic(CallSiteBinder, Type, Expression[])
  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression[])
  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression[])
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ElementInit(MethodInfo, IEnumerable<Expression>)
  nameWithType: Expression.ElementInit(MethodInfo, IEnumerable<Expression>)
  fullName: Expression.ElementInit(MethodInfo, IEnumerable<Expression>)
- uid: System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: false
  name: ElementInit
  nameWithType: ElementInit
  fullName: System.Linq.Expressions.ElementInit
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ElementInit(MethodInfo, Expression[])
  nameWithType: Expression.ElementInit(MethodInfo, Expression[])
  fullName: Expression.ElementInit(MethodInfo, Expression[])
- uid: System.Linq.Expressions.Expression.Empty
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Empty()
  nameWithType: Expression.Empty()
  fullName: Expression.Empty()
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Equal(Expression, Expression)
  nameWithType: Expression.Equal(Expression, Expression)
  fullName: Expression.Equal(Expression, Expression)
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Equal(Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.Equal(Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.Equal(Expression, Expression, Boolean, MethodInfo)
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ExclusiveOr(Expression, Expression, MethodInfo)
  nameWithType: Expression.ExclusiveOr(Expression, Expression, MethodInfo)
  fullName: Expression.ExclusiveOr(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ExclusiveOr(Expression, Expression)
  nameWithType: Expression.ExclusiveOr(Expression, Expression)
  fullName: Expression.ExclusiveOr(Expression, Expression)
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ExclusiveOrAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo)
  fullName: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ExclusiveOrAssign(Expression, Expression)
  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression)
  fullName: Expression.ExclusiveOrAssign(Expression, Expression)
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Field(Expression, FieldInfo)
  nameWithType: Expression.Field(Expression, FieldInfo)
  fullName: Expression.Field(Expression, FieldInfo)
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Field(Expression, String)
  nameWithType: Expression.Field(Expression, String)
  fullName: Expression.Field(Expression, String)
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Field(Expression, Type, String)
  nameWithType: Expression.Field(Expression, Type, String)
  fullName: Expression.Field(Expression, Type, String)
- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GetActionType(Type[])
  nameWithType: Expression.GetActionType(Type[])
  fullName: Expression.GetActionType(Type[])
- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GetDelegateType(Type[])
  nameWithType: Expression.GetDelegateType(Type[])
  fullName: Expression.GetDelegateType(Type[])
- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GetFuncType(Type[])
  nameWithType: Expression.GetFuncType(Type[])
  fullName: Expression.GetFuncType(Type[])
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Goto(LabelTarget, Expression, Type)
  nameWithType: Expression.Goto(LabelTarget, Expression, Type)
  fullName: Expression.Goto(LabelTarget, Expression, Type)
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Goto(LabelTarget, Type)
  nameWithType: Expression.Goto(LabelTarget, Type)
  fullName: Expression.Goto(LabelTarget, Type)
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Goto(LabelTarget)
  nameWithType: Expression.Goto(LabelTarget)
  fullName: Expression.Goto(LabelTarget)
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Goto(LabelTarget, Expression)
  nameWithType: Expression.Goto(LabelTarget, Expression)
  fullName: Expression.Goto(LabelTarget, Expression)
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GreaterThan(Expression, Expression)
  nameWithType: Expression.GreaterThan(Expression, Expression)
  fullName: Expression.GreaterThan(Expression, Expression)
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GreaterThan(Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.GreaterThan(Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.GreaterThan(Expression, Expression, Boolean, MethodInfo)
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GreaterThanOrEqual(Expression, Expression)
  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression)
  fullName: Expression.GreaterThanOrEqual(Expression, Expression)
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)
- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IfThen(Expression, Expression)
  nameWithType: Expression.IfThen(Expression, Expression)
  fullName: Expression.IfThen(Expression, Expression)
- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IfThenElse(Expression, Expression, Expression)
  nameWithType: Expression.IfThenElse(Expression, Expression, Expression)
  fullName: Expression.IfThenElse(Expression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Increment(Expression, MethodInfo)
  nameWithType: Expression.Increment(Expression, MethodInfo)
  fullName: Expression.Increment(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Increment(Expression)
  nameWithType: Expression.Increment(Expression)
  fullName: Expression.Increment(Expression)
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Invoke(Expression, Expression[])
  nameWithType: Expression.Invoke(Expression, Expression[])
  fullName: Expression.Invoke(Expression, Expression[])
- uid: System.Linq.Expressions.InvocationExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: InvocationExpression
  nameWithType: InvocationExpression
  fullName: System.Linq.Expressions.InvocationExpression
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Invoke(Expression, IEnumerable<Expression>)
  nameWithType: Expression.Invoke(Expression, IEnumerable<Expression>)
  fullName: Expression.Invoke(Expression, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IsFalse(Expression)
  nameWithType: Expression.IsFalse(Expression)
  fullName: Expression.IsFalse(Expression)
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IsFalse(Expression, MethodInfo)
  nameWithType: Expression.IsFalse(Expression, MethodInfo)
  fullName: Expression.IsFalse(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IsTrue(Expression)
  nameWithType: Expression.IsTrue(Expression)
  fullName: Expression.IsTrue(Expression)
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IsTrue(Expression, MethodInfo)
  nameWithType: Expression.IsTrue(Expression, MethodInfo)
  fullName: Expression.IsTrue(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.Label
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label()
  nameWithType: Expression.Label()
  fullName: Expression.Label()
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label(LabelTarget)
  nameWithType: Expression.Label(LabelTarget)
  fullName: Expression.Label(LabelTarget)
- uid: System.Linq.Expressions.LabelExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelExpression
  nameWithType: LabelExpression
  fullName: System.Linq.Expressions.LabelExpression
- uid: System.Linq.Expressions.Expression.Label(System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label(String)
  nameWithType: Expression.Label(String)
  fullName: Expression.Label(String)
- uid: System.Linq.Expressions.Expression.Label(System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label(Type)
  nameWithType: Expression.Label(Type)
  fullName: Expression.Label(Type)
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label(LabelTarget, Expression)
  nameWithType: Expression.Label(LabelTarget, Expression)
  fullName: Expression.Label(LabelTarget, Expression)
- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label(Type, String)
  nameWithType: Expression.Label(Type, String)
  fullName: Expression.Label(Type, String)
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Type, Expression, ParameterExpression[])
  nameWithType: Expression.Lambda(Type, Expression, ParameterExpression[])
  fullName: Expression.Lambda(Type, Expression, ParameterExpression[])
- uid: System.Linq.Expressions.ParameterExpression[]
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression[]
  nameWithType: ParameterExpression[]
  fullName: System.Linq.Expressions.ParameterExpression[]
  spec.csharp:
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Type, Expression, Boolean, ParameterExpression[])
  nameWithType: Expression.Lambda(Type, Expression, Boolean, ParameterExpression[])
  fullName: Expression.Lambda(Type, Expression, Boolean, ParameterExpression[])
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression, String, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression, String, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Expression, String, IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression, Boolean, ParameterExpression[])
  nameWithType: Expression.Lambda(Expression, Boolean, ParameterExpression[])
  fullName: Expression.Lambda(Expression, Boolean, ParameterExpression[])
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Type, Expression, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression, ParameterExpression[])
  nameWithType: Expression.Lambda(Expression, ParameterExpression[])
  fullName: Expression.Lambda(Expression, ParameterExpression[])
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda(Expression, IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])
  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])
  fullName: Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda<TDelegate>(Expression, ParameterExpression[])
  nameWithType: Expression.Lambda<TDelegate>(Expression, ParameterExpression[])
  fullName: Expression.Lambda<TDelegate>(Expression, ParameterExpression[])
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)
  fullName: Expression.Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LeftShift(Expression, Expression)
  nameWithType: Expression.LeftShift(Expression, Expression)
  fullName: Expression.LeftShift(Expression, Expression)
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LeftShift(Expression, Expression, MethodInfo)
  nameWithType: Expression.LeftShift(Expression, Expression, MethodInfo)
  fullName: Expression.LeftShift(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LeftShiftAssign(Expression, Expression)
  nameWithType: Expression.LeftShiftAssign(Expression, Expression)
  fullName: Expression.LeftShiftAssign(Expression, Expression)
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LeftShiftAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.LeftShiftAssign(Expression, Expression, MethodInfo)
  fullName: Expression.LeftShiftAssign(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LessThan(Expression, Expression)
  nameWithType: Expression.LessThan(Expression, Expression)
  fullName: Expression.LessThan(Expression, Expression)
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LessThan(Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.LessThan(Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.LessThan(Expression, Expression, Boolean, MethodInfo)
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LessThanOrEqual(Expression, Expression)
  nameWithType: Expression.LessThanOrEqual(Expression, Expression)
  fullName: Expression.LessThanOrEqual(Expression, Expression)
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListBind(MethodInfo, ElementInit[])
  nameWithType: Expression.ListBind(MethodInfo, ElementInit[])
  fullName: Expression.ListBind(MethodInfo, ElementInit[])
- uid: System.Linq.Expressions.MemberListBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberListBinding
  nameWithType: MemberListBinding
  fullName: System.Linq.Expressions.MemberListBinding
- uid: System.Linq.Expressions.ElementInit[]
  parent: System.Linq.Expressions
  isExternal: false
  name: ElementInit[]
  nameWithType: ElementInit[]
  fullName: System.Linq.Expressions.ElementInit[]
  spec.csharp:
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListBind(MethodInfo, IEnumerable<ElementInit>)
  nameWithType: Expression.ListBind(MethodInfo, IEnumerable<ElementInit>)
  fullName: Expression.ListBind(MethodInfo, IEnumerable<ElementInit>)
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ElementInit>
  nameWithType: IEnumerable<ElementInit>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListBind(MemberInfo, IEnumerable<ElementInit>)
  nameWithType: Expression.ListBind(MemberInfo, IEnumerable<ElementInit>)
  fullName: Expression.ListBind(MemberInfo, IEnumerable<ElementInit>)
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListBind(MemberInfo, ElementInit[])
  nameWithType: Expression.ListBind(MemberInfo, ElementInit[])
  fullName: Expression.ListBind(MemberInfo, ElementInit[])
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit(NewExpression, IEnumerable<ElementInit>)
  nameWithType: Expression.ListInit(NewExpression, IEnumerable<ElementInit>)
  fullName: Expression.ListInit(NewExpression, IEnumerable<ElementInit>)
- uid: System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ListInitExpression
  nameWithType: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit(NewExpression, IEnumerable<Expression>)
  nameWithType: Expression.ListInit(NewExpression, IEnumerable<Expression>)
  fullName: Expression.ListInit(NewExpression, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit(NewExpression, ElementInit[])
  nameWithType: Expression.ListInit(NewExpression, ElementInit[])
  fullName: Expression.ListInit(NewExpression, ElementInit[])
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit(NewExpression, Expression[])
  nameWithType: Expression.ListInit(NewExpression, Expression[])
  fullName: Expression.ListInit(NewExpression, Expression[])
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)
  nameWithType: Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)
  fullName: Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit(NewExpression, MethodInfo, Expression[])
  nameWithType: Expression.ListInit(NewExpression, MethodInfo, Expression[])
  fullName: Expression.ListInit(NewExpression, MethodInfo, Expression[])
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Loop(Expression)
  nameWithType: Expression.Loop(Expression)
  fullName: Expression.Loop(Expression)
- uid: System.Linq.Expressions.LoopExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LoopExpression
  nameWithType: LoopExpression
  fullName: System.Linq.Expressions.LoopExpression
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Loop(Expression, LabelTarget)
  nameWithType: Expression.Loop(Expression, LabelTarget)
  fullName: Expression.Loop(Expression, LabelTarget)
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Loop(Expression, LabelTarget, LabelTarget)
  nameWithType: Expression.Loop(Expression, LabelTarget, LabelTarget)
  fullName: Expression.Loop(Expression, LabelTarget, LabelTarget)
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeBinary(ExpressionType, Expression, Expression)
  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression)
  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression)
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)
  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)
  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeCatchBlock(Type, ParameterExpression, Expression, Expression)
  nameWithType: Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression)
  fullName: Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)
  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)
  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression)
  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)
  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)
  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)
  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic(Type, CallSiteBinder, Expression)
  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression)
  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression)
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)
  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)
  fullName: Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic(Type, CallSiteBinder, Expression[])
  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression[])
  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression[])
- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)
  nameWithType: Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)
  fullName: Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)
- uid: System.Linq.Expressions.GotoExpressionKind
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpressionKind
  nameWithType: GotoExpressionKind
  fullName: System.Linq.Expressions.GotoExpressionKind
- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)
  nameWithType: Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)
  fullName: Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeMemberAccess(Expression, MemberInfo)
  nameWithType: Expression.MakeMemberAccess(Expression, MemberInfo)
  fullName: Expression.MakeMemberAccess(Expression, MemberInfo)
- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)
  nameWithType: Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)
  fullName: Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)
- uid: System.Linq.Expressions.TryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TryExpression
  nameWithType: TryExpression
  fullName: System.Linq.Expressions.TryExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<CatchBlock>
  nameWithType: IEnumerable<CatchBlock>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeUnary(ExpressionType, Expression, Type)
  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type)
  fullName: Expression.MakeUnary(ExpressionType, Expression, Type)
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeUnary(ExpressionType, Expression, Type, MethodInfo)
  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo)
  fullName: Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo)
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberBind(MethodInfo, MemberBinding[])
  nameWithType: Expression.MemberBind(MethodInfo, MemberBinding[])
  fullName: Expression.MemberBind(MethodInfo, MemberBinding[])
- uid: System.Linq.Expressions.MemberMemberBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberMemberBinding
  nameWithType: MemberMemberBinding
  fullName: System.Linq.Expressions.MemberMemberBinding
- uid: System.Linq.Expressions.MemberBinding
  name: MemberBinding
  nameWithType: MemberBinding
  fullName: System.Linq.Expressions.MemberBinding
- uid: System.Linq.Expressions.MemberBinding[]
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberBinding[]
  nameWithType: MemberBinding[]
  fullName: System.Linq.Expressions.MemberBinding[]
  spec.csharp:
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberBind(MethodInfo, IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>)
  fullName: Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>)
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<MemberBinding>
  nameWithType: IEnumerable<MemberBinding>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberBind(MemberInfo, IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>)
  fullName: Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>)
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberBind(MemberInfo, MemberBinding[])
  nameWithType: Expression.MemberBind(MemberInfo, MemberBinding[])
  fullName: Expression.MemberBind(MemberInfo, MemberBinding[])
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberInit(NewExpression, IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>)
  fullName: Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>)
- uid: System.Linq.Expressions.MemberInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberInitExpression
  nameWithType: MemberInitExpression
  fullName: System.Linq.Expressions.MemberInitExpression
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberInit(NewExpression, MemberBinding[])
  nameWithType: Expression.MemberInit(NewExpression, MemberBinding[])
  fullName: Expression.MemberInit(NewExpression, MemberBinding[])
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Modulo(Expression, Expression)
  nameWithType: Expression.Modulo(Expression, Expression)
  fullName: Expression.Modulo(Expression, Expression)
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Modulo(Expression, Expression, MethodInfo)
  nameWithType: Expression.Modulo(Expression, Expression, MethodInfo)
  fullName: Expression.Modulo(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ModuloAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.ModuloAssign(Expression, Expression, MethodInfo)
  fullName: Expression.ModuloAssign(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ModuloAssign(Expression, Expression)
  nameWithType: Expression.ModuloAssign(Expression, Expression)
  fullName: Expression.ModuloAssign(Expression, Expression)
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Multiply(Expression, Expression, MethodInfo)
  nameWithType: Expression.Multiply(Expression, Expression, MethodInfo)
  fullName: Expression.Multiply(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Multiply(Expression, Expression)
  nameWithType: Expression.Multiply(Expression, Expression)
  fullName: Expression.Multiply(Expression, Expression)
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssign(Expression, Expression)
  nameWithType: Expression.MultiplyAssign(Expression, Expression)
  fullName: Expression.MultiplyAssign(Expression, Expression)
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.MultiplyAssign(Expression, Expression, MethodInfo)
  fullName: Expression.MultiplyAssign(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssignChecked(Expression, Expression)
  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression)
  fullName: Expression.MultiplyAssignChecked(Expression, Expression)
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssignChecked(Expression, Expression, MethodInfo)
  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo)
  fullName: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyChecked(Expression, Expression)
  nameWithType: Expression.MultiplyChecked(Expression, Expression)
  fullName: Expression.MultiplyChecked(Expression, Expression)
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyChecked(Expression, Expression, MethodInfo)
  nameWithType: Expression.MultiplyChecked(Expression, Expression, MethodInfo)
  fullName: Expression.MultiplyChecked(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Negate(Expression, MethodInfo)
  nameWithType: Expression.Negate(Expression, MethodInfo)
  fullName: Expression.Negate(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Negate(Expression)
  nameWithType: Expression.Negate(Expression)
  fullName: Expression.Negate(Expression)
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NegateChecked(Expression)
  nameWithType: Expression.NegateChecked(Expression)
  fullName: Expression.NegateChecked(Expression)
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NegateChecked(Expression, MethodInfo)
  nameWithType: Expression.NegateChecked(Expression, MethodInfo)
  fullName: Expression.NegateChecked(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New(ConstructorInfo)
  nameWithType: Expression.New(ConstructorInfo)
  fullName: Expression.New(ConstructorInfo)
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Linq.Expressions.Expression.New(System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New(Type)
  nameWithType: Expression.New(Type)
  fullName: Expression.New(Type)
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New(ConstructorInfo, IEnumerable<Expression>)
  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>)
  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New(ConstructorInfo, Expression[])
  nameWithType: Expression.New(ConstructorInfo, Expression[])
  fullName: Expression.New(ConstructorInfo, Expression[])
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)
  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)
  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<MemberInfo>
  nameWithType: IEnumerable<MemberInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])
  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])
  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])
- uid: System.Reflection.MemberInfo[]
  parent: System.Reflection
  isExternal: false
  name: MemberInfo[]
  nameWithType: MemberInfo[]
  fullName: System.Reflection.MemberInfo[]
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NewArrayBounds(Type, Expression[])
  nameWithType: Expression.NewArrayBounds(Type, Expression[])
  fullName: Expression.NewArrayBounds(Type, Expression[])
- uid: System.Linq.Expressions.NewArrayExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewArrayExpression
  nameWithType: NewArrayExpression
  fullName: System.Linq.Expressions.NewArrayExpression
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NewArrayBounds(Type, IEnumerable<Expression>)
  nameWithType: Expression.NewArrayBounds(Type, IEnumerable<Expression>)
  fullName: Expression.NewArrayBounds(Type, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NewArrayInit(Type, IEnumerable<Expression>)
  nameWithType: Expression.NewArrayInit(Type, IEnumerable<Expression>)
  fullName: Expression.NewArrayInit(Type, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NewArrayInit(Type, Expression[])
  nameWithType: Expression.NewArrayInit(Type, Expression[])
  fullName: Expression.NewArrayInit(Type, Expression[])
- uid: System.Linq.Expressions.Expression.NodeType
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NodeType
  nameWithType: Expression.NodeType
  fullName: Expression.NodeType
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Not(Expression)
  nameWithType: Expression.Not(Expression)
  fullName: Expression.Not(Expression)
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Not(Expression, MethodInfo)
  nameWithType: Expression.Not(Expression, MethodInfo)
  fullName: Expression.Not(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NotEqual(Expression, Expression)
  nameWithType: Expression.NotEqual(Expression, Expression)
  fullName: Expression.NotEqual(Expression, Expression)
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NotEqual(Expression, Expression, Boolean, MethodInfo)
  nameWithType: Expression.NotEqual(Expression, Expression, Boolean, MethodInfo)
  fullName: Expression.NotEqual(Expression, Expression, Boolean, MethodInfo)
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OnesComplement(Expression)
  nameWithType: Expression.OnesComplement(Expression)
  fullName: Expression.OnesComplement(Expression)
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OnesComplement(Expression, MethodInfo)
  nameWithType: Expression.OnesComplement(Expression, MethodInfo)
  fullName: Expression.OnesComplement(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Or(Expression, Expression)
  nameWithType: Expression.Or(Expression, Expression)
  fullName: Expression.Or(Expression, Expression)
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Or(Expression, Expression, MethodInfo)
  nameWithType: Expression.Or(Expression, Expression, MethodInfo)
  fullName: Expression.Or(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OrAssign(Expression, Expression)
  nameWithType: Expression.OrAssign(Expression, Expression)
  fullName: Expression.OrAssign(Expression, Expression)
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OrAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.OrAssign(Expression, Expression, MethodInfo)
  fullName: Expression.OrAssign(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OrAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OrElse(Expression, Expression)
  nameWithType: Expression.OrElse(Expression, Expression)
  fullName: Expression.OrElse(Expression, Expression)
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OrElse(Expression, Expression, MethodInfo)
  nameWithType: Expression.OrElse(Expression, Expression, MethodInfo)
  fullName: Expression.OrElse(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Parameter(Type, String)
  nameWithType: Expression.Parameter(Type, String)
  fullName: Expression.Parameter(Type, String)
- uid: System.Linq.Expressions.Expression.Parameter(System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Parameter(Type)
  nameWithType: Expression.Parameter(Type)
  fullName: Expression.Parameter(Type)
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PostDecrementAssign(Expression, MethodInfo)
  nameWithType: Expression.PostDecrementAssign(Expression, MethodInfo)
  fullName: Expression.PostDecrementAssign(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PostDecrementAssign(Expression)
  nameWithType: Expression.PostDecrementAssign(Expression)
  fullName: Expression.PostDecrementAssign(Expression)
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PostIncrementAssign(Expression)
  nameWithType: Expression.PostIncrementAssign(Expression)
  fullName: Expression.PostIncrementAssign(Expression)
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PostIncrementAssign(Expression, MethodInfo)
  nameWithType: Expression.PostIncrementAssign(Expression, MethodInfo)
  fullName: Expression.PostIncrementAssign(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Power(Expression, Expression)
  nameWithType: Expression.Power(Expression, Expression)
  fullName: Expression.Power(Expression, Expression)
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Power(Expression, Expression, MethodInfo)
  nameWithType: Expression.Power(Expression, Expression, MethodInfo)
  fullName: Expression.Power(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PowerAssign(Expression, Expression)
  nameWithType: Expression.PowerAssign(Expression, Expression)
  fullName: Expression.PowerAssign(Expression, Expression)
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PowerAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.PowerAssign(Expression, Expression, MethodInfo)
  fullName: Expression.PowerAssign(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PreDecrementAssign(Expression)
  nameWithType: Expression.PreDecrementAssign(Expression)
  fullName: Expression.PreDecrementAssign(Expression)
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PreDecrementAssign(Expression, MethodInfo)
  nameWithType: Expression.PreDecrementAssign(Expression, MethodInfo)
  fullName: Expression.PreDecrementAssign(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PreIncrementAssign(Expression)
  nameWithType: Expression.PreIncrementAssign(Expression)
  fullName: Expression.PreIncrementAssign(Expression)
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PreIncrementAssign(Expression, MethodInfo)
  nameWithType: Expression.PreIncrementAssign(Expression, MethodInfo)
  fullName: Expression.PreIncrementAssign(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression, String, Expression[])
  nameWithType: Expression.Property(Expression, String, Expression[])
  fullName: Expression.Property(Expression, String, Expression[])
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression, PropertyInfo, Expression[])
  nameWithType: Expression.Property(Expression, PropertyInfo, Expression[])
  fullName: Expression.Property(Expression, PropertyInfo, Expression[])
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression, PropertyInfo, IEnumerable<Expression>)
  nameWithType: Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>)
  fullName: Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression, Type, String)
  nameWithType: Expression.Property(Expression, Type, String)
  fullName: Expression.Property(Expression, Type, String)
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression, PropertyInfo)
  nameWithType: Expression.Property(Expression, PropertyInfo)
  fullName: Expression.Property(Expression, PropertyInfo)
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression, MethodInfo)
  nameWithType: Expression.Property(Expression, MethodInfo)
  fullName: Expression.Property(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression, String)
  nameWithType: Expression.Property(Expression, String)
  fullName: Expression.Property(Expression, String)
- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PropertyOrField(Expression, String)
  nameWithType: Expression.PropertyOrField(Expression, String)
  fullName: Expression.PropertyOrField(Expression, String)
- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Quote(Expression)
  nameWithType: Expression.Quote(Expression)
  fullName: Expression.Quote(Expression)
- uid: System.Linq.Expressions.Expression.Reduce
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Reduce()
  nameWithType: Expression.Reduce()
  fullName: Expression.Reduce()
- uid: System.Linq.Expressions.Expression.ReduceAndCheck
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ReduceAndCheck()
  nameWithType: Expression.ReduceAndCheck()
  fullName: Expression.ReduceAndCheck()
- uid: System.Linq.Expressions.Expression.ReduceExtensions
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ReduceExtensions()
  nameWithType: Expression.ReduceExtensions()
  fullName: Expression.ReduceExtensions()
- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ReferenceEqual(Expression, Expression)
  nameWithType: Expression.ReferenceEqual(Expression, Expression)
  fullName: Expression.ReferenceEqual(Expression, Expression)
- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ReferenceNotEqual(Expression, Expression)
  nameWithType: Expression.ReferenceNotEqual(Expression, Expression)
  fullName: Expression.ReferenceNotEqual(Expression, Expression)
- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Rethrow(Type)
  nameWithType: Expression.Rethrow(Type)
  fullName: Expression.Rethrow(Type)
- uid: System.Linq.Expressions.Expression.Rethrow
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Rethrow()
  nameWithType: Expression.Rethrow()
  fullName: Expression.Rethrow()
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Return(LabelTarget)
  nameWithType: Expression.Return(LabelTarget)
  fullName: Expression.Return(LabelTarget)
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Return(LabelTarget, Expression)
  nameWithType: Expression.Return(LabelTarget, Expression)
  fullName: Expression.Return(LabelTarget, Expression)
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Return(LabelTarget, Type)
  nameWithType: Expression.Return(LabelTarget, Type)
  fullName: Expression.Return(LabelTarget, Type)
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Return(LabelTarget, Expression, Type)
  nameWithType: Expression.Return(LabelTarget, Expression, Type)
  fullName: Expression.Return(LabelTarget, Expression, Type)
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RightShift(Expression, Expression)
  nameWithType: Expression.RightShift(Expression, Expression)
  fullName: Expression.RightShift(Expression, Expression)
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RightShift(Expression, Expression, MethodInfo)
  nameWithType: Expression.RightShift(Expression, Expression, MethodInfo)
  fullName: Expression.RightShift(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RightShiftAssign(Expression, Expression)
  nameWithType: Expression.RightShiftAssign(Expression, Expression)
  fullName: Expression.RightShiftAssign(Expression, Expression)
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RightShiftAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.RightShiftAssign(Expression, Expression, MethodInfo)
  fullName: Expression.RightShiftAssign(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RuntimeVariables(ParameterExpression[])
  nameWithType: Expression.RuntimeVariables(ParameterExpression[])
  fullName: Expression.RuntimeVariables(ParameterExpression[])
- uid: System.Linq.Expressions.RuntimeVariablesExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: RuntimeVariablesExpression
  nameWithType: RuntimeVariablesExpression
  fullName: System.Linq.Expressions.RuntimeVariablesExpression
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RuntimeVariables(IEnumerable<ParameterExpression>)
  nameWithType: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)
  fullName: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Subtract(Expression, Expression)
  nameWithType: Expression.Subtract(Expression, Expression)
  fullName: Expression.Subtract(Expression, Expression)
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Subtract(Expression, Expression, MethodInfo)
  nameWithType: Expression.Subtract(Expression, Expression, MethodInfo)
  fullName: Expression.Subtract(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssign(Expression, Expression)
  nameWithType: Expression.SubtractAssign(Expression, Expression)
  fullName: Expression.SubtractAssign(Expression, Expression)
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssign(Expression, Expression, MethodInfo)
  nameWithType: Expression.SubtractAssign(Expression, Expression, MethodInfo)
  fullName: Expression.SubtractAssign(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
  fullName: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssignChecked(Expression, Expression)
  nameWithType: Expression.SubtractAssignChecked(Expression, Expression)
  fullName: Expression.SubtractAssignChecked(Expression, Expression)
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssignChecked(Expression, Expression, MethodInfo)
  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo)
  fullName: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractChecked(Expression, Expression, MethodInfo)
  nameWithType: Expression.SubtractChecked(Expression, Expression, MethodInfo)
  fullName: Expression.SubtractChecked(Expression, Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractChecked(Expression, Expression)
  nameWithType: Expression.SubtractChecked(Expression, Expression)
  fullName: Expression.SubtractChecked(Expression, Expression)
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])
  nameWithType: Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])
  fullName: Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])
- uid: System.Linq.Expressions.SwitchExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchExpression
  nameWithType: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
- uid: System.Linq.Expressions.SwitchCase
  name: SwitchCase
  nameWithType: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
- uid: System.Linq.Expressions.SwitchCase[]
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase[]
  nameWithType: SwitchCase[]
  fullName: System.Linq.Expressions.SwitchCase[]
  spec.csharp:
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch(Expression, SwitchCase[])
  nameWithType: Expression.Switch(Expression, SwitchCase[])
  fullName: Expression.Switch(Expression, SwitchCase[])
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch(Expression, Expression, SwitchCase[])
  nameWithType: Expression.Switch(Expression, Expression, SwitchCase[])
  fullName: Expression.Switch(Expression, Expression, SwitchCase[])
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
  nameWithType: Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
  fullName: Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<SwitchCase>
  nameWithType: IEnumerable<SwitchCase>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch(Expression, Expression, MethodInfo, SwitchCase[])
  nameWithType: Expression.Switch(Expression, Expression, MethodInfo, SwitchCase[])
  fullName: Expression.Switch(Expression, Expression, MethodInfo, SwitchCase[])
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
  nameWithType: Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
  fullName: Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SwitchCase(Expression, Expression[])
  nameWithType: Expression.SwitchCase(Expression, Expression[])
  fullName: Expression.SwitchCase(Expression, Expression[])
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SwitchCase(Expression, IEnumerable<Expression>)
  nameWithType: Expression.SwitchCase(Expression, IEnumerable<Expression>)
  fullName: Expression.SwitchCase(Expression, IEnumerable<Expression>)
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SymbolDocument(String, Guid, Guid, Guid)
  nameWithType: Expression.SymbolDocument(String, Guid, Guid, Guid)
  fullName: Expression.SymbolDocument(String, Guid, Guid, Guid)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SymbolDocument(String, Guid, Guid)
  nameWithType: Expression.SymbolDocument(String, Guid, Guid)
  fullName: Expression.SymbolDocument(String, Guid, Guid)
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SymbolDocument(String)
  nameWithType: Expression.SymbolDocument(String)
  fullName: Expression.SymbolDocument(String)
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SymbolDocument(String, Guid)
  nameWithType: Expression.SymbolDocument(String, Guid)
  fullName: Expression.SymbolDocument(String, Guid)
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Throw(Expression)
  nameWithType: Expression.Throw(Expression)
  fullName: Expression.Throw(Expression)
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Throw(Expression, Type)
  nameWithType: Expression.Throw(Expression, Type)
  fullName: Expression.Throw(Expression, Type)
- uid: System.Linq.Expressions.Expression.ToString
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ToString()
  nameWithType: Expression.ToString()
  fullName: Expression.ToString()
- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryCatch(Expression, CatchBlock[])
  nameWithType: Expression.TryCatch(Expression, CatchBlock[])
  fullName: Expression.TryCatch(Expression, CatchBlock[])
- uid: System.Linq.Expressions.CatchBlock[]
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock[]
  nameWithType: CatchBlock[]
  fullName: System.Linq.Expressions.CatchBlock[]
  spec.csharp:
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryCatchFinally(Expression, Expression, CatchBlock[])
  nameWithType: Expression.TryCatchFinally(Expression, Expression, CatchBlock[])
  fullName: Expression.TryCatchFinally(Expression, Expression, CatchBlock[])
- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryFault(Expression, Expression)
  nameWithType: Expression.TryFault(Expression, Expression)
  fullName: Expression.TryFault(Expression, Expression)
- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryFinally(Expression, Expression)
  nameWithType: Expression.TryFinally(Expression, Expression)
  fullName: Expression.TryFinally(Expression, Expression)
- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryGetActionType(Type[], Type)
  nameWithType: Expression.TryGetActionType(Type[], Type)
  fullName: Expression.TryGetActionType(Type[], Type)
- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryGetFuncType(Type[], Type)
  nameWithType: Expression.TryGetFuncType(Type[], Type)
  fullName: Expression.TryGetFuncType(Type[], Type)
- uid: System.Linq.Expressions.Expression.Type
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Type
  nameWithType: Expression.Type
  fullName: Expression.Type
- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TypeAs(Expression, Type)
  nameWithType: Expression.TypeAs(Expression, Type)
  fullName: Expression.TypeAs(Expression, Type)
- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TypeEqual(Expression, Type)
  nameWithType: Expression.TypeEqual(Expression, Type)
  fullName: Expression.TypeEqual(Expression, Type)
- uid: System.Linq.Expressions.TypeBinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TypeBinaryExpression
  nameWithType: TypeBinaryExpression
  fullName: System.Linq.Expressions.TypeBinaryExpression
- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TypeIs(Expression, Type)
  nameWithType: Expression.TypeIs(Expression, Type)
  fullName: Expression.TypeIs(Expression, Type)
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: UnaryPlus(Expression, MethodInfo)
  nameWithType: Expression.UnaryPlus(Expression, MethodInfo)
  fullName: Expression.UnaryPlus(Expression, MethodInfo)
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: UnaryPlus(Expression)
  nameWithType: Expression.UnaryPlus(Expression)
  fullName: Expression.UnaryPlus(Expression)
- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Unbox(Expression, Type)
  nameWithType: Expression.Unbox(Expression, Type)
  fullName: Expression.Unbox(Expression, Type)
- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Variable(Type, String)
  nameWithType: Expression.Variable(Type, String)
  fullName: Expression.Variable(Type, String)
- uid: System.Linq.Expressions.Expression.Variable(System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Variable(Type)
  nameWithType: Expression.Variable(Type)
  fullName: Expression.Variable(Type)
- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: VisitChildren(ExpressionVisitor)
  nameWithType: Expression.VisitChildren(ExpressionVisitor)
  fullName: Expression.VisitChildren(ExpressionVisitor)
- uid: System.Linq.Expressions.Expression.#ctor*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Expression
  nameWithType: Expression.Expression
  fullName: Expression.Expression
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Accept*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Accept
  nameWithType: Expression.Accept
  fullName: Expression.Accept
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Add*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Add
  nameWithType: Expression.Add
  fullName: Expression.Add
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.AddAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssign
  nameWithType: Expression.AddAssign
  fullName: Expression.AddAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.AddAssignChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssignChecked
  nameWithType: Expression.AddAssignChecked
  fullName: Expression.AddAssignChecked
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.AddChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddChecked
  nameWithType: Expression.AddChecked
  fullName: Expression.AddChecked
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.And*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: And
  nameWithType: Expression.And
  fullName: Expression.And
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.AndAlso*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AndAlso
  nameWithType: Expression.AndAlso
  fullName: Expression.AndAlso
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.AndAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AndAssign
  nameWithType: Expression.AndAssign
  fullName: Expression.AndAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ArrayAccess*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayAccess
  nameWithType: Expression.ArrayAccess
  fullName: Expression.ArrayAccess
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ArrayIndex*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayIndex
  nameWithType: Expression.ArrayIndex
  fullName: Expression.ArrayIndex
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ArrayLength*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayLength
  nameWithType: Expression.ArrayLength
  fullName: Expression.ArrayLength
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Assign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Assign
  nameWithType: Expression.Assign
  fullName: Expression.Assign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Bind*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Bind
  nameWithType: Expression.Bind
  fullName: Expression.Bind
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Block*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block
  nameWithType: Expression.Block
  fullName: Expression.Block
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Break*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Break
  nameWithType: Expression.Break
  fullName: Expression.Break
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Call*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call
  nameWithType: Expression.Call
  fullName: Expression.Call
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.CanReduce*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: CanReduce
  nameWithType: Expression.CanReduce
  fullName: Expression.CanReduce
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Catch*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Catch
  nameWithType: Expression.Catch
  fullName: Expression.Catch
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ClearDebugInfo*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ClearDebugInfo
  nameWithType: Expression.ClearDebugInfo
  fullName: Expression.ClearDebugInfo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Coalesce*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Coalesce
  nameWithType: Expression.Coalesce
  fullName: Expression.Coalesce
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Condition*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Condition
  nameWithType: Expression.Condition
  fullName: Expression.Condition
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Constant*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Constant
  nameWithType: Expression.Constant
  fullName: Expression.Constant
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Continue*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Continue
  nameWithType: Expression.Continue
  fullName: Expression.Continue
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Convert*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Convert
  nameWithType: Expression.Convert
  fullName: Expression.Convert
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ConvertChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ConvertChecked
  nameWithType: Expression.ConvertChecked
  fullName: Expression.ConvertChecked
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.DebugInfo*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: DebugInfo
  nameWithType: Expression.DebugInfo
  fullName: Expression.DebugInfo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Decrement*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Decrement
  nameWithType: Expression.Decrement
  fullName: Expression.Decrement
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Default*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Default
  nameWithType: Expression.Default
  fullName: Expression.Default
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Divide*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Divide
  nameWithType: Expression.Divide
  fullName: Expression.Divide
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.DivideAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: DivideAssign
  nameWithType: Expression.DivideAssign
  fullName: Expression.DivideAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Dynamic*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic
  nameWithType: Expression.Dynamic
  fullName: Expression.Dynamic
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ElementInit*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ElementInit
  nameWithType: Expression.ElementInit
  fullName: Expression.ElementInit
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Empty*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Empty
  nameWithType: Expression.Empty
  fullName: Expression.Empty
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Equal*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Equal
  nameWithType: Expression.Equal
  fullName: Expression.Equal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ExclusiveOr*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ExclusiveOr
  nameWithType: Expression.ExclusiveOr
  fullName: Expression.ExclusiveOr
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ExclusiveOrAssign
  nameWithType: Expression.ExclusiveOrAssign
  fullName: Expression.ExclusiveOrAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Field*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Field
  nameWithType: Expression.Field
  fullName: Expression.Field
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.GetActionType*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GetActionType
  nameWithType: Expression.GetActionType
  fullName: Expression.GetActionType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.GetDelegateType*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GetDelegateType
  nameWithType: Expression.GetDelegateType
  fullName: Expression.GetDelegateType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.GetFuncType*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GetFuncType
  nameWithType: Expression.GetFuncType
  fullName: Expression.GetFuncType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Goto*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Goto
  nameWithType: Expression.Goto
  fullName: Expression.Goto
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.GreaterThan*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GreaterThan
  nameWithType: Expression.GreaterThan
  fullName: Expression.GreaterThan
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GreaterThanOrEqual
  nameWithType: Expression.GreaterThanOrEqual
  fullName: Expression.GreaterThanOrEqual
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.IfThen*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IfThen
  nameWithType: Expression.IfThen
  fullName: Expression.IfThen
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.IfThenElse*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IfThenElse
  nameWithType: Expression.IfThenElse
  fullName: Expression.IfThenElse
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Increment*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Increment
  nameWithType: Expression.Increment
  fullName: Expression.Increment
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Invoke*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Invoke
  nameWithType: Expression.Invoke
  fullName: Expression.Invoke
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.IsFalse*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IsFalse
  nameWithType: Expression.IsFalse
  fullName: Expression.IsFalse
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.IsTrue*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IsTrue
  nameWithType: Expression.IsTrue
  fullName: Expression.IsTrue
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Label*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label
  nameWithType: Expression.Label
  fullName: Expression.Label
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Lambda*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda
  nameWithType: Expression.Lambda
  fullName: Expression.Lambda
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Lambda``1*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda<TDelegate>
  nameWithType: Expression.Lambda<TDelegate>
  fullName: Expression.Lambda<TDelegate>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.LeftShift*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LeftShift
  nameWithType: Expression.LeftShift
  fullName: Expression.LeftShift
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.LeftShiftAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LeftShiftAssign
  nameWithType: Expression.LeftShiftAssign
  fullName: Expression.LeftShiftAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.LessThan*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LessThan
  nameWithType: Expression.LessThan
  fullName: Expression.LessThan
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.LessThanOrEqual*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LessThanOrEqual
  nameWithType: Expression.LessThanOrEqual
  fullName: Expression.LessThanOrEqual
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ListBind*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListBind
  nameWithType: Expression.ListBind
  fullName: Expression.ListBind
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ListInit*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit
  nameWithType: Expression.ListInit
  fullName: Expression.ListInit
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Loop*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Loop
  nameWithType: Expression.Loop
  fullName: Expression.Loop
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MakeBinary*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeBinary
  nameWithType: Expression.MakeBinary
  fullName: Expression.MakeBinary
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MakeCatchBlock*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeCatchBlock
  nameWithType: Expression.MakeCatchBlock
  fullName: Expression.MakeCatchBlock
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MakeDynamic*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic
  nameWithType: Expression.MakeDynamic
  fullName: Expression.MakeDynamic
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MakeGoto*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeGoto
  nameWithType: Expression.MakeGoto
  fullName: Expression.MakeGoto
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MakeIndex*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeIndex
  nameWithType: Expression.MakeIndex
  fullName: Expression.MakeIndex
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MakeMemberAccess*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeMemberAccess
  nameWithType: Expression.MakeMemberAccess
  fullName: Expression.MakeMemberAccess
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MakeTry*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeTry
  nameWithType: Expression.MakeTry
  fullName: Expression.MakeTry
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MakeUnary*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeUnary
  nameWithType: Expression.MakeUnary
  fullName: Expression.MakeUnary
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MemberBind*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberBind
  nameWithType: Expression.MemberBind
  fullName: Expression.MemberBind
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MemberInit*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberInit
  nameWithType: Expression.MemberInit
  fullName: Expression.MemberInit
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Modulo*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Modulo
  nameWithType: Expression.Modulo
  fullName: Expression.Modulo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ModuloAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ModuloAssign
  nameWithType: Expression.ModuloAssign
  fullName: Expression.ModuloAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Multiply*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Multiply
  nameWithType: Expression.Multiply
  fullName: Expression.Multiply
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MultiplyAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssign
  nameWithType: Expression.MultiplyAssign
  fullName: Expression.MultiplyAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssignChecked
  nameWithType: Expression.MultiplyAssignChecked
  fullName: Expression.MultiplyAssignChecked
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.MultiplyChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyChecked
  nameWithType: Expression.MultiplyChecked
  fullName: Expression.MultiplyChecked
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Negate*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Negate
  nameWithType: Expression.Negate
  fullName: Expression.Negate
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.NegateChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NegateChecked
  nameWithType: Expression.NegateChecked
  fullName: Expression.NegateChecked
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.New*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New
  nameWithType: Expression.New
  fullName: Expression.New
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.NewArrayBounds*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NewArrayBounds
  nameWithType: Expression.NewArrayBounds
  fullName: Expression.NewArrayBounds
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.NewArrayInit*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NewArrayInit
  nameWithType: Expression.NewArrayInit
  fullName: Expression.NewArrayInit
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.NodeType*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NodeType
  nameWithType: Expression.NodeType
  fullName: Expression.NodeType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Not*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Not
  nameWithType: Expression.Not
  fullName: Expression.Not
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.NotEqual*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NotEqual
  nameWithType: Expression.NotEqual
  fullName: Expression.NotEqual
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.OnesComplement*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OnesComplement
  nameWithType: Expression.OnesComplement
  fullName: Expression.OnesComplement
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Or*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Or
  nameWithType: Expression.Or
  fullName: Expression.Or
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.OrAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OrAssign
  nameWithType: Expression.OrAssign
  fullName: Expression.OrAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.OrElse*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OrElse
  nameWithType: Expression.OrElse
  fullName: Expression.OrElse
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Parameter*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Parameter
  nameWithType: Expression.Parameter
  fullName: Expression.Parameter
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.PostDecrementAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PostDecrementAssign
  nameWithType: Expression.PostDecrementAssign
  fullName: Expression.PostDecrementAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.PostIncrementAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PostIncrementAssign
  nameWithType: Expression.PostIncrementAssign
  fullName: Expression.PostIncrementAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Power*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Power
  nameWithType: Expression.Power
  fullName: Expression.Power
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.PowerAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PowerAssign
  nameWithType: Expression.PowerAssign
  fullName: Expression.PowerAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.PreDecrementAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PreDecrementAssign
  nameWithType: Expression.PreDecrementAssign
  fullName: Expression.PreDecrementAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.PreIncrementAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PreIncrementAssign
  nameWithType: Expression.PreIncrementAssign
  fullName: Expression.PreIncrementAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Property*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property
  nameWithType: Expression.Property
  fullName: Expression.Property
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.PropertyOrField*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PropertyOrField
  nameWithType: Expression.PropertyOrField
  fullName: Expression.PropertyOrField
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Quote*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Quote
  nameWithType: Expression.Quote
  fullName: Expression.Quote
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Reduce*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Reduce
  nameWithType: Expression.Reduce
  fullName: Expression.Reduce
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ReduceAndCheck*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ReduceAndCheck
  nameWithType: Expression.ReduceAndCheck
  fullName: Expression.ReduceAndCheck
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ReduceExtensions*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ReduceExtensions
  nameWithType: Expression.ReduceExtensions
  fullName: Expression.ReduceExtensions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ReferenceEqual*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ReferenceEqual
  nameWithType: Expression.ReferenceEqual
  fullName: Expression.ReferenceEqual
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ReferenceNotEqual*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ReferenceNotEqual
  nameWithType: Expression.ReferenceNotEqual
  fullName: Expression.ReferenceNotEqual
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Rethrow*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Rethrow
  nameWithType: Expression.Rethrow
  fullName: Expression.Rethrow
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Return*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Return
  nameWithType: Expression.Return
  fullName: Expression.Return
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.RightShift*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RightShift
  nameWithType: Expression.RightShift
  fullName: Expression.RightShift
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.RightShiftAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RightShiftAssign
  nameWithType: Expression.RightShiftAssign
  fullName: Expression.RightShiftAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.RuntimeVariables*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RuntimeVariables
  nameWithType: Expression.RuntimeVariables
  fullName: Expression.RuntimeVariables
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Subtract*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Subtract
  nameWithType: Expression.Subtract
  fullName: Expression.Subtract
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.SubtractAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssign
  nameWithType: Expression.SubtractAssign
  fullName: Expression.SubtractAssign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssignChecked
  nameWithType: Expression.SubtractAssignChecked
  fullName: Expression.SubtractAssignChecked
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.SubtractChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractChecked
  nameWithType: Expression.SubtractChecked
  fullName: Expression.SubtractChecked
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Switch*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch
  nameWithType: Expression.Switch
  fullName: Expression.Switch
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.SwitchCase*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SwitchCase
  nameWithType: Expression.SwitchCase
  fullName: Expression.SwitchCase
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.SymbolDocument*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SymbolDocument
  nameWithType: Expression.SymbolDocument
  fullName: Expression.SymbolDocument
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Throw*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Throw
  nameWithType: Expression.Throw
  fullName: Expression.Throw
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.ToString*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ToString
  nameWithType: Expression.ToString
  fullName: Expression.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.TryCatch*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryCatch
  nameWithType: Expression.TryCatch
  fullName: Expression.TryCatch
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.TryCatchFinally*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryCatchFinally
  nameWithType: Expression.TryCatchFinally
  fullName: Expression.TryCatchFinally
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.TryFault*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryFault
  nameWithType: Expression.TryFault
  fullName: Expression.TryFault
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.TryFinally*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryFinally
  nameWithType: Expression.TryFinally
  fullName: Expression.TryFinally
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.TryGetActionType*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryGetActionType
  nameWithType: Expression.TryGetActionType
  fullName: Expression.TryGetActionType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.TryGetFuncType*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryGetFuncType
  nameWithType: Expression.TryGetFuncType
  fullName: Expression.TryGetFuncType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Type*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Type
  nameWithType: Expression.Type
  fullName: Expression.Type
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.TypeAs*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TypeAs
  nameWithType: Expression.TypeAs
  fullName: Expression.TypeAs
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.TypeEqual*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TypeEqual
  nameWithType: Expression.TypeEqual
  fullName: Expression.TypeEqual
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.TypeIs*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TypeIs
  nameWithType: Expression.TypeIs
  fullName: Expression.TypeIs
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.UnaryPlus*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: UnaryPlus
  nameWithType: Expression.UnaryPlus
  fullName: Expression.UnaryPlus
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Unbox*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Unbox
  nameWithType: Expression.Unbox
  fullName: Expression.Unbox
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.Variable*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Variable
  nameWithType: Expression.Variable
  fullName: Expression.Variable
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Linq.Expressions.Expression.VisitChildren*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: VisitChildren
  nameWithType: Expression.VisitChildren
  fullName: Expression.VisitChildren
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
