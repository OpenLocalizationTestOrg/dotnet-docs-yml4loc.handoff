{"nodes":[{"content":"Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.","nodes":[{"pos":[0,249],"content":"Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.","nodes":[{"content":"Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.","pos":[0,249]}]}],"pos":[1584,1834],"yaml":true},{"content":"The <xref:System.Reflection.Emit.DynamicILInfo> class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>.  \n  \n To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities. The <xref:System.Reflection.Emit.DynamicILInfo> class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current <xref:System.Reflection.Emit.DynamicILInfo>. For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.  \n  \n Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your <xref:System.Reflection.Emit.DynamicILInfo> object.  \n  \n Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \n  \n> [!NOTE]\n>  Do not use <xref:System.Reflection.Emit.DynamicILInfo> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly. Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate. A delegate that is created with the delegate constructor does not have a reference to the target dynamic method. The dynamic method might be reclaimed by garbage collection while the delegate is still in use.","nodes":[{"pos":[0,166],"content":"The <xref:System.Reflection.Emit.DynamicILInfo> class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class allows developers to write their own MSIL generators instead of using <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>.","pos":[0,166],"source":"The <xref:System.Reflection.Emit.DynamicILInfo> class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>."}]},{"pos":[173,864],"content":"To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities. The <xref:System.Reflection.Emit.DynamicILInfo> class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current <xref:System.Reflection.Emit.DynamicILInfo>. For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.","nodes":[{"content":"To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities. The <xref:System.Reflection.Emit.DynamicILInfo> class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current <xref:System.Reflection.Emit.DynamicILInfo>. For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.","pos":[0,691],"nodes":[{"content":"To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.","pos":[0,122]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class provides several overloads of the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph> method, which return tokens valid in the scope of the current <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>.","pos":[123,376],"source":" The <xref:System.Reflection.Emit.DynamicILInfo> class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current <xref:System.Reflection.Emit.DynamicILInfo>."},{"content":"For example, if you need to call an overload of the <ph id=\"ph1\">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> method, you can obtain a <ph id=\"ph2\">&lt;xref:System.RuntimeMethodHandle&gt;</ph> for that overload and pass it to the <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph> method to obtain a token to embed in your MSIL.","pos":[377,691],"source":" For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL."}]}]},{"pos":[871,1332],"content":"Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your <xref:System.Reflection.Emit.DynamicILInfo> object.","nodes":[{"content":"Once you have created <ph id=\"ph1\">&lt;xref:System.Byte&gt;</ph> arrays for your local variable signature, exceptions, and code body, you can use the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt;</ph> methods to insert them into the <ph id=\"ph5\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> associated with your <ph id=\"ph6\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.","pos":[0,461],"source":"Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your <xref:System.Reflection.Emit.DynamicILInfo> object."}]},{"pos":[1339,1858],"content":"Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[0,222]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[223,519],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[1866,2363],"content":"[!NOTE]\n Do not use <xref:System.Reflection.Emit.DynamicILInfo> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly. Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate. A delegate that is created with the delegate constructor does not have a reference to the target dynamic method. The dynamic method might be reclaimed by garbage collection while the delegate is still in use.","leadings":["","> "],"nodes":[{"content":" Do not use <xref:System.Reflection.Emit.DynamicILInfo> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly. Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate. A delegate that is created with the delegate constructor does not have a reference to the target dynamic method. The dynamic method might be reclaimed by garbage collection while the delegate is still in use.","pos":[8,495],"nodes":[{"content":"Do not use <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.","pos":[1,168],"source":" Do not use <xref:System.Reflection.Emit.DynamicILInfo> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly."},{"content":"Instead, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method to create the delegate.","pos":[169,278],"source":" Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate."},{"content":"A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.","pos":[279,391]},{"content":"The dynamic method might be reclaimed by garbage collection while the delegate is still in use.","pos":[392,487]}]}]}],"pos":[1845,4224],"yaml":true,"extradata":"MT"},{"content":"Gets the dynamic method whose body is generated by the current instance.","nodes":[{"pos":[0,72],"content":"Gets the dynamic method whose body is generated by the current instance.","nodes":[{"content":"Gets the dynamic method whose body is generated by the current instance.","pos":[0,72]}]}],"pos":[5788,5861],"yaml":true},{"content":"A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method. The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.","nodes":[{"pos":[0,401],"content":"A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method. The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.","nodes":[{"content":"A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method. The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.","pos":[0,401],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object is always associated with a dynamic method.","pos":[0,96],"source":"A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method."},{"content":"The purpose of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> class.","pos":[97,401],"source":" The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class."}]}]}],"pos":[5872,6274],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref> object representing the dynamic method for which the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object is generating code.","nodes":[{"pos":[0,205],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicMethod\"&gt;&lt;/xref&gt;</ph> object representing the dynamic method for which the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph> object is generating code.","source":"A <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref> object representing the dynamic method for which the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object is generating code."}],"pos":[6444,6650],"yaml":true},{"content":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing the signature for the associated dynamic method.","nodes":[{"pos":[0,168],"content":"Gets a token, valid in the scope of the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph>, representing the signature for the associated dynamic method.","source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing the signature for the associated dynamic method."}],"pos":[7815,7984],"yaml":true},{"content":"For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,454],"content":"For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[0,157]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[158,454],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[7995,8452],"yaml":true,"extradata":"MT"},{"content":"An array that contains the signature.","nodes":[{"pos":[0,37],"content":"An array that contains the signature.","nodes":[{"content":"An array that contains the signature.","pos":[0,37]}]}],"pos":[8599,8637],"yaml":true},{"content":"A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.","nodes":[{"pos":[0,99],"content":"A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.","nodes":[{"content":"A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.","pos":[0,99]}]}],"pos":[8693,8793],"yaml":true},{"content":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a dynamic method to be called from the associated method.","nodes":[{"pos":[0,177],"content":"Gets a token, valid in the scope of the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph>, representing a dynamic method to be called from the associated method.","source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a dynamic method to be called from the associated method."}],"pos":[10046,10224],"yaml":true},{"content":"The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.","nodes":[{"pos":[0,326],"content":"The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.","nodes":[{"content":"The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.","pos":[0,326],"nodes":[{"content":"The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.","pos":[0,182],"source":"The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"To call the associated dynamic method recursively, pass the value of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt;</ph> property.","pos":[183,326],"source":" To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property."}]}]}],"pos":[10235,10562],"yaml":true,"extradata":"MT"},{"content":"The dynamic method to call.","nodes":[{"pos":[0,27],"content":"The dynamic method to call.","nodes":[{"content":"The dynamic method to call.","pos":[0,27]}]}],"pos":[10756,10784],"yaml":true},{"content":"A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.","nodes":[{"pos":[0,120],"content":"A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.","nodes":[{"content":"A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.","pos":[0,120]}]}],"pos":[10840,10961],"yaml":true},{"content":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a field to be accessed from the associated dynamic method.","nodes":[{"pos":[0,178],"content":"Gets a token, valid in the scope of the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph>, representing a field to be accessed from the associated dynamic method.","source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a field to be accessed from the associated dynamic method."}],"pos":[12196,12375],"yaml":true},{"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.","nodes":[{"pos":[0,427],"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.","nodes":[{"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.","pos":[0,427],"nodes":[{"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.","pos":[0,161],"source":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt;</ph> method to get a <ph id=\"ph2\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> for the field you want to access, then use the <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph> property to get the <ph id=\"ph4\">&lt;xref:System.RuntimeFieldHandle&gt;</ph>.","pos":[162,427],"source":" Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>."}]}]}],"pos":[12386,12814],"yaml":true,"extradata":"MT"},{"content":"The field to be accessed.","nodes":[{"pos":[0,25],"content":"The field to be accessed.","nodes":[{"content":"The field to be accessed.","pos":[0,25]}]}],"pos":[12977,13003],"yaml":true},{"content":"A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.","nodes":[{"pos":[0,178],"content":"A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object."}],"pos":[13059,13238],"yaml":true},{"content":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a method to be accessed from the associated dynamic method.","nodes":[{"pos":[0,179],"content":"Gets a token, valid in the scope of the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph>, representing a method to be accessed from the associated dynamic method.","source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a method to be accessed from the associated dynamic method."}],"pos":[14479,14659],"yaml":true},{"content":"You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.  \n  \n> [!NOTE]\n>  For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type.","nodes":[{"pos":[0,438],"content":"You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.","nodes":[{"content":"You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.","pos":[0,438],"nodes":[{"content":"You must obtain a token for any method that will be accessed by the dynamic method associated with the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.","pos":[0,162],"source":"You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt;</ph> method to get a <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the method you want to access, and then use the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> property to get the <ph id=\"ph4\">&lt;xref:System.RuntimeMethodHandle&gt;</ph>.","pos":[163,438],"source":" Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>."}]}]},{"pos":[446,708],"content":"[!NOTE]\n For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type.","leadings":["","> "],"nodes":[{"content":"For a method that belongs to a generic type, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt;</ph> method overload and specify a <ph id=\"ph2\">&lt;xref:System.RuntimeTypeHandle&gt;</ph> for the generic type.","pos":[9,260],"source":" For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type."}]}],"pos":[14670,15384],"yaml":true,"extradata":"MT"},{"content":"The method to be accessed.","nodes":[{"pos":[0,26],"content":"The method to be accessed.","nodes":[{"content":"The method to be accessed.","pos":[0,26]}]}],"pos":[15551,15578],"yaml":true},{"content":"A token that can be used as the operand of an MSIL instruction that accesses methods, such as <xref href=\"System.Reflection.Emit.OpCodes.Call\"></xref> or <xref href=\"System.Reflection.Emit.OpCodes.Ldtoken\"></xref>, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.","nodes":[{"pos":[0,308],"content":"A token that can be used as the operand of an MSIL instruction that accesses methods, such as <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.OpCodes.Call\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.OpCodes.Ldtoken\"&gt;&lt;/xref&gt;</ph>, in the scope of the current <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"A token that can be used as the operand of an MSIL instruction that accesses methods, such as <xref href=\"System.Reflection.Emit.OpCodes.Call\"></xref> or <xref href=\"System.Reflection.Emit.OpCodes.Ldtoken\"></xref>, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object."}],"pos":[15634,15943],"yaml":true},{"content":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a type to be used in the associated dynamic method.","nodes":[{"pos":[0,171],"content":"Gets a token, valid in the scope of the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph>, representing a type to be used in the associated dynamic method.","source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a type to be used in the associated dynamic method."}],"pos":[17172,17344],"yaml":true},{"content":"The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.  \n  \n To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,234],"content":"The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.","nodes":[{"content":"The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.","pos":[0,234],"source":"The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object."}]},{"pos":[241,378],"content":"To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=fullName> property.","nodes":[{"content":"To get a <ph id=\"ph1\">&lt;xref:System.RuntimeTypeHandle&gt;</ph> representing a type, use the <ph id=\"ph2\">&lt;xref:System.Type.TypeHandle%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,137],"source":"To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=fullName> property."}]}],"pos":[17355,17738],"yaml":true,"extradata":"MT"},{"content":"The type to be used.","nodes":[{"pos":[0,20],"content":"The type to be used.","nodes":[{"content":"The type to be used.","pos":[0,20]}]}],"pos":[17897,17918],"yaml":true},{"content":"A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.","nodes":[{"pos":[0,178],"content":"A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object."}],"pos":[17974,18153],"yaml":true},{"content":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a string literal to be used in the associated dynamic method.","nodes":[{"pos":[0,181],"content":"Gets a token, valid in the scope of the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph>, representing a string literal to be used in the associated dynamic method.","source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a string literal to be used in the associated dynamic method."}],"pos":[19316,19498],"yaml":true},{"content":"The string to be used.","nodes":[{"pos":[0,22],"content":"The string to be used.","nodes":[{"content":"The string to be used.","pos":[0,22]}]}],"pos":[19641,19664],"yaml":true},{"content":"A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.","nodes":[{"pos":[0,180],"content":"A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object."}],"pos":[19720,19901],"yaml":true},{"content":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.","nodes":[{"pos":[0,222],"content":"Gets a token, valid in the scope of the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.","source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type."}],"pos":[21268,21491],"yaml":true},{"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.","nodes":[{"pos":[0,431],"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.","nodes":[{"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.","pos":[0,431],"nodes":[{"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.","pos":[0,161],"source":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt;</ph> method to get a <ph id=\"ph2\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> for the field you want to access, and then use the <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph> property to get the <ph id=\"ph4\">&lt;xref:System.RuntimeFieldHandle&gt;</ph>.","pos":[162,431],"source":" Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>."}]}]}],"pos":[21502,21934],"yaml":true,"extradata":"MT"},{"content":"The field to be accessed.","nodes":[{"pos":[0,25],"content":"The field to be accessed.","nodes":[{"content":"The field to be accessed.","pos":[0,25]}]}],"pos":[22128,22154],"yaml":true},{"content":"The generic type the field belongs to.","nodes":[{"pos":[0,38],"content":"The generic type the field belongs to.","nodes":[{"content":"The generic type the field belongs to.","pos":[0,38]}]}],"pos":[22232,22271],"yaml":true},{"content":"A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.","nodes":[{"pos":[0,177],"content":"A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object."}],"pos":[22327,22505],"yaml":true},{"content":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a method on a generic type.","nodes":[{"pos":[0,147],"content":"Gets a token, valid in the scope of the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph>, representing a method on a generic type.","source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a method on a generic type."}],"pos":[23878,24026],"yaml":true},{"content":"You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.","nodes":[{"pos":[0,434],"content":"You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.","nodes":[{"content":"You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.","pos":[0,434],"nodes":[{"content":"You must obtain a token for any method that will be called by the dynamic method associated with the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.","pos":[0,160],"source":"You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt;</ph> method to get a <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the method you want to call, and then use the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> property to get the <ph id=\"ph4\">&lt;xref:System.RuntimeMethodHandle&gt;</ph>.","pos":[161,434],"source":" Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>."}]}]}],"pos":[24037,24472],"yaml":true,"extradata":"MT"},{"content":"The method.","nodes":[{"pos":[0,11],"content":"The method.","nodes":[{"content":"The method.","pos":[0,11]}]}],"pos":[24670,24682],"yaml":true},{"content":"The generic type the method belongs to.","nodes":[{"pos":[0,39],"content":"The generic type the method belongs to.","nodes":[{"content":"The generic type the method belongs to.","pos":[0,39]}]}],"pos":[24760,24800],"yaml":true},{"content":"A token that can be used as the operand of an MSIL instruction that accesses methods, such as <xref href=\"System.Reflection.Emit.OpCodes.Call\"></xref> or <xref href=\"System.Reflection.Emit.OpCodes.Ldtoken\"></xref>, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.","nodes":[{"pos":[0,308],"content":"A token that can be used as the operand of an MSIL instruction that accesses methods, such as <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.OpCodes.Call\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.OpCodes.Ldtoken\"&gt;&lt;/xref&gt;</ph>, in the scope of the current <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"A token that can be used as the operand of an MSIL instruction that accesses methods, such as <xref href=\"System.Reflection.Emit.OpCodes.Call\"></xref> or <xref href=\"System.Reflection.Emit.OpCodes.Ldtoken\"></xref>, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object."}],"pos":[24856,25165],"yaml":true},{"content":"Sets the code body of the associated dynamic method.","nodes":[{"pos":[0,52],"content":"Sets the code body of the associated dynamic method.","nodes":[{"content":"Sets the code body of the associated dynamic method.","pos":[0,52]}]}],"pos":[26364,26417],"yaml":true},{"content":"No validity checks are performed on the MSIL stream.  \n  \n Calling this method a second time replaces the first MSIL stream with the second.  \n  \n Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,52],"content":"No validity checks are performed on the MSIL stream.","nodes":[{"content":"No validity checks are performed on the MSIL stream.","pos":[0,52]}]},{"pos":[59,140],"content":"Calling this method a second time replaces the first MSIL stream with the second.","nodes":[{"content":"Calling this method a second time replaces the first MSIL stream with the second.","pos":[0,81]}]},{"pos":[147,666],"content":"Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[0,222]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[223,519],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[26428,27105],"yaml":true,"extradata":"MT"},{"content":"An array that contains the MSIL stream.","nodes":[{"pos":[0,39],"content":"An array that contains the MSIL stream.","nodes":[{"content":"An array that contains the MSIL stream.","pos":[0,39]}]}],"pos":[27257,27297],"yaml":true},{"content":"The maximum number of items on the operand stack when the method is executing.","nodes":[{"pos":[0,78],"content":"The maximum number of items on the operand stack when the method is executing.","nodes":[{"content":"The maximum number of items on the operand stack when the method is executing.","pos":[0,78]}]}],"pos":[27364,27443],"yaml":true},{"content":"Sets the code body of the associated dynamic method.","nodes":[{"pos":[0,52],"content":"Sets the code body of the associated dynamic method.","nodes":[{"content":"Sets the code body of the associated dynamic method.","pos":[0,52]}]}],"pos":[28692,28745],"yaml":true},{"content":"No validity checks are performed on the MSIL stream.  \n  \n Calling this method a second time replaces the first MSIL stream with the second.  \n  \n Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set.\" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,52],"content":"No validity checks are performed on the MSIL stream.","nodes":[{"content":"No validity checks are performed on the MSIL stream.","pos":[0,52]}]},{"pos":[59,140],"content":"Calling this method a second time replaces the first MSIL stream with the second.","nodes":[{"content":"Calling this method a second time replaces the first MSIL stream with the second.","pos":[0,81]}]},{"pos":[147,666],"content":"Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set.\" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set.\"","pos":[0,222]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[223,519],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[28756,29433],"yaml":true,"extradata":"MT"},{"content":"A pointer to a byte array containing the MSIL stream.","nodes":[{"pos":[0,53],"content":"A pointer to a byte array containing the MSIL stream.","nodes":[{"content":"A pointer to a byte array containing the MSIL stream.","pos":[0,53]}]}],"pos":[29642,29696],"yaml":true},{"content":"The number of bytes in the MSIL stream.","nodes":[{"pos":[0,39],"content":"The number of bytes in the MSIL stream.","nodes":[{"content":"The number of bytes in the MSIL stream.","pos":[0,39]}]}],"pos":[29759,29799],"yaml":true},{"content":"The maximum number of items on the operand stack when the method is executing.","nodes":[{"pos":[0,78],"content":"The maximum number of items on the operand stack when the method is executing.","nodes":[{"content":"The maximum number of items on the operand stack when the method is executing.","pos":[0,78]}]}],"pos":[29866,29945],"yaml":true},{"content":"<code>code</code> is `null` and <code>codeSize</code> is greater than 0.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;code&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;codeSize&lt;/code&gt;</ph> is greater than 0.","source":"<code>code</code> is `null` and <code>codeSize</code> is greater than 0."}],"pos":[30119,30192],"yaml":true},{"content":"<code>codeSize</code> is less than 0.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;codeSize&lt;/code&gt;</ph> is less than 0.","source":"<code>codeSize</code> is less than 0."}],"pos":[30306,30344],"yaml":true},{"content":"Sets the exception metadata for the associated dynamic method.","nodes":[{"pos":[0,62],"content":"Sets the exception metadata for the associated dynamic method.","nodes":[{"content":"Sets the exception metadata for the associated dynamic method.","pos":[0,62]}]}],"pos":[31582,31645],"yaml":true},{"content":"The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,592],"content":"The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"The exception metadata for a method defines the location and size of all <ph id=\"ph1\">`try`</ph>, <ph id=\"ph2\">`catch`</ph>, <ph id=\"ph3\">`finally`</ph>, filter, and fault blocks.","pos":[0,125],"source":"The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks."},{"content":"For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[126,295]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[296,592],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[31656,32251],"yaml":true,"extradata":"MT"},{"content":"An array that contains the exception metadata.","nodes":[{"pos":[0,46],"content":"An array that contains the exception metadata.","nodes":[{"content":"An array that contains the exception metadata.","pos":[0,46]}]}],"pos":[32403,32450],"yaml":true},{"content":"Sets the exception metadata for the associated dynamic method.","nodes":[{"pos":[0,62],"content":"Sets the exception metadata for the associated dynamic method.","nodes":[{"content":"Sets the exception metadata for the associated dynamic method.","pos":[0,62]}]}],"pos":[33681,33744],"yaml":true},{"content":"The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,633],"content":"The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"The exception metadata for a method defines the location and size of all <ph id=\"ph1\">`try`</ph>, <ph id=\"ph2\">`catch`</ph>, <ph id=\"ph3\">`finally`</ph>, filter, and fault blocks.","pos":[0,125],"source":"The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks."},{"content":"For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[126,336]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[337,633],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[33755,34391],"yaml":true,"extradata":"MT"},{"content":"A pointer to a byte array containing the exception metadata.","nodes":[{"pos":[0,60],"content":"A pointer to a byte array containing the exception metadata.","nodes":[{"content":"A pointer to a byte array containing the exception metadata.","pos":[0,60]}]}],"pos":[34606,34667],"yaml":true},{"content":"The number of bytes of exception metadata.","nodes":[{"pos":[0,42],"content":"The number of bytes of exception metadata.","nodes":[{"content":"The number of bytes of exception metadata.","pos":[0,42]}]}],"pos":[34736,34779],"yaml":true},{"content":"<code>exceptions</code> is `null` and <code>exceptionSize</code> is greater than 0.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;exceptions&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;exceptionSize&lt;/code&gt;</ph> is greater than 0.","source":"<code>exceptions</code> is `null` and <code>exceptionSize</code> is greater than 0."}],"pos":[34959,35043],"yaml":true},{"content":"<code>exceptionSize</code> is less than 0.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;exceptionSize&lt;/code&gt;</ph> is less than 0.","source":"<code>exceptionSize</code> is less than 0."}],"pos":[35157,35200],"yaml":true},{"content":"Sets the local variable signature that describes the layout of local variables for the associated dynamic method.","nodes":[{"pos":[0,113],"content":"Sets the local variable signature that describes the layout of local variables for the associated dynamic method.","nodes":[{"content":"Sets the local variable signature that describes the layout of local variables for the associated dynamic method.","pos":[0,113]}]}],"pos":[36455,36569],"yaml":true},{"content":"The local variable signature describes the layout of a method's local variables. To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.  \n  \n For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,364],"content":"The local variable signature describes the layout of a method's local variables. To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.","nodes":[{"content":"The local variable signature describes the layout of a method's local variables.","pos":[0,80]},{"content":"To simplify construction of the local variable signature, use the <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt;</ph> method to get a <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> for the local signature.","pos":[81,364],"source":" To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature."}]},{"pos":[371,835],"content":"For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[0,167]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[168,464],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[36580,37422],"yaml":true,"extradata":"MT"},{"content":"An array that contains the layout of local variables for the associated <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.","nodes":[{"pos":[0,130],"content":"An array that contains the layout of local variables for the associated <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicMethod\"&gt;&lt;/xref&gt;</ph>.","source":"An array that contains the layout of local variables for the associated <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>."}],"pos":[37586,37717],"yaml":true},{"content":"Sets the local variable signature that describes the layout of local variables for the associated dynamic method.","nodes":[{"pos":[0,113],"content":"Sets the local variable signature that describes the layout of local variables for the associated dynamic method.","nodes":[{"content":"Sets the local variable signature that describes the layout of local variables for the associated dynamic method.","pos":[0,113]}]}],"pos":[38976,39090],"yaml":true},{"content":"The local variable signature describes the layout of a method's local variables. To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.  \n  \n For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,364],"content":"The local variable signature describes the layout of a method's local variables. To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.","nodes":[{"content":"The local variable signature describes the layout of a method's local variables.","pos":[0,80]},{"content":"To simplify construction of the local variable signature, use the <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt;</ph> method to get a <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> for the local signature.","pos":[81,364],"source":" To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature."}]},{"pos":[371,835],"content":"For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[0,167]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[168,464],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[39101,39943],"yaml":true,"extradata":"MT"},{"content":"An array that contains the layout of local variables for the associated <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.","nodes":[{"pos":[0,130],"content":"An array that contains the layout of local variables for the associated <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicMethod\"&gt;&lt;/xref&gt;</ph>.","source":"An array that contains the layout of local variables for the associated <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>."}],"pos":[40169,40300],"yaml":true},{"content":"The number of bytes in the signature.","nodes":[{"pos":[0,37],"content":"The number of bytes in the signature.","nodes":[{"content":"The number of bytes in the signature.","pos":[0,37]}]}],"pos":[40368,40406],"yaml":true},{"content":"<code>localSignature</code> is `null` and <code>signatureSize</code> is greater than 0.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">&lt;code&gt;localSignature&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;signatureSize&lt;/code&gt;</ph> is greater than 0.","source":"<code>localSignature</code> is `null` and <code>signatureSize</code> is greater than 0."}],"pos":[40590,40678],"yaml":true},{"content":"<code>signatureSize</code> is less than 0.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;signatureSize&lt;/code&gt;</ph> is less than 0.","source":"<code>signatureSize</code> is less than 0."}],"pos":[40792,40835],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.DynamicILInfo\n  commentId: T:System.Reflection.Emit.DynamicILInfo\n  id: DynamicILInfo\n  children:\n  - System.Reflection.Emit.DynamicILInfo.DynamicMethod\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)\n  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)\n  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])\n  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)\n  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])\n  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)\n  langs:\n  - csharp\n  name: DynamicILInfo\n  nameWithType: DynamicILInfo\n  fullName: System.Reflection.Emit.DynamicILInfo\n  type: Class\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.\n  remarks: \"The <xref:System.Reflection.Emit.DynamicILInfo> class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>.  \\n  \\n To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities. The <xref:System.Reflection.Emit.DynamicILInfo> class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current <xref:System.Reflection.Emit.DynamicILInfo>. For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.  \\n  \\n Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your <xref:System.Reflection.Emit.DynamicILInfo> object.  \\n  \\n Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \\n  \\n> [!NOTE]\\n>  Do not use <xref:System.Reflection.Emit.DynamicILInfo> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly. Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate. A delegate that is created with the delegate constructor does not have a reference to the target dynamic method. The dynamic method might be reclaimed by garbage collection while the delegate is still in use.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class DynamicILInfo\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod\n  commentId: P:System.Reflection.Emit.DynamicILInfo.DynamicMethod\n  id: DynamicMethod\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: DynamicMethod\n  nameWithType: DynamicILInfo.DynamicMethod\n  fullName: DynamicILInfo.DynamicMethod\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the dynamic method whose body is generated by the current instance.\n  remarks: A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method. The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.\n  syntax:\n    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }\n    return:\n      type: System.Reflection.Emit.DynamicMethod\n      description: A <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref> object representing the dynamic method for which the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object is generating code.\n  overload: System.Reflection.Emit.DynamicILInfo.DynamicMethod*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])\n  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])\n  id: GetTokenFor(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(Byte[])\n  nameWithType: DynamicILInfo.GetTokenFor(Byte[])\n  fullName: DynamicILInfo.GetTokenFor(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing the signature for the associated dynamic method.\n  remarks: 'For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.'\n  syntax:\n    content: public int GetTokenFor (byte[] signature);\n    parameters:\n    - id: signature\n      type: System.Byte[]\n      description: An array that contains the signature.\n    return:\n      type: System.Int32\n      description: A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(DynamicMethod)\n  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)\n  fullName: DynamicILInfo.GetTokenFor(DynamicMethod)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a dynamic method to be called from the associated method.\n  remarks: The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.\n  syntax:\n    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);\n    parameters:\n    - id: method\n      type: System.Reflection.Emit.DynamicMethod\n      description: The dynamic method to call.\n    return:\n      type: System.Int32\n      description: A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)\n  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)\n  id: GetTokenFor(System.RuntimeFieldHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeFieldHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)\n  fullName: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a field to be accessed from the associated dynamic method.\n  remarks: You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.\n  syntax:\n    content: public int GetTokenFor (RuntimeFieldHandle field);\n    parameters:\n    - id: field\n      type: System.RuntimeFieldHandle\n      description: The field to be accessed.\n    return:\n      type: System.Int32\n      description: A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)\n  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)\n  id: GetTokenFor(System.RuntimeMethodHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeMethodHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)\n  fullName: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a method to be accessed from the associated dynamic method.\n  remarks: \"You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.  \\n  \\n> [!NOTE]\\n>  For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type.\"\n  syntax:\n    content: public int GetTokenFor (RuntimeMethodHandle method);\n    parameters:\n    - id: method\n      type: System.RuntimeMethodHandle\n      description: The method to be accessed.\n    return:\n      type: System.Int32\n      description: A token that can be used as the operand of an MSIL instruction that accesses methods, such as <xref href=\"System.Reflection.Emit.OpCodes.Call\"></xref> or <xref href=\"System.Reflection.Emit.OpCodes.Ldtoken\"></xref>, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)\n  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)\n  id: GetTokenFor(System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)\n  fullName: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a type to be used in the associated dynamic method.\n  remarks: \"The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.  \\n  \\n To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public int GetTokenFor (RuntimeTypeHandle type);\n    parameters:\n    - id: type\n      type: System.RuntimeTypeHandle\n      description: The type to be used.\n    return:\n      type: System.Int32\n      description: A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)\n  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)\n  id: GetTokenFor(System.String)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(String)\n  nameWithType: DynamicILInfo.GetTokenFor(String)\n  fullName: DynamicILInfo.GetTokenFor(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a string literal to be used in the associated dynamic method.\n  syntax:\n    content: public int GetTokenFor (string literal);\n    parameters:\n    - id: literal\n      type: System.String\n      description: The string to be used.\n    return:\n      type: System.Int32\n      description: A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeFieldHandle, RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle, RuntimeTypeHandle)\n  fullName: DynamicILInfo.GetTokenFor(RuntimeFieldHandle, RuntimeTypeHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.\n  remarks: You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.\n  syntax:\n    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);\n    parameters:\n    - id: field\n      type: System.RuntimeFieldHandle\n      description: The field to be accessed.\n    - id: contextType\n      type: System.RuntimeTypeHandle\n      description: The generic type the field belongs to.\n    return:\n      type: System.Int32\n      description: A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeMethodHandle, RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle, RuntimeTypeHandle)\n  fullName: DynamicILInfo.GetTokenFor(RuntimeMethodHandle, RuntimeTypeHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a method on a generic type.\n  remarks: You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.\n  syntax:\n    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);\n    parameters:\n    - id: method\n      type: System.RuntimeMethodHandle\n      description: The method.\n    - id: contextType\n      type: System.RuntimeTypeHandle\n      description: The generic type the method belongs to.\n    return:\n      type: System.Int32\n      description: A token that can be used as the operand of an MSIL instruction that accesses methods, such as <xref href=\"System.Reflection.Emit.OpCodes.Call\"></xref> or <xref href=\"System.Reflection.Emit.OpCodes.Ldtoken\"></xref>, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)\n  commentId: M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)\n  id: SetCode(System.Byte[],System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetCode(Byte[], Int32)\n  nameWithType: DynamicILInfo.SetCode(Byte[], Int32)\n  fullName: DynamicILInfo.SetCode(Byte[], Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the code body of the associated dynamic method.\n  remarks: \"No validity checks are performed on the MSIL stream.  \\n  \\n Calling this method a second time replaces the first MSIL stream with the second.  \\n  \\n Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public void SetCode (byte[] code, int maxStackSize);\n    parameters:\n    - id: code\n      type: System.Byte[]\n      description: An array that contains the MSIL stream.\n    - id: maxStackSize\n      type: System.Int32\n      description: The maximum number of items on the operand stack when the method is executing.\n  overload: System.Reflection.Emit.DynamicILInfo.SetCode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)\n  commentId: M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)\n  id: SetCode(System.Byte*,System.Int32,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetCode(Byte*, Int32, Int32)\n  nameWithType: DynamicILInfo.SetCode(Byte*, Int32, Int32)\n  fullName: DynamicILInfo.SetCode(Byte*, Int32, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the code body of the associated dynamic method.\n  remarks: \"No validity checks are performed on the MSIL stream.  \\n  \\n Calling this method a second time replaces the first MSIL stream with the second.  \\n  \\n Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set.\\\" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public void SetCode (byte* code, int codeSize, int maxStackSize);\n    parameters:\n    - id: code\n      type: System.Byte*\n      description: A pointer to a byte array containing the MSIL stream.\n    - id: codeSize\n      type: System.Int32\n      description: The number of bytes in the MSIL stream.\n    - id: maxStackSize\n      type: System.Int32\n      description: The maximum number of items on the operand stack when the method is executing.\n  overload: System.Reflection.Emit.DynamicILInfo.SetCode*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>code</code> is `null` and <code>codeSize</code> is greater than 0.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>codeSize</code> is less than 0.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  altCompliant: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])\n  commentId: M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])\n  id: SetExceptions(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetExceptions(Byte[])\n  nameWithType: DynamicILInfo.SetExceptions(Byte[])\n  fullName: DynamicILInfo.SetExceptions(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the exception metadata for the associated dynamic method.\n  remarks: 'The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.'\n  syntax:\n    content: public void SetExceptions (byte[] exceptions);\n    parameters:\n    - id: exceptions\n      type: System.Byte[]\n      description: An array that contains the exception metadata.\n  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)\n  commentId: M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)\n  id: SetExceptions(System.Byte*,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetExceptions(Byte*, Int32)\n  nameWithType: DynamicILInfo.SetExceptions(Byte*, Int32)\n  fullName: DynamicILInfo.SetExceptions(Byte*, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the exception metadata for the associated dynamic method.\n  remarks: 'The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.'\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public void SetExceptions (byte* exceptions, int exceptionsSize);\n    parameters:\n    - id: exceptions\n      type: System.Byte*\n      description: A pointer to a byte array containing the exception metadata.\n    - id: exceptionsSize\n      type: System.Int32\n      description: The number of bytes of exception metadata.\n  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>exceptions</code> is `null` and <code>exceptionSize</code> is greater than 0.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>exceptionSize</code> is less than 0.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  altCompliant: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])\n  commentId: M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])\n  id: SetLocalSignature(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetLocalSignature(Byte[])\n  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])\n  fullName: DynamicILInfo.SetLocalSignature(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the local variable signature that describes the layout of local variables for the associated dynamic method.\n  remarks: \"The local variable signature describes the layout of a method's local variables. To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.  \\n  \\n For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public void SetLocalSignature (byte[] localSignature);\n    parameters:\n    - id: localSignature\n      type: System.Byte[]\n      description: An array that contains the layout of local variables for the associated <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.\n  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)\n  commentId: M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)\n  id: SetLocalSignature(System.Byte*,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetLocalSignature(Byte*, Int32)\n  nameWithType: DynamicILInfo.SetLocalSignature(Byte*, Int32)\n  fullName: DynamicILInfo.SetLocalSignature(Byte*, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the local variable signature that describes the layout of local variables for the associated dynamic method.\n  remarks: \"The local variable signature describes the layout of a method's local variables. To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.  \\n  \\n For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public void SetLocalSignature (byte* localSignature, int signatureSize);\n    parameters:\n    - id: localSignature\n      type: System.Byte*\n      description: An array that contains the layout of local variables for the associated <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.\n    - id: signatureSize\n      type: System.Int32\n      description: The number of bytes in the signature.\n  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>localSignature</code> is `null` and <code>signatureSize</code> is greater than 0.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>signatureSize</code> is less than 0.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  altCompliant: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: DynamicMethod\n  nameWithType: DynamicILInfo.DynamicMethod\n  fullName: DynamicILInfo.DynamicMethod\n- uid: System.Reflection.Emit.DynamicMethod\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: DynamicMethod\n  nameWithType: DynamicMethod\n  fullName: System.Reflection.Emit.DynamicMethod\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(Byte[])\n  nameWithType: DynamicILInfo.GetTokenFor(Byte[])\n  fullName: DynamicILInfo.GetTokenFor(Byte[])\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(DynamicMethod)\n  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)\n  fullName: DynamicILInfo.GetTokenFor(DynamicMethod)\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeFieldHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)\n  fullName: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)\n- uid: System.RuntimeFieldHandle\n  parent: System\n  isExternal: false\n  name: RuntimeFieldHandle\n  nameWithType: RuntimeFieldHandle\n  fullName: System.RuntimeFieldHandle\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeMethodHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)\n  fullName: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)\n- uid: System.RuntimeMethodHandle\n  parent: System\n  isExternal: false\n  name: RuntimeMethodHandle\n  nameWithType: RuntimeMethodHandle\n  fullName: System.RuntimeMethodHandle\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)\n  fullName: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(String)\n  nameWithType: DynamicILInfo.GetTokenFor(String)\n  fullName: DynamicILInfo.GetTokenFor(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeFieldHandle, RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle, RuntimeTypeHandle)\n  fullName: DynamicILInfo.GetTokenFor(RuntimeFieldHandle, RuntimeTypeHandle)\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeMethodHandle, RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle, RuntimeTypeHandle)\n  fullName: DynamicILInfo.GetTokenFor(RuntimeMethodHandle, RuntimeTypeHandle)\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetCode(Byte[], Int32)\n  nameWithType: DynamicILInfo.SetCode(Byte[], Int32)\n  fullName: DynamicILInfo.SetCode(Byte[], Int32)\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetCode(Byte*, Int32, Int32)\n  nameWithType: DynamicILInfo.SetCode(Byte*, Int32, Int32)\n  fullName: DynamicILInfo.SetCode(Byte*, Int32, Int32)\n- uid: System.Byte*\n  parent: System\n  isExternal: false\n  name: Byte*\n  nameWithType: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetExceptions(Byte[])\n  nameWithType: DynamicILInfo.SetExceptions(Byte[])\n  fullName: DynamicILInfo.SetExceptions(Byte[])\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetExceptions(Byte*, Int32)\n  nameWithType: DynamicILInfo.SetExceptions(Byte*, Int32)\n  fullName: DynamicILInfo.SetExceptions(Byte*, Int32)\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetLocalSignature(Byte[])\n  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])\n  fullName: DynamicILInfo.SetLocalSignature(Byte[])\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetLocalSignature(Byte*, Int32)\n  nameWithType: DynamicILInfo.SetLocalSignature(Byte*, Int32)\n  fullName: DynamicILInfo.SetLocalSignature(Byte*, Int32)\n- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: DynamicMethod\n  nameWithType: DynamicILInfo.DynamicMethod\n  fullName: DynamicILInfo.DynamicMethod\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor\n  nameWithType: DynamicILInfo.GetTokenFor\n  fullName: DynamicILInfo.GetTokenFor\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetCode\n  nameWithType: DynamicILInfo.SetCode\n  fullName: DynamicILInfo.SetCode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetExceptions\n  nameWithType: DynamicILInfo.SetExceptions\n  fullName: DynamicILInfo.SetExceptions\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetLocalSignature\n  nameWithType: DynamicILInfo.SetLocalSignature\n  fullName: DynamicILInfo.SetLocalSignature\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}