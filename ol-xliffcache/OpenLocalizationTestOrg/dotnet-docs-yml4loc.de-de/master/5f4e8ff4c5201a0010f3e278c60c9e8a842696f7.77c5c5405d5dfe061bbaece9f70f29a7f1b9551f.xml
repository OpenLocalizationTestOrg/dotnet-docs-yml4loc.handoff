{"nodes":[{"content":"Validates the rules governing the use of the <code>tempFilesLocation</code> configuration switch.","nodes":[{"pos":[0,97],"content":"Validates the rules governing the use of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tempFilesLocation</ph><ept id=\"p1\">&lt;/code&gt;</ept> configuration switch.","source":"Validates the rules governing the use of the <code>tempFilesLocation</code> configuration switch."}],"pos":[719,817],"yaml":true},{"content":"When adding a `WebReference` object to a Web service in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], files are created by the Web service discovery process.  \n  \n Web service clients learn where to find the Web service description (WSDL) document by adding a `WebReference` object. The Web service clients then save the discovered documents to the disk by using the `WriteAll` method. For example, the discovered documents may be .xsd schema files or service descriptions. At the end of the process, the client deletes the files. You can change the default location of the files in the temporary folder by using the `tempFilesLocation` switch in the `<xmlSerializer>` element, specified in the Machine.config configuration file, as in the following example.  \n  \n```  \n<configuration>  \n  <system.web>  \n  <system.xml.serialization>  \n    <xmlSerializer tempFilesLocation=\"..\"/>  \n  </system.xml.serialization>  \n</configuration>  \n```  \n  \n The value of `tempFilesLocation` must be an absolute path. If the path specified is not absolute, the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] generates a <xref:System.Configuration.ConfigurationErrorsException> exception when the configuration section is referenced.  \n  \n The value of the property is truncated to remove leading and trailing white spaces.  \n  \n If value of the `tempFilesLocation` property is composed of white space, the default %TMP% location is used for the compilation. The same default behavior occurs when no `tempFilesLocation` switch is specified.  \n  \n The <xref:System.Xml.Serialization.XmlSerializer> does not check to see whether the path exists. If it does not, a <xref:System.IO.DirectoryNotFoundException> is generated. This is identical to the default behavior of the `XmlSerializer` if the %TMP% path does not exist.","nodes":[{"pos":[0,170],"content":"When adding a <ph id=\"ph1\">`WebReference`</ph> object to a Web service in the <ph id=\"ph2\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, files are created by the Web service discovery process.","source":"When adding a `WebReference` object to a Web service in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], files are created by the Web service discovery process."},{"pos":[177,771],"content":"Web service clients learn where to find the Web service description (WSDL) document by adding a `WebReference` object. The Web service clients then save the discovered documents to the disk by using the `WriteAll` method. For example, the discovered documents may be .xsd schema files or service descriptions. At the end of the process, the client deletes the files. You can change the default location of the files in the temporary folder by using the `tempFilesLocation` switch in the `<xmlSerializer>` element, specified in the Machine.config configuration file, as in the following example.","nodes":[{"content":"Web service clients learn where to find the Web service description (WSDL) document by adding a <ph id=\"ph1\">`WebReference`</ph> object.","pos":[0,118],"source":"Web service clients learn where to find the Web service description (WSDL) document by adding a `WebReference` object."},{"content":"The Web service clients then save the discovered documents to the disk by using the <ph id=\"ph1\">`WriteAll`</ph> method.","pos":[119,221],"source":" The Web service clients then save the discovered documents to the disk by using the `WriteAll` method."},{"content":"For example, the discovered documents may be .xsd schema files or service descriptions.","pos":[222,309]},{"content":"At the end of the process, the client deletes the files.","pos":[310,366]},{"content":"You can change the default location of the files in the temporary folder by using the <ph id=\"ph1\">`tempFilesLocation`</ph> switch in the <ph id=\"ph2\">`&lt;xmlSerializer&gt;`</ph> element, specified in the Machine.config configuration file, as in the following example.","pos":[367,594],"source":" You can change the default location of the files in the temporary folder by using the `tempFilesLocation` switch in the `<xmlSerializer>` element, specified in the Machine.config configuration file, as in the following example."}]},{"pos":[956,1236],"content":"The value of `tempFilesLocation` must be an absolute path. If the path specified is not absolute, the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] generates a <xref:System.Configuration.ConfigurationErrorsException> exception when the configuration section is referenced.","nodes":[{"content":"The value of <ph id=\"ph1\">`tempFilesLocation`</ph> must be an absolute path.","pos":[0,58],"source":"The value of `tempFilesLocation` must be an absolute path."},{"content":"If the path specified is not absolute, the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> generates a <ph id=\"ph2\">&lt;xref:System.Configuration.ConfigurationErrorsException&gt;</ph> exception when the configuration section is referenced.","pos":[59,280],"source":" If the path specified is not absolute, the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] generates a <xref:System.Configuration.ConfigurationErrorsException> exception when the configuration section is referenced."}]},{"pos":[1243,1326],"content":"The value of the property is truncated to remove leading and trailing white spaces.","nodes":[{"content":"The value of the property is truncated to remove leading and trailing white spaces.","pos":[0,83]}]},{"pos":[1333,1543],"content":"If value of the `tempFilesLocation` property is composed of white space, the default %TMP% location is used for the compilation. The same default behavior occurs when no `tempFilesLocation` switch is specified.","nodes":[{"content":"If value of the <ph id=\"ph1\">`tempFilesLocation`</ph> property is composed of white space, the default %TMP% location is used for the compilation.","pos":[0,128],"source":"If value of the `tempFilesLocation` property is composed of white space, the default %TMP% location is used for the compilation."},{"content":"The same default behavior occurs when no <ph id=\"ph1\">`tempFilesLocation`</ph> switch is specified.","pos":[129,210],"source":" The same default behavior occurs when no `tempFilesLocation` switch is specified."}]},{"pos":[1550,1821],"content":"The <xref:System.Xml.Serialization.XmlSerializer> does not check to see whether the path exists. If it does not, a <xref:System.IO.DirectoryNotFoundException> is generated. This is identical to the default behavior of the `XmlSerializer` if the %TMP% path does not exist.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> does not check to see whether the path exists.","pos":[0,96],"source":"The <xref:System.Xml.Serialization.XmlSerializer> does not check to see whether the path exists."},{"content":"If it does not, a <ph id=\"ph1\">&lt;xref:System.IO.DirectoryNotFoundException&gt;</ph> is generated.","pos":[97,172],"source":" If it does not, a <xref:System.IO.DirectoryNotFoundException> is generated."},{"content":"This is identical to the default behavior of the <ph id=\"ph1\">`XmlSerializer`</ph> if the %TMP% path does not exist.","pos":[173,271],"source":" This is identical to the default behavior of the `XmlSerializer` if the %TMP% path does not exist."}]}],"pos":[828,2673],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Serialization.Configuration.RootedPathValidator\"></xref> class.","nodes":[{"pos":[0,120],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Serialization.Configuration.RootedPathValidator\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Xml.Serialization.Configuration.RootedPathValidator\"></xref> class."}],"pos":[4273,4394],"yaml":true},{"content":"Determines whether the type of the object can be validated.","nodes":[{"pos":[0,59],"content":"Determines whether the type of the object can be validated.","nodes":[{"content":"Determines whether the type of the object can be validated.","pos":[0,59]}]}],"pos":[5696,5756],"yaml":true},{"content":"The type of the object.","nodes":[{"pos":[0,23],"content":"The type of the object.","nodes":[{"content":"The type of the object.","pos":[0,23]}]}],"pos":[5899,5923],"yaml":true},{"content":"`true` if the <code>type</code> parameter matches a valid `XMLSerializer` object; otherwise, `false`.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter matches a valid <ph id=\"ph3\">`XMLSerializer`</ph> object; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <code>type</code> parameter matches a valid `XMLSerializer` object; otherwise, `false`."}],"pos":[5981,6085],"yaml":true},{"content":"Determines whether the value of an object is valid.","nodes":[{"pos":[0,51],"content":"Determines whether the value of an object is valid.","nodes":[{"content":"Determines whether the value of an object is valid.","pos":[0,51]}]}],"pos":[7314,7366],"yaml":true},{"content":"The `XmlSerializer` object to validate is passed as a parameter of the `Validate` method.","nodes":[{"pos":[0,89],"content":"The <ph id=\"ph1\">`XmlSerializer`</ph> object to validate is passed as a parameter of the <ph id=\"ph2\">`Validate`</ph> method.","source":"The `XmlSerializer` object to validate is passed as a parameter of the `Validate` method."}],"pos":[7377,7467],"yaml":true,"extradata":"MT"},{"content":"The value of an object.","nodes":[{"pos":[0,23],"content":"The value of an object.","nodes":[{"content":"The value of an object.","pos":[0,23]}]}],"pos":[7613,7637],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xml.Serialization.Configuration.RootedPathValidator\n  commentId: T:System.Xml.Serialization.Configuration.RootedPathValidator\n  id: RootedPathValidator\n  children:\n  - System.Xml.Serialization.Configuration.RootedPathValidator.#ctor\n  - System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate(System.Type)\n  - System.Xml.Serialization.Configuration.RootedPathValidator.Validate(System.Object)\n  langs:\n  - csharp\n  name: RootedPathValidator\n  nameWithType: RootedPathValidator\n  fullName: System.Xml.Serialization.Configuration.RootedPathValidator\n  type: Class\n  assemblies:\n  - System.Xml\n  namespace: System.Xml.Serialization.Configuration\n  summary: Validates the rules governing the use of the <code>tempFilesLocation</code> configuration switch.\n  remarks: \"When adding a `WebReference` object to a Web service in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], files are created by the Web service discovery process.  \\n  \\n Web service clients learn where to find the Web service description (WSDL) document by adding a `WebReference` object. The Web service clients then save the discovered documents to the disk by using the `WriteAll` method. For example, the discovered documents may be .xsd schema files or service descriptions. At the end of the process, the client deletes the files. You can change the default location of the files in the temporary folder by using the `tempFilesLocation` switch in the `<xmlSerializer>` element, specified in the Machine.config configuration file, as in the following example.  \\n  \\n```  \\n<configuration>  \\n  <system.web>  \\n  <system.xml.serialization>  \\n    <xmlSerializer tempFilesLocation=\\\"..\\\"/>  \\n  </system.xml.serialization>  \\n</configuration>  \\n```  \\n  \\n The value of `tempFilesLocation` must be an absolute path. If the path specified is not absolute, the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] generates a <xref:System.Configuration.ConfigurationErrorsException> exception when the configuration section is referenced.  \\n  \\n The value of the property is truncated to remove leading and trailing white spaces.  \\n  \\n If value of the `tempFilesLocation` property is composed of white space, the default %TMP% location is used for the compilation. The same default behavior occurs when no `tempFilesLocation` switch is specified.  \\n  \\n The <xref:System.Xml.Serialization.XmlSerializer> does not check to see whether the path exists. If it does not, a <xref:System.IO.DirectoryNotFoundException> is generated. This is identical to the default behavior of the `XmlSerializer` if the %TMP% path does not exist.\"\n  syntax:\n    content: 'public class RootedPathValidator : System.Configuration.ConfigurationValidatorBase'\n  inheritance:\n  - System.Object\n  - System.Configuration.ConfigurationValidatorBase\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Serialization.Configuration/RootedPathValidator.xml\n  ms.technology:\n  - dotnet-wcf\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Xml.Serialization.Configuration.RootedPathValidator.#ctor\n  commentId: M:System.Xml.Serialization.Configuration.RootedPathValidator.#ctor\n  id: '#ctor'\n  parent: System.Xml.Serialization.Configuration.RootedPathValidator\n  langs:\n  - csharp\n  name: RootedPathValidator()\n  nameWithType: RootedPathValidator.RootedPathValidator()\n  fullName: RootedPathValidator.RootedPathValidator()\n  type: Constructor\n  assemblies:\n  - System.Xml\n  namespace: System.Xml.Serialization.Configuration\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Serialization.Configuration.RootedPathValidator\"></xref> class.\n  syntax:\n    content: public RootedPathValidator ();\n    parameters: []\n  overload: System.Xml.Serialization.Configuration.RootedPathValidator.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Serialization.Configuration/RootedPathValidator.xml\n  ms.technology:\n  - dotnet-wcf\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate(System.Type)\n  commentId: M:System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate(System.Type)\n  id: CanValidate(System.Type)\n  parent: System.Xml.Serialization.Configuration.RootedPathValidator\n  langs:\n  - csharp\n  name: CanValidate(Type)\n  nameWithType: RootedPathValidator.CanValidate(Type)\n  fullName: RootedPathValidator.CanValidate(Type)\n  type: Method\n  assemblies:\n  - System.Xml\n  namespace: System.Xml.Serialization.Configuration\n  summary: Determines whether the type of the object can be validated.\n  syntax:\n    content: public override bool CanValidate (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the object.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>type</code> parameter matches a valid `XMLSerializer` object; otherwise, `false`.'\n  overload: System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Serialization.Configuration/RootedPathValidator.xml\n  ms.technology:\n  - dotnet-wcf\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Xml.Serialization.Configuration.RootedPathValidator.Validate(System.Object)\n  commentId: M:System.Xml.Serialization.Configuration.RootedPathValidator.Validate(System.Object)\n  id: Validate(System.Object)\n  parent: System.Xml.Serialization.Configuration.RootedPathValidator\n  langs:\n  - csharp\n  name: Validate(Object)\n  nameWithType: RootedPathValidator.Validate(Object)\n  fullName: RootedPathValidator.Validate(Object)\n  type: Method\n  assemblies:\n  - System.Xml\n  namespace: System.Xml.Serialization.Configuration\n  summary: Determines whether the value of an object is valid.\n  remarks: The `XmlSerializer` object to validate is passed as a parameter of the `Validate` method.\n  syntax:\n    content: public override void Validate (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The value of an object.\n  overload: System.Xml.Serialization.Configuration.RootedPathValidator.Validate*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Serialization.Configuration/RootedPathValidator.xml\n  ms.technology:\n  - dotnet-wcf\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Configuration.ConfigurationValidatorBase\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationValidatorBase\n  nameWithType: ConfigurationValidatorBase\n  fullName: System.Configuration.ConfigurationValidatorBase\n- uid: System.Xml.Serialization.Configuration.RootedPathValidator.#ctor\n  parent: System.Xml.Serialization.Configuration.RootedPathValidator\n  isExternal: false\n  name: RootedPathValidator()\n  nameWithType: RootedPathValidator.RootedPathValidator()\n  fullName: RootedPathValidator.RootedPathValidator()\n- uid: System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate(System.Type)\n  parent: System.Xml.Serialization.Configuration.RootedPathValidator\n  isExternal: false\n  name: CanValidate(Type)\n  nameWithType: RootedPathValidator.CanValidate(Type)\n  fullName: RootedPathValidator.CanValidate(Type)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Xml.Serialization.Configuration.RootedPathValidator.Validate(System.Object)\n  parent: System.Xml.Serialization.Configuration.RootedPathValidator\n  isExternal: false\n  name: Validate(Object)\n  nameWithType: RootedPathValidator.Validate(Object)\n  fullName: RootedPathValidator.Validate(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Xml.Serialization.Configuration.RootedPathValidator.#ctor*\n  parent: System.Xml.Serialization.Configuration.RootedPathValidator\n  isExternal: false\n  name: RootedPathValidator\n  nameWithType: RootedPathValidator.RootedPathValidator\n  fullName: RootedPathValidator.RootedPathValidator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Serialization.Configuration/RootedPathValidator.xml\n- uid: System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate*\n  parent: System.Xml.Serialization.Configuration.RootedPathValidator\n  isExternal: false\n  name: CanValidate\n  nameWithType: RootedPathValidator.CanValidate\n  fullName: RootedPathValidator.CanValidate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Serialization.Configuration/RootedPathValidator.xml\n- uid: System.Xml.Serialization.Configuration.RootedPathValidator.Validate*\n  parent: System.Xml.Serialization.Configuration.RootedPathValidator\n  isExternal: false\n  name: Validate\n  nameWithType: RootedPathValidator.Validate\n  fullName: RootedPathValidator.Validate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Serialization.Configuration/RootedPathValidator.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}