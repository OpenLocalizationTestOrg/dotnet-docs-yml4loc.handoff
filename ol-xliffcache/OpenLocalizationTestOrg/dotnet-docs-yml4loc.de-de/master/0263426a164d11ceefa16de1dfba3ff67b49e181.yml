### YamlMime:ManagedReference
items:
- uid: System.Convert
  commentId: T:System.Convert
  id: Convert
  children:
  - System.Convert.ChangeType(System.Object,System.Type)
  - System.Convert.ChangeType(System.Object,System.TypeCode)
  - System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)
  - System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)
  - System.Convert.DBNull
  - System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)
  - System.Convert.FromBase64String(System.String)
  - System.Convert.GetTypeCode(System.Object)
  - System.Convert.IsDBNull(System.Object)
  - System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)
  - System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)
  - System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)
  - System.Convert.ToBase64String(System.Byte[])
  - System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)
  - System.Convert.ToBoolean(System.SByte)
  - System.Convert.ToBoolean(System.String,System.IFormatProvider)
  - System.Convert.ToBoolean(System.Object,System.IFormatProvider)
  - System.Convert.ToBoolean(System.UInt64)
  - System.Convert.ToBoolean(System.UInt32)
  - System.Convert.ToBoolean(System.UInt16)
  - System.Convert.ToBoolean(System.String)
  - System.Convert.ToBoolean(System.Single)
  - System.Convert.ToBoolean(System.Object)
  - System.Convert.ToBoolean(System.Double)
  - System.Convert.ToBoolean(System.Int32)
  - System.Convert.ToBoolean(System.Int16)
  - System.Convert.ToBoolean(System.Decimal)
  - System.Convert.ToBoolean(System.DateTime)
  - System.Convert.ToBoolean(System.Char)
  - System.Convert.ToBoolean(System.Byte)
  - System.Convert.ToBoolean(System.Boolean)
  - System.Convert.ToBoolean(System.Int64)
  - System.Convert.ToByte(System.String)
  - System.Convert.ToByte(System.UInt16)
  - System.Convert.ToByte(System.UInt32)
  - System.Convert.ToByte(System.String,System.Int32)
  - System.Convert.ToByte(System.Object,System.IFormatProvider)
  - System.Convert.ToByte(System.String,System.IFormatProvider)
  - System.Convert.ToByte(System.Single)
  - System.Convert.ToByte(System.UInt64)
  - System.Convert.ToByte(System.SByte)
  - System.Convert.ToByte(System.Int16)
  - System.Convert.ToByte(System.Int64)
  - System.Convert.ToByte(System.Byte)
  - System.Convert.ToByte(System.Char)
  - System.Convert.ToByte(System.DateTime)
  - System.Convert.ToByte(System.Boolean)
  - System.Convert.ToByte(System.Double)
  - System.Convert.ToByte(System.Int32)
  - System.Convert.ToByte(System.Decimal)
  - System.Convert.ToByte(System.Object)
  - System.Convert.ToChar(System.String,System.IFormatProvider)
  - System.Convert.ToChar(System.Object)
  - System.Convert.ToChar(System.Object,System.IFormatProvider)
  - System.Convert.ToChar(System.UInt64)
  - System.Convert.ToChar(System.UInt32)
  - System.Convert.ToChar(System.UInt16)
  - System.Convert.ToChar(System.String)
  - System.Convert.ToChar(System.Single)
  - System.Convert.ToChar(System.SByte)
  - System.Convert.ToChar(System.Int64)
  - System.Convert.ToChar(System.Int16)
  - System.Convert.ToChar(System.Double)
  - System.Convert.ToChar(System.Decimal)
  - System.Convert.ToChar(System.DateTime)
  - System.Convert.ToChar(System.Char)
  - System.Convert.ToChar(System.Byte)
  - System.Convert.ToChar(System.Boolean)
  - System.Convert.ToChar(System.Int32)
  - System.Convert.ToDateTime(System.Single)
  - System.Convert.ToDateTime(System.String)
  - System.Convert.ToDateTime(System.UInt16)
  - System.Convert.ToDateTime(System.String,System.IFormatProvider)
  - System.Convert.ToDateTime(System.UInt64)
  - System.Convert.ToDateTime(System.Object,System.IFormatProvider)
  - System.Convert.ToDateTime(System.SByte)
  - System.Convert.ToDateTime(System.UInt32)
  - System.Convert.ToDateTime(System.Object)
  - System.Convert.ToDateTime(System.Double)
  - System.Convert.ToDateTime(System.Int32)
  - System.Convert.ToDateTime(System.Boolean)
  - System.Convert.ToDateTime(System.Byte)
  - System.Convert.ToDateTime(System.Char)
  - System.Convert.ToDateTime(System.Int64)
  - System.Convert.ToDateTime(System.Decimal)
  - System.Convert.ToDateTime(System.Int16)
  - System.Convert.ToDateTime(System.DateTime)
  - System.Convert.ToDecimal(System.String,System.IFormatProvider)
  - System.Convert.ToDecimal(System.Object,System.IFormatProvider)
  - System.Convert.ToDecimal(System.UInt64)
  - System.Convert.ToDecimal(System.UInt32)
  - System.Convert.ToDecimal(System.UInt16)
  - System.Convert.ToDecimal(System.String)
  - System.Convert.ToDecimal(System.SByte)
  - System.Convert.ToDecimal(System.Object)
  - System.Convert.ToDecimal(System.Single)
  - System.Convert.ToDecimal(System.Int32)
  - System.Convert.ToDecimal(System.Boolean)
  - System.Convert.ToDecimal(System.Byte)
  - System.Convert.ToDecimal(System.Char)
  - System.Convert.ToDecimal(System.Int64)
  - System.Convert.ToDecimal(System.Decimal)
  - System.Convert.ToDecimal(System.Double)
  - System.Convert.ToDecimal(System.Int16)
  - System.Convert.ToDecimal(System.DateTime)
  - System.Convert.ToDouble(System.SByte)
  - System.Convert.ToDouble(System.Object,System.IFormatProvider)
  - System.Convert.ToDouble(System.UInt64)
  - System.Convert.ToDouble(System.UInt32)
  - System.Convert.ToDouble(System.UInt16)
  - System.Convert.ToDouble(System.String)
  - System.Convert.ToDouble(System.Single)
  - System.Convert.ToDouble(System.String,System.IFormatProvider)
  - System.Convert.ToDouble(System.Object)
  - System.Convert.ToDouble(System.Int32)
  - System.Convert.ToDouble(System.Boolean)
  - System.Convert.ToDouble(System.Byte)
  - System.Convert.ToDouble(System.Char)
  - System.Convert.ToDouble(System.Int64)
  - System.Convert.ToDouble(System.Decimal)
  - System.Convert.ToDouble(System.Double)
  - System.Convert.ToDouble(System.Int16)
  - System.Convert.ToDouble(System.DateTime)
  - System.Convert.ToInt16(System.SByte)
  - System.Convert.ToInt16(System.String,System.IFormatProvider)
  - System.Convert.ToInt16(System.Object,System.IFormatProvider)
  - System.Convert.ToInt16(System.UInt64)
  - System.Convert.ToInt16(System.UInt32)
  - System.Convert.ToInt16(System.UInt16)
  - System.Convert.ToInt16(System.String)
  - System.Convert.ToInt16(System.Single)
  - System.Convert.ToInt16(System.String,System.Int32)
  - System.Convert.ToInt16(System.Object)
  - System.Convert.ToInt16(System.Int32)
  - System.Convert.ToInt16(System.Int16)
  - System.Convert.ToInt16(System.Double)
  - System.Convert.ToInt16(System.Decimal)
  - System.Convert.ToInt16(System.DateTime)
  - System.Convert.ToInt16(System.Char)
  - System.Convert.ToInt16(System.Byte)
  - System.Convert.ToInt16(System.Boolean)
  - System.Convert.ToInt16(System.Int64)
  - System.Convert.ToInt32(System.Single)
  - System.Convert.ToInt32(System.UInt16)
  - System.Convert.ToInt32(System.UInt32)
  - System.Convert.ToInt32(System.SByte)
  - System.Convert.ToInt32(System.Object,System.IFormatProvider)
  - System.Convert.ToInt32(System.String,System.IFormatProvider)
  - System.Convert.ToInt32(System.String,System.Int32)
  - System.Convert.ToInt32(System.UInt64)
  - System.Convert.ToInt32(System.Object)
  - System.Convert.ToInt32(System.String)
  - System.Convert.ToInt32(System.Int32)
  - System.Convert.ToInt32(System.Byte)
  - System.Convert.ToInt32(System.Char)
  - System.Convert.ToInt32(System.DateTime)
  - System.Convert.ToInt32(System.Boolean)
  - System.Convert.ToInt32(System.Double)
  - System.Convert.ToInt32(System.Int64)
  - System.Convert.ToInt32(System.Int16)
  - System.Convert.ToInt32(System.Decimal)
  - System.Convert.ToInt64(System.Single)
  - System.Convert.ToInt64(System.String,System.Int32)
  - System.Convert.ToInt64(System.String,System.IFormatProvider)
  - System.Convert.ToInt64(System.Object,System.IFormatProvider)
  - System.Convert.ToInt64(System.UInt64)
  - System.Convert.ToInt64(System.UInt32)
  - System.Convert.ToInt64(System.UInt16)
  - System.Convert.ToInt64(System.String)
  - System.Convert.ToInt64(System.SByte)
  - System.Convert.ToInt64(System.Object)
  - System.Convert.ToInt64(System.Int64)
  - System.Convert.ToInt64(System.Byte)
  - System.Convert.ToInt64(System.Char)
  - System.Convert.ToInt64(System.DateTime)
  - System.Convert.ToInt64(System.Boolean)
  - System.Convert.ToInt64(System.Double)
  - System.Convert.ToInt64(System.Int16)
  - System.Convert.ToInt64(System.Int32)
  - System.Convert.ToInt64(System.Decimal)
  - System.Convert.ToSByte(System.SByte)
  - System.Convert.ToSByte(System.String,System.Int32)
  - System.Convert.ToSByte(System.String,System.IFormatProvider)
  - System.Convert.ToSByte(System.Object,System.IFormatProvider)
  - System.Convert.ToSByte(System.UInt64)
  - System.Convert.ToSByte(System.UInt32)
  - System.Convert.ToSByte(System.String)
  - System.Convert.ToSByte(System.Single)
  - System.Convert.ToSByte(System.Object)
  - System.Convert.ToSByte(System.UInt16)
  - System.Convert.ToSByte(System.Int32)
  - System.Convert.ToSByte(System.Int64)
  - System.Convert.ToSByte(System.Byte)
  - System.Convert.ToSByte(System.Char)
  - System.Convert.ToSByte(System.DateTime)
  - System.Convert.ToSByte(System.Boolean)
  - System.Convert.ToSByte(System.Double)
  - System.Convert.ToSByte(System.Int16)
  - System.Convert.ToSByte(System.Decimal)
  - System.Convert.ToSingle(System.String,System.IFormatProvider)
  - System.Convert.ToSingle(System.SByte)
  - System.Convert.ToSingle(System.Object,System.IFormatProvider)
  - System.Convert.ToSingle(System.UInt64)
  - System.Convert.ToSingle(System.UInt32)
  - System.Convert.ToSingle(System.String)
  - System.Convert.ToSingle(System.Single)
  - System.Convert.ToSingle(System.Object)
  - System.Convert.ToSingle(System.UInt16)
  - System.Convert.ToSingle(System.Int32)
  - System.Convert.ToSingle(System.Int16)
  - System.Convert.ToSingle(System.Double)
  - System.Convert.ToSingle(System.Decimal)
  - System.Convert.ToSingle(System.DateTime)
  - System.Convert.ToSingle(System.Char)
  - System.Convert.ToSingle(System.Byte)
  - System.Convert.ToSingle(System.Boolean)
  - System.Convert.ToSingle(System.Int64)
  - System.Convert.ToString(System.Int16,System.Int32)
  - System.Convert.ToString(System.Int16,System.IFormatProvider)
  - System.Convert.ToString(System.DateTime,System.IFormatProvider)
  - System.Convert.ToString(System.UInt64,System.IFormatProvider)
  - System.Convert.ToString(System.Decimal,System.IFormatProvider)
  - System.Convert.ToString(System.Int32,System.IFormatProvider)
  - System.Convert.ToString(System.Double,System.IFormatProvider)
  - System.Convert.ToString(System.Int32,System.Int32)
  - System.Convert.ToString(System.SByte,System.IFormatProvider)
  - System.Convert.ToString(System.Int64,System.Int32)
  - System.Convert.ToString(System.Object,System.IFormatProvider)
  - System.Convert.ToString(System.Single,System.IFormatProvider)
  - System.Convert.ToString(System.String,System.IFormatProvider)
  - System.Convert.ToString(System.UInt16,System.IFormatProvider)
  - System.Convert.ToString(System.UInt32,System.IFormatProvider)
  - System.Convert.ToString(System.Char,System.IFormatProvider)
  - System.Convert.ToString(System.Int64,System.IFormatProvider)
  - System.Convert.ToString(System.Byte,System.Int32)
  - System.Convert.ToString(System.UInt16)
  - System.Convert.ToString(System.Boolean,System.IFormatProvider)
  - System.Convert.ToString(System.Byte,System.IFormatProvider)
  - System.Convert.ToString(System.Boolean)
  - System.Convert.ToString(System.Byte)
  - System.Convert.ToString(System.Char)
  - System.Convert.ToString(System.Decimal)
  - System.Convert.ToString(System.Double)
  - System.Convert.ToString(System.Int16)
  - System.Convert.ToString(System.DateTime)
  - System.Convert.ToString(System.Int64)
  - System.Convert.ToString(System.Object)
  - System.Convert.ToString(System.SByte)
  - System.Convert.ToString(System.Single)
  - System.Convert.ToString(System.String)
  - System.Convert.ToString(System.UInt32)
  - System.Convert.ToString(System.UInt64)
  - System.Convert.ToString(System.Int32)
  - System.Convert.ToUInt16(System.String)
  - System.Convert.ToUInt16(System.UInt16)
  - System.Convert.ToUInt16(System.UInt32)
  - System.Convert.ToUInt16(System.String,System.Int32)
  - System.Convert.ToUInt16(System.Object,System.IFormatProvider)
  - System.Convert.ToUInt16(System.String,System.IFormatProvider)
  - System.Convert.ToUInt16(System.Single)
  - System.Convert.ToUInt16(System.UInt64)
  - System.Convert.ToUInt16(System.SByte)
  - System.Convert.ToUInt16(System.Double)
  - System.Convert.ToUInt16(System.Int64)
  - System.Convert.ToUInt16(System.Object)
  - System.Convert.ToUInt16(System.Byte)
  - System.Convert.ToUInt16(System.Char)
  - System.Convert.ToUInt16(System.DateTime)
  - System.Convert.ToUInt16(System.Boolean)
  - System.Convert.ToUInt16(System.Int16)
  - System.Convert.ToUInt16(System.Int32)
  - System.Convert.ToUInt16(System.Decimal)
  - System.Convert.ToUInt32(System.Single)
  - System.Convert.ToUInt32(System.String,System.Int32)
  - System.Convert.ToUInt32(System.String,System.IFormatProvider)
  - System.Convert.ToUInt32(System.Object,System.IFormatProvider)
  - System.Convert.ToUInt32(System.UInt64)
  - System.Convert.ToUInt32(System.UInt32)
  - System.Convert.ToUInt32(System.UInt16)
  - System.Convert.ToUInt32(System.String)
  - System.Convert.ToUInt32(System.SByte)
  - System.Convert.ToUInt32(System.Boolean)
  - System.Convert.ToUInt32(System.Int64)
  - System.Convert.ToUInt32(System.Int32)
  - System.Convert.ToUInt32(System.Int16)
  - System.Convert.ToUInt32(System.Double)
  - System.Convert.ToUInt32(System.Decimal)
  - System.Convert.ToUInt32(System.DateTime)
  - System.Convert.ToUInt32(System.Char)
  - System.Convert.ToUInt32(System.Byte)
  - System.Convert.ToUInt32(System.Object)
  - System.Convert.ToUInt64(System.Single)
  - System.Convert.ToUInt64(System.String)
  - System.Convert.ToUInt64(System.Object,System.IFormatProvider)
  - System.Convert.ToUInt64(System.UInt32)
  - System.Convert.ToUInt64(System.UInt64)
  - System.Convert.ToUInt64(System.SByte)
  - System.Convert.ToUInt64(System.UInt16)
  - System.Convert.ToUInt64(System.Object)
  - System.Convert.ToUInt64(System.Decimal)
  - System.Convert.ToUInt64(System.Int32)
  - System.Convert.ToUInt64(System.Int16)
  - System.Convert.ToUInt64(System.Double)
  - System.Convert.ToUInt64(System.DateTime)
  - System.Convert.ToUInt64(System.Char)
  - System.Convert.ToUInt64(System.Byte)
  - System.Convert.ToUInt64(System.Boolean)
  - System.Convert.ToUInt64(System.String,System.IFormatProvider)
  - System.Convert.ToUInt64(System.Int64)
  - System.Convert.ToUInt64(System.String,System.Int32)
  langs:
  - csharp
  name: Convert
  nameWithType: Convert
  fullName: System.Convert
  type: Class
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts a base data type to another base data type.
  remarks: "The static methods of the <xref:System.Convert> class are primarily used to support conversion to and from the base data types in the .NET Framework. The supported base types are <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, <xref:System.DateTime> and <xref:System.String>. In addition, the <xref:System.Convert> class includes methods to support  other kinds of conversions.  \n  \n This topic consists of the following sections:  \n  \n [Conversions to and from Base Types](#Base)   \n [Non-Decimal Numbers](#NonDecimal)   \n [Conversions from Custom Objects to Base Types](#Custom)   \n [Culture-Specific Formatting Information](#Culture)   \n [Base64 Encoding](#Base64)   \n [Other Common Conversions](#Other)  \n  \n<a name=\"Base\"></a>   \n## Conversions to and from Base Types  \n A conversion method exists to convert every base type to every other base type. However, the actual call to a particular conversion method can produce one of five outcomes, depending on the value of the base type at run time and the target base type. These five outcomes are:  \n  \n-   No conversion. This occurs when an attempt is made to convert from a type to itself (for example, by calling <xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=fullName> with an argument of type <xref:System.Int32>). In this case, the method simply returns an instance of the original type.  \n  \n-   An <xref:System.InvalidCastException>. This occurs when a particular conversion is not supported. An <xref:System.InvalidCastException> is thrown for the following conversions:  \n  \n    -   Conversions from <xref:System.Char> to <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime>.  \n  \n    -   Conversions from <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime> to <xref:System.Char>.  \n  \n    -   Conversions from <xref:System.DateTime> to any other type except <xref:System.String>.  \n  \n    -   Conversions from any other type, except <xref:System.String>, to <xref:System.DateTime>.  \n  \n-   A <xref:System.FormatException>. This occurs when the attempt to convert a string value to any other base type fails because the string is not in the proper format. The exception is thrown for the following conversions:  \n  \n    -   A string to be converted to a <xref:System.Boolean> value does not equal <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.  \n  \n    -   A string to be converted to a <xref:System.Char> value consists of multiple characters.  \n  \n    -   A string to be converted to any numeric type is not recognized as a valid number.  \n  \n    -   A string to be converted to a <xref:System.DateTime> is not recognized as a valid date and time value.  \n  \n-   A successful conversion. For conversions between two different base types not listed in the previous outcomes, all widening conversions as well as all narrowing conversions that do not result in a loss of data will succeed and the method will return a value of the targeted base type.  \n  \n-   An <xref:System.OverflowException>. This occurs when a narrowing conversion results in a loss of data. For example, trying to convert a <xref:System.Int32> instance whose value is 10000 to a <xref:System.Byte> type throws an <xref:System.OverflowException> because 10000 is outside the range of the <xref:System.Byte> data type.  \n  \n An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits). However, an exception will be thrown if the result is larger than can be represented by the particular conversion method's return value type.  \n  \n For example, when a <xref:System.Double> is converted to a <xref:System.Single>, a loss of precision might occur but no exception is thrown. However, if the magnitude of the <xref:System.Double> is too large to be represented by a <xref:System.Single>, an overflow exception is thrown.  \n  \n<a name=\"NonDecimal\"></a>   \n## Non-Decimal Numbers  \n The <xref:System.Convert> class includes static methods that you can call to convert integral values to non-decimal string representations, and to convert strings that represent non-decimal numbers to integral values. Each of these conversion methods includes a `base` argument  that lets you specify  the number system; binary (base 2), octal (base 8), and hexadecimal (base 16), as well as decimal (base 10). There is a set of methods to convert each of the CLS-compliant primitive integral types to a string, and one to convert a string to each of the primitive integral types:  \n  \n-   <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29> and <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29>, to convert a byte value to and from a string in a specified base.  \n  \n-   <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> and <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29>, to convert a 16-bit signed integer to and from a string in a specified base.  \n  \n-   <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> and <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29>, to convert a 32-bit signed integer to and from a string in a specified base.  \n  \n-   <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> and <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29>, to convert a 64-bit signed integer to and from a string in a specified base.  \n  \n-   <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29>, to convert the string representation of a byte value in a specified format to a signed byte.  \n  \n-   <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 16-bit integer.  \n  \n-   <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 32-bit integer.  \n  \n-   <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 64-bit integer.  \n  \n The following example converts the value of <xref:System.Int16.MaxValue?displayProperty=fullName> to a string in all supported numeric formats. It then converts the string value back to a <xref:System.Int16> value.  \n  \n [!code-cpp[System.Convert#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/NonDecimal1.cpp#2)]\n [!code-csharp[System.Convert#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/NonDecimal1.cs#2)]\n [!code-vb[System.Convert#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/NonDecimal1.vb#2)]  \n  \n<a name=\"Custom\"></a>   \n## Conversions from Custom Objects to Base Types  \n In addition to supporting conversions between the base types, the <xref:System.Convert> method supports conversion of any custom type to any base type. To do this, the custom type must implement the <xref:System.IConvertible> interface, which defines methods for converting the implementing type to each of the base types. Conversions that are not supported by a particular type should throw an <xref:System.InvalidCastException>.  \n  \n When the <xref:System.Convert.ChangeType%2A> method is passed a custom type as its first parameter, or when the `Convert.To`*Type* method (such as <xref:System.Convert.ToInt32%28System.Object%29?displayProperty=fullName> or <xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName> is called and passed an instance of a custom type as its first parameter, the <xref:System.Convert> method, in turn, calls the custom type's <xref:System.IConvertible> implementation to perform the conversion. For more information, see [Type Conversion in the .NET Framework](~/docs/standard/base-types/type-conversion.md).  \n  \n<a name=\"Culture\"></a>   \n## Culture-Specific Formatting Information  \n All the base type conversion methods and the <xref:System.Convert.ChangeType%2A> method include overloads that have a parameter of type <xref:System.IFormatProvider>. For example, the <xref:System.Convert.ToBoolean%2A?displayProperty=fullName> method has the following two overloads:  \n  \n-   <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName>  \n  \n-   <xref:System.Convert.ToBoolean%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>  \n  \n The <xref:System.IFormatProvider> parameter can supply culture-specific formatting information to assist the conversion process. However, it is ignored by most of the base type conversion methods. It is used only by the following base type conversion methods.If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  \n  \n-   By methods that convert a value to a numeric type. The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>. It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.  \n  \n-   By methods that convert a value to a date and time. The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>. It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.  \n  \n-   By the <xref:System.Convert.ToString%2A?displayProperty=fullName> overloads that include an <xref:System.IFormatProvider> parameter and that convert either a numeric value to a string or a <xref:System.DateTime> value to a string.  \n  \n However, any user-defined type that implements <xref:System.IConvertible> can make use of the <xref:System.IFormatProvider> parameter.  \n  \n<a name=\"Base64\"></a>   \n## Base64 Encoding  \n Base64 encoding converts binary data to a string. Data expressed as base-64 digits can be easily conveyed over data channels that can only transmit 7-bit characters. The <xref:System.Convert> class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <xref:System.String> or to and from an array of Unicode characters consisting of base-64 digit characters.  \n  \n-   <xref:System.Convert.ToBase64String%2A>, which converts a byte array to a base64-encoded string.  \n  \n-   <xref:System.Convert.ToBase64CharArray%2A>, which converts a byte array to a base64-encoded character array.  \n  \n-   <xref:System.Convert.FromBase64String%2A>, which converts a base64-encoded string to a byte array.  \n  \n-   <xref:System.Convert.FromBase64CharArray%2A>, which converts a base64-encoded character array to a byte array.  \n  \n<a name=\"Other\"></a>   \n## Other Common Conversions  \n You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the <xref:System.Convert> class.  These include:  \n  \n Conversion to byte arrays  \n The <xref:System.BitConverter> class  provides methods that convert the primitive numeric types (including <xref:System.Boolean>) to byte arrays and from byte arrays back to primitive data types.  \n  \n Character encoding and decoding  \n The <xref:System.Text.Encoding> class and its derived classes (such as <xref:System.Text.UnicodeEncoding> and <xref:System.Text.UTF8Encoding>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters. For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)"
  example:
  - "The following example demonstrates some of the conversion methods in the <xref:System.Convert> class, including <xref:System.Convert.ToInt32%2A>, <xref:System.Convert.ToBoolean%2A>, and <xref:System.Convert.ToString%2A>.  \n  \n [!code-cpp[System.Convert#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/converter.cpp#1)]\n [!code-csharp[System.Convert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/converter.cs#1)]\n [!code-vb[System.Convert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/converter.vb#1)]"
  syntax:
    content: public static class Convert
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ChangeType(System.Object,System.Type)
  commentId: M:System.Convert.ChangeType(System.Object,System.Type)
  id: ChangeType(System.Object,System.Type)
  parent: System.Convert
  langs:
  - csharp
  name: ChangeType(Object, Type)
  nameWithType: Convert.ChangeType(Object, Type)
  fullName: Convert.ChangeType(Object, Type)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns an object of the specified type and whose value is equivalent to the specified object.
  remarks: "<xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`. The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method requires that conversion of `value` to `conversionType` be supported.  \n  \n This method uses the current thread's culture for the conversion."
  example:
  - "The following example illustrates the use of the <xref:System.Convert.ChangeType%2A> method.  \n  \n [!code-cpp[convertchangetype#1](~/samples/snippets/cpp/VS_Snippets_CLR/convertchangetype/CPP/convertchangetype.cpp#1)]\n [!code-csharp[convertchangetype#1](~/samples/snippets/csharp/VS_Snippets_CLR/convertchangetype/CS/convertchangetype.cs#1)]\n [!code-vb[convertchangetype#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convertchangetype/VB/convertchangetype.vb#1)]"
  syntax:
    content: public static object ChangeType (object value, Type conversionType);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: conversionType
      type: System.Type
      description: The type of object to return.
    return:
      type: System.Object
      description: "An object whose type is <code>conversionType</code> and whose value is equivalent to <code>value</code>.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>conversionType</code> is not a value type."
  overload: System.Convert.ChangeType*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "This conversion is not supported.  \n  \n -or-  \n  \n <code>value</code> is `null` and <code>conversionType</code> is a value type.  \n  \n -or-  \n  \n <code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in a format recognized by <code>conversionType</code>.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is out of the range of <code>conversionType</code>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>conversionType</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ChangeType(System.Object,System.TypeCode)
  commentId: M:System.Convert.ChangeType(System.Object,System.TypeCode)
  id: ChangeType(System.Object,System.TypeCode)
  parent: System.Convert
  langs:
  - csharp
  name: ChangeType(Object, TypeCode)
  nameWithType: Convert.ChangeType(Object, TypeCode)
  fullName: Convert.ChangeType(Object, TypeCode)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Returns an object of the specified type whose value is equivalent to the specified object.
  remarks: "<xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`. The `value` parameter can be an object of any type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method also requires that conversion of `value` to `typeCode` be supported.  \n  \n The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> method does not support the conversion of `value` to a custom type. To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29> method."
  example:
  - "The following example illustrates how to use the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> method to change an <xref:System.Object> to the type specified by the <xref:System.TypeCode> parameter, if possible.  \n  \n [!code-cpp[System.Convert.ChangeType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype_01.cpp#2)]\n [!code-csharp[System.Convert.ChangeType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype01.cs#2)]\n [!code-vb[System.Convert.ChangeType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype01.vb#2)]"
  syntax:
    content: public static object ChangeType (object value, TypeCode typeCode);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: typeCode
      type: System.TypeCode
      description: The type of object to return.
    return:
      type: System.Object
      description: "An object whose underlying type is <code>typeCode</code> and whose value is equivalent to <code>value</code>.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>typeCode</code> is <xref href=\"System.TypeCode.Empty\"></xref>, <xref href=\"System.TypeCode.String\"></xref>, or <xref href=\"System.TypeCode.Object\"></xref>."
  overload: System.Convert.ChangeType*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "This conversion is not supported.  \n  \n -or-  \n  \n <code>value</code> is `null` and <code>typeCode</code> specifies a value type.  \n  \n -or-  \n  \n <code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in a format recognized by the <code>typeCode</code> type.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is out of the range of the <code>typeCode</code> type.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>typeCode</code> is invalid.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)
  commentId: M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)
  id: ChangeType(System.Object,System.Type,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ChangeType(Object, Type, IFormatProvider)
  nameWithType: Convert.ChangeType(Object, Type, IFormatProvider)
  fullName: Convert.ChangeType(Object, Type, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.
  remarks: "<xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`. The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method requires that conversion of `value` to `conversionType` be supported.  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation. If `value` is a base data type, `provider` is used only for the following conversions:  \n  \n-   Conversion from a number to a string, or from a string to a number. `provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object. However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default \"G\" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer. If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  \n  \n-   Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value. `provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object. If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  \n  \n If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter."
  example:
  - "The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface.  \n  \n [!code-cpp[System.Convert.ChangeType#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype03.cpp#3)]\n [!code-csharp[System.Convert.ChangeType#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype03.cs#3)]\n [!code-vb[System.Convert.ChangeType#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype03.vb#3)]  \n  \n The following example creates an instance of the `Temperature` class and calls the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method to convert it to the basic numeric types supported by the .NET Framework and to a <xref:System.String>. It illustrates that the <xref:System.Convert.ChangeType%2A> method wraps a call to the source type's <xref:System.IConvertible> implementation.  \n  \n [!code-cpp[System.Convert.ChangeType#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype03.cpp#4)]\n [!code-csharp[System.Convert.ChangeType#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype03.cs#4)]\n [!code-vb[System.Convert.ChangeType#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype03.vb#4)]"
  syntax:
    content: public static object ChangeType (object value, Type conversionType, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: conversionType
      type: System.Type
      description: The type of object to return.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Object
      description: "An object whose type is <code>conversionType</code> and whose value is equivalent to <code>value</code>.  \n  \n -or-  \n  \n <code>value</code>, if the <xref href=\"System.Type\"></xref> of <code>value</code> and <code>conversionType</code> are equal.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>conversionType</code> is not a value type."
  overload: System.Convert.ChangeType*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "This conversion is not supported.  \n  \n -or-  \n  \n <code>value</code> is `null` and <code>conversionType</code> is a value type.  \n  \n -or-  \n  \n <code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in a format for <code>conversionType</code> recognized by <code>provider</code>.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is out of the range of <code>conversionType</code>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>conversionType</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)
  commentId: M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)
  id: ChangeType(System.Object,System.TypeCode,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ChangeType(Object, TypeCode, IFormatProvider)
  nameWithType: Convert.ChangeType(Object, TypeCode, IFormatProvider)
  fullName: Convert.ChangeType(Object, TypeCode, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.
  remarks: "<xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`. The `value` parameter can be an object of any type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method also requires that conversion of `value` to `typeCode` be supported.  \n  \n The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method does not support the conversion of `value` to a custom type. To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method.  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation. If `value` is a base data type, `provider` is used only for the following conversions. If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  \n  \n-   Conversion from a number to a string, or from a string to a number. `provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object. However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default \"G\" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer.  \n  \n-   Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value. `provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object.  \n  \n If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter."
  example:
  - "The following example defines a custom format provider named `InterceptProvider` that indicates when its <xref:System.IFormatProvider.GetFormat%2A> method is called and returns a <xref:System.Globalization.NumberFormatInfo> for the fr-FR culture and a <xref:System.Globalization.DateTimeFormatInfo> object for the en-US culture. This format provider is used in all calls to the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method. The example then creates an array with a <xref:System.Double> and a <xref:System.DateTime> value and makes repeated calls to <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> with each value and each member of the <xref:System.TypeCode> enumeration. The example illustrates when the method uses the <xref:System.IFormatProvider> parameter and also illustrates the use of the `provider` parameter to perform culture-sensitive formatting.  \n  \n [!code-cpp[System.Convert.ChangeType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype00.cpp#1)]\n [!code-csharp[System.Convert.ChangeType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype00.cs#1)]\n [!code-vb[System.Convert.ChangeType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype00.vb#1)]"
  syntax:
    content: public static object ChangeType (object value, TypeCode typeCode, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: typeCode
      type: System.TypeCode
      description: The type of object to return.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Object
      description: "An object whose underlying type is <code>typeCode</code> and whose value is equivalent to <code>value</code>.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), if <code>value</code> is `null` and <code>typeCode</code> is <xref href=\"System.TypeCode.Empty\"></xref>, <xref href=\"System.TypeCode.String\"></xref>, or <xref href=\"System.TypeCode.Object\"></xref>."
  overload: System.Convert.ChangeType*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "This conversion is not supported.  \n  \n -or-  \n  \n <code>value</code> is `null` and <code>typeCode</code> specifies a value type.  \n  \n -or-  \n  \n <code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in a format for the <code>typeCode</code> type recognized by <code>provider</code>.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is out of the range of the <code>typeCode</code> type.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>typeCode</code> is invalid.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.DBNull
  commentId: F:System.Convert.DBNull
  id: DBNull
  parent: System.Convert
  langs:
  - csharp
  name: DBNull
  nameWithType: Convert.DBNull
  fullName: Convert.DBNull
  type: Field
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: A constant that represents a database column that is absent of data; that is, database null.
  remarks: "The <xref:System.Convert.DBNull> field is equivalent to <xref:System.DBNull.Value?displayProperty=fullName>, as the following example shows.  \n  \n [!code-csharp[System.Convert.DBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.dbnull/cs/dbnull1.cs#1)]\n [!code-vb[System.Convert.DBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.dbnull/vb/dbnull1.vb#1)]"
  syntax:
    content: public static readonly object DBNull;
    return:
      type: System.Object
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)
  id: FromBase64CharArray(System.Char[],System.Int32,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: FromBase64CharArray(Char[], Int32, Int32)
  nameWithType: Convert.FromBase64CharArray(Char[], Int32, Int32)
  fullName: Convert.FromBase64CharArray(Char[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.
  remarks: "`inArray` is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", lowercase characters \"a\" to \"z\", numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".  \n  \n The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in `inArray` because all white-space characters are ignored.  \n  \n The valueless character, \"=\", is used for trailing padding. The end of `inArray` can consist of zero, one, or two padding characters.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.FromBase64CharArray%2A> method is designed to process a single character array that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class."
  example:
  - "The following example demonstrates the use of the <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to decode UUencoded (base-64) data and save it as binary output.  \n  \n [!code-cpp[System.Convert UUEncodeDecode functions#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CPP/class1.cpp#3)]\n [!code-csharp[System.Convert UUEncodeDecode functions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CS/class1.cs#3)]\n [!code-vb[System.Convert UUEncodeDecode functions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/VB/class1.vb#3)]  \n  \n The following example demonstrates the <xref:System.Convert.ToBase64CharArray%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%2CSystem.Base64FormattingOptions%29> and <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> methods. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits, \"A\", \"A\", \"E\", and \"C\", at the beginning of the output.  \n  \n If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit \"/\" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, \"w\". The last two 6-bit values are padding and correspond to the valueless padding character, \"=\".  \n  \n [!code-cpp[convert.tobase64chararray#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64chararray/CPP/tb64ca.cpp#1)]\n [!code-csharp[convert.tobase64chararray#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64chararray/CS/tb64ca.cs#1)]\n [!code-vb[convert.tobase64chararray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64chararray/VB/tb64ca.vb#1)]"
  syntax:
    content: public static byte[] FromBase64CharArray (char[] inArray, int offset, int length);
    parameters:
    - id: inArray
      type: System.Char[]
      description: A Unicode character array.
    - id: offset
      type: System.Int32
      description: A position within <code>inArray</code>.
    - id: length
      type: System.Int32
      description: The number of elements in <code>inArray</code> to convert.
    return:
      type: System.Byte[]
      description: An array of 8-bit unsigned integers equivalent to <code>length</code> elements at position <code>offset</code> in <code>inArray</code>.
  overload: System.Convert.FromBase64CharArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>inArray</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> or <code>length</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> plus <code>length</code> indicates a position not within <code>inArray</code>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "The length of <code>inArray</code>, ignoring white-space characters, is not zero or a multiple of 4.  \n  \n -or-  \n  \n The format of <code>inArray</code> is invalid. <code>inArray</code> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.FromBase64String(System.String)
  commentId: M:System.Convert.FromBase64String(System.String)
  id: FromBase64String(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: FromBase64String(String)
  nameWithType: Convert.FromBase64String(String)
  fullName: Convert.FromBase64String(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.
  remarks: "`s` is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", lowercase characters \"a\" to \"z\", numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".  \n  \n The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in `s` because all white-space characters are ignored.  \n  \n The valueless character, \"=\", is used for trailing padding. The end of `s` can consist of zero, one, or two padding characters.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.FromBase64String%2A>method is designed to process a single string that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class."
  example:
  - "The following example uses the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to convert a byte array to a UUencoded (base-64) string, and then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to restore the original byte array.  \n  \n [!code-csharp[System.Convert.ToBase64String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String2.cs#1)]\n [!code-vb[System.Convert.ToBase64String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String2.vb#1)]  \n  \n The following is a more complex example that creates a 20-element array of 32-bit integers. It then uses the <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=fullName> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method. This buffer is then passed to the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to create a UUencoded (base-64) string.  It then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to decode the UUencoded string, and calls the <xref:System.BitConverter.ToInt32%2A?displayProperty=fullName> method to convert each set of four bytes (the size of a 32-bit integer) to an integer. The output from the example shows that the original array has been successfully restored.  \n  \n [!code-csharp[System.Convert.ToBase64String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String.cs#2)]\n [!code-vb[System.Convert.ToBase64String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String.vb#2)]"
  syntax:
    content: public static byte[] FromBase64String (string s);
    parameters:
    - id: s
      type: System.String
      description: The string to convert.
    return:
      type: System.Byte[]
      description: An array of 8-bit unsigned integers that is equivalent to <code>s</code>.
  overload: System.Convert.FromBase64String*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "The length of <code>s</code>, ignoring white-space characters, is not zero or a multiple of 4.  \n  \n -or-  \n  \n The format of <code>s</code> is invalid. <code>s</code> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.GetTypeCode(System.Object)
  commentId: M:System.Convert.GetTypeCode(System.Object)
  id: GetTypeCode(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: GetTypeCode(Object)
  nameWithType: Convert.GetTypeCode(Object)
  fullName: Convert.GetTypeCode(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the <xref href="System.TypeCode"></xref> for the specified object.
  syntax:
    content: public static TypeCode GetTypeCode (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    return:
      type: System.TypeCode
      description: The <xref href="System.TypeCode"></xref> for <code>value</code>, or <xref href="System.TypeCode.Empty"></xref> if <code>value</code> is `null`.
  overload: System.Convert.GetTypeCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.IsDBNull(System.Object)
  commentId: M:System.Convert.IsDBNull(System.Object)
  id: IsDBNull(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: IsDBNull(Object)
  nameWithType: Convert.IsDBNull(Object)
  fullName: Convert.IsDBNull(Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Returns an indication whether the specified object is of type <xref href="System.DBNull"></xref>.
  remarks: "The <xref:System.Convert.IsDBNull%2A> method tests whether the `value` parameter is equal to <xref:System.DBNull?displayProperty=fullName>. It is equivalent to the following code:  \n  \n [!code-csharp[System.Convert.IsDBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#1)]\n [!code-vb[System.Convert.IsDBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#1)]  \n  \n> [!NOTE]\n>  <xref:System.DBNull?displayProperty=fullName> is used to indicate a value that is missing. It is not equivalent to `null` or to <xref:System.String.Empty?displayProperty=fullName>. Therefore, code such as `Convert.IsDBNull(null)` in C# or `Convert.IsDBNull(Nothing)` in Visual Basic returns`false`."
  example:
  - "The following example uses a <xref:System.Data.SqlClient.SqlDataReader> object to retrieve survey data from a database. It assigns each row's field values to an array, and then passes each array element to the <xref:System.Convert.IsDBNull%2A> method. If the method returns `true`, the example assigns the string \"NA\" to the array element. The array is then added to the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection of a <xref:System.Windows.Forms.DataGridView?displayProperty=fullName> control.  \n  \n [!code-csharp[System.Convert.IsDBNull#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#2)]\n [!code-vb[System.Convert.IsDBNull#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#2)]"
  syntax:
    content: public static bool IsDBNull (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is of type <xref href="System.DBNull"></xref>; otherwise, `false`.'
  overload: System.Convert.IsDBNull*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  commentId: M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)
  nameWithType: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)
  fullName: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.
  remarks: "The subset of `length` elements of `inArray` starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in `outArray` starting at position `offsetOut`. The return value indicates the number of converted elements in `outArray`. The subset of `outArray` consists of base-64 digits.  \n  \n The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.  \n  \n The `offset` and `length` parameters are 32-bit signed numbers. The `offsetIn` and `offsetOut` parameters are zero-based array positions.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.ToBase64CharArray%2A>method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class."
  example:
  - "The following example demonstrates using the <xref:System.Convert.ToBase64CharArray%2A> method to UUencode (encode in base 64) a binary stream, then save the encoding to a file.  \n  \n [!code-cpp[System.Convert UUEncodeDecode functions#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CPP/class1.cpp#2)]\n [!code-csharp[System.Convert UUEncodeDecode functions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CS/class1.cs#2)]\n [!code-vb[System.Convert UUEncodeDecode functions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/VB/class1.vb#2)]"
  syntax:
    content: public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut);
    parameters:
    - id: inArray
      type: System.Byte[]
      description: An input array of 8-bit unsigned integers.
    - id: offsetIn
      type: System.Int32
      description: A position within <code>inArray</code>.
    - id: length
      type: System.Int32
      description: The number of elements of <code>inArray</code> to convert.
    - id: outArray
      type: System.Char[]
      description: An output array of Unicode characters.
    - id: offsetOut
      type: System.Int32
      description: A position within <code>outArray</code>.
    return:
      type: System.Int32
      description: A 32-bit signed integer containing the number of bytes in <code>outArray</code>.
  overload: System.Convert.ToBase64CharArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>inArray</code> or <code>outArray</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offsetIn</code>, <code>offsetOut</code>, or <code>length</code> is negative.  \n  \n -or-  \n  \n <code>offsetIn</code> plus <code>length</code> is greater than the length of <code>inArray</code>.  \n  \n -or-  \n  \n <code>offsetOut</code> plus the number of elements to return is greater than the length of <code>outArray</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)
  commentId: M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)
  id: ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)
  parent: System.Convert
  langs:
  - csharp
  name: ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32, Base64FormattingOptions)
  nameWithType: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32, Base64FormattingOptions)
  fullName: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32, Base64FormattingOptions)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.
  remarks: "The subset of `length` elements of the `inArray` parameter starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in the `outArray` parameter starting at position `offsetOut`. The return value indicates the number of converted elements in `outArray`. The subset of `outArray` consists of base-64 digits.  \n  \n The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character \"=\" is used for trailing padding.  \n  \n The `offset` and `length` parameters are 32-bit signed numbers. The `offsetIn` and `offsetOut` parameters are zero-based array positions.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.ToBase64CharArray%2A> method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  \n  \n If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/)."
  example:
  - "The following example demonstrates the <xref:System.Convert.ToBase64CharArray%2A> method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits \"A\", \"A\", \"E\", and \"C\" at the beginning of the output.  \n  \n If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit \"/\" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, \"w\". The last two 6-bit values are padding and correspond to the valueless padding character, \"=\".  \n  \n [!code-cpp[convert.tobase64chararray#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64chararray/CPP/tb64ca.cpp#1)]\n [!code-csharp[convert.tobase64chararray#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64chararray/CS/tb64ca.cs#1)]\n [!code-vb[convert.tobase64chararray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64chararray/VB/tb64ca.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, Base64FormattingOptions options);
    parameters:
    - id: inArray
      type: System.Byte[]
      description: An input array of 8-bit unsigned integers.
    - id: offsetIn
      type: System.Int32
      description: A position within <code>inArray</code>.
    - id: length
      type: System.Int32
      description: The number of elements of <code>inArray</code> to convert.
    - id: outArray
      type: System.Char[]
      description: An output array of Unicode characters.
    - id: offsetOut
      type: System.Int32
      description: A position within <code>outArray</code>.
    - id: options
      type: System.Base64FormattingOptions
      description: <xref href="System.Base64FormattingOptions.InsertLineBreaks"></xref> to insert a line break every 76 characters, or <xref href="System.Base64FormattingOptions.None"></xref> to not insert line breaks.
    return:
      type: System.Int32
      description: A 32-bit signed integer containing the number of bytes in <code>outArray</code>.
  overload: System.Convert.ToBase64CharArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>inArray</code> or <code>outArray</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offsetIn</code>, <code>offsetOut</code>, or <code>length</code> is negative.  \n  \n -or-  \n  \n <code>offsetIn</code> plus <code>length</code> is greater than the length of <code>inArray</code>.  \n  \n -or-  \n  \n <code>offsetOut</code> plus the number of elements to return is greater than the length of <code>outArray</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>options</code> is not a valid <xref href="System.Base64FormattingOptions"></xref> value.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)
  commentId: M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)
  id: ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)
  parent: System.Convert
  langs:
  - csharp
  name: ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions)
  nameWithType: Convert.ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions)
  fullName: Convert.ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.
  remarks: "The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64.  \n  \n The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character \"=\" is used for trailing padding.  \n  \n The `offset` and `length` parameters are 32-bit signed numbers. The `offset` parameter is zero-based.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  \n  \n If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/)."
  example:
  - "The following example demonstrates the <xref:System.Convert.ToBase64String%2A> method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits \"A\", \"A\", \"E\", and \"C\" at the beginning of the output.  \n  \n If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit \"/\" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, \"w\". The last two 6-bit values are padding and correspond to the valueless padding character, \"=\".  \n  \n [!code-cpp[convert.tobase64string#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64string/CPP/tb64s.cpp#1)]\n [!code-csharp[convert.tobase64string#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64string/CS/tb64s.cs#1)]\n [!code-vb[convert.tobase64string#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64string/VB/tb64s.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public static string ToBase64String (byte[] inArray, int offset, int length, Base64FormattingOptions options);
    parameters:
    - id: inArray
      type: System.Byte[]
      description: An array of 8-bit unsigned integers.
    - id: offset
      type: System.Int32
      description: An offset in <code>inArray</code>.
    - id: length
      type: System.Int32
      description: The number of elements of <code>inArray</code> to convert.
    - id: options
      type: System.Base64FormattingOptions
      description: <xref href="System.Base64FormattingOptions.InsertLineBreaks"></xref> to insert a line break every 76 characters, or <xref href="System.Base64FormattingOptions.None"></xref> to not insert line breaks.
    return:
      type: System.String
      description: The string representation in base 64 of <code>length</code> elements of <code>inArray</code>, starting at position <code>offset</code>.
  overload: System.Convert.ToBase64String*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>inArray</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> or <code>length</code> is negative.  \n  \n -or-  \n  \n <code>offset</code> plus <code>length</code> is greater than the length of <code>inArray</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>options</code> is not a valid <xref href="System.Base64FormattingOptions"></xref> value.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)
  id: ToBase64String(System.Byte[],System.Int32,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToBase64String(Byte[], Int32, Int32)
  nameWithType: Convert.ToBase64String(Byte[], Int32, Int32)
  fullName: Convert.ToBase64String(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.
  remarks: "The elements of `inArray` are taken as a numeric value and converted to a string representation in base 64.  \n  \n The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.  \n  \n The `offset` and `length` parameters are 32-bit signed numbers. The `offset` parameter is zero-based.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class."
  syntax:
    content: public static string ToBase64String (byte[] inArray, int offset, int length);
    parameters:
    - id: inArray
      type: System.Byte[]
      description: An array of 8-bit unsigned integers.
    - id: offset
      type: System.Int32
      description: An offset in <code>inArray</code>.
    - id: length
      type: System.Int32
      description: The number of elements of <code>inArray</code> to convert.
    return:
      type: System.String
      description: The string representation in base 64 of <code>length</code> elements of <code>inArray</code>, starting at position <code>offset</code>.
  overload: System.Convert.ToBase64String*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>inArray</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> or <code>length</code> is negative.  \n  \n -or-  \n  \n <code>offset</code> plus <code>length</code> is greater than the length of <code>inArray</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBase64String(System.Byte[])
  commentId: M:System.Convert.ToBase64String(System.Byte[])
  id: ToBase64String(System.Byte[])
  parent: System.Convert
  langs:
  - csharp
  name: ToBase64String(Byte[])
  nameWithType: Convert.ToBase64String(Byte[])
  fullName: Convert.ToBase64String(Byte[])
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.
  remarks: "The elements of `inArray` are taken as a numeric value and converted to a string representation that is encoded with base-64 digits.  \n  \n The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  \n  \n Ordinarily, the <xref:System.Convert.ToBase64String%2A> method is not used to round-trip a  UUEncoded (base-64 encoded) string.  That is, if you decode a string by calling the <xref:System.Convert.FromBase64String%2A> method, then encode the returned byte array by calling the <xref:System.Convert.ToBase64String%2A> method, the resulting string will not necessarily be identical to the original string. The string will round-trip only if the original string is a valid base-64 encoded string."
  example:
  - "The following example uses the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to convert a byte array to a UUencoded (base-64) string, and then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to restore the original byte array.  \n  \n [!code-csharp[System.Convert.ToBase64String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String2.cs#1)]\n [!code-vb[System.Convert.ToBase64String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String2.vb#1)]  \n  \n The following is a more complex example that creates a 20-element array of 32-bit integers. It then uses the <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=fullName> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method. This buffer is then passed to the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to create a UUencoded (base-64) string.  It then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to decode the UUencoded string, and calls the <xref:System.BitConverter.ToInt32%2A?displayProperty=fullName> method to convert each set of four bytes (the size of a 32-bit integer) to an integer. The output from the example shows that the original array has been successfully restored.  \n  \n [!code-csharp[System.Convert.ToBase64String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String.cs#2)]\n [!code-vb[System.Convert.ToBase64String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String.vb#2)]"
  syntax:
    content: public static string ToBase64String (byte[] inArray);
    parameters:
    - id: inArray
      type: System.Byte[]
      description: An array of 8-bit unsigned integers.
    return:
      type: System.String
      description: The string representation, in base 64, of the contents of <code>inArray</code>.
  overload: System.Convert.ToBase64String*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>inArray</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)
  commentId: M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)
  id: ToBase64String(System.Byte[],System.Base64FormattingOptions)
  parent: System.Convert
  langs:
  - csharp
  name: ToBase64String(Byte[], Base64FormattingOptions)
  nameWithType: Convert.ToBase64String(Byte[], Base64FormattingOptions)
  fullName: Convert.ToBase64String(Byte[], Base64FormattingOptions)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value.
  remarks: "The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64.  \n  \n The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character \"=\" is used for trailing padding.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  \n  \n If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). Because line breaks are considered whitespace characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array. The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window. For more information, see RFC 2045, \"Multipurpose Internet Mail Extensions\", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/)."
  example:
  - "The following example calls the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%2CSystem.Base64FormattingOptions%29?displayProperty=fullName> with a <xref:System.Base64FormattingOptions?displayProperty=fullName> argument to insert line breaks in the string that is produced by encoding a 100-element byte array.  \n  \n [!code-csharp[System.Convert.ToBase64String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String3.cs#3)]\n [!code-vb[System.Convert.ToBase64String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String3.vb#3)]  \n  \n As the output from the example shows, the <xref:System.Convert.FromBase64String%2A?displayProperty=fullName> succeeds in restoring the original byte array; the line break characters are ignored during the conversion."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public static string ToBase64String (byte[] inArray, Base64FormattingOptions options);
    parameters:
    - id: inArray
      type: System.Byte[]
      description: An array of 8-bit unsigned integers.
    - id: options
      type: System.Base64FormattingOptions
      description: <xref href="System.Base64FormattingOptions.InsertLineBreaks"></xref> to insert a line break every 76 characters, or <xref href="System.Base64FormattingOptions.None"></xref> to not insert line breaks.
    return:
      type: System.String
      description: The string representation in base 64 of the elements in <code>inArray</code>.
  overload: System.Convert.ToBase64String*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>inArray</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>options</code> is not a valid <xref href="System.Base64FormattingOptions"></xref> value.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.SByte)
  commentId: M:System.Convert.ToBoolean(System.SByte)
  id: ToBoolean(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(SByte)
  nameWithType: Convert.ToBoolean(SByte)
  fullName: Convert.ToBoolean(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.SByte> values to <xref:System.Boolean> values.  \n  \n [!code-cpp[System.Convert.ToBoolean#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#6)]\n [!code-csharp[System.Convert.ToBoolean#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#6)]\n [!code-vb[System.Convert.ToBoolean#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#6)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool ToBoolean (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'
  overload: System.Convert.ToBoolean*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToBoolean(System.String,System.IFormatProvider)
  id: ToBoolean(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(String, IFormatProvider)
  nameWithType: Convert.ToBoolean(String, IFormatProvider)
  fullName: Convert.ToBoolean(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.
  remarks: If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.
  syntax:
    content: public static bool ToBoolean (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the value of either <xref href="System.Boolean.TrueString"></xref> or <xref href="System.Boolean.FalseString"></xref>.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information. This parameter is ignored.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> equals <xref href="System.Boolean.TrueString"></xref>, or `false` if <code>value</code> equals <xref href="System.Boolean.FalseString"></xref> or `null`.'
  overload: System.Convert.ToBoolean*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not equal to <xref href="System.Boolean.TrueString"></xref> or <xref href="System.Boolean.FalseString"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)
  id: ToBoolean(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(Object, IFormatProvider)
  nameWithType: Convert.ToBoolean(Object, IFormatProvider)
  fullName: Convert.ToBoolean(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.
  remarks: '`provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore the `provider` parameter; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.'
  example:
  - "The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29> method. This method returns `true` if any of the non-discarded array values are non-zero. The <xref:System.IFormatProvider> object determines how elements are discarded for this calculation.  \n  \n [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]\n [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]\n [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]"
  syntax:
    content: public static bool ToBoolean (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Boolean
      description: '`true` or `false`, which reflects the value returned by invoking the <xref href="System.IConvertible.ToBoolean(System.IFormatProvider)"></xref> method for the underlying type of <code>value</code>. If <code>value</code> is `null`, the method returns `false`.'
  overload: System.Convert.ToBoolean*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is a string that does not equal <xref href="System.Boolean.TrueString"></xref> or <xref href="System.Boolean.FalseString"></xref>.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion of <code>value</code> to a <xref href=\"System.Boolean\"></xref> is not supported."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.UInt64)
  commentId: M:System.Convert.ToBoolean(System.UInt64)
  id: ToBoolean(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(UInt64)
  nameWithType: Convert.ToBoolean(UInt64)
  fullName: Convert.ToBoolean(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.UInt64> values to <xref:System.Boolean> values.  \n  \n [!code-cpp[System.Convert.ToBoolean#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#10)]\n [!code-csharp[System.Convert.ToBoolean#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#10)]\n [!code-vb[System.Convert.ToBoolean#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#10)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool ToBoolean (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'
  overload: System.Convert.ToBoolean*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.UInt32)
  commentId: M:System.Convert.ToBoolean(System.UInt32)
  id: ToBoolean(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(UInt32)
  nameWithType: Convert.ToBoolean(UInt32)
  fullName: Convert.ToBoolean(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.Int32> values to <xref:System.Boolean> values.  \n  \n [!code-cpp[System.Convert.ToBoolean#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#9)]\n [!code-csharp[System.Convert.ToBoolean#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#9)]\n [!code-vb[System.Convert.ToBoolean#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool ToBoolean (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'
  overload: System.Convert.ToBoolean*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.UInt16)
  commentId: M:System.Convert.ToBoolean(System.UInt16)
  id: ToBoolean(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(UInt16)
  nameWithType: Convert.ToBoolean(UInt16)
  fullName: Convert.ToBoolean(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.UInt16> values to <xref:System.Boolean> values.  \n  \n [!code-cpp[System.Convert.ToBoolean#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#8)]\n [!code-csharp[System.Convert.ToBoolean#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#8)]\n [!code-vb[System.Convert.ToBoolean#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#8)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool ToBoolean (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'
  overload: System.Convert.ToBoolean*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.String)
  commentId: M:System.Convert.ToBoolean(System.String)
  id: ToBoolean(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(String)
  nameWithType: Convert.ToBoolean(String)
  fullName: Convert.ToBoolean(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a logical value to its Boolean equivalent.
  remarks: "For a successful conversion to occur, the `value` parameter must equal either <xref:System.Boolean.TrueString?displayProperty=fullName>, a constant whose value is `True`, <xref:System.Boolean.FalseString?displayProperty=fullName>, a constant whose value is `False`, or it must be `null`. In comparing `value` with <xref:System.Boolean?displayProperty=fullName> and <xref:System.Boolean?displayProperty=fullName>, the method ignores case as well as leading and trailing white space.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example uses the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=fullName> method to convert various strings to Boolean values.  \n  \n [!code-cpp[System.Convert.ToBoolean#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean1.cpp#1)]\n [!code-csharp[System.Convert.ToBoolean#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/ToBoolean1.cs#1)]\n [!code-vb[System.Convert.ToBoolean#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/ToBoolean1.vb#1)]"
  syntax:
    content: public static bool ToBoolean (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the value of either <xref href="System.Boolean.TrueString"></xref> or <xref href="System.Boolean.FalseString"></xref>.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> equals <xref href="System.Boolean.TrueString"></xref>, or `false` if <code>value</code> equals <xref href="System.Boolean.FalseString"></xref> or `null`.'
  overload: System.Convert.ToBoolean*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not equal to <xref href="System.Boolean.TrueString"></xref> or <xref href="System.Boolean.FalseString"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.Single)
  commentId: M:System.Convert.ToBoolean(System.Single)
  id: ToBoolean(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(Single)
  nameWithType: Convert.ToBoolean(Single)
  fullName: Convert.ToBoolean(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.Single> values to <xref:System.Boolean> values.  \n  \n [!code-cpp[System.Convert.ToBoolean#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#7)]\n [!code-csharp[System.Convert.ToBoolean#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#7)]\n [!code-vb[System.Convert.ToBoolean#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#7)]"
  syntax:
    content: public static bool ToBoolean (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to convert.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'
  overload: System.Convert.ToBoolean*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.Object)
  commentId: M:System.Convert.ToBoolean(System.Object)
  id: ToBoolean(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(Object)
  nameWithType: Convert.ToBoolean(Object)
  fullName: Convert.ToBoolean(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of a specified object to an equivalent Boolean value.
  remarks: ''
  example:
  - "The following example converts an array of object values to <xref:System.Boolean> values.  \n  \n [!code-cpp[System.Convert.ToBoolean#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#11)]\n [!code-csharp[System.Convert.ToBoolean#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#11)]\n [!code-vb[System.Convert.ToBoolean#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#11)]"
  syntax:
    content: public static bool ToBoolean (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.Boolean
      description: '`true` or `false`, which reflects the value returned by invoking the <xref href="System.IConvertible.ToBoolean(System.IFormatProvider)"></xref> method for the underlying type of <code>value</code>. If <code>value</code> is `null`, the method returns `false`.'
  overload: System.Convert.ToBoolean*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is a string that does not equal <xref href="System.Boolean.TrueString"></xref> or <xref href="System.Boolean.FalseString"></xref>.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion of <code>value</code> to a <xref href=\"System.Boolean\"></xref> is not supported."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.Double)
  commentId: M:System.Convert.ToBoolean(System.Double)
  id: ToBoolean(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(Double)
  nameWithType: Convert.ToBoolean(Double)
  fullName: Convert.ToBoolean(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.
  remarks: ''
  example:
  - "The following example converts a Boolean to a <xref:System.Double> and a <xref:System.Double> to a Boolean value.  \n  \n [!code-cpp[System.Convert Snippets#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#1)]\n [!code-csharp[System.Convert Snippets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#1)]\n [!code-vb[System.Convert Snippets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#1)]"
  syntax:
    content: public static bool ToBoolean (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'
  overload: System.Convert.ToBoolean*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.Int32)
  commentId: M:System.Convert.ToBoolean(System.Int32)
  id: ToBoolean(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(Int32)
  nameWithType: Convert.ToBoolean(Int32)
  fullName: Convert.ToBoolean(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.Int32> values to <xref:System.Boolean> values.  \n  \n [!code-cpp[System.Convert.ToBoolean#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#4)]\n [!code-csharp[System.Convert.ToBoolean#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#4)]\n [!code-vb[System.Convert.ToBoolean#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#4)]"
  syntax:
    content: public static bool ToBoolean (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'
  overload: System.Convert.ToBoolean*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.Int16)
  commentId: M:System.Convert.ToBoolean(System.Int16)
  id: ToBoolean(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(Int16)
  nameWithType: Convert.ToBoolean(Int16)
  fullName: Convert.ToBoolean(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.Int16> values to <xref:System.Boolean> values.  \n  \n [!code-cpp[System.Convert.ToBoolean#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#3)]\n [!code-csharp[System.Convert.ToBoolean#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#3)]\n [!code-vb[System.Convert.ToBoolean#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#3)]"
  syntax:
    content: public static bool ToBoolean (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'
  overload: System.Convert.ToBoolean*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.Decimal)
  commentId: M:System.Convert.ToBoolean(System.Decimal)
  id: ToBoolean(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(Decimal)
  nameWithType: Convert.ToBoolean(Decimal)
  fullName: Convert.ToBoolean(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to an equivalent Boolean value.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.Decimal> values to <xref:System.Boolean> values.  \n  \n [!code-cpp[System.Convert.ToBoolean#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#2)]\n [!code-csharp[System.Convert.ToBoolean#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#2)]\n [!code-vb[System.Convert.ToBoolean#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#2)]"
  syntax:
    content: public static bool ToBoolean (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The number to convert.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'
  overload: System.Convert.ToBoolean*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.DateTime)
  commentId: M:System.Convert.ToBoolean(System.DateTime)
  id: ToBoolean(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(DateTime)
  nameWithType: Convert.ToBoolean(DateTime)
  fullName: Convert.ToBoolean(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  remarks: ''
  example:
  - "The following example demonstrates that an attempt to convert a <xref:System.DateTime> value to a Boolean type throws <xref:System.InvalidCastException>.  \n  \n [!code-cpp[System.Convert Snippets#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#20)]\n [!code-csharp[System.Convert Snippets#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#20)]\n [!code-vb[System.Convert Snippets#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#20)]"
  syntax:
    content: public static bool ToBoolean (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.Boolean
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToBoolean*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.Char)
  commentId: M:System.Convert.ToBoolean(System.Char)
  id: ToBoolean(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(Char)
  nameWithType: Convert.ToBoolean(Char)
  fullName: Convert.ToBoolean(Char)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static bool ToBoolean (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Boolean
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToBoolean*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.Byte)
  commentId: M:System.Convert.ToBoolean(System.Byte)
  id: ToBoolean(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(Byte)
  nameWithType: Convert.ToBoolean(Byte)
  fullName: Convert.ToBoolean(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.Byte> values to <xref:System.Boolean> values.  \n  \n [!code-cpp[System.Convert.ToBoolean#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#12)]\n [!code-csharp[System.Convert.ToBoolean#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#12)]\n [!code-vb[System.Convert.ToBoolean#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#12)]"
  syntax:
    content: public static bool ToBoolean (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'
  overload: System.Convert.ToBoolean*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.Boolean)
  commentId: M:System.Convert.ToBoolean(System.Boolean)
  id: ToBoolean(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(Boolean)
  nameWithType: Convert.ToBoolean(Boolean)
  fullName: Convert.ToBoolean(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the specified Boolean value; no actual conversion is performed.
  syntax:
    content: public static bool ToBoolean (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to return.
    return:
      type: System.Boolean
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToBoolean*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToBoolean(System.Int64)
  commentId: M:System.Convert.ToBoolean(System.Int64)
  id: ToBoolean(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToBoolean(Int64)
  nameWithType: Convert.ToBoolean(Int64)
  fullName: Convert.ToBoolean(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.Int64> values to <xref:System.Boolean> values.  \n  \n [!code-cpp[System.Convert.ToBoolean#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#5)]\n [!code-csharp[System.Convert.ToBoolean#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#5)]\n [!code-vb[System.Convert.ToBoolean#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#5)]"
  syntax:
    content: public static bool ToBoolean (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is not zero; otherwise, `false`.'
  overload: System.Convert.ToBoolean*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.String)
  commentId: M:System.Convert.ToByte(System.String)
  id: ToByte(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(String)
  nameWithType: Convert.ToByte(String)
  fullName: Convert.ToByte(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.
  remarks: "Using the <xref:System.Convert.ToByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.Byte.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example defines a string array and attempts to convert each string to a <xref:System.Byte>.  Note that while a `null` string parses to zero, <xref:System.String.Empty?displayProperty=fullName> throws a <xref:System.FormatException>. Also note that while leading and trailing spaces parse successfully, formatting symbols, such as currency symbols, group separators, or decimal separators, do not.  \n  \n [!code-csharp[System.Convert.ToByte#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/ToByte5.cs#15)]\n [!code-vb[System.Convert.ToByte#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte5.vb#15)]"
  syntax:
    content: public static byte ToByte (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Byte.MinValue"></xref> or greater than <xref href="System.Byte.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.UInt16)
  commentId: M:System.Convert.ToByte(System.UInt16)
  id: ToByte(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(UInt16)
  nameWithType: Convert.ToByte(UInt16)
  fullName: Convert.ToByte(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts an array of unsigned 16-bit integers to <xref:System.Byte> values.  \n  \n [!code-csharp[System.Convert.ToByte#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#8)]\n [!code-vb[System.Convert.ToByte#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#8)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static byte ToByte (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Byte.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.UInt32)
  commentId: M:System.Convert.ToByte(System.UInt32)
  id: ToByte(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(UInt32)
  nameWithType: Convert.ToByte(UInt32)
  fullName: Convert.ToByte(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts an array of unsigned integers to <xref:System.Byte> values.  \n  \n [!code-csharp[System.Convert.ToByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#9)]\n [!code-vb[System.Convert.ToByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static byte ToByte (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Byte.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.String,System.Int32)
  commentId: M:System.Convert.ToByte(System.String,System.Int32)
  id: ToByte(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(String, Int32)
  nameWithType: Convert.ToByte(String, Int32)
  fullName: Convert.ToByte(String, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.
  remarks: "If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the <xref:System.Byte> data type supports unsigned values only, the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all eight bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed byte value that is out of the range of the <xref:System.Byte> data type is converted to a <xref:System.Byte> value without the method throwing an exception. The following example converts <xref:System.SByte.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x80 converts to 128.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#3)]\n [!code-vb[System.Convert.BaseConversion#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#3)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <xref:System.Byte> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value back to a <xref:System.Byte> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two's complement instead of unsigned binary representation), the method throws an exception.  \n  \n [!code-csharp[System.Convert.BaseConversion#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#4)]\n [!code-vb[System.Convert.BaseConversion#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#4)]"
  example:
  - "The following example alternately attempts to interpret an array of strings as the representation of binary, octal, decimal, and hexadecimal values.  \n  \n [!code-csharp[System.Convert.ToByte#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte2.cs#11)]\n [!code-vb[System.Convert.ToByte#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte2.vb#11)]"
  syntax:
    content: public static byte ToByte (string value, int fromBase);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: fromBase
      type: System.Int32
      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>value</code> is <xref href="System.String.Empty"></xref>.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>value</code>, which represents a base 10 unsigned number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.Byte.MinValue\"></xref> or greater than <xref href=\"System.Byte.MaxValue\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToByte(System.Object,System.IFormatProvider)
  id: ToByte(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(Object, IFormatProvider)
  nameWithType: Convert.ToByte(Object, IFormatProvider)
  fullName: Convert.ToByte(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.
  remarks: '`provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.'
  example:
  - "The following example defines a `ByteString` class that implements the <xref:System.IConvertible> interface. The class stores the string representation of a byte value along with a sign field, so that it is able to represent both signed and unsigned byte values.  \n  \n [!code-csharp[System.Convert.ToByte#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte3.cs#12)]\n [!code-vb[System.Convert.ToByte#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte3.vb#12)]  \n  \n The following example instantiates several `ByteString` objects and calls the <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> method to convert them to byte values. It illustrates that the <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> method wraps a call to the <xref:System.IConvertible.ToByte%2A?displayProperty=fullName> method of the object to be converted.  \n  \n [!code-csharp[System.Convert.ToByte#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte3.cs#13)]\n [!code-vb[System.Convert.ToByte#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte3.vb#13)]"
  syntax:
    content: public static byte ToByte (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in the property format for a <xref href="System.Byte"></xref> value.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>.  \n  \n -or-  \n  \n Conversion from <code>value</code> to the <xref href=\"System.Byte\"></xref> type is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Byte.MinValue"></xref> or greater than <xref href="System.Byte.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToByte(System.String,System.IFormatProvider)
  id: ToByte(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(String, IFormatProvider)
  nameWithType: Convert.ToByte(String, IFormatProvider)
  fullName: Convert.ToByte(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.
  remarks: "`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example creates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the positive sign as \"pos\" and the negative sign as \"neg\", which it uses in calls to the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> method. It then calls the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> method repeatedly to convert each element in a string array to a <xref:System.Byte> value.  \n  \n [!code-csharp[System.Convert.ToByte#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte4.cs#14)]\n [!code-vb[System.Convert.ToByte#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte4.vb#14)]"
  syntax:
    content: public static byte ToByte (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Byte.MinValue"></xref> or greater than <xref href="System.Byte.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.Single)
  commentId: M:System.Convert.ToByte(System.Single)
  id: ToByte(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(Single)
  nameWithType: Convert.ToByte(Single)
  fullName: Convert.ToByte(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts a <xref:System.Single> value to a <xref:System.Byte>.  \n  \n [!code-cpp[System.Convert Snippets#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#19)]\n [!code-csharp[System.Convert Snippets#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#19)]\n [!code-vb[System.Convert Snippets#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#19)]"
  syntax:
    content: public static byte ToByte (float value);
    parameters:
    - id: value
      type: System.Single
      description: A single-precision floating-point number.
    return:
      type: System.Byte
      description: <code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Byte.MaxValue"></xref> or less than <xref href="System.Byte.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.UInt64)
  commentId: M:System.Convert.ToByte(System.UInt64)
  id: ToByte(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(UInt64)
  nameWithType: Convert.ToByte(UInt64)
  fullName: Convert.ToByte(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts an array of unsigned long integers to <xref:System.Byte> values.  \n  \n [!code-csharp[System.Convert.ToByte#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#10)]\n [!code-vb[System.Convert.ToByte#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#10)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static byte ToByte (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Byte.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.SByte)
  commentId: M:System.Convert.ToByte(System.SByte)
  id: ToByte(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(SByte)
  nameWithType: Convert.ToByte(SByte)
  fullName: Convert.ToByte(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.SByte> values to <xref:System.Byte> values.  \n  \n [!code-csharp[System.Convert.ToByte#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#7)]\n [!code-vb[System.Convert.ToByte#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#7)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static byte ToByte (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to be converted.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than <xref href="System.Byte.MinValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.Int16)
  commentId: M:System.Convert.ToByte(System.Int16)
  id: ToByte(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(Int16)
  nameWithType: Convert.ToByte(Int16)
  fullName: Convert.ToByte(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.Int16> values to <xref:System.Byte> values.  \n  \n [!code-csharp[System.Convert.ToByte#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#3)]\n [!code-vb[System.Convert.ToByte#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#3)]"
  syntax:
    content: public static byte ToByte (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than <xref href="System.Byte.MinValue"></xref> or greater than <xref href="System.Byte.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.Int64)
  commentId: M:System.Convert.ToByte(System.Int64)
  id: ToByte(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(Int64)
  nameWithType: Convert.ToByte(Int64)
  fullName: Convert.ToByte(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.Int64> values to <xref:System.Byte> values.  \n  \n [!code-csharp[System.Convert.ToByte#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#5)]\n [!code-vb[System.Convert.ToByte#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#5)]"
  syntax:
    content: public static byte ToByte (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than <xref href="System.Byte.MinValue"></xref> or greater than <xref href="System.Byte.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.Byte)
  commentId: M:System.Convert.ToByte(System.Byte)
  id: ToByte(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(Byte)
  nameWithType: Convert.ToByte(Byte)
  fullName: Convert.ToByte(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the specified 8-bit unsigned integer; no actual conversion is performed.
  syntax:
    content: public static byte ToByte (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to return.
    return:
      type: System.Byte
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToByte*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.Char)
  commentId: M:System.Convert.ToByte(System.Char)
  id: ToByte(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(Char)
  nameWithType: Convert.ToByte(Char)
  fullName: Convert.ToByte(Char)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.
  remarks: This method returns an unsigned byte value that represents the numeric code of the <xref:System.Char> object passed to it. In the .NET Framework, a <xref:System.Char> object is a 16-bit value. This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.
  example:
  - "The following example converts an array of <xref:System.Char> values to <xref:System.Byte> values.  \n  \n [!code-csharp[System.Convert.ToByte#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#2)]\n [!code-vb[System.Convert.ToByte#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#2)]"
  syntax:
    content: public static byte ToByte (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is greater than <xref href="System.Byte.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.DateTime)
  commentId: M:System.Convert.ToByte(System.DateTime)
  id: ToByte(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(DateTime)
  nameWithType: Convert.ToByte(DateTime)
  fullName: Convert.ToByte(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static byte ToByte (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.Byte
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.Boolean)
  commentId: M:System.Convert.ToByte(System.Boolean)
  id: ToByte(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(Boolean)
  nameWithType: Convert.ToByte(Boolean)
  fullName: Convert.ToByte(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to the equivalent 8-bit unsigned integer.
  remarks: ''
  example:
  - "The following example illustrates the conversion of <xref:System.Boolean> to <xref:System.Byte> values.  \n  \n [!code-cpp[System.Convert.ToByte#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.tobyte/cpp/tobyte1.cpp#1)]\n [!code-csharp[System.Convert.ToByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#1)]\n [!code-vb[System.Convert.ToByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#1)]"
  syntax:
    content: public static byte ToByte (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.Byte
      description: The number 1 if <code>value</code> is `true`; otherwise, 0.
  overload: System.Convert.ToByte*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.Double)
  commentId: M:System.Convert.ToByte(System.Double)
  id: ToByte(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(Double)
  nameWithType: Convert.ToByte(Double)
  fullName: Convert.ToByte(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts a <xref:System.Byte> value to a <xref:System.Double> and a <xref:System.Double> value to a <xref:System.Byte>.  \n  \n [!code-cpp[System.Convert Snippets#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#2)]\n [!code-csharp[System.Convert Snippets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#2)]\n [!code-vb[System.Convert Snippets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#2)]"
  syntax:
    content: public static byte ToByte (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.Byte
      description: <code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Byte.MaxValue"></xref> or less than <xref href="System.Byte.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.Int32)
  commentId: M:System.Convert.ToByte(System.Int32)
  id: ToByte(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(Int32)
  nameWithType: Convert.ToByte(Int32)
  fullName: Convert.ToByte(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts an array of <xref:System.Int32> values to <xref:System.Byte> values.  \n  \n [!code-csharp[System.Convert.ToByte#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#4)]\n [!code-vb[System.Convert.ToByte#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#4)]"
  syntax:
    content: public static byte ToByte (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than <xref href="System.Byte.MinValue"></xref> or greater than <xref href="System.Byte.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.Decimal)
  commentId: M:System.Convert.ToByte(System.Decimal)
  id: ToByte(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(Decimal)
  nameWithType: Convert.ToByte(Decimal)
  fullName: Convert.ToByte(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.
  remarks: "The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> and a <xref:System.Decimal> value to a <xref:System.Byte>.  \n  \n [!code-cpp[System.Convert Snippets#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)]\n [!code-csharp[System.Convert Snippets#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)]\n [!code-vb[System.Convert Snippets#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)]"
  syntax:
    content: public static byte ToByte (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The number to convert.
    return:
      type: System.Byte
      description: <code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Byte.MaxValue"></xref> or less than <xref href="System.Byte.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToByte(System.Object)
  commentId: M:System.Convert.ToByte(System.Object)
  id: ToByte(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToByte(Object)
  nameWithType: Convert.ToByte(Object)
  fullName: Convert.ToByte(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to an 8-bit unsigned integer.
  remarks: If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToByte%2A?displayProperty=fullName>implementation of the underlying type of `value`.
  example:
  - "The following example uses the <xref:System.Convert.ToByte%28System.Object%29> method to convert an array of objects to <xref:System.Byte> values.  \n  \n [!code-csharp[System.Convert.ToByte#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#6)]\n [!code-vb[System.Convert.ToByte#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#6)]"
  syntax:
    content: public static byte ToByte (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.Byte
      description: An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToByte*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in the property format for a <xref href="System.Byte"></xref> value.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement <xref href=\"System.IConvertible\"></xref>.  \n  \n -or-  \n  \n Conversion from <code>value</code> to the <xref href=\"System.Byte\"></xref> type is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Byte.MinValue"></xref> or greater than <xref href="System.Byte.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToChar(System.String,System.IFormatProvider)
  id: ToChar(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(String, IFormatProvider)
  nameWithType: Convert.ToChar(String, IFormatProvider)
  fullName: Convert.ToChar(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.
  remarks: "`value` must be a string that contains a single character.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example converts a string representation of a <xref:System.Char> value with the `ToChar` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called. The example shows that the format provider is not referenced.  \n  \n [!code-cpp[System.Convert.ToNonNum_String#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/CPP/stringnonnum.cpp#2)]\n [!code-csharp[System.Convert.ToNonNum_String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/CS/stringnonnum.cs#2)]\n [!code-vb[System.Convert.ToNonNum_String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/VB/stringnonnum.vb#2)]"
  syntax:
    content: public static char ToChar (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string of length 1 or `null`.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information. This parameter is ignored.
    return:
      type: System.Char
      description: A Unicode character that is equivalent to the first and only character in <code>value</code>.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: The length of <code>value</code> is not 1.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.Object)
  commentId: M:System.Convert.ToChar(System.Object)
  id: ToChar(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(Object)
  nameWithType: Convert.ToChar(Object)
  fullName: Convert.ToChar(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a Unicode character.
  remarks: If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToChar%2A?displayProperty=fullName>implementation of the underlying type of `value`.
  example:
  - "The following example attempts to convert each element in an object array to a <xref:System.Char> value.  \n  \n [!code-csharp[System.Convert.ToChar#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#9)]\n [!code-vb[System.Convert.ToChar#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#9)]"
  syntax:
    content: public static char ToChar (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    return:
      type: System.Char
      description: A Unicode character that is equivalent to value, or <xref href="System.Char.MinValue"></xref> if <code>value</code> is `null`.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is a null string.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion of <code>value</code> to a <xref href=\"System.Char\"></xref> is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than <xref href="System.Char.MinValue"></xref> or greater than <xref href="System.Char.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToChar(System.Object,System.IFormatProvider)
  id: ToChar(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(Object, IFormatProvider)
  nameWithType: Convert.ToChar(Object, IFormatProvider)
  fullName: Convert.ToChar(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.IConvertible.ToChar%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."
  example:
  - "The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToChar` method. This method returns a character whose Unicode value is the average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  \n  \n [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]\n [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]\n [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]"
  syntax:
    content: public static char ToChar (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Char
      description: A Unicode character that is equivalent to <code>value</code>, or <xref href="System.Char.MinValue"></xref> if <code>value</code> is `null`.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is a null string.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion of <code>value</code> to a <xref href=\"System.Char\"></xref> is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than <xref href="System.Char.MinValue"></xref> or greater than <xref href="System.Char.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.UInt64)
  commentId: M:System.Convert.ToChar(System.UInt64)
  id: ToChar(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(UInt64)
  nameWithType: Convert.ToChar(UInt64)
  fullName: Convert.ToChar(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.
  remarks: ''
  example:
  - "The following example converts each element in an array of unsigned long integers to a <xref:System.Char> value.  \n  \n [!code-csharp[System.Convert.ToChar#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#8)]\n [!code-vb[System.Convert.ToChar#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#8)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static char ToChar (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.Char
      description: A Unicode character that is equivalent to <code>value</code>.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Char.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.UInt32)
  commentId: M:System.Convert.ToChar(System.UInt32)
  id: ToChar(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(UInt32)
  nameWithType: Convert.ToChar(UInt32)
  fullName: Convert.ToChar(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.
  remarks: ''
  example:
  - "The following example converts each element in an array of unsigned integers to a <xref:System.Char> value.  \n  \n [!code-csharp[System.Convert.ToChar#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#7)]\n [!code-vb[System.Convert.ToChar#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#7)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static char ToChar (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.Char
      description: A Unicode character that is equivalent to <code>value</code>.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Char.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.UInt16)
  commentId: M:System.Convert.ToChar(System.UInt16)
  id: ToChar(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(UInt16)
  nameWithType: Convert.ToChar(UInt16)
  fullName: Convert.ToChar(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.
  remarks: ''
  example:
  - "The following example converts each element in an array of unsigned 16-bit integers to a <xref:System.Char> value.  \n  \n [!code-csharp[System.Convert.ToChar#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#6)]\n [!code-vb[System.Convert.ToChar#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#6)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static char ToChar (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.Char
      description: A Unicode character that is equivalent to <code>value</code>.
  overload: System.Convert.ToChar*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.String)
  commentId: M:System.Convert.ToChar(System.String)
  id: ToChar(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(String)
  nameWithType: Convert.ToChar(String)
  fullName: Convert.ToChar(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the first character of a specified string to a Unicode character.
  remarks: "`value` must be a string that contains a single character.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example converts each element in a string array to a <xref:System.Char> value.  \n  \n [!code-csharp[System.Convert.ToChar#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#5)]\n [!code-vb[System.Convert.ToChar#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#5)]"
  syntax:
    content: public static char ToChar (string value);
    parameters:
    - id: value
      type: System.String
      description: A string of length 1.
    return:
      type: System.Char
      description: A Unicode character that is equivalent to the first and only character in <code>value</code>.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: The length of <code>value</code> is not 1.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.Single)
  commentId: M:System.Convert.ToChar(System.Single)
  id: ToChar(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(Single)
  nameWithType: Convert.ToChar(Single)
  fullName: Convert.ToChar(Single)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static char ToChar (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to convert.
    return:
      type: System.Char
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.SByte)
  commentId: M:System.Convert.ToChar(System.SByte)
  id: ToChar(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(SByte)
  nameWithType: Convert.ToChar(SByte)
  fullName: Convert.ToChar(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.
  remarks: ''
  example:
  - "The following example converts an array of signed bytes to <xref:System.Char> values.  \n  \n [!code-csharp[System.Convert.ToChar#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#4)]\n [!code-vb[System.Convert.ToChar#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#4)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static char ToChar (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.Char
      description: A Unicode character that is equivalent to <code>value</code>.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than <xref href="System.Char.MinValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.Int64)
  commentId: M:System.Convert.ToChar(System.Int64)
  id: ToChar(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(Int64)
  nameWithType: Convert.ToChar(Int64)
  fullName: Convert.ToChar(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.
  remarks: ''
  example:
  - "The following example attempts to convert a long integer to a <xref:System.Char>, and throws a <xref:System.OverflowException> on failure.  \n  \n [!code-cpp[System.Convert Snippets#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#8)]\n [!code-csharp[System.Convert Snippets#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#8)]\n [!code-vb[System.Convert Snippets#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#8)]"
  syntax:
    content: public static char ToChar (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.Char
      description: A Unicode character that is equivalent to <code>value</code>.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than <xref href="System.Char.MinValue"></xref> or greater than <xref href="System.Char.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.Int16)
  commentId: M:System.Convert.ToChar(System.Int16)
  id: ToChar(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(Int16)
  nameWithType: Convert.ToChar(Int16)
  fullName: Convert.ToChar(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.
  remarks: ''
  example:
  - "The following example converts an array of signed 16-bit integers to <xref:System.Char> values.  \n  \n [!code-csharp[System.Convert.ToChar#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#2)]\n [!code-vb[System.Convert.ToChar#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#2)]"
  syntax:
    content: public static char ToChar (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.Char
      description: A Unicode character that is equivalent to <code>value</code>.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than <xref href="System.Char.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.Double)
  commentId: M:System.Convert.ToChar(System.Double)
  id: ToChar(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(Double)
  nameWithType: Convert.ToChar(Double)
  fullName: Convert.ToChar(Double)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static char ToChar (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.Char
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.Decimal)
  commentId: M:System.Convert.ToChar(System.Decimal)
  id: ToChar(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(Decimal)
  nameWithType: Convert.ToChar(Decimal)
  fullName: Convert.ToChar(Decimal)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  remarks: ''
  example:
  - "The following example attempts to convert a <xref:System.Decimal> to <xref:System.Char>, and throws <xref:System.InvalidCastException> on failure.  \n  \n [!code-cpp[System.Convert Snippets#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#17)]\n [!code-csharp[System.Convert Snippets#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#17)]\n [!code-vb[System.Convert Snippets#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#17)]"
  syntax:
    content: public static char ToChar (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal number to convert.
    return:
      type: System.Char
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.DateTime)
  commentId: M:System.Convert.ToChar(System.DateTime)
  id: ToChar(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(DateTime)
  nameWithType: Convert.ToChar(DateTime)
  fullName: Convert.ToChar(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static char ToChar (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.Char
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.Char)
  commentId: M:System.Convert.ToChar(System.Char)
  id: ToChar(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(Char)
  nameWithType: Convert.ToChar(Char)
  fullName: Convert.ToChar(Char)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the specified Unicode character value; no actual conversion is performed.
  syntax:
    content: public static char ToChar (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to return.
    return:
      type: System.Char
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToChar*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.Byte)
  commentId: M:System.Convert.ToChar(System.Byte)
  id: ToChar(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(Byte)
  nameWithType: Convert.ToChar(Byte)
  fullName: Convert.ToChar(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.
  remarks: ''
  example:
  - "The following example converts an array of unsigned bytes to <xref:System.Char> values.  \n  \n [!code-csharp[System.Convert.ToChar#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#1)]\n [!code-vb[System.Convert.ToChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#1)]"
  syntax:
    content: public static char ToChar (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.Char
      description: A Unicode character that is equivalent to <code>value</code>.
  overload: System.Convert.ToChar*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.Boolean)
  commentId: M:System.Convert.ToChar(System.Boolean)
  id: ToChar(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(Boolean)
  nameWithType: Convert.ToChar(Boolean)
  fullName: Convert.ToChar(Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static char ToChar (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.Char
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToChar(System.Int32)
  commentId: M:System.Convert.ToChar(System.Int32)
  id: ToChar(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToChar(Int32)
  nameWithType: Convert.ToChar(Int32)
  fullName: Convert.ToChar(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.
  remarks: ''
  example:
  - "The following example converts an array of signed integers to <xref:System.Char> values.  \n  \n [!code-csharp[System.Convert.ToChar#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#3)]\n [!code-vb[System.Convert.ToChar#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#3)]"
  syntax:
    content: public static char ToChar (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.Char
      description: A Unicode character that is equivalent to <code>value</code>.
  overload: System.Convert.ToChar*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than <xref href="System.Char.MinValue"></xref> or greater than <xref href="System.Char.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.Single)
  commentId: M:System.Convert.ToDateTime(System.Single)
  id: ToDateTime(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(Single)
  nameWithType: Convert.ToDateTime(Single)
  fullName: Convert.ToDateTime(Single)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static DateTime ToDateTime (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point value to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.String)
  commentId: M:System.Convert.ToDateTime(System.String)
  id: ToDateTime(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(String)
  nameWithType: Convert.ToDateTime(String)
  fullName: Convert.ToDateTime(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a date and time to an equivalent date and time value.
  remarks: "If `value` is not `null`, the return value is the result of invoking the <xref:System.DateTime.Parse%2A?displayProperty=fullName> method on `value` using the formatting information in a <xref:System.Globalization.DateTimeFormatInfo> object that is initialized for the current culture. The `value` argument must contain the representation of a date and time in one of the formats described in the <xref:System.Globalization.DateTimeFormatInfo> topic. If `value` is `null`, the method returns <xref:System.DateTime.MinValue?displayProperty=fullName>.  \n  \n This method tries to parse `value` completely and avoid throwing a <xref:System.FormatException>. It completes missing month, day, and year information with the current date. If `value` contains only a date and no time, this method assumes a time of midnight. Any leading, inner, or trailing white-space characters in `value` are ignored.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example uses the <xref:System.Convert.ToDateTime%2A> method to convert various string representations of dates and times to <xref:System.DateTime> values.  \n  \n [!code-csharp[System.Convert.ToDateTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime2.cs#2)]\n [!code-vb[System.Convert.ToDateTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime2.vb#2)]"
  syntax:
    content: public static DateTime ToDateTime (string value);
    parameters:
    - id: value
      type: System.String
      description: The string representation of a date and time.
    return:
      type: System.DateTime
      description: The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <xref href="System.DateTime.MinValue"></xref> if <code>value</code> is `null`.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not a properly formatted date and time string.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.UInt16)
  commentId: M:System.Convert.ToDateTime(System.UInt16)
  id: ToDateTime(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(UInt16)
  nameWithType: Convert.ToDateTime(UInt16)
  fullName: Convert.ToDateTime(UInt16)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static DateTime ToDateTime (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToDateTime(System.String,System.IFormatProvider)
  id: ToDateTime(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(String, IFormatProvider)
  nameWithType: Convert.ToDateTime(String, IFormatProvider)
  fullName: Convert.ToDateTime(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.DateTimeFormatInfo> object. The <xref:System.Globalization.DateTimeFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example converts string representations of date values with the `ToDateTime` method, using an <xref:System.IFormatProvider> object.  \n  \n [!code-csharp[System.Convert.ToDateTime#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime3.cs#3)]\n [!code-vb[System.Convert.ToDateTime#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime3.vb#3)]"
  syntax:
    content: public static DateTime ToDateTime (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains a date and time to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.DateTime
      description: The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <xref href="System.DateTime.MinValue"></xref> if <code>value</code> is `null`.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not a properly formatted date and time string.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.UInt64)
  commentId: M:System.Convert.ToDateTime(System.UInt64)
  id: ToDateTime(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(UInt64)
  nameWithType: Convert.ToDateTime(UInt64)
  fullName: Convert.ToDateTime(UInt64)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static DateTime ToDateTime (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)
  id: ToDateTime(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(Object, IFormatProvider)
  nameWithType: Convert.ToDateTime(Object, IFormatProvider)
  fullName: Convert.ToDateTime(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a <xref href="System.DateTime"></xref> object, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a date, `provider` could supply culture-specific information about the notation used to represent that date. `provider` is involved in the conversion of `value` if the runtime type of `value` is a <xref:System.String>, or if `value` is a user-defined type whose <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> implementation makes use of `provider`. If the runtime type of `value` is <xref:System.String> and `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used."
  example:
  - "The following example defines a custom format provider, `CustomProvider`, whose <xref:System.IFormatProvider.GetFormat%2A> method outputs a message to the console that it has been invoked, and then returns the <xref:System.Globalization.DateTimeFormatInfo> object of the culture whose name was passed as a parameter to its class constructor. Each of these `CustomProvider` objects is used to convert the elements in an object array to date and time values. The output indicates that the `CustomProvider` object is used in the conversion only when the type of the `value` parameter is a <xref:System.String>.  \n  \n [!code-csharp[System.Convert.ToDateTime#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/todatetime4.cs#4)]\n [!code-vb[System.Convert.ToDateTime#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/todatetime4.vb#4)]"
  syntax:
    content: public static DateTime ToDateTime (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.DateTime
      description: The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <xref href="System.DateTime.MinValue"></xref> if <code>value</code> is `null`.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not a valid date and time value.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.SByte)
  commentId: M:System.Convert.ToDateTime(System.SByte)
  id: ToDateTime(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(SByte)
  nameWithType: Convert.ToDateTime(SByte)
  fullName: Convert.ToDateTime(SByte)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static DateTime ToDateTime (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.UInt32)
  commentId: M:System.Convert.ToDateTime(System.UInt32)
  id: ToDateTime(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(UInt32)
  nameWithType: Convert.ToDateTime(UInt32)
  fullName: Convert.ToDateTime(UInt32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static DateTime ToDateTime (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.Object)
  commentId: M:System.Convert.ToDateTime(System.Object)
  id: ToDateTime(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(Object)
  nameWithType: Convert.ToDateTime(Object)
  fullName: Convert.ToDateTime(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a <xref href="System.DateTime"></xref> object.
  remarks: "For the conversion to succeed, the runtime type of the `value` parameter must be either a <xref:System.DateTime> or a <xref:System.String>, or `value` must be `null`. Otherwise, the method throws an <xref:System.InvalidCastException>. In addition, if `value` is a string, it must contain a valid representation of a date and time value in the current culture or a <xref:System.FormatException> is thrown.  \n  \n The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> method of the underlying type of `value`."
  example:
  - "The following example calls the <xref:System.Convert.ToDateTime%28System.Object%29> method with a variety of <xref:System.Object> variables.  \n  \n [!code-csharp[System.Convert.ToDateTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime1.cs#1)]\n [!code-vb[System.Convert.ToDateTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime1.vb#1)]"
  syntax:
    content: public static DateTime ToDateTime (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.DateTime
      description: The date and time equivalent of the value of <code>value</code>, or a date and time equivalent of <xref href="System.DateTime.MinValue"></xref> if <code>value</code> is `null`.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not a valid date and time value.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.Double)
  commentId: M:System.Convert.ToDateTime(System.Double)
  id: ToDateTime(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(Double)
  nameWithType: Convert.ToDateTime(Double)
  fullName: Convert.ToDateTime(Double)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static DateTime ToDateTime (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point value to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.Int32)
  commentId: M:System.Convert.ToDateTime(System.Int32)
  id: ToDateTime(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(Int32)
  nameWithType: Convert.ToDateTime(Int32)
  fullName: Convert.ToDateTime(Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static DateTime ToDateTime (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.Boolean)
  commentId: M:System.Convert.ToDateTime(System.Boolean)
  id: ToDateTime(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(Boolean)
  nameWithType: Convert.ToDateTime(Boolean)
  fullName: Convert.ToDateTime(Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static DateTime ToDateTime (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.Byte)
  commentId: M:System.Convert.ToDateTime(System.Byte)
  id: ToDateTime(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(Byte)
  nameWithType: Convert.ToDateTime(Byte)
  fullName: Convert.ToDateTime(Byte)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static DateTime ToDateTime (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.Char)
  commentId: M:System.Convert.ToDateTime(System.Char)
  id: ToDateTime(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(Char)
  nameWithType: Convert.ToDateTime(Char)
  fullName: Convert.ToDateTime(Char)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static DateTime ToDateTime (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.Int64)
  commentId: M:System.Convert.ToDateTime(System.Int64)
  id: ToDateTime(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(Int64)
  nameWithType: Convert.ToDateTime(Int64)
  fullName: Convert.ToDateTime(Int64)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static DateTime ToDateTime (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.Decimal)
  commentId: M:System.Convert.ToDateTime(System.Decimal)
  id: ToDateTime(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(Decimal)
  nameWithType: Convert.ToDateTime(Decimal)
  fullName: Convert.ToDateTime(Decimal)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static DateTime ToDateTime (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The number to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.Int16)
  commentId: M:System.Convert.ToDateTime(System.Int16)
  id: ToDateTime(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(Int16)
  nameWithType: Convert.ToDateTime(Int16)
  fullName: Convert.ToDateTime(Int16)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static DateTime ToDateTime (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDateTime(System.DateTime)
  commentId: M:System.Convert.ToDateTime(System.DateTime)
  id: ToDateTime(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToDateTime(DateTime)
  nameWithType: Convert.ToDateTime(DateTime)
  fullName: Convert.ToDateTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the specified <xref href="System.DateTime"></xref> object; no actual conversion is performed.
  syntax:
    content: public static DateTime ToDateTime (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: A date and time value.
    return:
      type: System.DateTime
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToDateTime*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToDecimal(System.String,System.IFormatProvider)
  id: ToDecimal(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(String, IFormatProvider)
  nameWithType: Convert.ToDecimal(String, IFormatProvider)
  fullName: Convert.ToDecimal(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.Decimal.Parse%2A?displayProperty=fullName> method on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example attempts to convert an array of strings to <xref:System.Decimal> values by using <xref:System.Globalization.NumberFormatInfo> objects that represent two different cultures.  \n  \n [!code-csharp[System.Convert.ToDecimal2#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal3.cs#12)]\n [!code-vb[System.Convert.ToDecimal2#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal3.vb#12)]"
  syntax:
    content: public static decimal ToDecimal (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains a number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Decimal
      description: A decimal number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToDecimal*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not a number in a valid format.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Decimal.MinValue"></xref> or greater than <xref href="System.Decimal.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)
  id: ToDecimal(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(Object, IFormatProvider)
  nameWithType: Convert.ToDecimal(Object, IFormatProvider)
  fullName: Convert.ToDecimal(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."
  example:
  - "The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface.  \n  \n [!code-csharp[System.Convert.ToDecimal2#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal2.cs#10)]\n [!code-vb[System.Convert.ToDecimal2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal2.vb#10)]  \n  \n The following example shows that when a `Temperature` object is passed as a parameter to the <xref:System.Convert.ToDecimal%28System.Object%2CSystem.IFormatProvider%29> method, the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> implementation of the `Temperature` class is called to perform the conversion.  \n  \n [!code-csharp[System.Convert.ToDecimal2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal2.cs#11)]\n [!code-vb[System.Convert.ToDecimal2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal2.vb#11)]"
  syntax:
    content: public static decimal ToDecimal (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Decimal
      description: A decimal number that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToDecimal*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format for a <xref href="System.Decimal"></xref> type.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Decimal.MinValue"></xref> or greater than <xref href="System.Decimal.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.UInt64)
  commentId: M:System.Convert.ToDecimal(System.UInt64)
  id: ToDecimal(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(UInt64)
  nameWithType: Convert.ToDecimal(UInt64)
  fullName: Convert.ToDecimal(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.
  remarks: ''
  example:
  - "The following example converts an array of unsigned long integers to <xref:System.Decimal> values.  \n  \n [!code-csharp[System.Convert.ToDecimal2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#9)]\n [!code-vb[System.Convert.ToDecimal2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static decimal ToDecimal (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.Decimal
      description: A decimal number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDecimal*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.UInt32)
  commentId: M:System.Convert.ToDecimal(System.UInt32)
  id: ToDecimal(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(UInt32)
  nameWithType: Convert.ToDecimal(UInt32)
  fullName: Convert.ToDecimal(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.
  remarks: ''
  example:
  - "The following example converts an array of unsigned integers to <xref:System.Decimal> values.  \n  \n [!code-csharp[System.Convert.ToDecimal2#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#8)]\n [!code-vb[System.Convert.ToDecimal2#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#8)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static decimal ToDecimal (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.Decimal
      description: A decimal number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDecimal*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.UInt16)
  commentId: M:System.Convert.ToDecimal(System.UInt16)
  id: ToDecimal(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(UInt16)
  nameWithType: Convert.ToDecimal(UInt16)
  fullName: Convert.ToDecimal(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.
  remarks: ''
  example:
  - "The following example converts an array of 16-bit unsigned integers to <xref:System.Decimal> values.  \n  \n [!code-csharp[System.Convert.ToDecimal2#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#7)]\n [!code-vb[System.Convert.ToDecimal2#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#7)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static decimal ToDecimal (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.Decimal
      description: The decimal number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDecimal*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.String)
  commentId: M:System.Convert.ToDecimal(System.String)
  id: ToDecimal(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(String)
  nameWithType: Convert.ToDecimal(String)
  fullName: Convert.ToDecimal(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent decimal number.
  remarks: "Using the <xref:System.Convert.ToDecimal%28System.String%29> method is equivalent to passing `value` to the <xref:System.Decimal.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example illustrates the use of `ToDecimal`. It attempts to convert a <xref:System.String>to a <xref:System.Decimal>, and throws the possible exceptions that may arise during the conversion.  \n  \n [!code-cpp[System.Convert Snippets#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#15)]\n [!code-csharp[System.Convert Snippets#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#15)]\n [!code-vb[System.Convert Snippets#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#15)]"
  syntax:
    content: public static decimal ToDecimal (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains a number to convert.
    return:
      type: System.Decimal
      description: A decimal number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToDecimal*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not a number in a valid format.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Decimal.MinValue"></xref> or greater than <xref href="System.Decimal.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.SByte)
  commentId: M:System.Convert.ToDecimal(System.SByte)
  id: ToDecimal(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(SByte)
  nameWithType: Convert.ToDecimal(SByte)
  fullName: Convert.ToDecimal(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to the equivalent decimal number.
  remarks: ''
  example:
  - "The following example converts each element in an array of signed bytes to a <xref:System.Decimal> value.  \n  \n [!code-csharp[System.Convert.ToDecimal2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#5)]\n [!code-vb[System.Convert.ToDecimal2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#5)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static decimal ToDecimal (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.Decimal
      description: A decimal number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDecimal*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.Object)
  commentId: M:System.Convert.ToDecimal(System.Object)
  id: ToDecimal(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(Object)
  nameWithType: Convert.ToDecimal(Object)
  fullName: Convert.ToDecimal(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to an equivalent decimal number.
  remarks: The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> method of the underlying type of `value`.
  example:
  - "The following example tries to convert each element in an object array to a <xref:System.Decimal> value.  \n  \n [!code-csharp[System.Convert.ToDecimal2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#4)]\n [!code-vb[System.Convert.ToDecimal2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#4)]"
  syntax:
    content: public static decimal ToDecimal (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.Decimal
      description: A decimal number that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToDecimal*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format for a <xref href="System.Decimal"></xref> type.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Decimal.MinValue"></xref> or greater than <xref href="System.Decimal.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.Single)
  commentId: M:System.Convert.ToDecimal(System.Single)
  id: ToDecimal(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(Single)
  nameWithType: Convert.ToDecimal(Single)
  fullName: Convert.ToDecimal(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to the equivalent decimal number.
  remarks: "The <xref:System.Decimal> value returned by this method contains a maximum of seven significant digits. If the `value` parameter contains more than seven significant digits, it is rounded using rounding to nearest. The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Single%29> method uses rounding to nearest to return a <xref:System.Decimal> value with seven significant digits.  \n  \n [!code-csharp[System.Convert.ToDecimal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#1)]\n [!code-vb[System.Convert.ToDecimal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#1)]"
  example:
  - "The following example tries to convert each element in an array of <xref:System.Single> values to a <xref:System.Decimal> value.  \n  \n [!code-csharp[System.Convert.ToDecimal2#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#6)]\n [!code-vb[System.Convert.ToDecimal2#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#6)]"
  syntax:
    content: public static decimal ToDecimal (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to convert.
    return:
      type: System.Decimal
      description: A decimal number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDecimal*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Decimal.MaxValue"></xref> or less than <xref href="System.Decimal.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.Int32)
  commentId: M:System.Convert.ToDecimal(System.Int32)
  id: ToDecimal(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(Int32)
  nameWithType: Convert.ToDecimal(Int32)
  fullName: Convert.ToDecimal(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to an equivalent decimal number.
  remarks: ''
  example:
  - "The following example converts an array of signed integers to <xref:System.Decimal> values.  \n  \n [!code-csharp[System.Convert.ToDecimal2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#3)]\n [!code-vb[System.Convert.ToDecimal2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#3)]"
  syntax:
    content: public static decimal ToDecimal (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.Decimal
      description: A decimal number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDecimal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.Boolean)
  commentId: M:System.Convert.ToDecimal(System.Boolean)
  id: ToDecimal(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(Boolean)
  nameWithType: Convert.ToDecimal(Boolean)
  fullName: Convert.ToDecimal(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to the equivalent decimal number.
  remarks: ''
  example:
  - "The following example illustrates the conversion of <xref:System.Boolean> to <xref:System.Decimal> values.  \n  \n [!code-csharp[System.Convert.ToDecimal2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#1)]\n [!code-vb[System.Convert.ToDecimal2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#1)]"
  syntax:
    content: public static decimal ToDecimal (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.Decimal
      description: The number 1 if <code>value</code> is `true`; otherwise, 0.
  overload: System.Convert.ToDecimal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.Byte)
  commentId: M:System.Convert.ToDecimal(System.Byte)
  id: ToDecimal(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(Byte)
  nameWithType: Convert.ToDecimal(Byte)
  fullName: Convert.ToDecimal(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.
  remarks: ''
  example:
  - "The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> value.  \n  \n [!code-cpp[System.Convert Snippets#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)]\n [!code-csharp[System.Convert Snippets#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)]\n [!code-vb[System.Convert Snippets#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)]"
  syntax:
    content: public static decimal ToDecimal (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.Decimal
      description: The decimal number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDecimal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.Char)
  commentId: M:System.Convert.ToDecimal(System.Char)
  id: ToDecimal(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(Char)
  nameWithType: Convert.ToDecimal(Char)
  fullName: Convert.ToDecimal(Char)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  remarks: ''
  example:
  - "The following example attempts to convert a <xref:System.Char> value to <xref:System.Decimal>, and throws <xref:System.InvalidCastException> upon failure.  \n  \n [!code-cpp[System.Convert Snippets#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#17)]\n [!code-csharp[System.Convert Snippets#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#17)]\n [!code-vb[System.Convert Snippets#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#17)]"
  syntax:
    content: public static decimal ToDecimal (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Decimal
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDecimal*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.Int64)
  commentId: M:System.Convert.ToDecimal(System.Int64)
  id: ToDecimal(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(Int64)
  nameWithType: Convert.ToDecimal(Int64)
  fullName: Convert.ToDecimal(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to an equivalent decimal number.
  remarks: ''
  example:
  - "The following example converts an <xref:System.Int64> value to a <xref:System.Decimal> value.  \n  \n [!code-cpp[System.Convert Snippets#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#10)]\n [!code-csharp[System.Convert Snippets#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#10)]\n [!code-vb[System.Convert Snippets#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#10)]"
  syntax:
    content: public static decimal ToDecimal (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.Decimal
      description: A decimal number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDecimal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.Decimal)
  commentId: M:System.Convert.ToDecimal(System.Decimal)
  id: ToDecimal(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(Decimal)
  nameWithType: Convert.ToDecimal(Decimal)
  fullName: Convert.ToDecimal(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the specified decimal number; no actual conversion is performed.
  syntax:
    content: public static decimal ToDecimal (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: A decimal number.
    return:
      type: System.Decimal
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToDecimal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.Double)
  commentId: M:System.Convert.ToDecimal(System.Double)
  id: ToDecimal(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(Double)
  nameWithType: Convert.ToDecimal(Double)
  fullName: Convert.ToDecimal(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to an equivalent decimal number.
  remarks: "The <xref:System.Decimal> value returned by this method contains a maximum of 15 significant digits. If the `value` parameter contains more than 15 significant digits, it is rounded using rounding to nearest. The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=fullName> method uses rounding to nearest to return a <xref:System.Decimal> value with 15 significant digits.  \n  \n [!code-csharp[System.Convert.ToDecimal#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#2)]\n [!code-vb[System.Convert.ToDecimal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#2)]"
  example:
  - "The following example converts a <xref:System.Double> value to a <xref:System.Decimal> value.  \n  \n [!code-cpp[System.Convert Snippets#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#5)]\n [!code-csharp[System.Convert Snippets#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#5)]\n [!code-vb[System.Convert Snippets#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#5)]"
  syntax:
    content: public static decimal ToDecimal (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.Decimal
      description: A decimal number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDecimal*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Decimal.MaxValue"></xref> or less than <xref href="System.Decimal.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.Int16)
  commentId: M:System.Convert.ToDecimal(System.Int16)
  id: ToDecimal(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(Int16)
  nameWithType: Convert.ToDecimal(Int16)
  fullName: Convert.ToDecimal(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to an equivalent decimal number.
  remarks: ''
  example:
  - "The following example converts an array of 16-bit signed integers to <xref:System.Decimal> values.  \n  \n [!code-csharp[System.Convert.ToDecimal2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#2)]\n [!code-vb[System.Convert.ToDecimal2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#2)]"
  syntax:
    content: public static decimal ToDecimal (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.Decimal
      description: A decimal number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDecimal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDecimal(System.DateTime)
  commentId: M:System.Convert.ToDecimal(System.DateTime)
  id: ToDecimal(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToDecimal(DateTime)
  nameWithType: Convert.ToDecimal(DateTime)
  fullName: Convert.ToDecimal(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static decimal ToDecimal (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.Decimal
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDecimal*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.SByte)
  commentId: M:System.Convert.ToDouble(System.SByte)
  id: ToDouble(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(SByte)
  nameWithType: Convert.ToDouble(SByte)
  fullName: Convert.ToDouble(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of <xref:System.SByte> values to a <xref:System.Double> value.  \n  \n [!code-csharp[System.Convert.ToDouble#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#4)]\n [!code-vb[System.Convert.ToDouble#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#4)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static double ToDouble (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.Double
      description: The 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToDouble*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToDouble(System.Object,System.IFormatProvider)
  id: ToDouble(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(Object, IFormatProvider)
  nameWithType: Convert.ToDouble(Object, IFormatProvider)
  fullName: Convert.ToDouble(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.IConvertible.ToDouble%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."
  example:
  - "The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToDouble` method. This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  \n  \n [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]\n [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]\n [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]"
  syntax:
    content: public static double ToDouble (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToDouble*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format for a <xref href="System.Double"></xref> type.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>value</code> does not implement the <xref href="System.IConvertible"></xref> interface.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Double.MinValue"></xref> or greater than <xref href="System.Double.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.UInt64)
  commentId: M:System.Convert.ToDouble(System.UInt64)
  id: ToDouble(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(UInt64)
  nameWithType: Convert.ToDouble(UInt64)
  fullName: Convert.ToDouble(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of <xref:System.UInt64> values to a <xref:System.Double> value.  \n  \n [!code-csharp[System.Convert.ToDouble#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#7)]\n [!code-vb[System.Convert.ToDouble#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#7)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static double ToDouble (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDouble*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.UInt32)
  commentId: M:System.Convert.ToDouble(System.UInt32)
  id: ToDouble(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(UInt32)
  nameWithType: Convert.ToDouble(UInt32)
  fullName: Convert.ToDouble(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of <xref:System.UInt32> values to a <xref:System.Double> value.  \n  \n [!code-csharp[System.Convert.ToDouble#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#6)]\n [!code-vb[System.Convert.ToDouble#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#6)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static double ToDouble (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDouble*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.UInt16)
  commentId: M:System.Convert.ToDouble(System.UInt16)
  id: ToDouble(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(UInt16)
  nameWithType: Convert.ToDouble(UInt16)
  fullName: Convert.ToDouble(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of <xref:System.UInt16> values to a <xref:System.Double> value.  \n  \n [!code-csharp[System.Convert.ToDouble#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#5)]\n [!code-vb[System.Convert.ToDouble#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#5)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static double ToDouble (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDouble*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.String)
  commentId: M:System.Convert.ToDouble(System.String)
  id: ToDouble(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(String)
  nameWithType: Convert.ToDouble(String)
  fullName: Convert.ToDouble(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent double-precision floating-point number.
  remarks: "Using the <xref:System.Convert.ToDouble%28System.String%29> method is equivalent to passing `value` to the <xref:System.Double.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example attempts to convert each element in an array of numeric strings to a <xref:System.Double>. The example's output is from a system whose current culture is en-US.  \n  \n [!code-csharp[System.Convert.ToDouble#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/example8.cs#8)]\n [!code-vb[System.Convert.ToDouble#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/example8.vb#8)]"
  syntax:
    content: public static double ToDouble (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToDouble*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not a number in a valid format.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Double.MinValue"></xref> or greater than <xref href="System.Double.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.Single)
  commentId: M:System.Convert.ToDouble(System.Single)
  id: ToDouble(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(Single)
  nameWithType: Convert.ToDouble(Single)
  fullName: Convert.ToDouble(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts a <xref:System.Single> value to a <xref:System.Double> value.  \n  \n [!code-cpp[System.Convert Snippets#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#6)]\n [!code-csharp[System.Convert Snippets#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#6)]\n [!code-vb[System.Convert Snippets#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#6)]"
  syntax:
    content: public static double ToDouble (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDouble*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToDouble(System.String,System.IFormatProvider)
  id: ToDouble(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(String, IFormatProvider)
  nameWithType: Convert.ToDouble(String, IFormatProvider)
  fullName: Convert.ToDouble(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.Double.Parse%2A?displayProperty=fullName> method on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example converts string representations of <xref:System.Double> values with the `ToDouble` method, using an <xref:System.IFormatProvider> object.  \n  \n [!code-csharp[System.Convert.ToReals_String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToReals_String/CS/todouble.cs#2)]\n [!code-vb[System.Convert.ToReals_String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToReals_String/VB/todouble.vb#2)]"
  syntax:
    content: public static double ToDouble (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToDouble*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not a number in a valid format.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Double.MinValue"></xref> or greater than <xref href="System.Double.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.Object)
  commentId: M:System.Convert.ToDouble(System.Object)
  id: ToDouble(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(Object)
  nameWithType: Convert.ToDouble(Object)
  fullName: Convert.ToDouble(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a double-precision floating-point number.
  remarks: If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToDouble%2A?displayProperty=fullName>implementation of the underlying type of `value`.
  example:
  - "The following example attempts to convert each value in an object array to a <xref:System.Double>.  \n  \n [!code-csharp[System.Convert.ToDouble#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#3)]\n [!code-vb[System.Convert.ToDouble#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#3)]"
  syntax:
    content: public static double ToDouble (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToDouble*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format for a <xref href="System.Double"></xref> type.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Double.MinValue"></xref> or greater than <xref href="System.Double.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.Int32)
  commentId: M:System.Convert.ToDouble(System.Int32)
  id: ToDouble(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(Int32)
  nameWithType: Convert.ToDouble(Int32)
  fullName: Convert.ToDouble(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts an <xref:System.Int32> value to a <xref:System.Double> value.  \n  \n [!code-cpp[System.Convert Snippets#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#3)]\n [!code-csharp[System.Convert Snippets#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#3)]\n [!code-vb[System.Convert Snippets#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#3)]"
  syntax:
    content: public static double ToDouble (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDouble*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.Boolean)
  commentId: M:System.Convert.ToDouble(System.Boolean)
  id: ToDouble(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(Boolean)
  nameWithType: Convert.ToDouble(Boolean)
  fullName: Convert.ToDouble(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to the equivalent double-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts a <xref:System.Boolean> value to a <xref:System.Double> value.  \n  \n [!code-cpp[System.Convert Snippets#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#1)]\n [!code-csharp[System.Convert Snippets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#1)]\n [!code-vb[System.Convert Snippets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#1)]"
  syntax:
    content: public static double ToDouble (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.Double
      description: The number 1 if <code>value</code> is `true`; otherwise, 0.
  overload: System.Convert.ToDouble*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.Byte)
  commentId: M:System.Convert.ToDouble(System.Byte)
  id: ToDouble(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(Byte)
  nameWithType: Convert.ToDouble(Byte)
  fullName: Convert.ToDouble(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts a <xref:System.Byte> value to a <xref:System.Double> value.  \n  \n [!code-cpp[System.Convert Snippets#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#2)]\n [!code-csharp[System.Convert Snippets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#2)]\n [!code-vb[System.Convert Snippets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#2)]"
  syntax:
    content: public static double ToDouble (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.Double
      description: The double-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDouble*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.Char)
  commentId: M:System.Convert.ToDouble(System.Char)
  id: ToDouble(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(Char)
  nameWithType: Convert.ToDouble(Char)
  fullName: Convert.ToDouble(Char)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static double ToDouble (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Double
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDouble*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.Int64)
  commentId: M:System.Convert.ToDouble(System.Int64)
  id: ToDouble(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(Int64)
  nameWithType: Convert.ToDouble(Int64)
  fullName: Convert.ToDouble(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of signed long integers to a <xref:System.Double> value.  \n  \n [!code-csharp[System.Convert.ToDouble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#2)]\n [!code-vb[System.Convert.ToDouble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#2)]"
  syntax:
    content: public static double ToDouble (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDouble*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.Decimal)
  commentId: M:System.Convert.ToDouble(System.Decimal)
  id: ToDouble(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(Decimal)
  nameWithType: Convert.ToDouble(Decimal)
  fullName: Convert.ToDouble(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to an equivalent double-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts a <xref:System.Decimal> value to a <xref:System.Double> value.  \n  \n [!code-cpp[System.Convert Snippets#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#5)]\n [!code-csharp[System.Convert Snippets#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#5)]\n [!code-vb[System.Convert Snippets#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#5)]"
  syntax:
    content: public static double ToDouble (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal number to convert.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToDouble*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.Double)
  commentId: M:System.Convert.ToDouble(System.Double)
  id: ToDouble(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(Double)
  nameWithType: Convert.ToDouble(Double)
  fullName: Convert.ToDouble(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the specified double-precision floating-point number; no actual conversion is performed.
  syntax:
    content: public static double ToDouble (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to return.
    return:
      type: System.Double
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToDouble*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.Int16)
  commentId: M:System.Convert.ToDouble(System.Int16)
  id: ToDouble(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(Int16)
  nameWithType: Convert.ToDouble(Int16)
  fullName: Convert.ToDouble(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of 16-bit signed integers to a <xref:System.Double> value.  \n  \n [!code-csharp[System.Convert.ToDouble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#1)]\n [!code-vb[System.Convert.ToDouble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#1)]"
  syntax:
    content: public static double ToDouble (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.Double
      description: A double-precision floating-point number equivalent to <code>value</code>.
  overload: System.Convert.ToDouble*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToDouble(System.DateTime)
  commentId: M:System.Convert.ToDouble(System.DateTime)
  id: ToDouble(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToDouble(DateTime)
  nameWithType: Convert.ToDouble(DateTime)
  fullName: Convert.ToDouble(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static double ToDouble (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.Double
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToDouble*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.SByte)
  commentId: M:System.Convert.ToInt16(System.SByte)
  id: ToInt16(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(SByte)
  nameWithType: Convert.ToInt16(SByte)
  fullName: Convert.ToInt16(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of signed bytes to a 16-bit signed integer.  \n  \n [!code-csharp[System.Convert.ToInt16#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#9)]\n [!code-vb[System.Convert.ToInt16#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static short ToInt16 (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.Int16
      description: A 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt16*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToInt16(System.String,System.IFormatProvider)
  id: ToInt16(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(String, IFormatProvider)
  nameWithType: Convert.ToInt16(String, IFormatProvider)
  fullName: Convert.ToInt16(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.
  remarks: "`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example converts string representations of 16-bit integers with the `ToInt16` method, using an <xref:System.IFormatProvider> object.  \n  \n [!code-cpp[System.Convert.ToSInts_String#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/toint16.cpp#3)]\n [!code-csharp[System.Convert.ToSInts_String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/toint16.cs#3)]\n [!code-vb[System.Convert.ToSInts_String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/toint16.vb#3)]"
  syntax:
    content: public static short ToInt16 (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Int16
      description: A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Int16.MinValue"></xref> or greater than <xref href="System.Int16.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToInt16(System.Object,System.IFormatProvider)
  id: ToInt16(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(Object, IFormatProvider)
  nameWithType: Convert.ToInt16(Object, IFormatProvider)
  fullName: Convert.ToInt16(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.
  remarks: "`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."
  example:
  - "The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToInt16` method. This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  \n  \n [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]\n [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]\n [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]"
  syntax:
    content: public static short ToInt16 (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Int16
      description: A 16-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format for an <xref href="System.Int16"></xref> type.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>value</code> does not implement <xref href="System.IConvertible"></xref>.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Int16.MinValue"></xref> or greater than <xref href="System.Int16.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.UInt64)
  commentId: M:System.Convert.ToInt16(System.UInt64)
  id: ToInt16(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(UInt64)
  nameWithType: Convert.ToInt16(UInt64)
  fullName: Convert.ToInt16(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of unsigned long integers to a 16-bit signed integer.  \n  \n [!code-csharp[System.Convert.ToInt16#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#13)]\n [!code-vb[System.Convert.ToInt16#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#13)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static short ToInt16 (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.Int16
      description: A 16-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.UInt32)
  commentId: M:System.Convert.ToInt16(System.UInt32)
  id: ToInt16(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(UInt32)
  nameWithType: Convert.ToInt16(UInt32)
  fullName: Convert.ToInt16(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of unsigned integers to a 16-bit signed integer.  \n  \n [!code-csharp[System.Convert.ToInt16#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#12)]\n [!code-vb[System.Convert.ToInt16#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#12)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static short ToInt16 (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.Int16
      description: A 16-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.UInt16)
  commentId: M:System.Convert.ToInt16(System.UInt16)
  id: ToInt16(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(UInt16)
  nameWithType: Convert.ToInt16(UInt16)
  fullName: Convert.ToInt16(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of unsigned 16-bit integers to a 16-bit signed integer.  \n  \n [!code-csharp[System.Convert.ToInt16#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#11)]\n [!code-vb[System.Convert.ToInt16#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#11)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static short ToInt16 (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.Int16
      description: A 16-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.String)
  commentId: M:System.Convert.ToInt16(System.String)
  id: ToInt16(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(String)
  nameWithType: Convert.ToInt16(String)
  fullName: Convert.ToInt16(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 16-bit signed integer.
  remarks: "Using the <xref:System.Convert.ToInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int16.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example converts string representations of 16-bit integers with the `ToInt16` method, using default formatting.  \n  \n [!code-cpp[System.Convert.ToSInts_String#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/toint16.cpp#3)]\n [!code-csharp[System.Convert.ToSInts_String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/toint16.cs#3)]\n [!code-vb[System.Convert.ToSInts_String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/toint16.vb#3)]"
  syntax:
    content: public static short ToInt16 (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    return:
      type: System.Int16
      description: A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Int16.MinValue"></xref> or greater than <xref href="System.Int16.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.Single)
  commentId: M:System.Convert.ToInt16(System.Single)
  id: ToInt16(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(Single)
  nameWithType: Convert.ToInt16(Single)
  fullName: Convert.ToInt16(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Single> values to a 16-bit signed integer.  \n  \n [!code-csharp[System.Convert.ToInt16#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#10)]\n [!code-vb[System.Convert.ToInt16#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#10)]"
  syntax:
    content: public static short ToInt16 (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to convert.
    return:
      type: System.Int16
      description: <code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int16.MaxValue"></xref> or less than <xref href="System.Int16.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.String,System.Int32)
  commentId: M:System.Convert.ToInt16(System.String,System.Int32)
  id: ToInt16(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(String, Int32)
  nameWithType: Convert.ToInt16(String, Int32)
  fullName: Convert.ToInt16(String, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.
  remarks: "If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int16> data type is converted to an <xref:System.Int16> value without the method throwing an exception. The following example increments <xref:System.Int16?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x8000 converts to -32768.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#5)]\n [!code-vb[System.Convert.BaseConversion#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#5)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.  \n  \n [!code-csharp[System.Convert.BaseConversion#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#6)]\n [!code-vb[System.Convert.BaseConversion#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#6)]"
  example:
  - "The following example attempts to interpret each element in a string array as a hexadecimal string and to convert it to a 16-bit signed integer.  \n  \n [!code-csharp[System.Convert.ToInt16#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_2.cs#14)]\n [!code-vb[System.Convert.ToInt16#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_2.vb#14)]"
  syntax:
    content: public static short ToInt16 (string value, int fromBase);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: fromBase
      type: System.Int32
      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.
    return:
      type: System.Int16
      description: A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>value</code> is <xref href="System.String.Empty"></xref>.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.Int16.MinValue\"></xref> or greater than <xref href=\"System.Int16.MaxValue\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.Object)
  commentId: M:System.Convert.ToInt16(System.Object)
  id: ToInt16(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(Object)
  nameWithType: Convert.ToInt16(Object)
  fullName: Convert.ToInt16(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a 16-bit signed integer.
  remarks: If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt16%2A?displayProperty=fullName> implementation of the underlying type of `value`.
  example:
  - "The following example attempts to convert each element in an object array to a 16-bit signed integer.  \n  \n [!code-csharp[System.Convert.ToInt16#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#8)]\n [!code-vb[System.Convert.ToInt16#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#8)]"
  syntax:
    content: public static short ToInt16 (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.Int16
      description: A 16-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format for an <xref href="System.Int16"></xref> type.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Int16.MinValue"></xref> or greater than <xref href="System.Int16.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.Int32)
  commentId: M:System.Convert.ToInt16(System.Int32)
  id: ToInt16(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(Int32)
  nameWithType: Convert.ToInt16(Int32)
  fullName: Convert.ToInt16(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of integers to a 16-bit signed integer.  \n  \n [!code-csharp[System.Convert.ToInt16#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#6)]\n [!code-vb[System.Convert.ToInt16#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#6)]"
  syntax:
    content: public static short ToInt16 (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.Int16
      description: The 16-bit signed integer equivalent of <code>value</code>.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int16.MaxValue"></xref> or less than <xref href="System.Int16.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.Int16)
  commentId: M:System.Convert.ToInt16(System.Int16)
  id: ToInt16(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(Int16)
  nameWithType: Convert.ToInt16(Int16)
  fullName: Convert.ToInt16(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the specified 16-bit signed integer; no actual conversion is performed.
  syntax:
    content: public static short ToInt16 (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to return.
    return:
      type: System.Int16
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToInt16*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.Double)
  commentId: M:System.Convert.ToInt16(System.Double)
  id: ToInt16(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(Double)
  nameWithType: Convert.ToInt16(Double)
  fullName: Convert.ToInt16(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of <xref:System.Double> values to a 16-bit signed integer. The example illustrates that any fractional part of a <xref:System.Double> value is rounded before performing the conversion.  \n  \n [!code-csharp[System.Convert.ToInt16#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#5)]\n [!code-vb[System.Convert.ToInt16#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#5)]"
  syntax:
    content: public static short ToInt16 (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.Int16
      description: <code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int16.MaxValue"></xref> or less than <xref href="System.Int16.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.Decimal)
  commentId: M:System.Convert.ToInt16(System.Decimal)
  id: ToInt16(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(Decimal)
  nameWithType: Convert.ToInt16(Decimal)
  fullName: Convert.ToInt16(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to an equivalent 16-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Decimal> values to a 16-bit signed integer. The example illustrates that any fractional part of a <xref:System.Decimal> value is rounded when performing the conversion.  \n  \n [!code-csharp[System.Convert.ToInt16#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#4)]\n [!code-vb[System.Convert.ToInt16#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#4)]"
  syntax:
    content: public static short ToInt16 (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal number to convert.
    return:
      type: System.Int16
      description: <code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int16.MaxValue"></xref> or less than <xref href="System.Int16.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.DateTime)
  commentId: M:System.Convert.ToInt16(System.DateTime)
  id: ToInt16(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(DateTime)
  nameWithType: Convert.ToInt16(DateTime)
  fullName: Convert.ToInt16(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static short ToInt16 (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.Int16
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.Char)
  commentId: M:System.Convert.ToInt16(System.Char)
  id: ToInt16(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(Char)
  nameWithType: Convert.ToInt16(Char)
  fullName: Convert.ToInt16(Char)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Char> values to a 16-bit signed integer.  \n  \n [!code-csharp[System.Convert.ToInt16#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#3)]\n [!code-vb[System.Convert.ToInt16#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#3)]"
  syntax:
    content: public static short ToInt16 (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Int16
      description: A 16-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int16.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.Byte)
  commentId: M:System.Convert.ToInt16(System.Byte)
  id: ToInt16(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(Byte)
  nameWithType: Convert.ToInt16(Byte)
  fullName: Convert.ToInt16(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of <xref:System.Byte> values to a 16-bit signed integer.  \n  \n [!code-csharp[System.Convert.ToInt16#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#2)]\n [!code-vb[System.Convert.ToInt16#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#2)]"
  syntax:
    content: public static short ToInt16 (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.Int16
      description: A 16-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt16*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.Boolean)
  commentId: M:System.Convert.ToInt16(System.Boolean)
  id: ToInt16(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(Boolean)
  nameWithType: Convert.ToInt16(Boolean)
  fullName: Convert.ToInt16(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to the equivalent 16-bit signed integer.
  remarks: ''
  example:
  - "The following example converts the Boolean values `true` and `false` to <xref:System.Int16> values.  \n  \n [!code-csharp[System.Convert.ToInt16#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#1)]\n [!code-vb[System.Convert.ToInt16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#1)]"
  syntax:
    content: public static short ToInt16 (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.Int16
      description: The number 1 if <code>value</code> is `true`; otherwise, 0.
  overload: System.Convert.ToInt16*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt16(System.Int64)
  commentId: M:System.Convert.ToInt16(System.Int64)
  id: ToInt16(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt16(Int64)
  nameWithType: Convert.ToInt16(Int64)
  fullName: Convert.ToInt16(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of long integers to a 16-bit signed integer.  \n  \n [!code-csharp[System.Convert.ToInt16#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#7)]\n [!code-vb[System.Convert.ToInt16#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#7)]"
  syntax:
    content: public static short ToInt16 (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.Int16
      description: A 16-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int16.MaxValue"></xref> or less than <xref href="System.Int16.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.Single)
  commentId: M:System.Convert.ToInt32(System.Single)
  id: ToInt32(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(Single)
  nameWithType: Convert.ToInt32(Single)
  fullName: Convert.ToInt32(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Single> values to an integer.  \n  \n [!code-csharp[System.Convert.ToInt32#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#10)]\n [!code-vb[System.Convert.ToInt32#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#10)]"
  syntax:
    content: public static int ToInt32 (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to convert.
    return:
      type: System.Int32
      description: <code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int32.MaxValue"></xref> or less than <xref href="System.Int32.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.UInt16)
  commentId: M:System.Convert.ToInt32(System.UInt16)
  id: ToInt32(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(UInt16)
  nameWithType: Convert.ToInt32(UInt16)
  fullName: Convert.ToInt32(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of 16-bit unsigned integers to an integer.  \n  \n [!code-csharp[System.Convert.ToInt32#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#12)]\n [!code-vb[System.Convert.ToInt32#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#12)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static int ToInt32 (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.Int32
      description: A 32-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt32*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.UInt32)
  commentId: M:System.Convert.ToInt32(System.UInt32)
  id: ToInt32(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(UInt32)
  nameWithType: Convert.ToInt32(UInt32)
  fullName: Convert.ToInt32(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of unsigned integers to a signed integer.  \n  \n [!code-csharp[System.Convert.ToInt32#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#13)]\n [!code-vb[System.Convert.ToInt32#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#13)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static int ToInt32 (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.Int32
      description: A 32-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int32.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.SByte)
  commentId: M:System.Convert.ToInt32(System.SByte)
  id: ToInt32(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(SByte)
  nameWithType: Convert.ToInt32(SByte)
  fullName: Convert.ToInt32(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of signed bytes to an integer.  \n  \n [!code-csharp[System.Convert.ToInt32#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#9)]\n [!code-vb[System.Convert.ToInt32#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static int ToInt32 (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.Int32
      description: A 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt32*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToInt32(System.Object,System.IFormatProvider)
  id: ToInt32(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(Object, IFormatProvider)
  nameWithType: Convert.ToInt32(Object, IFormatProvider)
  fullName: Convert.ToInt32(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.IConvertible.ToInt32%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."
  example:
  - "The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToInt32` method. This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  \n  \n [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]\n [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]\n [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]"
  syntax:
    content: public static int ToInt32 (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Int32
      description: A 32-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToInt32*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>value</code> does not implement <xref href="System.IConvertible"></xref>.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Int32.MinValue"></xref> or greater than <xref href="System.Int32.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToInt32(System.String,System.IFormatProvider)
  id: ToInt32(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(String, IFormatProvider)
  nameWithType: Convert.ToInt32(String, IFormatProvider)
  fullName: Convert.ToInt32(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.Int32.Parse%2A?displayProperty=fullName> method on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string \"pos\" as the positive sign and the string \"neg\" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  \n  \n [!code-csharp[System.Convert.ToInt32#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_2.cs#15)]\n [!code-vb[System.Convert.ToInt32#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_2.vb#15)]"
  syntax:
    content: public static int ToInt32 (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Int32
      description: A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToInt32*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Int32.MinValue"></xref> or greater than <xref href="System.Int32.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.String,System.Int32)
  commentId: M:System.Convert.ToInt32(System.String,System.Int32)
  id: ToInt32(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(String, Int32)
  nameWithType: Convert.ToInt32(String, Int32)
  fullName: Convert.ToInt32(String, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.
  remarks: "If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int32> data type is converted to an <xref:System.Int32> value without the method throwing an exception. The following example increments <xref:System.Int32?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x80000000 converts to -2147483648.\"  \n  \n [!code-cpp[System.Convert.BaseConversion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#1)]\n [!code-csharp[System.Convert.BaseConversion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#1)]\n [!code-vb[System.Convert.BaseConversion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#1)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.  \n  \n [!code-cpp[System.Convert.BaseConversion#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#2)]\n [!code-csharp[System.Convert.BaseConversion#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#2)]\n [!code-vb[System.Convert.BaseConversion#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#2)]"
  syntax:
    content: public static int ToInt32 (string value, int fromBase);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: fromBase
      type: System.Int32
      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.
    return:
      type: System.Int32
      description: A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToInt32*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>value</code> is <xref href="System.String.Empty"></xref>.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.Int32.MinValue\"></xref> or greater than <xref href=\"System.Int32.MaxValue\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.UInt64)
  commentId: M:System.Convert.ToInt32(System.UInt64)
  id: ToInt32(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(UInt64)
  nameWithType: Convert.ToInt32(UInt64)
  fullName: Convert.ToInt32(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of unsigned long integers to a signed integer.  \n  \n [!code-csharp[System.Convert.ToInt32#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#14)]\n [!code-vb[System.Convert.ToInt32#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#14)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static int ToInt32 (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.Int32
      description: A 32-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int32.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.Object)
  commentId: M:System.Convert.ToInt32(System.Object)
  id: ToInt32(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(Object)
  nameWithType: Convert.ToInt32(Object)
  fullName: Convert.ToInt32(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a 32-bit signed integer.
  remarks: If`value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt32%2A?displayProperty=fullName>implementation of the underlying type of `value`.
  example:
  - "The following example attempts to convert each element in an object array to an integer.  \n  \n [!code-csharp[System.Convert.ToInt32#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#8)]\n [!code-vb[System.Convert.ToInt32#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#8)]"
  syntax:
    content: public static int ToInt32 (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.Int32
      description: A 32-bit signed integer equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToInt32*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the  <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Int32.MinValue"></xref> or greater than <xref href="System.Int32.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.String)
  commentId: M:System.Convert.ToInt32(System.String)
  id: ToInt32(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(String)
  nameWithType: Convert.ToInt32(String)
  fullName: Convert.ToInt32(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 32-bit signed integer.
  remarks: "Using the <xref:System.Convert.ToInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int32.Parse%28System.String%29?displayProperty=fullName> method.`value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example attempts to convert each element in a numeric string array to an integer.  \n  \n [!code-csharp[System.Convert.ToInt32#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#11)]\n [!code-vb[System.Convert.ToInt32#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#11)]"
  syntax:
    content: public static int ToInt32 (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    return:
      type: System.Int32
      description: A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToInt32*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Int32.MinValue"></xref> or greater than <xref href="System.Int32.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.Int32)
  commentId: M:System.Convert.ToInt32(System.Int32)
  id: ToInt32(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(Int32)
  nameWithType: Convert.ToInt32(Int32)
  fullName: Convert.ToInt32(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the specified 32-bit signed integer; no actual conversion is performed.
  syntax:
    content: public static int ToInt32 (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to return.
    return:
      type: System.Int32
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToInt32*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.Byte)
  commentId: M:System.Convert.ToInt32(System.Byte)
  id: ToInt32(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(Byte)
  nameWithType: Convert.ToInt32(Byte)
  fullName: Convert.ToInt32(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of bytes to an integer.  \n  \n [!code-csharp[System.Convert.ToInt32#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#2)]\n [!code-vb[System.Convert.ToInt32#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#2)]"
  syntax:
    content: public static int ToInt32 (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.Int32
      description: A 32-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt32*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.Char)
  commentId: M:System.Convert.ToInt32(System.Char)
  id: ToInt32(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(Char)
  nameWithType: Convert.ToInt32(Char)
  fullName: Convert.ToInt32(Char)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.
  remarks: The <xref:System.Convert.ToInt32%28System.Char%29> method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the `value` argument. If `value` is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value.
  example:
  - "The following example converts each element in an array of <xref:System.Char> values to an integer.  \n  \n [!code-csharp[System.Convert.ToInt32#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#3)]\n [!code-vb[System.Convert.ToInt32#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#3)]"
  syntax:
    content: public static int ToInt32 (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Int32
      description: A 32-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt32*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.DateTime)
  commentId: M:System.Convert.ToInt32(System.DateTime)
  id: ToInt32(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(DateTime)
  nameWithType: Convert.ToInt32(DateTime)
  fullName: Convert.ToInt32(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static int ToInt32 (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.Int32
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToInt32*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.Boolean)
  commentId: M:System.Convert.ToInt32(System.Boolean)
  id: ToInt32(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(Boolean)
  nameWithType: Convert.ToInt32(Boolean)
  fullName: Convert.ToInt32(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to the equivalent 32-bit signed integer.
  remarks: ''
  example:
  - "The following example converts the <xref:System.Boolean> values `true` and `false` to integers.  \n  \n [!code-csharp[System.Convert.ToInt32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#1)]\n [!code-vb[System.Convert.ToInt32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#1)]"
  syntax:
    content: public static int ToInt32 (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.Int32
      description: The number 1 if <code>value</code> is `true`; otherwise, 0.
  overload: System.Convert.ToInt32*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.Double)
  commentId: M:System.Convert.ToInt32(System.Double)
  id: ToInt32(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(Double)
  nameWithType: Convert.ToInt32(Double)
  fullName: Convert.ToInt32(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Double> values to aninteger.  \n  \n [!code-csharp[System.Convert.ToInt32#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#5)]\n [!code-vb[System.Convert.ToInt32#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#5)]"
  syntax:
    content: public static int ToInt32 (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.Int32
      description: <code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int32.MaxValue"></xref> or less than <xref href="System.Int32.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.Int64)
  commentId: M:System.Convert.ToInt32(System.Int64)
  id: ToInt32(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(Int64)
  nameWithType: Convert.ToInt32(Int64)
  fullName: Convert.ToInt32(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of long integers to an integer.  \n  \n [!code-csharp[System.Convert.ToInt32#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#7)]\n [!code-vb[System.Convert.ToInt32#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#7)]"
  syntax:
    content: public static int ToInt32 (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.Int32
      description: A 32-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int32.MaxValue"></xref> or less than <xref href="System.Int32.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.Int16)
  commentId: M:System.Convert.ToInt32(System.Int16)
  id: ToInt32(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(Int16)
  nameWithType: Convert.ToInt32(Int16)
  fullName: Convert.ToInt32(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of 16-bit signed integers to an integer.  \n  \n [!code-csharp[System.Convert.ToInt32#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#6)]\n [!code-vb[System.Convert.ToInt32#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#6)]"
  syntax:
    content: public static int ToInt32 (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.Int32
      description: A 32-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt32*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt32(System.Decimal)
  commentId: M:System.Convert.ToInt32(System.Decimal)
  id: ToInt32(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt32(Decimal)
  nameWithType: Convert.ToInt32(Decimal)
  fullName: Convert.ToInt32(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to an equivalent 32-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Decimal> values to an integer.  \n  \n [!code-csharp[System.Convert.ToInt32#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#4)]\n [!code-vb[System.Convert.ToInt32#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#4)]"
  syntax:
    content: public static int ToInt32 (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal number to convert.
    return:
      type: System.Int32
      description: <code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int32.MaxValue"></xref> or less than <xref href="System.Int32.MinValue"></xref>.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.Single)
  commentId: M:System.Convert.ToInt64(System.Single)
  id: ToInt64(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(Single)
  nameWithType: Convert.ToInt64(Single)
  fullName: Convert.ToInt64(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Single> values to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#10)]\n [!code-vb[System.Convert.ToInt64#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#10)]"
  syntax:
    content: public static long ToInt64 (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to convert.
    return:
      type: System.Int64
      description: <code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToInt64*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int64.MaxValue"></xref> or less than <xref href="System.Int64.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.String,System.Int32)
  commentId: M:System.Convert.ToInt64(System.String,System.Int32)
  id: ToInt64(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(String, Int32)
  nameWithType: Convert.ToInt64(String, Int32)
  fullName: Convert.ToInt64(String, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.
  remarks: "If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int64> data type is converted to an <xref:System.Int64> value without the method throwing an exception. The following example converts <xref:System.UInt64.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0xFFFFFFFFFFFFFFFF converts to -1.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#7)]\n [!code-vb[System.Convert.BaseConversion#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#7)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on.  \n  \n [!code-csharp[System.Convert.BaseConversion#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#8)]\n [!code-vb[System.Convert.BaseConversion#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#8)]  \n  \n The following example attempts to interpret each element in a string array as a hexadecimal string and convert it to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_2.cs#15)]\n [!code-vb[System.Convert.ToInt64#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_2.vb#15)]"
  syntax:
    content: public static long ToInt64 (string value, int fromBase);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: fromBase
      type: System.Int32
      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToInt64*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>value</code> is <xref href="System.String.Empty"></xref>.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.Int64.MinValue\"></xref> or greater than <xref href=\"System.Int64.MaxValue\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToInt64(System.String,System.IFormatProvider)
  id: ToInt64(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(String, IFormatProvider)
  nameWithType: Convert.ToInt64(String, IFormatProvider)
  fullName: Convert.ToInt64(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.Int64.Parse%2A?displayProperty=fullName> method on `value`.  \n  \n `provider` is an `IFormatProvider` instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The `NumberFormatInfo` object provides culture-specific information about the format of `value`. If `provider` is `null`, the `NumberFormatInfo` for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string \"pos\" as the positive sign and the string \"neg\" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  \n  \n [!code-csharp[System.Convert.ToInt64#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_3.cs#16)]\n [!code-vb[System.Convert.ToInt64#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_3.vb#16)]"
  syntax:
    content: public static long ToInt64 (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToInt64*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Int64.MinValue"></xref> or greater than <xref href="System.Int64.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToInt64(System.Object,System.IFormatProvider)
  id: ToInt64(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(Object, IFormatProvider)
  nameWithType: Convert.ToInt64(Object, IFormatProvider)
  fullName: Convert.ToInt64(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.IConvertible.ToInt64%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."
  example:
  - "The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToInt64` method. This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  \n  \n [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]\n [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]\n [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]"
  syntax:
    content: public static long ToInt64 (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToInt64*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Int64.MinValue"></xref> or greater than <xref href="System.Int64.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.UInt64)
  commentId: M:System.Convert.ToInt64(System.UInt64)
  id: ToInt64(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(UInt64)
  nameWithType: Convert.ToInt64(UInt64)
  fullName: Convert.ToInt64(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of unsigned long integers to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#14)]\n [!code-vb[System.Convert.ToInt64#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#14)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static long ToInt64 (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt64*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int64.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.UInt32)
  commentId: M:System.Convert.ToInt64(System.UInt32)
  id: ToInt64(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(UInt32)
  nameWithType: Convert.ToInt64(UInt32)
  fullName: Convert.ToInt64(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of unsigned integers to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#13)]\n [!code-vb[System.Convert.ToInt64#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#13)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static long ToInt64 (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt64*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.UInt16)
  commentId: M:System.Convert.ToInt64(System.UInt16)
  id: ToInt64(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(UInt16)
  nameWithType: Convert.ToInt64(UInt16)
  fullName: Convert.ToInt64(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of 16-bit unsigned integers to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#12)]\n [!code-vb[System.Convert.ToInt64#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#12)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static long ToInt64 (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt64*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.String)
  commentId: M:System.Convert.ToInt64(System.String)
  id: ToInt64(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(String)
  nameWithType: Convert.ToInt64(String)
  fullName: Convert.ToInt64(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 64-bit signed integer.
  remarks: "Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example attempts to convert each element in an array of numeric strings to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#11)]\n [!code-vb[System.Convert.ToInt64#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#11)]"
  syntax:
    content: public static long ToInt64 (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains a number to convert.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToInt64*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Int64.MinValue"></xref> or greater than <xref href="System.Int64.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.SByte)
  commentId: M:System.Convert.ToInt64(System.SByte)
  id: ToInt64(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(SByte)
  nameWithType: Convert.ToInt64(SByte)
  fullName: Convert.ToInt64(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in a signed byte array to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#9)]\n [!code-vb[System.Convert.ToInt64#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static long ToInt64 (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt64*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.Object)
  commentId: M:System.Convert.ToInt64(System.Object)
  id: ToInt64(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(Object)
  nameWithType: Convert.ToInt64(Object)
  fullName: Convert.ToInt64(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a 64-bit signed integer.
  remarks: If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt64%2A?displayProperty=fullName> implementation of the underlying type of `value`.
  example:
  - "The following example attempts to convert each element in an object array to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#8)]\n [!code-vb[System.Convert.ToInt64#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#8)]"
  syntax:
    content: public static long ToInt64 (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToInt64*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Int64.MinValue"></xref> or greater than <xref href="System.Int64.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.Int64)
  commentId: M:System.Convert.ToInt64(System.Int64)
  id: ToInt64(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(Int64)
  nameWithType: Convert.ToInt64(Int64)
  fullName: Convert.ToInt64(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the specified 64-bit signed integer; no actual conversion is performed.
  remarks: ''
  example:
  - "The following example converts each element in an array of integers to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#7)]\n [!code-vb[System.Convert.ToInt64#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#7)]"
  syntax:
    content: public static long ToInt64 (long value);
    parameters:
    - id: value
      type: System.Int64
      description: A 64-bit signed integer.
    return:
      type: System.Int64
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToInt64*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.Byte)
  commentId: M:System.Convert.ToInt64(System.Byte)
  id: ToInt64(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(Byte)
  nameWithType: Convert.ToInt64(Byte)
  fullName: Convert.ToInt64(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of bytes to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#2)]\n [!code-vb[System.Convert.ToInt64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#2)]"
  syntax:
    content: public static long ToInt64 (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt64*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.Char)
  commentId: M:System.Convert.ToInt64(System.Char)
  id: ToInt64(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(Char)
  nameWithType: Convert.ToInt64(Char)
  fullName: Convert.ToInt64(Char)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in a <xref:System.Char> array to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#3)]\n [!code-vb[System.Convert.ToInt64#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#3)]"
  syntax:
    content: public static long ToInt64 (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt64*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.DateTime)
  commentId: M:System.Convert.ToInt64(System.DateTime)
  id: ToInt64(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(DateTime)
  nameWithType: Convert.ToInt64(DateTime)
  fullName: Convert.ToInt64(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static long ToInt64 (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.Int64
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToInt64*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.Boolean)
  commentId: M:System.Convert.ToInt64(System.Boolean)
  id: ToInt64(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(Boolean)
  nameWithType: Convert.ToInt64(Boolean)
  fullName: Convert.ToInt64(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to the equivalent 64-bit signed integer.
  remarks: ''
  example:
  - "The following example converts the <xref:System.Boolean> values `true` and `false` to long integers.  \n  \n [!code-csharp[System.Convert.ToInt64#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#1)]\n [!code-vb[System.Convert.ToInt64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#1)]"
  syntax:
    content: public static long ToInt64 (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.Int64
      description: The number 1 if <code>value</code> is `true`; otherwise, 0.
  overload: System.Convert.ToInt64*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.Double)
  commentId: M:System.Convert.ToInt64(System.Double)
  id: ToInt64(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(Double)
  nameWithType: Convert.ToInt64(Double)
  fullName: Convert.ToInt64(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Double> values to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#5)]\n [!code-vb[System.Convert.ToInt64#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#5)]"
  syntax:
    content: public static long ToInt64 (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.Int64
      description: <code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToInt64*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int64.MaxValue"></xref> or less than <xref href="System.Int64.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.Int16)
  commentId: M:System.Convert.ToInt64(System.Int16)
  id: ToInt64(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(Int16)
  nameWithType: Convert.ToInt64(Int16)
  fullName: Convert.ToInt64(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of 16-bit integers to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#6)]\n [!code-vb[System.Convert.ToInt64#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#6)]"
  syntax:
    content: public static long ToInt64 (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt64*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.Int32)
  commentId: M:System.Convert.ToInt64(System.Int32)
  id: ToInt64(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(Int32)
  nameWithType: Convert.ToInt64(Int32)
  fullName: Convert.ToInt64(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.
  syntax:
    content: public static long ToInt64 (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.Int64
      description: A 64-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToInt64*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToInt64(System.Decimal)
  commentId: M:System.Convert.ToInt64(System.Decimal)
  id: ToInt64(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToInt64(Decimal)
  nameWithType: Convert.ToInt64(Decimal)
  fullName: Convert.ToInt64(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to an equivalent 64-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Decimal> values to a long integer.  \n  \n [!code-csharp[System.Convert.ToInt64#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#4)]\n [!code-vb[System.Convert.ToInt64#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#4)]"
  syntax:
    content: public static long ToInt64 (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal number to convert.
    return:
      type: System.Int64
      description: <code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToInt64*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.Int64.MaxValue"></xref> or less than <xref href="System.Int64.MinValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.SByte)
  commentId: M:System.Convert.ToSByte(System.SByte)
  id: ToSByte(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(SByte)
  nameWithType: Convert.ToSByte(SByte)
  fullName: Convert.ToSByte(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the specified 8-bit signed integer; no actual conversion is performed.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to return.
    return:
      type: System.SByte
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToSByte*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.String,System.Int32)
  commentId: M:System.Convert.ToSByte(System.String,System.Int32)
  id: ToSByte(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(String, Int32)
  nameWithType: Convert.ToSByte(String, Int32)
  fullName: Convert.ToSByte(String, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.
  remarks: "If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.SByte> data type is converted to an <xref:System.SByte> value without the method throwing an exception. The following example converts <xref:System.Byte.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0xff converts to -1.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#9)]\n [!code-vb[System.Convert.BaseConversion#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#9)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on.  \n  \n [!code-csharp[System.Convert.BaseConversion#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#10)]\n [!code-vb[System.Convert.BaseConversion#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#10)]"
  example:
  - "The following example attempts to interpret the elements in a string array as the binary, octal, and hexadecimal representation of numeric values in order to convert them to unsigned bytes.  \n  \n [!code-csharp[System.Convert.ToSByte#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte3.cs#16)]\n [!code-vb[System.Convert.ToSByte#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte3.vb#16)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (string value, int fromBase);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: fromBase
      type: System.Int32
      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>value</code> is <xref href="System.String.Empty"></xref>.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.SByte.MinValue\"></xref> or greater than <xref href=\"System.SByte.MaxValue\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToSByte(System.String,System.IFormatProvider)
  id: ToSByte(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(String, IFormatProvider)
  nameWithType: Convert.ToSByte(String, IFormatProvider)
  fullName: Convert.ToSByte(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.
  remarks: "`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example converts string representations of <xref:System.SByte> values with the `ToSByte` method, using an <xref:System.IFormatProvider> object.  \n  \n [!code-cpp[System.Convert.ToSInts_String#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/tosbyte.cpp#4)]\n [!code-csharp[System.Convert.ToSInts_String#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/tosbyte.cs#4)]\n [!code-vb[System.Convert.ToSInts_String#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/tosbyte.vb#4)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.SByte.MinValue"></xref> or greater than <xref href="System.SByte.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToSByte(System.Object,System.IFormatProvider)
  id: ToSByte(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(Object, IFormatProvider)
  nameWithType: Convert.ToSByte(Object, IFormatProvider)
  fullName: Convert.ToSByte(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.
  remarks: "`provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."
  example:
  - "The following example defines a `ByteString` class that stores both signed and unsigned bytes as hexadecimal strings along with a field that indicates the sign of the byte. The `ByteString` class implements the <xref:System.IConvertible> interface. Its <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName> method calls the <xref:System.SByte.Parse%28System.String%2CSystem.IFormatProvider%29> method to perform the conversion. If it fails, it throws an <xref:System.OverflowException>.  \n  \n [!code-csharp[System.Convert.ToSByte#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte2.cs#14)]\n [!code-vb[System.Convert.ToSByte#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte2.vb#14)]  \n  \n The following example shows how the <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName> implementation of the `ByteString` class is called by the <xref:System.Convert.ToSByte%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName> method.  \n  \n [!code-csharp[System.Convert.ToSByte#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte2.cs#15)]\n [!code-vb[System.Convert.ToSByte#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte2.vb#15)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.SByte.MinValue"></xref> or greater than <xref href="System.SByte.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.UInt64)
  commentId: M:System.Convert.ToSByte(System.UInt64)
  id: ToSByte(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(UInt64)
  nameWithType: Convert.ToSByte(UInt64)
  fullName: Convert.ToSByte(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of long integers to a signed byte.  \n  \n [!code-csharp[System.Convert.ToSByte#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#13)]\n [!code-vb[System.Convert.ToSByte#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#13)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.SByte.MaxValue"></xref> or less than <xref href="System.SByte.MinValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.UInt32)
  commentId: M:System.Convert.ToSByte(System.UInt32)
  id: ToSByte(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(UInt32)
  nameWithType: Convert.ToSByte(UInt32)
  fullName: Convert.ToSByte(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an integer array to a signed byte.  \n  \n [!code-csharp[System.Convert.ToSByte#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#12)]\n [!code-vb[System.Convert.ToSByte#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#12)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.SByte.MaxValue"></xref> or less than <xref href="System.SByte.MinValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.String)
  commentId: M:System.Convert.ToSByte(System.String)
  id: ToSByte(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(String)
  nameWithType: Convert.ToSByte(String)
  fullName: Convert.ToSByte(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 8-bit signed integer.
  remarks: "Using the <xref:System.Convert.ToSByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.SByte.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example converts string representations of <xref:System.SByte> values with the `ToSByte` method, using default formatting.  \n  \n [!code-cpp[System.Convert.ToSInts_String#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/tosbyte.cpp#4)]\n [!code-csharp[System.Convert.ToSInts_String#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/tosbyte.cs#4)]\n [!code-vb[System.Convert.ToSInts_String#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/tosbyte.vb#4)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if value is `null`.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.SByte.MinValue"></xref> or greater than <xref href="System.SByte.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.Single)
  commentId: M:System.Convert.ToSByte(System.Single)
  id: ToSByte(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(Single)
  nameWithType: Convert.ToSByte(Single)
  fullName: Convert.ToSByte(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Single> values to a signed byte.  \n  \n [!code-csharp[System.Convert.ToSByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#9)]\n [!code-vb[System.Convert.ToSByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to convert.
    return:
      type: System.SByte
      description: <code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.SByte.MaxValue"></xref> or less than <xref href="System.SByte.MinValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.Object)
  commentId: M:System.Convert.ToSByte(System.Object)
  id: ToSByte(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(Object)
  nameWithType: Convert.ToSByte(Object)
  fullName: Convert.ToSByte(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to an 8-bit signed integer.
  remarks: The return value is the result of invoking the <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName> method of the underlying type of `value`.
  example:
  - "The following example attempts to convert each element in an object array to a signed byte.  \n  \n [!code-csharp[System.Convert.ToSByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#9)]\n [!code-vb[System.Convert.ToSByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.SByte.MinValue"></xref> or greater than <xref href="System.SByte.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.UInt16)
  commentId: M:System.Convert.ToSByte(System.UInt16)
  id: ToSByte(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(UInt16)
  nameWithType: Convert.ToSByte(UInt16)
  fullName: Convert.ToSByte(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of unsigned 16-bit integers to a signed byte.  \n  \n [!code-csharp[System.Convert.ToSByte#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#11)]\n [!code-vb[System.Convert.ToSByte#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#11)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.SByte.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.Int32)
  commentId: M:System.Convert.ToSByte(System.Int32)
  id: ToSByte(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(Int32)
  nameWithType: Convert.ToSByte(Int32)
  fullName: Convert.ToSByte(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of signed integers to a signed byte.  \n  \n [!code-csharp[System.Convert.ToSByte#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#7)]\n [!code-vb[System.Convert.ToSByte#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#7)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.SByte.MaxValue"></xref> or less than <xref href="System.SByte.MinValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.Int64)
  commentId: M:System.Convert.ToSByte(System.Int64)
  id: ToSByte(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(Int64)
  nameWithType: Convert.ToSByte(Int64)
  fullName: Convert.ToSByte(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of long integers to a signed byte.  \n  \n [!code-csharp[System.Convert.ToSByte#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#8)]\n [!code-vb[System.Convert.ToSByte#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#8)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.SByte.MaxValue"></xref> or less than <xref href="System.SByte.MinValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.Byte)
  commentId: M:System.Convert.ToSByte(System.Byte)
  id: ToSByte(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(Byte)
  nameWithType: Convert.ToSByte(Byte)
  fullName: Convert.ToSByte(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in a byte array to a signed byte.  \n  \n [!code-csharp[System.Convert.ToSByte#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#2)]\n [!code-vb[System.Convert.ToSByte#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#2)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.SByte.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.Char)
  commentId: M:System.Convert.ToSByte(System.Char)
  id: ToSByte(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(Char)
  nameWithType: Convert.ToSByte(Char)
  fullName: Convert.ToSByte(Char)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Char> values to a signed byte.  \n  \n [!code-csharp[System.Convert.ToSByte#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#3)]\n [!code-vb[System.Convert.ToSByte#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#3)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.SByte.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.DateTime)
  commentId: M:System.Convert.ToSByte(System.DateTime)
  id: ToSByte(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(DateTime)
  nameWithType: Convert.ToSByte(DateTime)
  fullName: Convert.ToSByte(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.SByte
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.Boolean)
  commentId: M:System.Convert.ToSByte(System.Boolean)
  id: ToSByte(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(Boolean)
  nameWithType: Convert.ToSByte(Boolean)
  fullName: Convert.ToSByte(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to the equivalent 8-bit signed integer.
  remarks: ''
  example:
  - "The following example converts the Boolean values `true` and `false` to signed byte values.  \n  \n [!code-csharp[System.Convert.ToSByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#1)]\n [!code-vb[System.Convert.ToSByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#1)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.SByte
      description: The number 1 if <code>value</code> is `true`; otherwise, 0.
  overload: System.Convert.ToSByte*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.Double)
  commentId: M:System.Convert.ToSByte(System.Double)
  id: ToSByte(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(Double)
  nameWithType: Convert.ToSByte(Double)
  fullName: Convert.ToSByte(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Double> values to a signed byte.  \n  \n [!code-csharp[System.Convert.ToSByte#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#5)]\n [!code-vb[System.Convert.ToSByte#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#5)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.SByte
      description: <code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.SByte.MaxValue"></xref> or less than <xref href="System.SByte.MinValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.Int16)
  commentId: M:System.Convert.ToSByte(System.Int16)
  id: ToSByte(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(Int16)
  nameWithType: Convert.ToSByte(Int16)
  fullName: Convert.ToSByte(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of signed 16-bit integers to a signed byte.  \n  \n [!code-csharp[System.Convert.ToSByte#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#6)]\n [!code-vb[System.Convert.ToSByte#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#6)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.SByte
      description: An 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.SByte.MaxValue"></xref> or less than <xref href="System.SByte.MinValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSByte(System.Decimal)
  commentId: M:System.Convert.ToSByte(System.Decimal)
  id: ToSByte(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToSByte(Decimal)
  nameWithType: Convert.ToSByte(Decimal)
  fullName: Convert.ToSByte(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to an equivalent 8-bit signed integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Decimal> values to a signed byte.  \n  \n [!code-csharp[System.Convert.ToSByte#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#4)]\n [!code-vb[System.Convert.ToSByte#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#4)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte ToSByte (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal number to convert.
    return:
      type: System.SByte
      description: <code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToSByte*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.SByte.MaxValue"></xref> or less than <xref href="System.SByte.MinValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToSingle(System.String,System.IFormatProvider)
  id: ToSingle(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(String, IFormatProvider)
  nameWithType: Convert.ToSingle(String, IFormatProvider)
  fullName: Convert.ToSingle(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.Single.Parse%2A?displayProperty=fullName> method on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example uses <xref:System.IFormatProvider> objects that represent the en-US and fr-FR cultures when it converts the elements in an array of numeric strings to <xref:System.Single> values.  \n  \n [!code-csharp[System.Convert.ToSingle#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle3.cs#16)]\n [!code-vb[System.Convert.ToSingle#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle3.vb#16)]"
  syntax:
    content: public static float ToSingle (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Single
      description: A single-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToSingle*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not a number in a valid format.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Single.MinValue"></xref> or greater than <xref href="System.Single.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.SByte)
  commentId: M:System.Convert.ToSingle(System.SByte)
  id: ToSingle(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(SByte)
  nameWithType: Convert.ToSingle(SByte)
  fullName: Convert.ToSingle(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in a signed byte array to a <xref:System.Single> value.  \n  \n [!code-csharp[System.Convert.ToSingle#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#9)]\n [!code-vb[System.Convert.ToSingle#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static float ToSingle (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.Single
      description: An 8-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToSingle*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToSingle(System.Object,System.IFormatProvider)
  id: ToSingle(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(Object, IFormatProvider)
  nameWithType: Convert.ToSingle(Object, IFormatProvider)
  fullName: Convert.ToSingle(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."
  example:
  - "The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface. Its implementation of the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method returns the internal value of a private <xref:System.Single> variable that represents the temperature.  \n  \n [!code-csharp[System.Convert.ToSingle#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle2.cs#14)]\n [!code-vb[System.Convert.ToSingle#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle2.vb#14)]  \n  \n The following example illustrates how a call to the <xref:System.Convert.ToSingle%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName> method, in turn, calls the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> implementation of the `Temperature` class.  \n  \n [!code-csharp[System.Convert.ToSingle#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle2.cs#15)]\n [!code-vb[System.Convert.ToSingle#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle2.vb#15)]"
  syntax:
    content: public static float ToSingle (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.Single
      description: A single-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToSingle*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>value</code> does not implement <xref href="System.IConvertible"></xref>.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Single.MinValue"></xref> or greater than <xref href="System.Single.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.UInt64)
  commentId: M:System.Convert.ToSingle(System.UInt64)
  id: ToSingle(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(UInt64)
  nameWithType: Convert.ToSingle(UInt64)
  fullName: Convert.ToSingle(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of unsigned long integers to a <xref:System.Single> value.  \n  \n [!code-csharp[System.Convert.ToSingle#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#13)]\n [!code-vb[System.Convert.ToSingle#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#13)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static float ToSingle (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.Single
      description: A single-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToSingle*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.UInt32)
  commentId: M:System.Convert.ToSingle(System.UInt32)
  id: ToSingle(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(UInt32)
  nameWithType: Convert.ToSingle(UInt32)
  fullName: Convert.ToSingle(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of unsigned integers to a <xref:System.Single> value.  \n  \n [!code-csharp[System.Convert.ToSingle#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#12)]\n [!code-vb[System.Convert.ToSingle#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#12)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static float ToSingle (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.Single
      description: A single-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToSingle*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.String)
  commentId: M:System.Convert.ToSingle(System.String)
  id: ToSingle(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(String)
  nameWithType: Convert.ToSingle(String)
  fullName: Convert.ToSingle(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent single-precision floating-point number.
  remarks: "Using the <xref:System.Convert.ToSingle%28System.String%29> method is equivalent to passing `value` to the <xref:System.Single.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example attempts to convert each element in an array of numeric strings to a <xref:System.Single> value.  \n  \n [!code-csharp[System.Convert.ToSingle#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#10)]\n [!code-vb[System.Convert.ToSingle#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#10)]"
  syntax:
    content: public static float ToSingle (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    return:
      type: System.Single
      description: A single-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToSingle*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not a number in a valid format.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Single.MinValue"></xref> or greater than <xref href="System.Single.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.Single)
  commentId: M:System.Convert.ToSingle(System.Single)
  id: ToSingle(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(Single)
  nameWithType: Convert.ToSingle(Single)
  fullName: Convert.ToSingle(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the specified single-precision floating-point number; no actual conversion is performed.
  syntax:
    content: public static float ToSingle (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to return.
    return:
      type: System.Single
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToSingle*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.Object)
  commentId: M:System.Convert.ToSingle(System.Object)
  id: ToSingle(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(Object)
  nameWithType: Convert.ToSingle(Object)
  fullName: Convert.ToSingle(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a single-precision floating-point number.
  remarks: The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method of the underlying type of `value`.
  example:
  - "The following example attempts to convert each element in an object array to a <xref:System.Single> value.  \n  \n [!code-csharp[System.Convert.ToSingle#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#8)]\n [!code-vb[System.Convert.ToSingle#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#8)]"
  syntax:
    content: public static float ToSingle (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.Single
      description: A single-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToSingle*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.Single.MinValue"></xref> or greater than <xref href="System.Single.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.UInt16)
  commentId: M:System.Convert.ToSingle(System.UInt16)
  id: ToSingle(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(UInt16)
  nameWithType: Convert.ToSingle(UInt16)
  fullName: Convert.ToSingle(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of unsigned 16-bit integers to a <xref:System.Single> value.  \n  \n [!code-csharp[System.Convert.ToSingle#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#11)]\n [!code-vb[System.Convert.ToSingle#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#11)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static float ToSingle (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.Single
      description: A single-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToSingle*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.Int32)
  commentId: M:System.Convert.ToSingle(System.Int32)
  id: ToSingle(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(Int32)
  nameWithType: Convert.ToSingle(Int32)
  fullName: Convert.ToSingle(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an integer array to a <xref:System.Single> value.  \n  \n [!code-csharp[System.Convert.ToSingle#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#6)]\n [!code-vb[System.Convert.ToSingle#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#6)]"
  syntax:
    content: public static float ToSingle (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.Single
      description: A single-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToSingle*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.Int16)
  commentId: M:System.Convert.ToSingle(System.Int16)
  id: ToSingle(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(Int16)
  nameWithType: Convert.ToSingle(Int16)
  fullName: Convert.ToSingle(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of 16-bit integers to a <xref:System.Single> value.  \n  \n [!code-csharp[System.Convert.ToSingle#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#5)]\n [!code-vb[System.Convert.ToSingle#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#5)]"
  syntax:
    content: public static float ToSingle (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.Single
      description: A single-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToSingle*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.Double)
  commentId: M:System.Convert.ToSingle(System.Double)
  id: ToSingle(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(Double)
  nameWithType: Convert.ToSingle(Double)
  fullName: Convert.ToSingle(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of <xref:System.Double> values to a <xref:System.Single> value.  \n  \n [!code-csharp[System.Convert.ToSingle#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#4)]\n [!code-vb[System.Convert.ToSingle#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#4)]"
  syntax:
    content: public static float ToSingle (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.Single
      description: "A single-precision floating-point number that is equivalent to <code>value</code>.  \n  \n <code>value</code> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36."
  overload: System.Convert.ToSingle*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.Decimal)
  commentId: M:System.Convert.ToSingle(System.Decimal)
  id: ToSingle(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(Decimal)
  nameWithType: Convert.ToSingle(Decimal)
  fullName: Convert.ToSingle(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to an equivalent single-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of <xref:System.Decimal> values to a <xref:System.Single> value.  \n  \n [!code-csharp[System.Convert.ToSingle#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#3)]\n [!code-vb[System.Convert.ToSingle#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#3)]"
  syntax:
    content: public static float ToSingle (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal number to convert.
    return:
      type: System.Single
      description: "A single-precision floating-point number that is equivalent to <code>value</code>.  \n  \n <code>value</code> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36."
  overload: System.Convert.ToSingle*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.DateTime)
  commentId: M:System.Convert.ToSingle(System.DateTime)
  id: ToSingle(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(DateTime)
  nameWithType: Convert.ToSingle(DateTime)
  fullName: Convert.ToSingle(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static float ToSingle (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.Single
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToSingle*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.Char)
  commentId: M:System.Convert.ToSingle(System.Char)
  id: ToSingle(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(Char)
  nameWithType: Convert.ToSingle(Char)
  fullName: Convert.ToSingle(Char)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: public static float ToSingle (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Single
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToSingle*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.Byte)
  commentId: M:System.Convert.ToSingle(System.Byte)
  id: ToSingle(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(Byte)
  nameWithType: Convert.ToSingle(Byte)
  fullName: Convert.ToSingle(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of byte values to a <xref:System.Single> value.  \n  \n [!code-csharp[System.Convert.ToSingle#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#2)]\n [!code-vb[System.Convert.ToSingle#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#2)]"
  syntax:
    content: public static float ToSingle (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.Single
      description: A single-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToSingle*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.Boolean)
  commentId: M:System.Convert.ToSingle(System.Boolean)
  id: ToSingle(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(Boolean)
  nameWithType: Convert.ToSingle(Boolean)
  fullName: Convert.ToSingle(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to the equivalent single-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts the Boolean values `true` and `false` to <xref:System.Single> values.  \n  \n [!code-csharp[System.Convert.ToSingle#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#1)]\n [!code-vb[System.Convert.ToSingle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#1)]"
  syntax:
    content: public static float ToSingle (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.Single
      description: The number 1 if <code>value</code> is `true`; otherwise, 0.
  overload: System.Convert.ToSingle*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToSingle(System.Int64)
  commentId: M:System.Convert.ToSingle(System.Int64)
  id: ToSingle(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToSingle(Int64)
  nameWithType: Convert.ToSingle(Int64)
  fullName: Convert.ToSingle(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.
  remarks: ''
  example:
  - "The following example converts each element in an array of long integers to a <xref:System.Single> value.  \n  \n [!code-csharp[System.Convert.ToSingle#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#7)]\n [!code-vb[System.Convert.ToSingle#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#7)]"
  syntax:
    content: public static float ToSingle (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.Single
      description: A single-precision floating-point number that is equivalent to <code>value</code>.
  overload: System.Convert.ToSingle*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Int16,System.Int32)
  commentId: M:System.Convert.ToString(System.Int16,System.Int32)
  id: ToString(System.Int16,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Int16, Int32)
  nameWithType: Convert.ToString(Int16, Int32)
  fullName: Convert.ToString(Int16, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.
  remarks: If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation. This means that the high-order bit of the high-order byte (bit 15) is interpreted as the sign bit. If the <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.
  example:
  - "The following example converts each element in an array of 16-bit signed integers to its equivalent binary, octal, decimal, and hexadecimal string representations.  \n  \n [!code-csharp[System.Convert.ToString2#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#10)]\n [!code-vb[System.Convert.ToString2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#10)]"
  syntax:
    content: public static string ToString (short value, int toBase);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    - id: toBase
      type: System.Int32
      description: The base of the return value, which must be 2, 8, 10, or 16.
    return:
      type: System.String
      description: The string representation of <code>value</code> in base <code>toBase</code>.
  overload: System.Convert.ToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>toBase</code> is not 2, 8, 10, or 16.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Int16,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Int16,System.IFormatProvider)
  id: ToString(System.Int16,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Int16, IFormatProvider)
  nameWithType: Convert.ToString(Int16, IFormatProvider)
  fullName: Convert.ToString(Int16, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.
  remarks: This implementation is identical to <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName>.
  example:
  - "The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref:System.Convert.ToString%28System.Int16%2CSystem.IFormatProvider%29> method to convert each element in an array of 16-bit integers to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.  \n  \n [!code-csharp[System.Convert.ToString2#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#19)]\n [!code-vb[System.Convert.ToString2#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#19)]"
  syntax:
    content: public static string ToString (short value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.DateTime,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.DateTime,System.IFormatProvider)
  id: ToString(System.DateTime,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(DateTime, IFormatProvider)
  nameWithType: Convert.ToString(DateTime, IFormatProvider)
  fullName: Convert.ToString(DateTime, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified <xref href="System.DateTime"></xref> to its equivalent string representation, using the specified culture-specific formatting information.
  remarks: This implementation is identical to <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=fullName>.
  example:
  - "The following example converts a <xref:System.DateTime> value to its equivalent string representation in eight different cultures.  \n  \n [!code-csharp[System.Convert.ToString2#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#13)]\n [!code-vb[System.Convert.ToString2#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#13)]"
  syntax:
    content: public static string ToString (DateTime value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.UInt64,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.UInt64,System.IFormatProvider)
  id: ToString(System.UInt64,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(UInt64, IFormatProvider)
  nameWithType: Convert.ToString(UInt64, IFormatProvider)
  fullName: Convert.ToString(UInt64, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.
  remarks: This implementation is identical to <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName>.
  example:
  - "The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref:System.Convert.ToString%28System.UInt64%2CSystem.IFormatProvider%29> method to convert an unsigned long integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object. The output indicates that this formatting information is not used, because by default the \"G\" format specifier does not include a positive sign with positive values.  \n  \n [!code-csharp[System.Convert.ToString2#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#24)]\n [!code-vb[System.Convert.ToString2#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#24)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static string ToString (ulong value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Decimal,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Decimal,System.IFormatProvider)
  id: ToString(System.Decimal,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Decimal, IFormatProvider)
  nameWithType: Convert.ToString(Decimal, IFormatProvider)
  fullName: Convert.ToString(Decimal, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.
  remarks: This implementation is identical to <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName>.
  example:
  - "The following example converts each element in an array of <xref:System.Decimal> values to its equivalent string representation in four different cultures.  \n  \n [!code-csharp[System.Convert.ToString2#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#14)]\n [!code-vb[System.Convert.ToString2#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#14)]"
  syntax:
    content: public static string ToString (decimal value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Int32,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Int32,System.IFormatProvider)
  id: ToString(System.Int32,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Int32, IFormatProvider)
  nameWithType: Convert.ToString(Int32, IFormatProvider)
  fullName: Convert.ToString(Int32, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.
  remarks: This implementation is identical to <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName>.
  example:
  - "The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref:System.Convert.ToString%28System.Int32%2CSystem.IFormatProvider%29> method to convert each element in an array of integers to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.  \n  \n [!code-csharp[System.Convert.ToString2#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#20)]\n [!code-vb[System.Convert.ToString2#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#20)]"
  syntax:
    content: public static string ToString (int value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Double,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Double,System.IFormatProvider)
  id: ToString(System.Double,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Double, IFormatProvider)
  nameWithType: Convert.ToString(Double, IFormatProvider)
  fullName: Convert.ToString(Double, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName>
  example:
  - "The following example converts each element in an array of <xref:System.Double> values to its equivalent string representation in four different cultures.  \n  \n [!code-csharp[System.Convert.ToString2#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#15)]\n [!code-vb[System.Convert.ToString2#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#15)]"
  syntax:
    content: public static string ToString (double value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Int32,System.Int32)
  commentId: M:System.Convert.ToString(System.Int32,System.Int32)
  id: ToString(System.Int32,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Int32, Int32)
  nameWithType: Convert.ToString(Int32, Int32)
  fullName: Convert.ToString(Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.
  remarks: If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation. This means that the high-order bit of the highest-order byte (bit 31) is interpreted as the sign bit. If the <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.
  example:
  - "The following example converts each element in an integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.  \n  \n [!code-csharp[System.Convert.ToString2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#11)]\n [!code-vb[System.Convert.ToString2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#11)]"
  syntax:
    content: public static string ToString (int value, int toBase);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    - id: toBase
      type: System.Int32
      description: The base of the return value, which must be 2, 8, 10, or 16.
    return:
      type: System.String
      description: The string representation of <code>value</code> in base <code>toBase</code>.
  overload: System.Convert.ToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>toBase</code> is not 2, 8, 10, or 16.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.SByte,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.SByte,System.IFormatProvider)
  id: ToString(System.SByte,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(SByte, IFormatProvider)
  nameWithType: Convert.ToString(SByte, IFormatProvider)
  fullName: Convert.ToString(SByte, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.
  remarks: This implementation is identical to <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName>.
  example:
  - "The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref:System.Convert.ToString%28System.SByte%2CSystem.IFormatProvider%29?displayProperty=fullName> method to convert each element in signed byte array to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.  \n  \n [!code-csharp[System.Convert.ToString2#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#17)]\n [!code-vb[System.Convert.ToString2#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#17)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static string ToString (sbyte value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Int64,System.Int32)
  commentId: M:System.Convert.ToString(System.Int64,System.Int32)
  id: ToString(System.Int64,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Int64, Int32)
  nameWithType: Convert.ToString(Int64, Int32)
  fullName: Convert.ToString(Int64, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.
  remarks: If `value` is positive and `toBase` is not 10, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is not 10, the returned string uses two's complement representation. This means that the high-order bit of the highest-order byte (bit 63) is interpreted as the sign bit. If the <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.
  example:
  - "The following example converts each element in a long integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.  \n  \n [!code-csharp[System.Convert.ToString2#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#12)]\n [!code-vb[System.Convert.ToString2#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#12)]"
  syntax:
    content: public static string ToString (long value, int toBase);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    - id: toBase
      type: System.Int32
      description: The base of the return value, which must be 2, 8, 10, or 16.
    return:
      type: System.String
      description: The string representation of <code>value</code> in base <code>toBase</code>.
  overload: System.Convert.ToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>toBase</code> is not 2, 8, 10, or 16.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Object,System.IFormatProvider)
  id: ToString(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Object, IFormatProvider)
  nameWithType: Convert.ToString(Object, IFormatProvider)
  fullName: Convert.ToString(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.
  remarks: "If the `value` parameter implements the <xref:System.IConvertible> interface, the method calls the <xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=fullName>implementation of `value`. Otherwise, if the `value` parameter implements the <xref:System.IFormattable> interface, the method calls its <xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>implementation. If `value` implements neither interface, the method calls the `value` parameter's `ToString()` method, and the `provider` parameter is ignored.  \n  \n The `provider` parameter is used if the `value` parameter implements the <xref:System.IConvertible> or <xref:System.IFormattable> interface. The most common use of the `provider` parameter is to specify culture-specific information used in the conversion of `value`. For example, if the `value` parameter is a negative decimal number, the `provider` parameter can supply culture-specific information about the notation used for the negative sign and decimal separator. The second example in the next section illustrates a format provider that does not supply culture-sensitive formatting information."
  example:
  - "The following example defines a `Temperature` class that overrides the <xref:System.Object.ToString%2A?displayProperty=fullName> method but does not implement the <xref:System.IConvertible> interface. The example illustrates how calls to the <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName> method, in turn, call the `Temperature.ToString` method.  \n  \n [!code-csharp[System.Convert.ToString2#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring5.cs#26)]\n [!code-vb[System.Convert.ToString2#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring5.vb#26)]  \n  \n The following example defines a `Temperature` class that implements the <xref:System.IFormattable> interface but does not implement the <xref:System.IConvertible> interface. Its <xref:System.IFormattable.ToString%2A?displayProperty=fullName>implementation represents the `Temperature` value in Celsius, Fahrenheit, or Kelvin, depending on the format  string. The example also defines a `TemperatureProvider` class that implements <xref:System.IFormatProvider> and provides a randomly generated format string that is used by the <xref:System.IFormattable> implementation of the `Temperature` class.  \n  \n [!code-csharp[System.Convert.ToString2#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring_obj30.cs#30)]\n [!code-vb[System.Convert.ToString2#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring_obj30.vb#30)]"
  syntax:
    content: public static string ToString (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that supplies the value to convert, or `null`.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>, or <xref href="System.String.Empty"></xref> if <code>value</code> is an object whose value is `null`. If <code>value</code> is `null`, the method returns `null`.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Single,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Single,System.IFormatProvider)
  id: ToString(System.Single,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Single, IFormatProvider)
  nameWithType: Convert.ToString(Single, IFormatProvider)
  fullName: Convert.ToString(Single, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.
  remarks: This implementation is identical to <xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=fullName>.
  example:
  - "The following example converts each element in an array of <xref:System.Single> values to its equivalent string representation in four different cultures.  \n  \n [!code-csharp[System.Convert.ToString2#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#18)]\n [!code-vb[System.Convert.ToString2#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#18)]"
  syntax:
    content: public static string ToString (float value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(String, IFormatProvider)
  nameWithType: Convert.ToString(String, IFormatProvider)
  fullName: Convert.ToString(String, IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the specified string instance; no actual conversion is performed.
  remarks: ''
  example:
  - "The following example calls the `ToString` method with a <xref:System.String> parameter. The method returns the unmodified <xref:System.String> without referencing the <xref:System.IFormatProvider> object.  \n  \n [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]\n [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]\n [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]"
  syntax:
    content: public static string ToString (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: The string to return.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information. This parameter is ignored.
    return:
      type: System.String
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.UInt16,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.UInt16,System.IFormatProvider)
  id: ToString(System.UInt16,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(UInt16, IFormatProvider)
  nameWithType: Convert.ToString(UInt16, IFormatProvider)
  fullName: Convert.ToString(UInt16, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.
  remarks: This implementation is identical to <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName>.
  example:
  - "The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> method to convert a 16-bit unsigned integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object. The output indicates that this formatting information is not used, because by default the \"G\" format specifier does not include a positive sign with positive values.  \n  \n [!code-csharp[System.Convert.ToString2#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#22)]\n [!code-vb[System.Convert.ToString2#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#22)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static string ToString (ushort value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.UInt32,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.UInt32,System.IFormatProvider)
  id: ToString(System.UInt32,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(UInt32, IFormatProvider)
  nameWithType: Convert.ToString(UInt32, IFormatProvider)
  fullName: Convert.ToString(UInt32, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.
  remarks: This implementation is identical to <xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=fullName>.
  example:
  - "The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref:System.Convert.ToString%28System.UInt32%2CSystem.IFormatProvider%29> method to convert an unsigned integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object. The output indicates that this formatting information is not used, because by default the \"G\" format specifier does not include a positive sign with positive values.  \n  \n [!code-csharp[System.Convert.ToString2#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#23)]\n [!code-vb[System.Convert.ToString2#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#23)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static string ToString (uint value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Char,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Char,System.IFormatProvider)
  id: ToString(System.Char,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Char, IFormatProvider)
  nameWithType: Convert.ToString(Char, IFormatProvider)
  fullName: Convert.ToString(Char, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.
  remarks: This implementation is identical to <xref:System.Char.ToString?displayProperty=fullName>. The `provider` parameter is ignored.
  example:
  - "The following example converts a <xref:System.Char> value to a <xref:System.String> with the `ToString` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called. The example shows that the <xref:System.IFormatProvider> object is not referenced.  \n  \n [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]\n [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]\n [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]"
  syntax:
    content: public static string ToString (char value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information. This parameter is ignored.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Int64,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Int64,System.IFormatProvider)
  id: ToString(System.Int64,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Int64, IFormatProvider)
  nameWithType: Convert.ToString(Int64, IFormatProvider)
  fullName: Convert.ToString(Int64, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.
  remarks: This implementation is identical to <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName>.
  example:
  - "The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref:System.Convert.ToString%28System.Int64%2CSystem.IFormatProvider%29> method to convert each element in a long integer array to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.  \n  \n [!code-csharp[System.Convert.ToString2#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#21)]\n [!code-vb[System.Convert.ToString2#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#21)]"
  syntax:
    content: public static string ToString (long value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Byte,System.Int32)
  commentId: M:System.Convert.ToString(System.Byte,System.Int32)
  id: ToString(System.Byte,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Byte, Int32)
  nameWithType: Convert.ToString(Byte, Int32)
  fullName: Convert.ToString(Byte, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.
  remarks: If `toBase` does not equal 10, the string that is returned by the <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=fullName> method represents `value` by its magnitude only. If the method is called to create a string that will later be converted back to a number, a corresponding method that assumes a magnitude-only numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=fullName> or <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.
  example:
  - "The following example converts each element in a byte array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.  \n  \n [!code-csharp[System.Convert.ToString2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#9)]\n [!code-vb[System.Convert.ToString2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#9)]"
  syntax:
    content: public static string ToString (byte value, int toBase);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    - id: toBase
      type: System.Int32
      description: The base of the return value, which must be 2, 8, 10, or 16.
    return:
      type: System.String
      description: The string representation of <code>value</code> in base <code>toBase</code>.
  overload: System.Convert.ToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>toBase</code> is not 2, 8, 10, or 16.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.UInt16)
  commentId: M:System.Convert.ToString(System.UInt16)
  id: ToString(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(UInt16)
  nameWithType: Convert.ToString(UInt16)
  fullName: Convert.ToString(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.UInt16.ToString?displayProperty=fullName>.
  example:
  - "The following example converts each element in an array of unsigned 16-bit integer values to its equivalent string representation.  \n  \n [!code-csharp[System.Convert.ToString2#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#6)]\n [!code-vb[System.Convert.ToString2#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#6)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static string ToString (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Boolean,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Boolean,System.IFormatProvider)
  id: ToString(System.Boolean,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Boolean, IFormatProvider)
  nameWithType: Convert.ToString(Boolean, IFormatProvider)
  fullName: Convert.ToString(Boolean, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=fullName>. It returns <xref:System.Boolean.TrueString?displayProperty=fullName> for `true` values and <xref:System.Boolean.FalseString?displayProperty=fullName> for `false` values.
  example:
  - "The following example converts a <xref:System.Boolean> value to a <xref:System.String> with the `ToString` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called. The example shows that the <xref:System.IFormatProvider> object is not referenced.  \n  \n [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]\n [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]\n [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]"
  syntax:
    content: public static string ToString (bool value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    - id: provider
      type: System.IFormatProvider
      description: An instance of an object. This parameter is ignored.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Byte,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Byte,System.IFormatProvider)
  id: ToString(System.Byte,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Byte, IFormatProvider)
  nameWithType: Convert.ToString(Byte, IFormatProvider)
  fullName: Convert.ToString(Byte, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.
  remarks: This implementation is identical to <xref:System.Byte.ToString%2A?displayProperty=fullName>.
  example:
  - "The following example converts each element in an unsigned byte array to its equivalent string representation using the formatting conventions of the en-US and fr-FR cultures. Because the \"G\" specifier by default outputs only decimal digits in a byte value's string representation, the `provider` parameter does not affect the formatting of the returned string.  \n  \n [!code-csharp[System.Convert.ToString2#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#16)]\n [!code-vb[System.Convert.ToString2#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#16)]"
  syntax:
    content: public static string ToString (byte value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Boolean)
  commentId: M:System.Convert.ToString(System.Boolean)
  id: ToString(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Boolean)
  nameWithType: Convert.ToString(Boolean)
  fullName: Convert.ToString(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=fullName>. It returns <xref:System.Boolean.TrueString?displayProperty=fullName> for `true` values and <xref:System.Boolean.FalseString?displayProperty=fullName> for `false` values.
  example:
  - "The following example illustrates the conversion of a <xref:System.Boolean> to a <xref:System.String>, using `ToString`. It also illustrates that the string returned by the conversion equals either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.  \n  \n [!code-csharp[System.Convert.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/ToString_Bool1.cs#1)]\n [!code-vb[System.Convert.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/ToString_Bool1.vb#1)]"
  syntax:
    content: public static string ToString (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Byte)
  commentId: M:System.Convert.ToString(System.Byte)
  id: ToString(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Byte)
  nameWithType: Convert.ToString(Byte)
  fullName: Convert.ToString(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.Byte.ToString?displayProperty=fullName>.
  example:
  - "The following example converts each value in a <xref:System.Byte> array to a string.  \n  \n [!code-csharp[System.Convert.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/ToString.Byte1.cs#3)]\n [!code-vb[System.Convert.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/ToString.Byte1.vb#3)]"
  syntax:
    content: public static string ToString (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Char)
  commentId: M:System.Convert.ToString(System.Char)
  id: ToString(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Char)
  nameWithType: Convert.ToString(Char)
  fullName: Convert.ToString(Char)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified Unicode character to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.Char.ToString%2A?displayProperty=fullName>.
  example:
  - "The following example converts a <xref:System.Char> to a <xref:System.String>.  \n  \n [!code-cpp[System.Convert Snippets#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#14)]\n [!code-csharp[System.Convert Snippets#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#14)]\n [!code-vb[System.Convert Snippets#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#14)]"
  syntax:
    content: public static string ToString (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Decimal)
  commentId: M:System.Convert.ToString(System.Decimal)
  id: ToString(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Decimal)
  nameWithType: Convert.ToString(Decimal)
  fullName: Convert.ToString(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.Decimal.ToString?displayProperty=fullName>.
  example:
  - "The following example converts a <xref:System.Decimal> to a <xref:System.String>.  \n  \n [!code-cpp[System.Convert Snippets#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#15)]\n [!code-csharp[System.Convert Snippets#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#15)]\n [!code-vb[System.Convert Snippets#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#15)]"
  syntax:
    content: public static string ToString (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal number to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Double)
  commentId: M:System.Convert.ToString(System.Double)
  id: ToString(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Double)
  nameWithType: Convert.ToString(Double)
  fullName: Convert.ToString(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.Double.ToString?displayProperty=fullName>.
  example:
  - "The following example converts a <xref:System.Double> to a <xref:System.String>.  \n  \n [!code-cpp[System.Convert Snippets#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#7)]\n [!code-csharp[System.Convert Snippets#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#7)]\n [!code-vb[System.Convert Snippets#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#7)]"
  syntax:
    content: public static string ToString (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Int16)
  commentId: M:System.Convert.ToString(System.Int16)
  id: ToString(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Int16)
  nameWithType: Convert.ToString(Int16)
  fullName: Convert.ToString(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.Int16.ToString?displayProperty=fullName>.
  example:
  - "The following example converts each element in an array of 16-bit integers to its equivalent string representation.  \n  \n [!code-csharp[System.Convert.ToString2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#2)]\n [!code-vb[System.Convert.ToString2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#2)]"
  syntax:
    content: public static string ToString (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.DateTime)
  commentId: M:System.Convert.ToString(System.DateTime)
  id: ToString(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(DateTime)
  nameWithType: Convert.ToString(DateTime)
  fullName: Convert.ToString(DateTime)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified <xref href="System.DateTime"></xref> to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.DateTime.ToString?displayProperty=fullName>. It uses the formatting conventions of the current culture and the "G" format specifier to convert a <xref:System.DateTime> value to its string representation.
  example:
  - "The following example converts each element in an array of a <xref:System.DateTime> value to a <xref:System.String> value.  \n  \n [!code-csharp[System.Convert.ToString2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#1)]\n [!code-vb[System.Convert.ToString2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#1)]"
  syntax:
    content: public static string ToString (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Int64)
  commentId: M:System.Convert.ToString(System.Int64)
  id: ToString(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Int64)
  nameWithType: Convert.ToString(Int64)
  fullName: Convert.ToString(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.Int64.ToString?displayProperty=fullName>.
  example:
  - "The following example converts each element in a long integer array to its equivalent string representation.  \n  \n [!code-csharp[System.Convert.ToString2#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring6.cs#28)]\n [!code-vb[System.Convert.ToString2#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring6.vb#28)]"
  syntax:
    content: public static string ToString (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Object)
  commentId: M:System.Convert.ToString(System.Object)
  id: ToString(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Object)
  nameWithType: Convert.ToString(Object)
  fullName: Convert.ToString(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to its equivalent string representation.
  remarks: To convert `value` to its string representation, the method tries to call the <xref:System.IConvertible.ToString%2A?displayProperty=fullName> implementation of `value`. If `value` does not implement the <xref:System.IConvertible> interface, the method tries to call the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> implementation of `value`. If value does not implement the <xref:System.IFormattable> interface, the method calls the `ToString` method of the underlying type of `value`.
  example:
  - "The following example converts each element in an object array to its equivalent string representation.  \n  \n [!code-csharp[System.Convert.ToString2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#3)]\n [!code-vb[System.Convert.ToString2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#3)]"
  syntax:
    content: public static string ToString (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that supplies the value to convert, or `null`.
    return:
      type: System.String
      description: The string representation of <code>value</code>, or <xref href="System.String.Empty"></xref> if <code>value</code> is `null`.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.SByte)
  commentId: M:System.Convert.ToString(System.SByte)
  id: ToString(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(SByte)
  nameWithType: Convert.ToString(SByte)
  fullName: Convert.ToString(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.SByte.ToString?displayProperty=fullName>.
  example:
  - "The following example converts each element in a signed byte array to its equivalent string representation.  \n  \n [!code-csharp[System.Convert.ToString2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#4)]\n [!code-vb[System.Convert.ToString2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#4)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static string ToString (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Single)
  commentId: M:System.Convert.ToString(System.Single)
  id: ToString(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Single)
  nameWithType: Convert.ToString(Single)
  fullName: Convert.ToString(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.Single.ToString?displayProperty=fullName>.
  example:
  - "The following example converts each element in an array of <xref:System.Single> values to its equivalent string representation.  \n  \n [!code-csharp[System.Convert.ToString2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#5)]\n [!code-vb[System.Convert.ToString2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#5)]"
  syntax:
    content: public static string ToString (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.String)
  commentId: M:System.Convert.ToString(System.String)
  id: ToString(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(String)
  nameWithType: Convert.ToString(String)
  fullName: Convert.ToString(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the specified string instance; no actual conversion is performed.
  remarks: ''
  example:
  - "The following example passes a string to the <xref:System.Convert.ToString%28System.String%29> method and calls the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to confirm that the method returns the original string. The example also calls the <xref:System.String.IsInterned%2A?displayProperty=fullName> method to ensure that the two strings are not identical because the original string is interned.  \n  \n [!code-csharp[System.Convert.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/tostring_string1.cs#2)]\n [!code-vb[System.Convert.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/tostring_string1.vb#2)]"
  syntax:
    content: public static string ToString (string value);
    parameters:
    - id: value
      type: System.String
      description: The string to return.
    return:
      type: System.String
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.UInt32)
  commentId: M:System.Convert.ToString(System.UInt32)
  id: ToString(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(UInt32)
  nameWithType: Convert.ToString(UInt32)
  fullName: Convert.ToString(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.UInt32.ToString?displayProperty=fullName>.
  example:
  - "The following example converts each element in an unsigned integer array to its equivalent string representation.  \n  \n [!code-csharp[System.Convert.ToString2#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#7)]\n [!code-vb[System.Convert.ToString2#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#7)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static string ToString (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.UInt64)
  commentId: M:System.Convert.ToString(System.UInt64)
  id: ToString(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(UInt64)
  nameWithType: Convert.ToString(UInt64)
  fullName: Convert.ToString(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.UInt64.ToString?displayProperty=fullName>.
  example:
  - "The following example converts each element in an unsigned long integer array to its equivalent string representation.  \n  \n [!code-csharp[System.Convert.ToString2#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#8)]\n [!code-vb[System.Convert.ToString2#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#8)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static string ToString (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToString(System.Int32)
  commentId: M:System.Convert.ToString(System.Int32)
  id: ToString(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToString(Int32)
  nameWithType: Convert.ToString(Int32)
  fullName: Convert.ToString(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to its equivalent string representation.
  remarks: This implementation is identical to <xref:System.Int32.ToString?displayProperty=fullName>. It formats `value` by using the formatting conventions of the current thread culture.
  example:
  - "The following example compares the <xref:System.Convert.ToString%28System.Int32%29> method with the <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> method. It defines a custom <xref:System.Globalization.NumberFormatInfo> object that uses the sting \"minus\" to represent the negative sign. It converts each element in an integer array to its equivalent string representation using default formatting (the formatting conventions of the current culture) and the custom format provider.  \n  \n [!code-csharp[System.Convert.ToString2#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring7.cs#27)]\n [!code-vb[System.Convert.ToString2#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring7.vb#27)]"
  syntax:
    content: public static string ToString (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.String
      description: The string representation of <code>value</code>.
  overload: System.Convert.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.String)
  commentId: M:System.Convert.ToUInt16(System.String)
  id: ToUInt16(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(String)
  nameWithType: Convert.ToUInt16(String)
  fullName: Convert.ToUInt16(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.
  remarks: "Using the <xref:System.Convert.ToUInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt16.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example attempts to convert each element in a numeric string array to a 16-bit unsigned integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#12)]\n [!code-vb[System.Convert.ToUInt16#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#12)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    return:
      type: System.UInt16
      description: A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.UInt16.MinValue"></xref> or greater than <xref href="System.UInt16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.UInt16)
  commentId: M:System.Convert.ToUInt16(System.UInt16)
  id: ToUInt16(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(UInt16)
  nameWithType: Convert.ToUInt16(UInt16)
  fullName: Convert.ToUInt16(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the specified 16-bit unsigned integer; no actual conversion is performed.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to return.
    return:
      type: System.UInt16
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToUInt16*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.UInt32)
  commentId: M:System.Convert.ToUInt16(System.UInt32)
  id: ToUInt16(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(UInt32)
  nameWithType: Convert.ToUInt16(UInt32)
  fullName: Convert.ToUInt16(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of unsigned integers to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#13)]\n [!code-vb[System.Convert.ToUInt16#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#13)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.UInt16
      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.UInt16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.String,System.Int32)
  commentId: M:System.Convert.ToUInt16(System.String,System.Int32)
  id: ToUInt16(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(String, Int32)
  nameWithType: Convert.ToUInt16(String, Int32)
  fullName: Convert.ToUInt16(String, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.
  remarks: "If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the <xref:System.UInt16> data type supports unsigned values only, the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all 16 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt16> data type is converted to a <xref:System.UInt16> value without the method throwing an exception. The following example converts <xref:System.Int16.MinValue?displayProperty=fullName> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x8000 converts to 32768.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#11)]\n [!code-vb[System.Convert.BaseConversion#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#11)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt16> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt16> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  \n  \n [!code-csharp[System.Convert.BaseConversion#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#12)]\n [!code-vb[System.Convert.BaseConversion#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#12)]"
  example:
  - "The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_2.cs#15)]\n [!code-vb[System.Convert.ToUInt16#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_2.vb#15)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (string value, int fromBase);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: fromBase
      type: System.Int32
      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.
    return:
      type: System.UInt16
      description: A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>value</code> is <xref href="System.String.Empty"></xref>.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.UInt16.MinValue\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)
  id: ToUInt16(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(Object, IFormatProvider)
  nameWithType: Convert.ToUInt16(Object, IFormatProvider)
  fullName: Convert.ToUInt16(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."
  example:
  - "The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 16-bit signed and 16-bit unsigned values. The class includes a `Sign` property that indicates the sign of its hexadecimal value.  \n  \n [!code-csharp[System.Convert.ToUInt16#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_3.cs#16)]\n [!code-vb[System.Convert.ToUInt16#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_3.vb#16)]  \n  \n The following example shows that a call to the <xref:System.Convert.ToUInt16%28System.Object%2CSystem.IFormatProvider%29> method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> implementation of the `HexString` class.  \n  \n [!code-csharp[System.Convert.ToUInt16#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_3.cs#17)]\n [!code-vb[System.Convert.ToUInt16#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_3.vb#17)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.UInt16
      description: A 16-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the  <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.UInt16.MinValue"></xref> or greater than <xref href="System.UInt16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToUInt16(System.String,System.IFormatProvider)
  id: ToUInt16(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(String, IFormatProvider)
  nameWithType: Convert.ToUInt16(String, IFormatProvider)
  fullName: Convert.ToUInt16(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking <xref:System.UInt16.Parse%2A?displayProperty=fullName> on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string \"pos\" as the positive sign and the string \"neg\" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  \n  \n [!code-csharp[System.Convert.ToUInt16#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_4.cs#18)]\n [!code-vb[System.Convert.ToUInt16#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_4.vb#18)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.UInt16
      description: A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.UInt16.MinValue"></xref> or greater than <xref href="System.UInt16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.Single)
  commentId: M:System.Convert.ToUInt16(System.Single)
  id: ToUInt16(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(Single)
  nameWithType: Convert.ToUInt16(Single)
  fullName: Convert.ToUInt16(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of <xref:System.String> values to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#11)]\n [!code-vb[System.Convert.ToUInt16#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#11)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to convert.
    return:
      type: System.UInt16
      description: <code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero or greater than <xref href="System.UInt16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.UInt64)
  commentId: M:System.Convert.ToUInt16(System.UInt64)
  id: ToUInt16(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(UInt64)
  nameWithType: Convert.ToUInt16(UInt64)
  fullName: Convert.ToUInt16(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of unsigned long integers to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#14)]\n [!code-vb[System.Convert.ToUInt16#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#14)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.UInt16
      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.UInt16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.SByte)
  commentId: M:System.Convert.ToUInt16(System.SByte)
  id: ToUInt16(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(SByte)
  nameWithType: Convert.ToUInt16(SByte)
  fullName: Convert.ToUInt16(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in a signed byte array to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#10)]\n [!code-vb[System.Convert.ToUInt16#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#10)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.UInt16
      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.Double)
  commentId: M:System.Convert.ToUInt16(System.Double)
  id: ToUInt16(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(Double)
  nameWithType: Convert.ToUInt16(Double)
  fullName: Convert.ToUInt16(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of <xref:System.Double> values to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#5)]\n [!code-vb[System.Convert.ToUInt16#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#5)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.UInt16
      description: <code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero or greater than <xref href="System.UInt16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.Int64)
  commentId: M:System.Convert.ToUInt16(System.Int64)
  id: ToUInt16(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(Int64)
  nameWithType: Convert.ToUInt16(Int64)
  fullName: Convert.ToUInt16(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in a long integer array to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#8)]\n [!code-vb[System.Convert.ToUInt16#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#8)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.UInt16
      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero or greater than <xref href="System.UInt16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.Object)
  commentId: M:System.Convert.ToUInt16(System.Object)
  id: ToUInt16(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(Object)
  nameWithType: Convert.ToUInt16(Object)
  fullName: Convert.ToUInt16(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a 16-bit unsigned integer.
  remarks: The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> method of the underlying type of `value`.
  example:
  - "The following example attempts to convert each element in an object array to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#9)]\n [!code-vb[System.Convert.ToUInt16#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.UInt16
      description: A 16-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the  <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.UInt16.MinValue"></xref> or greater than <xref href="System.UInt16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.Byte)
  commentId: M:System.Convert.ToUInt16(System.Byte)
  id: ToUInt16(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(Byte)
  nameWithType: Convert.ToUInt16(Byte)
  fullName: Convert.ToUInt16(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in a byte array to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#2)]\n [!code-vb[System.Convert.ToUInt16#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#2)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.UInt16
      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt16*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.Char)
  commentId: M:System.Convert.ToUInt16(System.Char)
  id: ToUInt16(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(Char)
  nameWithType: Convert.ToUInt16(Char)
  fullName: Convert.ToUInt16(Char)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in a character array to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#3)]\n [!code-vb[System.Convert.ToUInt16#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#3)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.UInt16
      description: The 16-bit unsigned integer equivalent to <code>value</code>.
  overload: System.Convert.ToUInt16*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.DateTime)
  commentId: M:System.Convert.ToUInt16(System.DateTime)
  id: ToUInt16(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(DateTime)
  nameWithType: Convert.ToUInt16(DateTime)
  fullName: Convert.ToUInt16(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.UInt16
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.Boolean)
  commentId: M:System.Convert.ToUInt16(System.Boolean)
  id: ToUInt16(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(Boolean)
  nameWithType: Convert.ToUInt16(Boolean)
  fullName: Convert.ToUInt16(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to the equivalent 16-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts the Boolean values `true` and `false` to unsigned 16-bit integers.  \n  \n [!code-csharp[System.Convert.ToUInt16#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#1)]\n [!code-vb[System.Convert.ToUInt16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#1)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.UInt16
      description: The number 1 if <code>value</code> is `true`; otherwise, 0.
  overload: System.Convert.ToUInt16*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.Int16)
  commentId: M:System.Convert.ToUInt16(System.Int16)
  id: ToUInt16(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(Int16)
  nameWithType: Convert.ToUInt16(Int16)
  fullName: Convert.ToUInt16(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in a 16-bit integer array to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#6)]\n [!code-vb[System.Convert.ToUInt16#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#6)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.UInt16
      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.Int32)
  commentId: M:System.Convert.ToUInt16(System.Int32)
  id: ToUInt16(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(Int32)
  nameWithType: Convert.ToUInt16(Int32)
  fullName: Convert.ToUInt16(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in an integer array to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#7)]\n [!code-vb[System.Convert.ToUInt16#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#7)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.UInt16
      description: A 16-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero or greater than <xref href="System.UInt16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt16(System.Decimal)
  commentId: M:System.Convert.ToUInt16(System.Decimal)
  id: ToUInt16(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt16(Decimal)
  nameWithType: Convert.ToUInt16(Decimal)
  fullName: Convert.ToUInt16(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of <xref:System.Decimal> values to an unsigned 16-bit integer.  \n  \n [!code-csharp[System.Convert.ToUInt16#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#4)]\n [!code-vb[System.Convert.ToUInt16#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#4)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort ToUInt16 (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal number to convert.
    return:
      type: System.UInt16
      description: <code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToUInt16*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero or greater than <xref href="System.UInt16.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.Single)
  commentId: M:System.Convert.ToUInt32(System.Single)
  id: ToUInt32(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(Single)
  nameWithType: Convert.ToUInt32(Single)
  fullName: Convert.ToUInt32(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Single> values to an unsigned integer.  \n  \n [!code-csharp[System.Convert.ToUInt32#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#11)]\n [!code-vb[System.Convert.ToUInt32#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#11)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to convert.
    return:
      type: System.UInt32
      description: <code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero or greater than <xref href="System.UInt32.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.String,System.Int32)
  commentId: M:System.Convert.ToUInt32(System.String,System.Int32)
  id: ToUInt32(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(String, Int32)
  nameWithType: Convert.ToUInt32(String, Int32)
  fullName: Convert.ToUInt32(String, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.
  remarks: "If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the <xref:System.UInt32> data type supports unsigned values only, the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all 32 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt32> data type is converted to a <xref:System.UInt32> value without the method throwing an exception. The following example converts <xref:System.Int32.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x80000000 converts to 2147483648.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#13)]\n [!code-vb[System.Convert.BaseConversion#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#13)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt32> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt32> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  \n  \n [!code-csharp[System.Convert.BaseConversion#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#14)]\n [!code-vb[System.Convert.BaseConversion#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#14)]"
  example:
  - "The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned integer.  \n  \n [!code-csharp[System.Convert.ToUInt32#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_3.cs#16)]\n [!code-vb[System.Convert.ToUInt32#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_3.vb#16)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (string value, int fromBase);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: fromBase
      type: System.Int32
      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>value</code> is <xref href="System.String.Empty"></xref>.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.UInt32.MinValue\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToUInt32(System.String,System.IFormatProvider)
  id: ToUInt32(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(String, IFormatProvider)
  nameWithType: Convert.ToUInt32(String, IFormatProvider)
  fullName: Convert.ToUInt32(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking <xref:System.UInt32.Parse%2A?displayProperty=fullName> on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string \"pos\" as the positive sign and the string \"neg\" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  \n  \n [!code-csharp[System.Convert.ToUInt32#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_2.cs#15)]\n [!code-vb[System.Convert.ToUInt32#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_2.vb#15)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.UInt32.MinValue"></xref> or greater than <xref href="System.UInt32.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)
  id: ToUInt32(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(Object, IFormatProvider)
  nameWithType: Convert.ToUInt32(Object, IFormatProvider)
  fullName: Convert.ToUInt32(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."
  example:
  - "The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 32-bit signed and 32-bit unsigned values. The class includes a `Sign` property that indicates the sign of its hexadecimal value.  \n  \n [!code-csharp[System.Convert.ToUInt32#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_4.cs#17)]\n [!code-vb[System.Convert.ToUInt32#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_4.vb#17)]  \n  \n The following example shows that a call to the <xref:System.Convert.ToUInt32%28System.Object%2CSystem.IFormatProvider%29> method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> implementation of the `HexString` class.  \n  \n [!code-csharp[System.Convert.ToUInt32#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_4.cs#18)]\n [!code-vb[System.Convert.ToUInt32#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_4.vb#18)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.UInt32.MinValue"></xref> or greater than <xref href="System.UInt32.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.UInt64)
  commentId: M:System.Convert.ToUInt32(System.UInt64)
  id: ToUInt32(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(UInt64)
  nameWithType: Convert.ToUInt32(UInt64)
  fullName: Convert.ToUInt32(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an unsigned long integer array to an unsigned integer value.  \n  \n [!code-csharp[System.Convert.ToUInt32#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#14)]\n [!code-vb[System.Convert.ToUInt32#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#14)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to convert.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is greater than <xref href="System.UInt32.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.UInt32)
  commentId: M:System.Convert.ToUInt32(System.UInt32)
  id: ToUInt32(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(UInt32)
  nameWithType: Convert.ToUInt32(UInt32)
  fullName: Convert.ToUInt32(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the specified 32-bit unsigned integer; no actual conversion is performed.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to return.
    return:
      type: System.UInt32
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToUInt32*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.UInt16)
  commentId: M:System.Convert.ToUInt32(System.UInt16)
  id: ToUInt32(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(UInt16)
  nameWithType: Convert.ToUInt32(UInt16)
  fullName: Convert.ToUInt32(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in an unsigned 16-bit integer array to an unsigned integer value.  \n  \n [!code-csharp[System.Convert.ToUInt32#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#13)]\n [!code-vb[System.Convert.ToUInt32#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#13)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt32*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.String)
  commentId: M:System.Convert.ToUInt32(System.String)
  id: ToUInt32(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(String)
  nameWithType: Convert.ToUInt32(String)
  fullName: Convert.ToUInt32(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.
  remarks: "Using the <xref:System.Convert.ToUInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt32.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example interprets the elements in a string array as numeric strings and attempts to convert them to unsigned integers.  \n  \n [!code-csharp[System.Convert.ToUInt32#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#12)]\n [!code-vb[System.Convert.ToUInt32#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#12)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.UInt32.MinValue"></xref> or greater than <xref href="System.UInt32.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.SByte)
  commentId: M:System.Convert.ToUInt32(System.SByte)
  id: ToUInt32(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(SByte)
  nameWithType: Convert.ToUInt32(SByte)
  fullName: Convert.ToUInt32(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in a signed byte array to an unsigned integer.  \n  \n [!code-csharp[System.Convert.ToUInt32#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#10)]\n [!code-vb[System.Convert.ToUInt32#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#10)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.Boolean)
  commentId: M:System.Convert.ToUInt32(System.Boolean)
  id: ToUInt32(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(Boolean)
  nameWithType: Convert.ToUInt32(Boolean)
  fullName: Convert.ToUInt32(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to the equivalent 32-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts the Boolean values `true` and `false` to unsigned integers.  \n  \n [!code-csharp[System.Convert.ToUInt32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#1)]\n [!code-vb[System.Convert.ToUInt32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#1)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.UInt32
      description: The number 1 if <code>value</code> is `true`; otherwise, 0.
  overload: System.Convert.ToUInt32*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.Int64)
  commentId: M:System.Convert.ToUInt32(System.Int64)
  id: ToUInt32(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(Int64)
  nameWithType: Convert.ToUInt32(Int64)
  fullName: Convert.ToUInt32(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in a long integer array to an unsigned integer.  \n  \n [!code-csharp[System.Convert.ToUInt32#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#8)]\n [!code-vb[System.Convert.ToUInt32#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#8)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero or greater than <xref href="System.UInt32.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.Int32)
  commentId: M:System.Convert.ToUInt32(System.Int32)
  id: ToUInt32(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(Int32)
  nameWithType: Convert.ToUInt32(Int32)
  fullName: Convert.ToUInt32(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an integer array to an unsigned integer.  \n  \n [!code-csharp[System.Convert.ToUInt32#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#7)]\n [!code-vb[System.Convert.ToUInt32#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#7)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.Int16)
  commentId: M:System.Convert.ToUInt32(System.Int16)
  id: ToUInt32(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(Int16)
  nameWithType: Convert.ToUInt32(Int16)
  fullName: Convert.ToUInt32(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in a 16-bit integer array to an unsigned integer.  \n  \n [!code-csharp[System.Convert.ToUInt32#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#6)]\n [!code-vb[System.Convert.ToUInt32#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#6)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.Double)
  commentId: M:System.Convert.ToUInt32(System.Double)
  id: ToUInt32(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(Double)
  nameWithType: Convert.ToUInt32(Double)
  fullName: Convert.ToUInt32(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Double> values to an unsigned integer.  \n  \n [!code-csharp[System.Convert.ToUInt32#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#5)]\n [!code-vb[System.Convert.ToUInt32#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#5)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.UInt32
      description: <code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero or greater than <xref href="System.UInt32.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.Decimal)
  commentId: M:System.Convert.ToUInt32(System.Decimal)
  id: ToUInt32(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(Decimal)
  nameWithType: Convert.ToUInt32(Decimal)
  fullName: Convert.ToUInt32(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Decimal> values to an unsigned integer.  \n  \n [!code-csharp[System.Convert.ToUInt32#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#4)]\n [!code-vb[System.Convert.ToUInt32#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#4)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal number to convert.
    return:
      type: System.UInt32
      description: <code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero or greater than <xref href="System.UInt32.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.DateTime)
  commentId: M:System.Convert.ToUInt32(System.DateTime)
  id: ToUInt32(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(DateTime)
  nameWithType: Convert.ToUInt32(DateTime)
  fullName: Convert.ToUInt32(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.UInt32
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.Char)
  commentId: M:System.Convert.ToUInt32(System.Char)
  id: ToUInt32(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(Char)
  nameWithType: Convert.ToUInt32(Char)
  fullName: Convert.ToUInt32(Char)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in a character array to an unsigned integer.  \n  \n [!code-csharp[System.Convert.ToUInt32#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#3)]\n [!code-vb[System.Convert.ToUInt32#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#3)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt32*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.Byte)
  commentId: M:System.Convert.ToUInt32(System.Byte)
  id: ToUInt32(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(Byte)
  nameWithType: Convert.ToUInt32(Byte)
  fullName: Convert.ToUInt32(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in a byte array to an unsigned integer.  \n  \n [!code-csharp[System.Convert.ToUInt32#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#2)]\n [!code-vb[System.Convert.ToUInt32#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#2)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt32*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt32(System.Object)
  commentId: M:System.Convert.ToUInt32(System.Object)
  id: ToUInt32(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt32(Object)
  nameWithType: Convert.ToUInt32(Object)
  fullName: Convert.ToUInt32(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a 32-bit unsigned integer.
  remarks: The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> method of the underlying type of `value`.
  example:
  - "The following example attempts to convert each element in an object array to an unsigned integer.  \n  \n [!code-csharp[System.Convert.ToUInt32#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#9)]\n [!code-vb[System.Convert.ToUInt32#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint ToUInt32 (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToUInt32*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.UInt32.MinValue"></xref> or greater than <xref href="System.UInt32.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.Single)
  commentId: M:System.Convert.ToUInt64(System.Single)
  id: ToUInt64(System.Single)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(Single)
  nameWithType: Convert.ToUInt64(Single)
  fullName: Convert.ToUInt64(Single)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Single> values to an unsigned long integer. The output shows that fractional values are rounded before the conversion is performed.  \n  \n [!code-csharp[System.Convert.ToUInt64#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#11)]\n [!code-vb[System.Convert.ToUInt64#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#11)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (float value);
    parameters:
    - id: value
      type: System.Single
      description: The single-precision floating-point number to convert.
    return:
      type: System.UInt64
      description: <code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero or greater than <xref href="System.UInt64.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.String)
  commentId: M:System.Convert.ToUInt64(System.String)
  id: ToUInt64(System.String)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(String)
  nameWithType: Convert.ToUInt64(String)
  fullName: Convert.ToUInt64(String)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.
  remarks: "Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example interprets the elements of a string array as numeric strings and attempts to convert them to unsigned long integers.  \n  \n [!code-csharp[System.Convert.ToUInt64#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#12)]\n [!code-vb[System.Convert.ToUInt64#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#12)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    return:
      type: System.UInt64
      description: A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.UInt64.MinValue"></xref> or greater than <xref href="System.UInt64.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)
  id: ToUInt64(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(Object, IFormatProvider)
  nameWithType: Convert.ToUInt64(Object, IFormatProvider)
  fullName: Convert.ToUInt64(Object, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> method of the underlying type of `value`.  \n  \n `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  \n  \n The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface."
  example:
  - "The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 64-bit signed and 64-bit unsigned values. The class includes a `Sign` property that indicates the sign of its hexadecimal value.  \n  \n [!code-csharp[System.Convert.ToUInt64#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_4.cs#17)]\n [!code-vb[System.Convert.ToUInt64#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_4.vb#17)]  \n  \n The following example shows that a call to the <xref:System.Convert.ToUInt64%28System.Object%2CSystem.IFormatProvider%29> method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> implementation of the `HexString` class.  \n  \n [!code-csharp[System.Convert.ToUInt64#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_4.cs#18)]\n [!code-vb[System.Convert.ToUInt64#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_4.vb#18)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (object value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.UInt64
      description: A 64-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.UInt64.MinValue"></xref> or greater than <xref href="System.UInt64.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.UInt32)
  commentId: M:System.Convert.ToUInt64(System.UInt32)
  id: ToUInt64(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(UInt32)
  nameWithType: Convert.ToUInt64(UInt32)
  fullName: Convert.ToUInt64(UInt32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in an unsigned integer array to an unsigned long integer.  \n  \n [!code-csharp[System.Convert.ToUInt64#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#14)]\n [!code-vb[System.Convert.ToUInt64#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#14)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The 32-bit unsigned integer to convert.
    return:
      type: System.UInt64
      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt64*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.UInt64)
  commentId: M:System.Convert.ToUInt64(System.UInt64)
  id: ToUInt64(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(UInt64)
  nameWithType: Convert.ToUInt64(UInt64)
  fullName: Convert.ToUInt64(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the specified 64-bit unsigned integer; no actual conversion is performed.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The 64-bit unsigned integer to return.
    return:
      type: System.UInt64
      description: <code>value</code> is returned unchanged.
  overload: System.Convert.ToUInt64*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.SByte)
  commentId: M:System.Convert.ToUInt64(System.SByte)
  id: ToUInt64(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(SByte)
  nameWithType: Convert.ToUInt64(SByte)
  fullName: Convert.ToUInt64(SByte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in a signed byte array to an unsigned long integer.  \n  \n [!code-csharp[System.Convert.ToUInt64#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#10)]\n [!code-vb[System.Convert.ToUInt64#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#10)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The 8-bit signed integer to convert.
    return:
      type: System.UInt64
      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.UInt16)
  commentId: M:System.Convert.ToUInt64(System.UInt16)
  id: ToUInt64(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(UInt16)
  nameWithType: Convert.ToUInt64(UInt16)
  fullName: Convert.ToUInt64(UInt16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in an array of unsigned 16-bit integers to an unsigned long integer.  \n  \n [!code-csharp[System.Convert.ToUInt64#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#13)]\n [!code-vb[System.Convert.ToUInt64#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#13)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The 16-bit unsigned integer to convert.
    return:
      type: System.UInt64
      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt64*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.Object)
  commentId: M:System.Convert.ToUInt64(System.Object)
  id: ToUInt64(System.Object)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(Object)
  nameWithType: Convert.ToUInt64(Object)
  fullName: Convert.ToUInt64(Object)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified object to a 64-bit unsigned integer.
  remarks: The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> method of the underlying type of `value`.
  example:
  - "The following example attempts to convert each element in an object array to an unsigned long integer.  \n  \n [!code-csharp[System.Convert.ToUInt64#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#9)]\n [!code-vb[System.Convert.ToUInt64#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that implements the <xref href="System.IConvertible"></xref> interface, or `null`.
    return:
      type: System.UInt64
      description: A 64-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is `null`.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in an appropriate format.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>value</code> does not implement the <xref href=\"System.IConvertible\"></xref> interface.  \n  \n -or-  \n  \n The conversion is not supported."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.UInt64.MinValue"></xref> or greater than <xref href="System.UInt64.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.Decimal)
  commentId: M:System.Convert.ToUInt64(System.Decimal)
  id: ToUInt64(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(Decimal)
  nameWithType: Convert.ToUInt64(Decimal)
  fullName: Convert.ToUInt64(Decimal)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Decimal> values to an unsigned long integer.  \n  \n [!code-csharp[System.Convert.ToUInt64#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#4)]\n [!code-vb[System.Convert.ToUInt64#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#4)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal number to convert.
    return:
      type: System.UInt64
      description: <code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero or greater than <xref href="System.UInt64.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.Int32)
  commentId: M:System.Convert.ToUInt64(System.Int32)
  id: ToUInt64(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(Int32)
  nameWithType: Convert.ToUInt64(Int32)
  fullName: Convert.ToUInt64(Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of integers to an unsigned long integer.  \n  \n [!code-csharp[System.Convert.ToUInt64#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#7)]\n [!code-vb[System.Convert.ToUInt64#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#7)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The 32-bit signed integer to convert.
    return:
      type: System.UInt64
      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.Int16)
  commentId: M:System.Convert.ToUInt64(System.Int16)
  id: ToUInt64(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(Int16)
  nameWithType: Convert.ToUInt64(Int16)
  fullName: Convert.ToUInt64(Int16)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of 16-bit integers to an unsigned long integer.  \n  \n [!code-csharp[System.Convert.ToUInt64#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#6)]\n [!code-vb[System.Convert.ToUInt64#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#6)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The 16-bit signed integer to convert.
    return:
      type: System.UInt64
      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.Double)
  commentId: M:System.Convert.ToUInt64(System.Double)
  id: ToUInt64(System.Double)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(Double)
  nameWithType: Convert.ToUInt64(Double)
  fullName: Convert.ToUInt64(Double)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of <xref:System.Double> values to an unsigned long integer.  \n  \n [!code-csharp[System.Convert.ToUInt64#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#5)]\n [!code-vb[System.Convert.ToUInt64#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#5)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (double value);
    parameters:
    - id: value
      type: System.Double
      description: The double-precision floating-point number to convert.
    return:
      type: System.UInt64
      description: <code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero or greater than <xref href="System.UInt64.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.DateTime)
  commentId: M:System.Convert.ToUInt64(System.DateTime)
  id: ToUInt64(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(DateTime)
  nameWithType: Convert.ToUInt64(DateTime)
  fullName: Convert.ToUInt64(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.Extensions
  namespace: System
  summary: Calling this method always throws <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (DateTime value);
    parameters:
    - id: value
      type: System.DateTime
      description: The date and time value to convert.
    return:
      type: System.UInt64
      description: This conversion is not supported. No value is returned.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This conversion is not supported.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.Char)
  commentId: M:System.Convert.ToUInt64(System.Char)
  id: ToUInt64(System.Char)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(Char)
  nameWithType: Convert.ToUInt64(Char)
  fullName: Convert.ToUInt64(Char)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in a character array to an unsigned long integer.  \n  \n [!code-csharp[System.Convert.ToUInt64#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#3)]\n [!code-vb[System.Convert.ToUInt64#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#3)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (char value);
    parameters:
    - id: value
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.UInt64
      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt64*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.Byte)
  commentId: M:System.Convert.ToUInt64(System.Byte)
  id: ToUInt64(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(Byte)
  nameWithType: Convert.ToUInt64(Byte)
  fullName: Convert.ToUInt64(Byte)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts each element in a byte array to an unsigned long integer.  \n  \n [!code-csharp[System.Convert.ToUInt64#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#2)]\n [!code-vb[System.Convert.ToUInt64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#2)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The 8-bit unsigned integer to convert.
    return:
      type: System.UInt64
      description: A 64-bit signed integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt64*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.Boolean)
  commentId: M:System.Convert.ToUInt64(System.Boolean)
  id: ToUInt64(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(Boolean)
  nameWithType: Convert.ToUInt64(Boolean)
  fullName: Convert.ToUInt64(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified Boolean value to the equivalent 64-bit unsigned integer.
  remarks: ''
  example:
  - "The following example converts Boolean `true` and `false` values to unsigned long integers.  \n  \n [!code-csharp[System.Convert.ToUInt64#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#1)]\n [!code-vb[System.Convert.ToUInt64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#1)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to convert.
    return:
      type: System.UInt64
      description: The number 1 if <code>value</code> is `true`; otherwise, 0.
  overload: System.Convert.ToUInt64*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToUInt64(System.String,System.IFormatProvider)
  id: ToUInt64(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(String, IFormatProvider)
  nameWithType: Convert.ToUInt64(String, IFormatProvider)
  fullName: Convert.ToUInt64(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.
  remarks: "The return value is the result of invoking <xref:System.UInt64.Parse%2A?displayProperty=fullName> on `value`.  \n  \n `provider` is an <xref:System.IFormatProvider> implementation that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.  \n  \n If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed."
  example:
  - "The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string \"pos\" as the positive sign and the string \"neg\" as the negative sign. It then attempts to convert each element of a numeric string array to an unsigned long integer. The conversion uses both the custom provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  \n  \n [!code-csharp[System.Convert.ToUInt64#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_2.cs#15)]\n [!code-vb[System.Convert.ToUInt64#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_2.vb#15)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.UInt64
      description: A 64-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> represents a number that is less than <xref href="System.UInt64.MinValue"></xref> or greater than <xref href="System.UInt64.MaxValue"></xref>.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.Int64)
  commentId: M:System.Convert.ToUInt64(System.Int64)
  id: ToUInt64(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(Int64)
  nameWithType: Convert.ToUInt64(Int64)
  fullName: Convert.ToUInt64(Int64)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.
  remarks: ''
  example:
  - "The following example attempts to convert each element in an array of long integers to an unsigned long integer.  \n  \n [!code-csharp[System.Convert.ToUInt64#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#8)]\n [!code-vb[System.Convert.ToUInt64#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#8)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The 64-bit signed integer to convert.
    return:
      type: System.UInt64
      description: A 64-bit unsigned integer that is equivalent to <code>value</code>.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>value</code> is less than zero.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Convert.ToUInt64(System.String,System.Int32)
  commentId: M:System.Convert.ToUInt64(System.String,System.Int32)
  id: ToUInt64(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  name: ToUInt64(String, Int32)
  nameWithType: Convert.ToUInt64(String, Int32)
  fullName: Convert.ToUInt64(String, Int32)
  type: Method
  assemblies:
  - System.Runtime.Extensions
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.
  remarks: "If `fromBase` is 16, you can prefix the number specified by the `value` parameter with \"0x\" or \"0X\".  \n  \n Because the <xref:System.UInt64> data type supports unsigned values only, the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation. In other words, all 64 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed long integer value that is out of the range of the <xref:System.UInt64> data type is converted to a <xref:System.UInt64> value without the method throwing an exception. The following example converts <xref:System.Int64.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method. Instead of throwing an exception, the method displays the message, \"0x8000000000000000 converts to 9223372036854775808.\"  \n  \n [!code-csharp[System.Convert.BaseConversion#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#15)]\n [!code-vb[System.Convert.BaseConversion#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#15)]  \n  \n When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt64> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt64> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  \n  \n [!code-csharp[System.Convert.BaseConversion#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#16)]\n [!code-vb[System.Convert.BaseConversion#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#16)]"
  example:
  - "The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned long integer.  \n  \n [!code-csharp[System.Convert.ToUInt64#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_3.cs#16)]\n [!code-vb[System.Convert.ToUInt64#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_3.vb#16)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong ToUInt64 (string value, int fromBase);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    - id: fromBase
      type: System.Int32
      description: The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.
    return:
      type: System.UInt64
      description: A 64-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is `null`.
  overload: System.Convert.ToUInt64*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>fromBase</code> is not 2, 8, 10, or 16.  \n  \n -or-  \n  \n <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>value</code> is <xref href="System.String.Empty"></xref>.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  \n  \n -or-  \n  \n <code>value</code> represents a number that is less than <xref href=\"System.UInt64.MinValue\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.InvalidCastException
  parent: System
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.OverflowException
  parent: System
  isExternal: false
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Convert.ChangeType(System.Object,System.Type)
  parent: System.Convert
  isExternal: false
  name: ChangeType(Object, Type)
  nameWithType: Convert.ChangeType(Object, Type)
  fullName: Convert.ChangeType(Object, Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Convert.ChangeType(System.Object,System.TypeCode)
  parent: System.Convert
  isExternal: false
  name: ChangeType(Object, TypeCode)
  nameWithType: Convert.ChangeType(Object, TypeCode)
  fullName: Convert.ChangeType(Object, TypeCode)
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  nameWithType: TypeCode
  fullName: System.TypeCode
- uid: System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ChangeType(Object, Type, IFormatProvider)
  nameWithType: Convert.ChangeType(Object, Type, IFormatProvider)
  fullName: Convert.ChangeType(Object, Type, IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ChangeType(Object, TypeCode, IFormatProvider)
  nameWithType: Convert.ChangeType(Object, TypeCode, IFormatProvider)
  fullName: Convert.ChangeType(Object, TypeCode, IFormatProvider)
- uid: System.Convert.DBNull
  parent: System.Convert
  isExternal: false
  name: DBNull
  nameWithType: Convert.DBNull
  fullName: Convert.DBNull
- uid: System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)
  parent: System.Convert
  isExternal: false
  name: FromBase64CharArray(Char[], Int32, Int32)
  nameWithType: Convert.FromBase64CharArray(Char[], Int32, Int32)
  fullName: Convert.FromBase64CharArray(Char[], Int32, Int32)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Char
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char[]
  parent: System
  isExternal: false
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Convert.FromBase64String(System.String)
  parent: System.Convert
  isExternal: false
  name: FromBase64String(String)
  nameWithType: Convert.FromBase64String(String)
  fullName: Convert.FromBase64String(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Convert.GetTypeCode(System.Object)
  parent: System.Convert
  isExternal: false
  name: GetTypeCode(Object)
  nameWithType: Convert.GetTypeCode(Object)
  fullName: Convert.GetTypeCode(Object)
- uid: System.Convert.IsDBNull(System.Object)
  parent: System.Convert
  isExternal: false
  name: IsDBNull(Object)
  nameWithType: Convert.IsDBNull(Object)
  fullName: Convert.IsDBNull(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)
  nameWithType: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)
  fullName: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)
- uid: System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)
  parent: System.Convert
  isExternal: false
  name: ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32, Base64FormattingOptions)
  nameWithType: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32, Base64FormattingOptions)
  fullName: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32, Base64FormattingOptions)
- uid: System.Base64FormattingOptions
  parent: System
  isExternal: false
  name: Base64FormattingOptions
  nameWithType: Base64FormattingOptions
  fullName: System.Base64FormattingOptions
- uid: System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)
  parent: System.Convert
  isExternal: false
  name: ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions)
  nameWithType: Convert.ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions)
  fullName: Convert.ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions)
- uid: System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToBase64String(Byte[], Int32, Int32)
  nameWithType: Convert.ToBase64String(Byte[], Int32, Int32)
  fullName: Convert.ToBase64String(Byte[], Int32, Int32)
- uid: System.Convert.ToBase64String(System.Byte[])
  parent: System.Convert
  isExternal: false
  name: ToBase64String(Byte[])
  nameWithType: Convert.ToBase64String(Byte[])
  fullName: Convert.ToBase64String(Byte[])
- uid: System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)
  parent: System.Convert
  isExternal: false
  name: ToBase64String(Byte[], Base64FormattingOptions)
  nameWithType: Convert.ToBase64String(Byte[], Base64FormattingOptions)
  fullName: Convert.ToBase64String(Byte[], Base64FormattingOptions)
- uid: System.Convert.ToBoolean(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(SByte)
  nameWithType: Convert.ToBoolean(SByte)
  fullName: Convert.ToBoolean(SByte)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Convert.ToBoolean(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(String, IFormatProvider)
  nameWithType: Convert.ToBoolean(String, IFormatProvider)
  fullName: Convert.ToBoolean(String, IFormatProvider)
- uid: System.Convert.ToBoolean(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(Object, IFormatProvider)
  nameWithType: Convert.ToBoolean(Object, IFormatProvider)
  fullName: Convert.ToBoolean(Object, IFormatProvider)
- uid: System.Convert.ToBoolean(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(UInt64)
  nameWithType: Convert.ToBoolean(UInt64)
  fullName: Convert.ToBoolean(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Convert.ToBoolean(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(UInt32)
  nameWithType: Convert.ToBoolean(UInt32)
  fullName: Convert.ToBoolean(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Convert.ToBoolean(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(UInt16)
  nameWithType: Convert.ToBoolean(UInt16)
  fullName: Convert.ToBoolean(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Convert.ToBoolean(System.String)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(String)
  nameWithType: Convert.ToBoolean(String)
  fullName: Convert.ToBoolean(String)
- uid: System.Convert.ToBoolean(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(Single)
  nameWithType: Convert.ToBoolean(Single)
  fullName: Convert.ToBoolean(Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Convert.ToBoolean(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(Object)
  nameWithType: Convert.ToBoolean(Object)
  fullName: Convert.ToBoolean(Object)
- uid: System.Convert.ToBoolean(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(Double)
  nameWithType: Convert.ToBoolean(Double)
  fullName: Convert.ToBoolean(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Convert.ToBoolean(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(Int32)
  nameWithType: Convert.ToBoolean(Int32)
  fullName: Convert.ToBoolean(Int32)
- uid: System.Convert.ToBoolean(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(Int16)
  nameWithType: Convert.ToBoolean(Int16)
  fullName: Convert.ToBoolean(Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Convert.ToBoolean(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(Decimal)
  nameWithType: Convert.ToBoolean(Decimal)
  fullName: Convert.ToBoolean(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Convert.ToBoolean(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(DateTime)
  nameWithType: Convert.ToBoolean(DateTime)
  fullName: Convert.ToBoolean(DateTime)
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Convert.ToBoolean(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(Char)
  nameWithType: Convert.ToBoolean(Char)
  fullName: Convert.ToBoolean(Char)
- uid: System.Convert.ToBoolean(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(Byte)
  nameWithType: Convert.ToBoolean(Byte)
  fullName: Convert.ToBoolean(Byte)
- uid: System.Convert.ToBoolean(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(Boolean)
  nameWithType: Convert.ToBoolean(Boolean)
  fullName: Convert.ToBoolean(Boolean)
- uid: System.Convert.ToBoolean(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToBoolean(Int64)
  nameWithType: Convert.ToBoolean(Int64)
  fullName: Convert.ToBoolean(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Convert.ToByte(System.String)
  parent: System.Convert
  isExternal: false
  name: ToByte(String)
  nameWithType: Convert.ToByte(String)
  fullName: Convert.ToByte(String)
- uid: System.Convert.ToByte(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToByte(UInt16)
  nameWithType: Convert.ToByte(UInt16)
  fullName: Convert.ToByte(UInt16)
- uid: System.Convert.ToByte(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToByte(UInt32)
  nameWithType: Convert.ToByte(UInt32)
  fullName: Convert.ToByte(UInt32)
- uid: System.Convert.ToByte(System.String,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToByte(String, Int32)
  nameWithType: Convert.ToByte(String, Int32)
  fullName: Convert.ToByte(String, Int32)
- uid: System.Convert.ToByte(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToByte(Object, IFormatProvider)
  nameWithType: Convert.ToByte(Object, IFormatProvider)
  fullName: Convert.ToByte(Object, IFormatProvider)
- uid: System.Convert.ToByte(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToByte(String, IFormatProvider)
  nameWithType: Convert.ToByte(String, IFormatProvider)
  fullName: Convert.ToByte(String, IFormatProvider)
- uid: System.Convert.ToByte(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToByte(Single)
  nameWithType: Convert.ToByte(Single)
  fullName: Convert.ToByte(Single)
- uid: System.Convert.ToByte(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToByte(UInt64)
  nameWithType: Convert.ToByte(UInt64)
  fullName: Convert.ToByte(UInt64)
- uid: System.Convert.ToByte(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToByte(SByte)
  nameWithType: Convert.ToByte(SByte)
  fullName: Convert.ToByte(SByte)
- uid: System.Convert.ToByte(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToByte(Int16)
  nameWithType: Convert.ToByte(Int16)
  fullName: Convert.ToByte(Int16)
- uid: System.Convert.ToByte(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToByte(Int64)
  nameWithType: Convert.ToByte(Int64)
  fullName: Convert.ToByte(Int64)
- uid: System.Convert.ToByte(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToByte(Byte)
  nameWithType: Convert.ToByte(Byte)
  fullName: Convert.ToByte(Byte)
- uid: System.Convert.ToByte(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToByte(Char)
  nameWithType: Convert.ToByte(Char)
  fullName: Convert.ToByte(Char)
- uid: System.Convert.ToByte(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToByte(DateTime)
  nameWithType: Convert.ToByte(DateTime)
  fullName: Convert.ToByte(DateTime)
- uid: System.Convert.ToByte(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToByte(Boolean)
  nameWithType: Convert.ToByte(Boolean)
  fullName: Convert.ToByte(Boolean)
- uid: System.Convert.ToByte(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToByte(Double)
  nameWithType: Convert.ToByte(Double)
  fullName: Convert.ToByte(Double)
- uid: System.Convert.ToByte(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToByte(Int32)
  nameWithType: Convert.ToByte(Int32)
  fullName: Convert.ToByte(Int32)
- uid: System.Convert.ToByte(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToByte(Decimal)
  nameWithType: Convert.ToByte(Decimal)
  fullName: Convert.ToByte(Decimal)
- uid: System.Convert.ToByte(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToByte(Object)
  nameWithType: Convert.ToByte(Object)
  fullName: Convert.ToByte(Object)
- uid: System.Convert.ToChar(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToChar(String, IFormatProvider)
  nameWithType: Convert.ToChar(String, IFormatProvider)
  fullName: Convert.ToChar(String, IFormatProvider)
- uid: System.Convert.ToChar(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToChar(Object)
  nameWithType: Convert.ToChar(Object)
  fullName: Convert.ToChar(Object)
- uid: System.Convert.ToChar(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToChar(Object, IFormatProvider)
  nameWithType: Convert.ToChar(Object, IFormatProvider)
  fullName: Convert.ToChar(Object, IFormatProvider)
- uid: System.Convert.ToChar(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToChar(UInt64)
  nameWithType: Convert.ToChar(UInt64)
  fullName: Convert.ToChar(UInt64)
- uid: System.Convert.ToChar(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToChar(UInt32)
  nameWithType: Convert.ToChar(UInt32)
  fullName: Convert.ToChar(UInt32)
- uid: System.Convert.ToChar(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToChar(UInt16)
  nameWithType: Convert.ToChar(UInt16)
  fullName: Convert.ToChar(UInt16)
- uid: System.Convert.ToChar(System.String)
  parent: System.Convert
  isExternal: false
  name: ToChar(String)
  nameWithType: Convert.ToChar(String)
  fullName: Convert.ToChar(String)
- uid: System.Convert.ToChar(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToChar(Single)
  nameWithType: Convert.ToChar(Single)
  fullName: Convert.ToChar(Single)
- uid: System.Convert.ToChar(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToChar(SByte)
  nameWithType: Convert.ToChar(SByte)
  fullName: Convert.ToChar(SByte)
- uid: System.Convert.ToChar(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToChar(Int64)
  nameWithType: Convert.ToChar(Int64)
  fullName: Convert.ToChar(Int64)
- uid: System.Convert.ToChar(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToChar(Int16)
  nameWithType: Convert.ToChar(Int16)
  fullName: Convert.ToChar(Int16)
- uid: System.Convert.ToChar(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToChar(Double)
  nameWithType: Convert.ToChar(Double)
  fullName: Convert.ToChar(Double)
- uid: System.Convert.ToChar(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToChar(Decimal)
  nameWithType: Convert.ToChar(Decimal)
  fullName: Convert.ToChar(Decimal)
- uid: System.Convert.ToChar(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToChar(DateTime)
  nameWithType: Convert.ToChar(DateTime)
  fullName: Convert.ToChar(DateTime)
- uid: System.Convert.ToChar(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToChar(Char)
  nameWithType: Convert.ToChar(Char)
  fullName: Convert.ToChar(Char)
- uid: System.Convert.ToChar(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToChar(Byte)
  nameWithType: Convert.ToChar(Byte)
  fullName: Convert.ToChar(Byte)
- uid: System.Convert.ToChar(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToChar(Boolean)
  nameWithType: Convert.ToChar(Boolean)
  fullName: Convert.ToChar(Boolean)
- uid: System.Convert.ToChar(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToChar(Int32)
  nameWithType: Convert.ToChar(Int32)
  fullName: Convert.ToChar(Int32)
- uid: System.Convert.ToDateTime(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(Single)
  nameWithType: Convert.ToDateTime(Single)
  fullName: Convert.ToDateTime(Single)
- uid: System.Convert.ToDateTime(System.String)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(String)
  nameWithType: Convert.ToDateTime(String)
  fullName: Convert.ToDateTime(String)
- uid: System.Convert.ToDateTime(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(UInt16)
  nameWithType: Convert.ToDateTime(UInt16)
  fullName: Convert.ToDateTime(UInt16)
- uid: System.Convert.ToDateTime(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(String, IFormatProvider)
  nameWithType: Convert.ToDateTime(String, IFormatProvider)
  fullName: Convert.ToDateTime(String, IFormatProvider)
- uid: System.Convert.ToDateTime(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(UInt64)
  nameWithType: Convert.ToDateTime(UInt64)
  fullName: Convert.ToDateTime(UInt64)
- uid: System.Convert.ToDateTime(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(Object, IFormatProvider)
  nameWithType: Convert.ToDateTime(Object, IFormatProvider)
  fullName: Convert.ToDateTime(Object, IFormatProvider)
- uid: System.Convert.ToDateTime(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(SByte)
  nameWithType: Convert.ToDateTime(SByte)
  fullName: Convert.ToDateTime(SByte)
- uid: System.Convert.ToDateTime(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(UInt32)
  nameWithType: Convert.ToDateTime(UInt32)
  fullName: Convert.ToDateTime(UInt32)
- uid: System.Convert.ToDateTime(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(Object)
  nameWithType: Convert.ToDateTime(Object)
  fullName: Convert.ToDateTime(Object)
- uid: System.Convert.ToDateTime(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(Double)
  nameWithType: Convert.ToDateTime(Double)
  fullName: Convert.ToDateTime(Double)
- uid: System.Convert.ToDateTime(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(Int32)
  nameWithType: Convert.ToDateTime(Int32)
  fullName: Convert.ToDateTime(Int32)
- uid: System.Convert.ToDateTime(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(Boolean)
  nameWithType: Convert.ToDateTime(Boolean)
  fullName: Convert.ToDateTime(Boolean)
- uid: System.Convert.ToDateTime(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(Byte)
  nameWithType: Convert.ToDateTime(Byte)
  fullName: Convert.ToDateTime(Byte)
- uid: System.Convert.ToDateTime(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(Char)
  nameWithType: Convert.ToDateTime(Char)
  fullName: Convert.ToDateTime(Char)
- uid: System.Convert.ToDateTime(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(Int64)
  nameWithType: Convert.ToDateTime(Int64)
  fullName: Convert.ToDateTime(Int64)
- uid: System.Convert.ToDateTime(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(Decimal)
  nameWithType: Convert.ToDateTime(Decimal)
  fullName: Convert.ToDateTime(Decimal)
- uid: System.Convert.ToDateTime(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(Int16)
  nameWithType: Convert.ToDateTime(Int16)
  fullName: Convert.ToDateTime(Int16)
- uid: System.Convert.ToDateTime(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToDateTime(DateTime)
  nameWithType: Convert.ToDateTime(DateTime)
  fullName: Convert.ToDateTime(DateTime)
- uid: System.Convert.ToDecimal(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(String, IFormatProvider)
  nameWithType: Convert.ToDecimal(String, IFormatProvider)
  fullName: Convert.ToDecimal(String, IFormatProvider)
- uid: System.Convert.ToDecimal(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(Object, IFormatProvider)
  nameWithType: Convert.ToDecimal(Object, IFormatProvider)
  fullName: Convert.ToDecimal(Object, IFormatProvider)
- uid: System.Convert.ToDecimal(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(UInt64)
  nameWithType: Convert.ToDecimal(UInt64)
  fullName: Convert.ToDecimal(UInt64)
- uid: System.Convert.ToDecimal(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(UInt32)
  nameWithType: Convert.ToDecimal(UInt32)
  fullName: Convert.ToDecimal(UInt32)
- uid: System.Convert.ToDecimal(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(UInt16)
  nameWithType: Convert.ToDecimal(UInt16)
  fullName: Convert.ToDecimal(UInt16)
- uid: System.Convert.ToDecimal(System.String)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(String)
  nameWithType: Convert.ToDecimal(String)
  fullName: Convert.ToDecimal(String)
- uid: System.Convert.ToDecimal(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(SByte)
  nameWithType: Convert.ToDecimal(SByte)
  fullName: Convert.ToDecimal(SByte)
- uid: System.Convert.ToDecimal(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(Object)
  nameWithType: Convert.ToDecimal(Object)
  fullName: Convert.ToDecimal(Object)
- uid: System.Convert.ToDecimal(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(Single)
  nameWithType: Convert.ToDecimal(Single)
  fullName: Convert.ToDecimal(Single)
- uid: System.Convert.ToDecimal(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(Int32)
  nameWithType: Convert.ToDecimal(Int32)
  fullName: Convert.ToDecimal(Int32)
- uid: System.Convert.ToDecimal(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(Boolean)
  nameWithType: Convert.ToDecimal(Boolean)
  fullName: Convert.ToDecimal(Boolean)
- uid: System.Convert.ToDecimal(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(Byte)
  nameWithType: Convert.ToDecimal(Byte)
  fullName: Convert.ToDecimal(Byte)
- uid: System.Convert.ToDecimal(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(Char)
  nameWithType: Convert.ToDecimal(Char)
  fullName: Convert.ToDecimal(Char)
- uid: System.Convert.ToDecimal(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(Int64)
  nameWithType: Convert.ToDecimal(Int64)
  fullName: Convert.ToDecimal(Int64)
- uid: System.Convert.ToDecimal(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(Decimal)
  nameWithType: Convert.ToDecimal(Decimal)
  fullName: Convert.ToDecimal(Decimal)
- uid: System.Convert.ToDecimal(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(Double)
  nameWithType: Convert.ToDecimal(Double)
  fullName: Convert.ToDecimal(Double)
- uid: System.Convert.ToDecimal(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(Int16)
  nameWithType: Convert.ToDecimal(Int16)
  fullName: Convert.ToDecimal(Int16)
- uid: System.Convert.ToDecimal(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToDecimal(DateTime)
  nameWithType: Convert.ToDecimal(DateTime)
  fullName: Convert.ToDecimal(DateTime)
- uid: System.Convert.ToDouble(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToDouble(SByte)
  nameWithType: Convert.ToDouble(SByte)
  fullName: Convert.ToDouble(SByte)
- uid: System.Convert.ToDouble(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToDouble(Object, IFormatProvider)
  nameWithType: Convert.ToDouble(Object, IFormatProvider)
  fullName: Convert.ToDouble(Object, IFormatProvider)
- uid: System.Convert.ToDouble(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToDouble(UInt64)
  nameWithType: Convert.ToDouble(UInt64)
  fullName: Convert.ToDouble(UInt64)
- uid: System.Convert.ToDouble(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToDouble(UInt32)
  nameWithType: Convert.ToDouble(UInt32)
  fullName: Convert.ToDouble(UInt32)
- uid: System.Convert.ToDouble(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToDouble(UInt16)
  nameWithType: Convert.ToDouble(UInt16)
  fullName: Convert.ToDouble(UInt16)
- uid: System.Convert.ToDouble(System.String)
  parent: System.Convert
  isExternal: false
  name: ToDouble(String)
  nameWithType: Convert.ToDouble(String)
  fullName: Convert.ToDouble(String)
- uid: System.Convert.ToDouble(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToDouble(Single)
  nameWithType: Convert.ToDouble(Single)
  fullName: Convert.ToDouble(Single)
- uid: System.Convert.ToDouble(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToDouble(String, IFormatProvider)
  nameWithType: Convert.ToDouble(String, IFormatProvider)
  fullName: Convert.ToDouble(String, IFormatProvider)
- uid: System.Convert.ToDouble(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToDouble(Object)
  nameWithType: Convert.ToDouble(Object)
  fullName: Convert.ToDouble(Object)
- uid: System.Convert.ToDouble(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToDouble(Int32)
  nameWithType: Convert.ToDouble(Int32)
  fullName: Convert.ToDouble(Int32)
- uid: System.Convert.ToDouble(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToDouble(Boolean)
  nameWithType: Convert.ToDouble(Boolean)
  fullName: Convert.ToDouble(Boolean)
- uid: System.Convert.ToDouble(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToDouble(Byte)
  nameWithType: Convert.ToDouble(Byte)
  fullName: Convert.ToDouble(Byte)
- uid: System.Convert.ToDouble(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToDouble(Char)
  nameWithType: Convert.ToDouble(Char)
  fullName: Convert.ToDouble(Char)
- uid: System.Convert.ToDouble(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToDouble(Int64)
  nameWithType: Convert.ToDouble(Int64)
  fullName: Convert.ToDouble(Int64)
- uid: System.Convert.ToDouble(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToDouble(Decimal)
  nameWithType: Convert.ToDouble(Decimal)
  fullName: Convert.ToDouble(Decimal)
- uid: System.Convert.ToDouble(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToDouble(Double)
  nameWithType: Convert.ToDouble(Double)
  fullName: Convert.ToDouble(Double)
- uid: System.Convert.ToDouble(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToDouble(Int16)
  nameWithType: Convert.ToDouble(Int16)
  fullName: Convert.ToDouble(Int16)
- uid: System.Convert.ToDouble(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToDouble(DateTime)
  nameWithType: Convert.ToDouble(DateTime)
  fullName: Convert.ToDouble(DateTime)
- uid: System.Convert.ToInt16(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToInt16(SByte)
  nameWithType: Convert.ToInt16(SByte)
  fullName: Convert.ToInt16(SByte)
- uid: System.Convert.ToInt16(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToInt16(String, IFormatProvider)
  nameWithType: Convert.ToInt16(String, IFormatProvider)
  fullName: Convert.ToInt16(String, IFormatProvider)
- uid: System.Convert.ToInt16(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToInt16(Object, IFormatProvider)
  nameWithType: Convert.ToInt16(Object, IFormatProvider)
  fullName: Convert.ToInt16(Object, IFormatProvider)
- uid: System.Convert.ToInt16(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToInt16(UInt64)
  nameWithType: Convert.ToInt16(UInt64)
  fullName: Convert.ToInt16(UInt64)
- uid: System.Convert.ToInt16(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToInt16(UInt32)
  nameWithType: Convert.ToInt16(UInt32)
  fullName: Convert.ToInt16(UInt32)
- uid: System.Convert.ToInt16(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToInt16(UInt16)
  nameWithType: Convert.ToInt16(UInt16)
  fullName: Convert.ToInt16(UInt16)
- uid: System.Convert.ToInt16(System.String)
  parent: System.Convert
  isExternal: false
  name: ToInt16(String)
  nameWithType: Convert.ToInt16(String)
  fullName: Convert.ToInt16(String)
- uid: System.Convert.ToInt16(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToInt16(Single)
  nameWithType: Convert.ToInt16(Single)
  fullName: Convert.ToInt16(Single)
- uid: System.Convert.ToInt16(System.String,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToInt16(String, Int32)
  nameWithType: Convert.ToInt16(String, Int32)
  fullName: Convert.ToInt16(String, Int32)
- uid: System.Convert.ToInt16(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToInt16(Object)
  nameWithType: Convert.ToInt16(Object)
  fullName: Convert.ToInt16(Object)
- uid: System.Convert.ToInt16(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToInt16(Int32)
  nameWithType: Convert.ToInt16(Int32)
  fullName: Convert.ToInt16(Int32)
- uid: System.Convert.ToInt16(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToInt16(Int16)
  nameWithType: Convert.ToInt16(Int16)
  fullName: Convert.ToInt16(Int16)
- uid: System.Convert.ToInt16(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToInt16(Double)
  nameWithType: Convert.ToInt16(Double)
  fullName: Convert.ToInt16(Double)
- uid: System.Convert.ToInt16(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToInt16(Decimal)
  nameWithType: Convert.ToInt16(Decimal)
  fullName: Convert.ToInt16(Decimal)
- uid: System.Convert.ToInt16(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToInt16(DateTime)
  nameWithType: Convert.ToInt16(DateTime)
  fullName: Convert.ToInt16(DateTime)
- uid: System.Convert.ToInt16(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToInt16(Char)
  nameWithType: Convert.ToInt16(Char)
  fullName: Convert.ToInt16(Char)
- uid: System.Convert.ToInt16(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToInt16(Byte)
  nameWithType: Convert.ToInt16(Byte)
  fullName: Convert.ToInt16(Byte)
- uid: System.Convert.ToInt16(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToInt16(Boolean)
  nameWithType: Convert.ToInt16(Boolean)
  fullName: Convert.ToInt16(Boolean)
- uid: System.Convert.ToInt16(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToInt16(Int64)
  nameWithType: Convert.ToInt16(Int64)
  fullName: Convert.ToInt16(Int64)
- uid: System.Convert.ToInt32(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToInt32(Single)
  nameWithType: Convert.ToInt32(Single)
  fullName: Convert.ToInt32(Single)
- uid: System.Convert.ToInt32(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToInt32(UInt16)
  nameWithType: Convert.ToInt32(UInt16)
  fullName: Convert.ToInt32(UInt16)
- uid: System.Convert.ToInt32(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToInt32(UInt32)
  nameWithType: Convert.ToInt32(UInt32)
  fullName: Convert.ToInt32(UInt32)
- uid: System.Convert.ToInt32(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToInt32(SByte)
  nameWithType: Convert.ToInt32(SByte)
  fullName: Convert.ToInt32(SByte)
- uid: System.Convert.ToInt32(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToInt32(Object, IFormatProvider)
  nameWithType: Convert.ToInt32(Object, IFormatProvider)
  fullName: Convert.ToInt32(Object, IFormatProvider)
- uid: System.Convert.ToInt32(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToInt32(String, IFormatProvider)
  nameWithType: Convert.ToInt32(String, IFormatProvider)
  fullName: Convert.ToInt32(String, IFormatProvider)
- uid: System.Convert.ToInt32(System.String,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToInt32(String, Int32)
  nameWithType: Convert.ToInt32(String, Int32)
  fullName: Convert.ToInt32(String, Int32)
- uid: System.Convert.ToInt32(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToInt32(UInt64)
  nameWithType: Convert.ToInt32(UInt64)
  fullName: Convert.ToInt32(UInt64)
- uid: System.Convert.ToInt32(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToInt32(Object)
  nameWithType: Convert.ToInt32(Object)
  fullName: Convert.ToInt32(Object)
- uid: System.Convert.ToInt32(System.String)
  parent: System.Convert
  isExternal: false
  name: ToInt32(String)
  nameWithType: Convert.ToInt32(String)
  fullName: Convert.ToInt32(String)
- uid: System.Convert.ToInt32(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToInt32(Int32)
  nameWithType: Convert.ToInt32(Int32)
  fullName: Convert.ToInt32(Int32)
- uid: System.Convert.ToInt32(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToInt32(Byte)
  nameWithType: Convert.ToInt32(Byte)
  fullName: Convert.ToInt32(Byte)
- uid: System.Convert.ToInt32(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToInt32(Char)
  nameWithType: Convert.ToInt32(Char)
  fullName: Convert.ToInt32(Char)
- uid: System.Convert.ToInt32(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToInt32(DateTime)
  nameWithType: Convert.ToInt32(DateTime)
  fullName: Convert.ToInt32(DateTime)
- uid: System.Convert.ToInt32(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToInt32(Boolean)
  nameWithType: Convert.ToInt32(Boolean)
  fullName: Convert.ToInt32(Boolean)
- uid: System.Convert.ToInt32(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToInt32(Double)
  nameWithType: Convert.ToInt32(Double)
  fullName: Convert.ToInt32(Double)
- uid: System.Convert.ToInt32(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToInt32(Int64)
  nameWithType: Convert.ToInt32(Int64)
  fullName: Convert.ToInt32(Int64)
- uid: System.Convert.ToInt32(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToInt32(Int16)
  nameWithType: Convert.ToInt32(Int16)
  fullName: Convert.ToInt32(Int16)
- uid: System.Convert.ToInt32(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToInt32(Decimal)
  nameWithType: Convert.ToInt32(Decimal)
  fullName: Convert.ToInt32(Decimal)
- uid: System.Convert.ToInt64(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToInt64(Single)
  nameWithType: Convert.ToInt64(Single)
  fullName: Convert.ToInt64(Single)
- uid: System.Convert.ToInt64(System.String,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToInt64(String, Int32)
  nameWithType: Convert.ToInt64(String, Int32)
  fullName: Convert.ToInt64(String, Int32)
- uid: System.Convert.ToInt64(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToInt64(String, IFormatProvider)
  nameWithType: Convert.ToInt64(String, IFormatProvider)
  fullName: Convert.ToInt64(String, IFormatProvider)
- uid: System.Convert.ToInt64(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToInt64(Object, IFormatProvider)
  nameWithType: Convert.ToInt64(Object, IFormatProvider)
  fullName: Convert.ToInt64(Object, IFormatProvider)
- uid: System.Convert.ToInt64(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToInt64(UInt64)
  nameWithType: Convert.ToInt64(UInt64)
  fullName: Convert.ToInt64(UInt64)
- uid: System.Convert.ToInt64(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToInt64(UInt32)
  nameWithType: Convert.ToInt64(UInt32)
  fullName: Convert.ToInt64(UInt32)
- uid: System.Convert.ToInt64(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToInt64(UInt16)
  nameWithType: Convert.ToInt64(UInt16)
  fullName: Convert.ToInt64(UInt16)
- uid: System.Convert.ToInt64(System.String)
  parent: System.Convert
  isExternal: false
  name: ToInt64(String)
  nameWithType: Convert.ToInt64(String)
  fullName: Convert.ToInt64(String)
- uid: System.Convert.ToInt64(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToInt64(SByte)
  nameWithType: Convert.ToInt64(SByte)
  fullName: Convert.ToInt64(SByte)
- uid: System.Convert.ToInt64(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToInt64(Object)
  nameWithType: Convert.ToInt64(Object)
  fullName: Convert.ToInt64(Object)
- uid: System.Convert.ToInt64(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToInt64(Int64)
  nameWithType: Convert.ToInt64(Int64)
  fullName: Convert.ToInt64(Int64)
- uid: System.Convert.ToInt64(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToInt64(Byte)
  nameWithType: Convert.ToInt64(Byte)
  fullName: Convert.ToInt64(Byte)
- uid: System.Convert.ToInt64(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToInt64(Char)
  nameWithType: Convert.ToInt64(Char)
  fullName: Convert.ToInt64(Char)
- uid: System.Convert.ToInt64(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToInt64(DateTime)
  nameWithType: Convert.ToInt64(DateTime)
  fullName: Convert.ToInt64(DateTime)
- uid: System.Convert.ToInt64(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToInt64(Boolean)
  nameWithType: Convert.ToInt64(Boolean)
  fullName: Convert.ToInt64(Boolean)
- uid: System.Convert.ToInt64(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToInt64(Double)
  nameWithType: Convert.ToInt64(Double)
  fullName: Convert.ToInt64(Double)
- uid: System.Convert.ToInt64(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToInt64(Int16)
  nameWithType: Convert.ToInt64(Int16)
  fullName: Convert.ToInt64(Int16)
- uid: System.Convert.ToInt64(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToInt64(Int32)
  nameWithType: Convert.ToInt64(Int32)
  fullName: Convert.ToInt64(Int32)
- uid: System.Convert.ToInt64(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToInt64(Decimal)
  nameWithType: Convert.ToInt64(Decimal)
  fullName: Convert.ToInt64(Decimal)
- uid: System.Convert.ToSByte(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToSByte(SByte)
  nameWithType: Convert.ToSByte(SByte)
  fullName: Convert.ToSByte(SByte)
- uid: System.Convert.ToSByte(System.String,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToSByte(String, Int32)
  nameWithType: Convert.ToSByte(String, Int32)
  fullName: Convert.ToSByte(String, Int32)
- uid: System.Convert.ToSByte(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToSByte(String, IFormatProvider)
  nameWithType: Convert.ToSByte(String, IFormatProvider)
  fullName: Convert.ToSByte(String, IFormatProvider)
- uid: System.Convert.ToSByte(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToSByte(Object, IFormatProvider)
  nameWithType: Convert.ToSByte(Object, IFormatProvider)
  fullName: Convert.ToSByte(Object, IFormatProvider)
- uid: System.Convert.ToSByte(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToSByte(UInt64)
  nameWithType: Convert.ToSByte(UInt64)
  fullName: Convert.ToSByte(UInt64)
- uid: System.Convert.ToSByte(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToSByte(UInt32)
  nameWithType: Convert.ToSByte(UInt32)
  fullName: Convert.ToSByte(UInt32)
- uid: System.Convert.ToSByte(System.String)
  parent: System.Convert
  isExternal: false
  name: ToSByte(String)
  nameWithType: Convert.ToSByte(String)
  fullName: Convert.ToSByte(String)
- uid: System.Convert.ToSByte(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToSByte(Single)
  nameWithType: Convert.ToSByte(Single)
  fullName: Convert.ToSByte(Single)
- uid: System.Convert.ToSByte(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToSByte(Object)
  nameWithType: Convert.ToSByte(Object)
  fullName: Convert.ToSByte(Object)
- uid: System.Convert.ToSByte(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToSByte(UInt16)
  nameWithType: Convert.ToSByte(UInt16)
  fullName: Convert.ToSByte(UInt16)
- uid: System.Convert.ToSByte(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToSByte(Int32)
  nameWithType: Convert.ToSByte(Int32)
  fullName: Convert.ToSByte(Int32)
- uid: System.Convert.ToSByte(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToSByte(Int64)
  nameWithType: Convert.ToSByte(Int64)
  fullName: Convert.ToSByte(Int64)
- uid: System.Convert.ToSByte(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToSByte(Byte)
  nameWithType: Convert.ToSByte(Byte)
  fullName: Convert.ToSByte(Byte)
- uid: System.Convert.ToSByte(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToSByte(Char)
  nameWithType: Convert.ToSByte(Char)
  fullName: Convert.ToSByte(Char)
- uid: System.Convert.ToSByte(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToSByte(DateTime)
  nameWithType: Convert.ToSByte(DateTime)
  fullName: Convert.ToSByte(DateTime)
- uid: System.Convert.ToSByte(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToSByte(Boolean)
  nameWithType: Convert.ToSByte(Boolean)
  fullName: Convert.ToSByte(Boolean)
- uid: System.Convert.ToSByte(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToSByte(Double)
  nameWithType: Convert.ToSByte(Double)
  fullName: Convert.ToSByte(Double)
- uid: System.Convert.ToSByte(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToSByte(Int16)
  nameWithType: Convert.ToSByte(Int16)
  fullName: Convert.ToSByte(Int16)
- uid: System.Convert.ToSByte(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToSByte(Decimal)
  nameWithType: Convert.ToSByte(Decimal)
  fullName: Convert.ToSByte(Decimal)
- uid: System.Convert.ToSingle(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToSingle(String, IFormatProvider)
  nameWithType: Convert.ToSingle(String, IFormatProvider)
  fullName: Convert.ToSingle(String, IFormatProvider)
- uid: System.Convert.ToSingle(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToSingle(SByte)
  nameWithType: Convert.ToSingle(SByte)
  fullName: Convert.ToSingle(SByte)
- uid: System.Convert.ToSingle(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToSingle(Object, IFormatProvider)
  nameWithType: Convert.ToSingle(Object, IFormatProvider)
  fullName: Convert.ToSingle(Object, IFormatProvider)
- uid: System.Convert.ToSingle(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToSingle(UInt64)
  nameWithType: Convert.ToSingle(UInt64)
  fullName: Convert.ToSingle(UInt64)
- uid: System.Convert.ToSingle(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToSingle(UInt32)
  nameWithType: Convert.ToSingle(UInt32)
  fullName: Convert.ToSingle(UInt32)
- uid: System.Convert.ToSingle(System.String)
  parent: System.Convert
  isExternal: false
  name: ToSingle(String)
  nameWithType: Convert.ToSingle(String)
  fullName: Convert.ToSingle(String)
- uid: System.Convert.ToSingle(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToSingle(Single)
  nameWithType: Convert.ToSingle(Single)
  fullName: Convert.ToSingle(Single)
- uid: System.Convert.ToSingle(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToSingle(Object)
  nameWithType: Convert.ToSingle(Object)
  fullName: Convert.ToSingle(Object)
- uid: System.Convert.ToSingle(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToSingle(UInt16)
  nameWithType: Convert.ToSingle(UInt16)
  fullName: Convert.ToSingle(UInt16)
- uid: System.Convert.ToSingle(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToSingle(Int32)
  nameWithType: Convert.ToSingle(Int32)
  fullName: Convert.ToSingle(Int32)
- uid: System.Convert.ToSingle(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToSingle(Int16)
  nameWithType: Convert.ToSingle(Int16)
  fullName: Convert.ToSingle(Int16)
- uid: System.Convert.ToSingle(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToSingle(Double)
  nameWithType: Convert.ToSingle(Double)
  fullName: Convert.ToSingle(Double)
- uid: System.Convert.ToSingle(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToSingle(Decimal)
  nameWithType: Convert.ToSingle(Decimal)
  fullName: Convert.ToSingle(Decimal)
- uid: System.Convert.ToSingle(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToSingle(DateTime)
  nameWithType: Convert.ToSingle(DateTime)
  fullName: Convert.ToSingle(DateTime)
- uid: System.Convert.ToSingle(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToSingle(Char)
  nameWithType: Convert.ToSingle(Char)
  fullName: Convert.ToSingle(Char)
- uid: System.Convert.ToSingle(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToSingle(Byte)
  nameWithType: Convert.ToSingle(Byte)
  fullName: Convert.ToSingle(Byte)
- uid: System.Convert.ToSingle(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToSingle(Boolean)
  nameWithType: Convert.ToSingle(Boolean)
  fullName: Convert.ToSingle(Boolean)
- uid: System.Convert.ToSingle(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToSingle(Int64)
  nameWithType: Convert.ToSingle(Int64)
  fullName: Convert.ToSingle(Int64)
- uid: System.Convert.ToString(System.Int16,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToString(Int16, Int32)
  nameWithType: Convert.ToString(Int16, Int32)
  fullName: Convert.ToString(Int16, Int32)
- uid: System.Convert.ToString(System.Int16,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(Int16, IFormatProvider)
  nameWithType: Convert.ToString(Int16, IFormatProvider)
  fullName: Convert.ToString(Int16, IFormatProvider)
- uid: System.Convert.ToString(System.DateTime,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(DateTime, IFormatProvider)
  nameWithType: Convert.ToString(DateTime, IFormatProvider)
  fullName: Convert.ToString(DateTime, IFormatProvider)
- uid: System.Convert.ToString(System.UInt64,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(UInt64, IFormatProvider)
  nameWithType: Convert.ToString(UInt64, IFormatProvider)
  fullName: Convert.ToString(UInt64, IFormatProvider)
- uid: System.Convert.ToString(System.Decimal,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(Decimal, IFormatProvider)
  nameWithType: Convert.ToString(Decimal, IFormatProvider)
  fullName: Convert.ToString(Decimal, IFormatProvider)
- uid: System.Convert.ToString(System.Int32,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(Int32, IFormatProvider)
  nameWithType: Convert.ToString(Int32, IFormatProvider)
  fullName: Convert.ToString(Int32, IFormatProvider)
- uid: System.Convert.ToString(System.Double,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(Double, IFormatProvider)
  nameWithType: Convert.ToString(Double, IFormatProvider)
  fullName: Convert.ToString(Double, IFormatProvider)
- uid: System.Convert.ToString(System.Int32,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToString(Int32, Int32)
  nameWithType: Convert.ToString(Int32, Int32)
  fullName: Convert.ToString(Int32, Int32)
- uid: System.Convert.ToString(System.SByte,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(SByte, IFormatProvider)
  nameWithType: Convert.ToString(SByte, IFormatProvider)
  fullName: Convert.ToString(SByte, IFormatProvider)
- uid: System.Convert.ToString(System.Int64,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToString(Int64, Int32)
  nameWithType: Convert.ToString(Int64, Int32)
  fullName: Convert.ToString(Int64, Int32)
- uid: System.Convert.ToString(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(Object, IFormatProvider)
  nameWithType: Convert.ToString(Object, IFormatProvider)
  fullName: Convert.ToString(Object, IFormatProvider)
- uid: System.Convert.ToString(System.Single,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(Single, IFormatProvider)
  nameWithType: Convert.ToString(Single, IFormatProvider)
  fullName: Convert.ToString(Single, IFormatProvider)
- uid: System.Convert.ToString(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(String, IFormatProvider)
  nameWithType: Convert.ToString(String, IFormatProvider)
  fullName: Convert.ToString(String, IFormatProvider)
- uid: System.Convert.ToString(System.UInt16,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(UInt16, IFormatProvider)
  nameWithType: Convert.ToString(UInt16, IFormatProvider)
  fullName: Convert.ToString(UInt16, IFormatProvider)
- uid: System.Convert.ToString(System.UInt32,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(UInt32, IFormatProvider)
  nameWithType: Convert.ToString(UInt32, IFormatProvider)
  fullName: Convert.ToString(UInt32, IFormatProvider)
- uid: System.Convert.ToString(System.Char,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(Char, IFormatProvider)
  nameWithType: Convert.ToString(Char, IFormatProvider)
  fullName: Convert.ToString(Char, IFormatProvider)
- uid: System.Convert.ToString(System.Int64,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(Int64, IFormatProvider)
  nameWithType: Convert.ToString(Int64, IFormatProvider)
  fullName: Convert.ToString(Int64, IFormatProvider)
- uid: System.Convert.ToString(System.Byte,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToString(Byte, Int32)
  nameWithType: Convert.ToString(Byte, Int32)
  fullName: Convert.ToString(Byte, Int32)
- uid: System.Convert.ToString(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToString(UInt16)
  nameWithType: Convert.ToString(UInt16)
  fullName: Convert.ToString(UInt16)
- uid: System.Convert.ToString(System.Boolean,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(Boolean, IFormatProvider)
  nameWithType: Convert.ToString(Boolean, IFormatProvider)
  fullName: Convert.ToString(Boolean, IFormatProvider)
- uid: System.Convert.ToString(System.Byte,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToString(Byte, IFormatProvider)
  nameWithType: Convert.ToString(Byte, IFormatProvider)
  fullName: Convert.ToString(Byte, IFormatProvider)
- uid: System.Convert.ToString(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToString(Boolean)
  nameWithType: Convert.ToString(Boolean)
  fullName: Convert.ToString(Boolean)
- uid: System.Convert.ToString(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToString(Byte)
  nameWithType: Convert.ToString(Byte)
  fullName: Convert.ToString(Byte)
- uid: System.Convert.ToString(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToString(Char)
  nameWithType: Convert.ToString(Char)
  fullName: Convert.ToString(Char)
- uid: System.Convert.ToString(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToString(Decimal)
  nameWithType: Convert.ToString(Decimal)
  fullName: Convert.ToString(Decimal)
- uid: System.Convert.ToString(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToString(Double)
  nameWithType: Convert.ToString(Double)
  fullName: Convert.ToString(Double)
- uid: System.Convert.ToString(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToString(Int16)
  nameWithType: Convert.ToString(Int16)
  fullName: Convert.ToString(Int16)
- uid: System.Convert.ToString(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToString(DateTime)
  nameWithType: Convert.ToString(DateTime)
  fullName: Convert.ToString(DateTime)
- uid: System.Convert.ToString(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToString(Int64)
  nameWithType: Convert.ToString(Int64)
  fullName: Convert.ToString(Int64)
- uid: System.Convert.ToString(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToString(Object)
  nameWithType: Convert.ToString(Object)
  fullName: Convert.ToString(Object)
- uid: System.Convert.ToString(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToString(SByte)
  nameWithType: Convert.ToString(SByte)
  fullName: Convert.ToString(SByte)
- uid: System.Convert.ToString(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToString(Single)
  nameWithType: Convert.ToString(Single)
  fullName: Convert.ToString(Single)
- uid: System.Convert.ToString(System.String)
  parent: System.Convert
  isExternal: false
  name: ToString(String)
  nameWithType: Convert.ToString(String)
  fullName: Convert.ToString(String)
- uid: System.Convert.ToString(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToString(UInt32)
  nameWithType: Convert.ToString(UInt32)
  fullName: Convert.ToString(UInt32)
- uid: System.Convert.ToString(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToString(UInt64)
  nameWithType: Convert.ToString(UInt64)
  fullName: Convert.ToString(UInt64)
- uid: System.Convert.ToString(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToString(Int32)
  nameWithType: Convert.ToString(Int32)
  fullName: Convert.ToString(Int32)
- uid: System.Convert.ToUInt16(System.String)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(String)
  nameWithType: Convert.ToUInt16(String)
  fullName: Convert.ToUInt16(String)
- uid: System.Convert.ToUInt16(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(UInt16)
  nameWithType: Convert.ToUInt16(UInt16)
  fullName: Convert.ToUInt16(UInt16)
- uid: System.Convert.ToUInt16(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(UInt32)
  nameWithType: Convert.ToUInt16(UInt32)
  fullName: Convert.ToUInt16(UInt32)
- uid: System.Convert.ToUInt16(System.String,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(String, Int32)
  nameWithType: Convert.ToUInt16(String, Int32)
  fullName: Convert.ToUInt16(String, Int32)
- uid: System.Convert.ToUInt16(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(Object, IFormatProvider)
  nameWithType: Convert.ToUInt16(Object, IFormatProvider)
  fullName: Convert.ToUInt16(Object, IFormatProvider)
- uid: System.Convert.ToUInt16(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(String, IFormatProvider)
  nameWithType: Convert.ToUInt16(String, IFormatProvider)
  fullName: Convert.ToUInt16(String, IFormatProvider)
- uid: System.Convert.ToUInt16(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(Single)
  nameWithType: Convert.ToUInt16(Single)
  fullName: Convert.ToUInt16(Single)
- uid: System.Convert.ToUInt16(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(UInt64)
  nameWithType: Convert.ToUInt16(UInt64)
  fullName: Convert.ToUInt16(UInt64)
- uid: System.Convert.ToUInt16(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(SByte)
  nameWithType: Convert.ToUInt16(SByte)
  fullName: Convert.ToUInt16(SByte)
- uid: System.Convert.ToUInt16(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(Double)
  nameWithType: Convert.ToUInt16(Double)
  fullName: Convert.ToUInt16(Double)
- uid: System.Convert.ToUInt16(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(Int64)
  nameWithType: Convert.ToUInt16(Int64)
  fullName: Convert.ToUInt16(Int64)
- uid: System.Convert.ToUInt16(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(Object)
  nameWithType: Convert.ToUInt16(Object)
  fullName: Convert.ToUInt16(Object)
- uid: System.Convert.ToUInt16(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(Byte)
  nameWithType: Convert.ToUInt16(Byte)
  fullName: Convert.ToUInt16(Byte)
- uid: System.Convert.ToUInt16(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(Char)
  nameWithType: Convert.ToUInt16(Char)
  fullName: Convert.ToUInt16(Char)
- uid: System.Convert.ToUInt16(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(DateTime)
  nameWithType: Convert.ToUInt16(DateTime)
  fullName: Convert.ToUInt16(DateTime)
- uid: System.Convert.ToUInt16(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(Boolean)
  nameWithType: Convert.ToUInt16(Boolean)
  fullName: Convert.ToUInt16(Boolean)
- uid: System.Convert.ToUInt16(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(Int16)
  nameWithType: Convert.ToUInt16(Int16)
  fullName: Convert.ToUInt16(Int16)
- uid: System.Convert.ToUInt16(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(Int32)
  nameWithType: Convert.ToUInt16(Int32)
  fullName: Convert.ToUInt16(Int32)
- uid: System.Convert.ToUInt16(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToUInt16(Decimal)
  nameWithType: Convert.ToUInt16(Decimal)
  fullName: Convert.ToUInt16(Decimal)
- uid: System.Convert.ToUInt32(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(Single)
  nameWithType: Convert.ToUInt32(Single)
  fullName: Convert.ToUInt32(Single)
- uid: System.Convert.ToUInt32(System.String,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(String, Int32)
  nameWithType: Convert.ToUInt32(String, Int32)
  fullName: Convert.ToUInt32(String, Int32)
- uid: System.Convert.ToUInt32(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(String, IFormatProvider)
  nameWithType: Convert.ToUInt32(String, IFormatProvider)
  fullName: Convert.ToUInt32(String, IFormatProvider)
- uid: System.Convert.ToUInt32(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(Object, IFormatProvider)
  nameWithType: Convert.ToUInt32(Object, IFormatProvider)
  fullName: Convert.ToUInt32(Object, IFormatProvider)
- uid: System.Convert.ToUInt32(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(UInt64)
  nameWithType: Convert.ToUInt32(UInt64)
  fullName: Convert.ToUInt32(UInt64)
- uid: System.Convert.ToUInt32(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(UInt32)
  nameWithType: Convert.ToUInt32(UInt32)
  fullName: Convert.ToUInt32(UInt32)
- uid: System.Convert.ToUInt32(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(UInt16)
  nameWithType: Convert.ToUInt32(UInt16)
  fullName: Convert.ToUInt32(UInt16)
- uid: System.Convert.ToUInt32(System.String)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(String)
  nameWithType: Convert.ToUInt32(String)
  fullName: Convert.ToUInt32(String)
- uid: System.Convert.ToUInt32(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(SByte)
  nameWithType: Convert.ToUInt32(SByte)
  fullName: Convert.ToUInt32(SByte)
- uid: System.Convert.ToUInt32(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(Boolean)
  nameWithType: Convert.ToUInt32(Boolean)
  fullName: Convert.ToUInt32(Boolean)
- uid: System.Convert.ToUInt32(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(Int64)
  nameWithType: Convert.ToUInt32(Int64)
  fullName: Convert.ToUInt32(Int64)
- uid: System.Convert.ToUInt32(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(Int32)
  nameWithType: Convert.ToUInt32(Int32)
  fullName: Convert.ToUInt32(Int32)
- uid: System.Convert.ToUInt32(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(Int16)
  nameWithType: Convert.ToUInt32(Int16)
  fullName: Convert.ToUInt32(Int16)
- uid: System.Convert.ToUInt32(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(Double)
  nameWithType: Convert.ToUInt32(Double)
  fullName: Convert.ToUInt32(Double)
- uid: System.Convert.ToUInt32(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(Decimal)
  nameWithType: Convert.ToUInt32(Decimal)
  fullName: Convert.ToUInt32(Decimal)
- uid: System.Convert.ToUInt32(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(DateTime)
  nameWithType: Convert.ToUInt32(DateTime)
  fullName: Convert.ToUInt32(DateTime)
- uid: System.Convert.ToUInt32(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(Char)
  nameWithType: Convert.ToUInt32(Char)
  fullName: Convert.ToUInt32(Char)
- uid: System.Convert.ToUInt32(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(Byte)
  nameWithType: Convert.ToUInt32(Byte)
  fullName: Convert.ToUInt32(Byte)
- uid: System.Convert.ToUInt32(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToUInt32(Object)
  nameWithType: Convert.ToUInt32(Object)
  fullName: Convert.ToUInt32(Object)
- uid: System.Convert.ToUInt64(System.Single)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(Single)
  nameWithType: Convert.ToUInt64(Single)
  fullName: Convert.ToUInt64(Single)
- uid: System.Convert.ToUInt64(System.String)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(String)
  nameWithType: Convert.ToUInt64(String)
  fullName: Convert.ToUInt64(String)
- uid: System.Convert.ToUInt64(System.Object,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(Object, IFormatProvider)
  nameWithType: Convert.ToUInt64(Object, IFormatProvider)
  fullName: Convert.ToUInt64(Object, IFormatProvider)
- uid: System.Convert.ToUInt64(System.UInt32)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(UInt32)
  nameWithType: Convert.ToUInt64(UInt32)
  fullName: Convert.ToUInt64(UInt32)
- uid: System.Convert.ToUInt64(System.UInt64)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(UInt64)
  nameWithType: Convert.ToUInt64(UInt64)
  fullName: Convert.ToUInt64(UInt64)
- uid: System.Convert.ToUInt64(System.SByte)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(SByte)
  nameWithType: Convert.ToUInt64(SByte)
  fullName: Convert.ToUInt64(SByte)
- uid: System.Convert.ToUInt64(System.UInt16)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(UInt16)
  nameWithType: Convert.ToUInt64(UInt16)
  fullName: Convert.ToUInt64(UInt16)
- uid: System.Convert.ToUInt64(System.Object)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(Object)
  nameWithType: Convert.ToUInt64(Object)
  fullName: Convert.ToUInt64(Object)
- uid: System.Convert.ToUInt64(System.Decimal)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(Decimal)
  nameWithType: Convert.ToUInt64(Decimal)
  fullName: Convert.ToUInt64(Decimal)
- uid: System.Convert.ToUInt64(System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(Int32)
  nameWithType: Convert.ToUInt64(Int32)
  fullName: Convert.ToUInt64(Int32)
- uid: System.Convert.ToUInt64(System.Int16)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(Int16)
  nameWithType: Convert.ToUInt64(Int16)
  fullName: Convert.ToUInt64(Int16)
- uid: System.Convert.ToUInt64(System.Double)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(Double)
  nameWithType: Convert.ToUInt64(Double)
  fullName: Convert.ToUInt64(Double)
- uid: System.Convert.ToUInt64(System.DateTime)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(DateTime)
  nameWithType: Convert.ToUInt64(DateTime)
  fullName: Convert.ToUInt64(DateTime)
- uid: System.Convert.ToUInt64(System.Char)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(Char)
  nameWithType: Convert.ToUInt64(Char)
  fullName: Convert.ToUInt64(Char)
- uid: System.Convert.ToUInt64(System.Byte)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(Byte)
  nameWithType: Convert.ToUInt64(Byte)
  fullName: Convert.ToUInt64(Byte)
- uid: System.Convert.ToUInt64(System.Boolean)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(Boolean)
  nameWithType: Convert.ToUInt64(Boolean)
  fullName: Convert.ToUInt64(Boolean)
- uid: System.Convert.ToUInt64(System.String,System.IFormatProvider)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(String, IFormatProvider)
  nameWithType: Convert.ToUInt64(String, IFormatProvider)
  fullName: Convert.ToUInt64(String, IFormatProvider)
- uid: System.Convert.ToUInt64(System.Int64)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(Int64)
  nameWithType: Convert.ToUInt64(Int64)
  fullName: Convert.ToUInt64(Int64)
- uid: System.Convert.ToUInt64(System.String,System.Int32)
  parent: System.Convert
  isExternal: false
  name: ToUInt64(String, Int32)
  nameWithType: Convert.ToUInt64(String, Int32)
  fullName: Convert.ToUInt64(String, Int32)
- uid: System.Convert.ChangeType*
  parent: System.Convert
  isExternal: false
  name: ChangeType
  nameWithType: Convert.ChangeType
  fullName: Convert.ChangeType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.FromBase64CharArray*
  parent: System.Convert
  isExternal: false
  name: FromBase64CharArray
  nameWithType: Convert.FromBase64CharArray
  fullName: Convert.FromBase64CharArray
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.FromBase64String*
  parent: System.Convert
  isExternal: false
  name: FromBase64String
  nameWithType: Convert.FromBase64String
  fullName: Convert.FromBase64String
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.GetTypeCode*
  parent: System.Convert
  isExternal: false
  name: GetTypeCode
  nameWithType: Convert.GetTypeCode
  fullName: Convert.GetTypeCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.IsDBNull*
  parent: System.Convert
  isExternal: false
  name: IsDBNull
  nameWithType: Convert.IsDBNull
  fullName: Convert.IsDBNull
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToBase64CharArray*
  parent: System.Convert
  isExternal: false
  name: ToBase64CharArray
  nameWithType: Convert.ToBase64CharArray
  fullName: Convert.ToBase64CharArray
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToBase64String*
  parent: System.Convert
  isExternal: false
  name: ToBase64String
  nameWithType: Convert.ToBase64String
  fullName: Convert.ToBase64String
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToBoolean*
  parent: System.Convert
  isExternal: false
  name: ToBoolean
  nameWithType: Convert.ToBoolean
  fullName: Convert.ToBoolean
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToByte*
  parent: System.Convert
  isExternal: false
  name: ToByte
  nameWithType: Convert.ToByte
  fullName: Convert.ToByte
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToChar*
  parent: System.Convert
  isExternal: false
  name: ToChar
  nameWithType: Convert.ToChar
  fullName: Convert.ToChar
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToDateTime*
  parent: System.Convert
  isExternal: false
  name: ToDateTime
  nameWithType: Convert.ToDateTime
  fullName: Convert.ToDateTime
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToDecimal*
  parent: System.Convert
  isExternal: false
  name: ToDecimal
  nameWithType: Convert.ToDecimal
  fullName: Convert.ToDecimal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToDouble*
  parent: System.Convert
  isExternal: false
  name: ToDouble
  nameWithType: Convert.ToDouble
  fullName: Convert.ToDouble
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToInt16*
  parent: System.Convert
  isExternal: false
  name: ToInt16
  nameWithType: Convert.ToInt16
  fullName: Convert.ToInt16
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToInt32*
  parent: System.Convert
  isExternal: false
  name: ToInt32
  nameWithType: Convert.ToInt32
  fullName: Convert.ToInt32
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToInt64*
  parent: System.Convert
  isExternal: false
  name: ToInt64
  nameWithType: Convert.ToInt64
  fullName: Convert.ToInt64
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToSByte*
  parent: System.Convert
  isExternal: false
  name: ToSByte
  nameWithType: Convert.ToSByte
  fullName: Convert.ToSByte
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToSingle*
  parent: System.Convert
  isExternal: false
  name: ToSingle
  nameWithType: Convert.ToSingle
  fullName: Convert.ToSingle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToString*
  parent: System.Convert
  isExternal: false
  name: ToString
  nameWithType: Convert.ToString
  fullName: Convert.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToUInt16*
  parent: System.Convert
  isExternal: false
  name: ToUInt16
  nameWithType: Convert.ToUInt16
  fullName: Convert.ToUInt16
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToUInt32*
  parent: System.Convert
  isExternal: false
  name: ToUInt32
  nameWithType: Convert.ToUInt32
  fullName: Convert.ToUInt32
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Convert.ToUInt64*
  parent: System.Convert
  isExternal: false
  name: ToUInt64
  nameWithType: Convert.ToUInt64
  fullName: Convert.ToUInt64
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Convert.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
