{"nodes":[{"content":"Provides authorization access checking for service operations.","nodes":[{"pos":[0,62],"content":"Provides authorization access checking for service operations.","nodes":[{"content":"Provides authorization access checking for service operations.","pos":[0,62]}]}],"pos":[977,1040],"yaml":true},{"content":"This class is responsible for evaluating all policies (rules that define what a user is allowed to do), comparing the policies to claims made by a client, setting the resulting <xref:System.IdentityModel.Policy.AuthorizationContext> to the <xref:System.ServiceModel.ServiceSecurityContext>, and providing the authorization decision whether to allow or deny access for a given service operation for a caller.  \n  \n The <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method is called by the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure each time an attempt to access a resource is made. The method returns `true` or `false` to allow or deny access, respectively.  \n  \n The <xref:System.ServiceModel.ServiceAuthorizationManager> is part of the [!INCLUDE[indigo2](~/includes/indigo2-md.md)]*Identity Model* infrastructure. The Identity Model enables you to create custom authorization policies and custom authorization schemes. [!INCLUDE[crabout](~/includes/crabout-md.md)] how the Identity Model works, see [Managing Claims and Authorization with the Identity Model](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md).  \n  \n## Custom Authorization  \n This class does not perform any authorization and allows users to access all service operations. To provide more restrictive authorization, you must create a custom authorization manager that checks custom policies. To do this, inherit from this class and override the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method. Specify the instance of the derived class through the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> property.  \n  \n In <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>, the application can use the <xref:System.ServiceModel.OperationContext> object to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).  \n  \n By getting the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, which returns a <xref:System.ServiceModel.Channels.MessageHeaders> object, the application can access the service (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>), and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).  \n  \n By getting the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, which returns a <xref:System.ServiceModel.Channels.RequestContext> object, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) and perform the authorization decision accordingly.  \n  \n For an example, see [How to: Create a Custom Authorization Manager for a Service](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).  \n  \n To create custom authorization policies, implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class.  For an example, see [How to: Create a Custom Authorization Policy](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md).  \n  \n To create a custom claim, use the <xref:System.IdentityModel.Claims.Claim> class.  For an example, see [How to: Create a Custom Claim](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md). To compare custom claims, you must compare claims, as shown in [How to: Compare Claims](~/docs/framework/wcf/extending/how-to-compare-claims.md).  \n  \n [!INCLUDE[crdefault](~/includes/crdefault-md.md)] [Custom Authorization](~/docs/framework/wcf/extending/custom-authorization.md).  \n  \n You can set the type of a custom authorization manager using the [\\&lt;serviceAuthorization\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) in a client application configuration file.","nodes":[{"pos":[0,407],"content":"This class is responsible for evaluating all policies (rules that define what a user is allowed to do), comparing the policies to claims made by a client, setting the resulting <xref:System.IdentityModel.Policy.AuthorizationContext> to the <xref:System.ServiceModel.ServiceSecurityContext>, and providing the authorization decision whether to allow or deny access for a given service operation for a caller.","nodes":[{"content":"This class is responsible for evaluating all policies (rules that define what a user is allowed to do), comparing the policies to claims made by a client, setting the resulting <ph id=\"ph1\">&lt;xref:System.IdentityModel.Policy.AuthorizationContext&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceSecurityContext&gt;</ph>, and providing the authorization decision whether to allow or deny access for a given service operation for a caller.","pos":[0,407],"source":"This class is responsible for evaluating all policies (rules that define what a user is allowed to do), comparing the policies to claims made by a client, setting the resulting <xref:System.IdentityModel.Policy.AuthorizationContext> to the <xref:System.ServiceModel.ServiceSecurityContext>, and providing the authorization decision whether to allow or deny access for a given service operation for a caller."}]},{"pos":[414,703],"content":"The <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method is called by the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure each time an attempt to access a resource is made. The method returns `true` or `false` to allow or deny access, respectively.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> method is called by the <ph id=\"ph2\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> infrastructure each time an attempt to access a resource is made.","pos":[0,213],"source":"The <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method is called by the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure each time an attempt to access a resource is made."},{"content":"The method returns <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph> to allow or deny access, respectively.","pos":[214,289],"source":" The method returns `true` or `false` to allow or deny access, respectively."}]},{"pos":[710,1206],"content":"The <xref:System.ServiceModel.ServiceAuthorizationManager> is part of the [!INCLUDE[indigo2](~/includes/indigo2-md.md)]*Identity Model* infrastructure. The Identity Model enables you to create custom authorization policies and custom authorization schemes. [!INCLUDE[crabout](~/includes/crabout-md.md)] how the Identity Model works, see [Managing Claims and Authorization with the Identity Model](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt;</ph> is part of the <ph id=\"ph2\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph><bpt id=\"p1\">*</bpt>Identity Model<ept id=\"p1\">*</ept> infrastructure.","pos":[0,151],"source":"The <xref:System.ServiceModel.ServiceAuthorizationManager> is part of the [!INCLUDE[indigo2](~/includes/indigo2-md.md)]*Identity Model* infrastructure."},{"content":"The Identity Model enables you to create custom authorization policies and custom authorization schemes.","pos":[152,256]},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> how the Identity Model works, see <bpt id=\"p1\">[</bpt>Managing Claims and Authorization with the Identity Model<ept id=\"p1\">](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md)</ept>.","pos":[257,496],"source":"[!INCLUDE[crabout](~/includes/crabout-md.md)] how the Identity Model works, see [Managing Claims and Authorization with the Identity Model](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md)."}]},{"pos":[1215,1235],"content":"Custom Authorization","linkify":"Custom Authorization","nodes":[{"content":"Custom Authorization","pos":[0,20]}]},{"pos":[1239,1738],"content":"This class does not perform any authorization and allows users to access all service operations. To provide more restrictive authorization, you must create a custom authorization manager that checks custom policies. To do this, inherit from this class and override the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method. Specify the instance of the derived class through the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> property.","nodes":[{"content":"This class does not perform any authorization and allows users to access all service operations. To provide more restrictive authorization, you must create a custom authorization manager that checks custom policies. To do this, inherit from this class and override the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method. Specify the instance of the derived class through the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> property.","pos":[0,499],"nodes":[{"content":"This class does not perform any authorization and allows users to access all service operations.","pos":[0,96]},{"content":"To provide more restrictive authorization, you must create a custom authorization manager that checks custom policies.","pos":[97,215]},{"content":"To do this, inherit from this class and override the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> method.","pos":[216,350],"source":" To do this, inherit from this class and override the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method."},{"content":"Specify the instance of the derived class through the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A&gt;</ph> property.","pos":[351,499],"source":" Specify the instance of the derived class through the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> property."}]}]},{"pos":[1745,2004],"content":"In <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>, the application can use the <xref:System.ServiceModel.OperationContext> object to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).","nodes":[{"content":"In <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph>, the application can use the <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> object to access the caller identity (<ph id=\"ph3\">&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;</ph>).","pos":[0,259],"source":"In <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>, the application can use the <xref:System.ServiceModel.OperationContext> object to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>)."}]},{"pos":[2011,2361],"content":"By getting the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, which returns a <xref:System.ServiceModel.Channels.MessageHeaders> object, the application can access the service (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>), and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).","nodes":[{"content":"By getting the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A&gt;</ph> property, which returns a <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.MessageHeaders&gt;</ph> object, the application can access the service (<ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.MessageHeaders.To%2A&gt;</ph>), and the operation (<ph id=\"ph4\">&lt;xref:System.ServiceModel.Channels.MessageHeaders.Action%2A&gt;</ph>).","pos":[0,350],"source":"By getting the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, which returns a <xref:System.ServiceModel.Channels.MessageHeaders> object, the application can access the service (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>), and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>)."}]},{"pos":[2368,2706],"content":"By getting the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, which returns a <xref:System.ServiceModel.Channels.RequestContext> object, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) and perform the authorization decision accordingly.","nodes":[{"content":"By getting the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A&gt;</ph> property, which returns a <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> object, the application can access the entire request message (<ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A&gt;</ph>) and perform the authorization decision accordingly.","pos":[0,338],"source":"By getting the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, which returns a <xref:System.ServiceModel.Channels.RequestContext> object, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) and perform the authorization decision accordingly."}]},{"pos":[2713,2889],"content":"For an example, see <bpt id=\"p1\">[</bpt>How to: Create a Custom Authorization Manager for a Service<ept id=\"p1\">](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md)</ept>.","source":"For an example, see [How to: Create a Custom Authorization Manager for a Service](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md)."},{"pos":[2896,3161],"content":"To create custom authorization policies, implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class.  For an example, see [How to: Create a Custom Authorization Policy](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md).","nodes":[{"content":"To create custom authorization policies, implement the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ph> class.","pos":[0,117],"source":"To create custom authorization policies, implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class."},{"content":"For an example, see <bpt id=\"p1\">[</bpt>How to: Create a Custom Authorization Policy<ept id=\"p1\">](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md)</ept>.","pos":[119,265],"source":"  For an example, see [How to: Create a Custom Authorization Policy](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md)."}]},{"pos":[3168,3513],"content":"To create a custom claim, use the <xref:System.IdentityModel.Claims.Claim> class.  For an example, see [How to: Create a Custom Claim](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md). To compare custom claims, you must compare claims, as shown in [How to: Compare Claims](~/docs/framework/wcf/extending/how-to-compare-claims.md).","nodes":[{"content":"To create a custom claim, use the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Claims.Claim&gt;</ph> class.","pos":[0,81],"source":"To create a custom claim, use the <xref:System.IdentityModel.Claims.Claim> class."},{"content":"For an example, see <bpt id=\"p1\">[</bpt>How to: Create a Custom Claim<ept id=\"p1\">](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md)</ept>.","pos":[83,199],"source":"  For an example, see [How to: Create a Custom Claim](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md)."},{"content":"To compare custom claims, you must compare claims, as shown in <bpt id=\"p1\">[</bpt>How to: Compare Claims<ept id=\"p1\">](~/docs/framework/wcf/extending/how-to-compare-claims.md)</ept>.","pos":[200,345],"source":" To compare custom claims, you must compare claims, as shown in [How to: Compare Claims](~/docs/framework/wcf/extending/how-to-compare-claims.md)."}]},{"pos":[3520,3649],"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id=\"p1\">[</bpt>Custom Authorization<ept id=\"p1\">](~/docs/framework/wcf/extending/custom-authorization.md)</ept>.","source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)] [Custom Authorization](~/docs/framework/wcf/extending/custom-authorization.md)."},{"pos":[3656,3878],"content":"You can set the type of a custom authorization manager using the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&amp;</ph>lt;serviceAuthorization<ph id=\"ph2\">\\&amp;</ph>gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md)</ept> in a client application configuration file.","source":"You can set the type of a custom authorization manager using the [\\&lt;serviceAuthorization\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) in a client application configuration file."}],"pos":[1051,4957],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ServiceModel.ServiceAuthorizationManager\"></xref> class.","nodes":[{"pos":[0,109],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.ServiceAuthorizationManager\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ServiceModel.ServiceAuthorizationManager\"></xref> class."}],"pos":[6928,7038],"yaml":true},{"content":"Checks authorization for the given operation context.","nodes":[{"pos":[0,53],"content":"Checks authorization for the given operation context.","nodes":[{"content":"Checks authorization for the given operation context.","pos":[0,53]}]}],"pos":[8377,8431],"yaml":true},{"content":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method.  \n  \n Override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A> if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> or provide a different policy evaluation (chaining) model.  \n  \n This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.","nodes":[{"pos":[0,138],"content":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method.","nodes":[{"content":"In general, applications should override <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> instead of this method.","pos":[0,138],"source":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method."}]},{"pos":[145,422],"content":"Override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A> if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> or provide a different policy evaluation (chaining) model.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A&gt;</ph> if the application associates or introduces a different set of policies for the resulting <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceSecurityContext&gt;</ph> or provide a different policy evaluation (chaining) model.","pos":[0,277],"source":"Override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A> if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> or provide a different policy evaluation (chaining) model."}]},{"pos":[429,542],"content":"This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.","nodes":[{"content":"This method is responsible for calling <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph>.","pos":[0,113],"source":"This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>."}]}],"pos":[8442,8991],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.ServiceModel.OperationContext\"></xref>.","nodes":[{"pos":[0,62],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.OperationContext\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.ServiceModel.OperationContext\"></xref>."}],"pos":[9546,9609],"yaml":true},{"content":"`true` if access is granted; otherwise; otherwise `false`. The default is `true`.","nodes":[{"pos":[0,81],"content":"`true` if access is granted; otherwise; otherwise `false`. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if access is granted; otherwise; otherwise <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if access is granted; otherwise; otherwise `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[59,81],"source":" The default is `true`."}]}],"pos":[9667,9751],"yaml":true},{"content":"Checks authorization for the given operation context when access to a message is required.","nodes":[{"pos":[0,90],"content":"Checks authorization for the given operation context when access to a message is required.","nodes":[{"content":"Checks authorization for the given operation context when access to a message is required.","pos":[0,90]}]}],"pos":[11156,11247],"yaml":true},{"content":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method, which should only be used if the authorization decision depends on the message body. Because of performance issues, if possible you should redesign your application so that the authorization decision does not require access to the message body.  \n  \n Override this method if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> and <xref:System.ServiceModel.Channels.Message> or provide a different policy evaluation (chaining) model.  \n  \n This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.","nodes":[{"pos":[0,383],"content":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method, which should only be used if the authorization decision depends on the message body. Because of performance issues, if possible you should redesign your application so that the authorization decision does not require access to the message body.","nodes":[{"content":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method, which should only be used if the authorization decision depends on the message body. Because of performance issues, if possible you should redesign your application so that the authorization decision does not require access to the message body.","pos":[0,383],"nodes":[{"content":"In general, applications should override <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph> instead of this method, which should only be used if the authorization decision depends on the message body.","pos":[0,223],"source":"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method, which should only be used if the authorization decision depends on the message body."},{"content":"Because of performance issues, if possible you should redesign your application so that the authorization decision does not require access to the message body.","pos":[224,383]}]}]},{"pos":[390,657],"content":"Override this method if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> and <xref:System.ServiceModel.Channels.Message> or provide a different policy evaluation (chaining) model.","nodes":[{"content":"Override this method if the application associates or introduces a different set of policies for the resulting <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceSecurityContext&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> or provide a different policy evaluation (chaining) model.","pos":[0,267],"source":"Override this method if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> and <xref:System.ServiceModel.Channels.Message> or provide a different policy evaluation (chaining) model."}]},{"pos":[664,777],"content":"This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.","nodes":[{"content":"This method is responsible for calling <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A&gt;</ph>.","pos":[0,113],"source":"This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>."}]}],"pos":[11258,12042],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.ServiceModel.OperationContext\"></xref>.","nodes":[{"pos":[0,62],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.OperationContext\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.ServiceModel.OperationContext\"></xref>."}],"pos":[12687,12750],"yaml":true},{"content":"The <xref href=\"System.ServiceModel.Channels.Message\"></xref> to be examined to determine authorization.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Channels.Message\"&gt;&lt;/xref&gt;</ph> to be examined to determine authorization.","source":"The <xref href=\"System.ServiceModel.Channels.Message\"></xref> to be examined to determine authorization."}],"pos":[12836,12941],"yaml":true},{"content":"`true` if access is granted; otherwise; otherwise `false`. The default is `true`.","nodes":[{"pos":[0,81],"content":"`true` if access is granted; otherwise; otherwise `false`. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if access is granted; otherwise; otherwise <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if access is granted; otherwise; otherwise `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[59,81],"source":" The default is `true`."}]}],"pos":[12999,13083],"yaml":true},{"content":"Checks authorization for the given operation context based on default policy evaluation.","nodes":[{"pos":[0,88],"content":"Checks authorization for the given operation context based on default policy evaluation.","nodes":[{"content":"Checks authorization for the given operation context based on default policy evaluation.","pos":[0,88]}]}],"pos":[14371,14460],"yaml":true},{"content":"<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> is generally the result from the default policy evaluation.  \n  \n Override this method to provide custom authorization decisions.  \n  \n This method can be used to make authorization decisions based on claim sets that are inferred based on incoming tokens, or added through external authorization policies. It can also make authorization decisions based on properties of the incoming message: for example, the action header.  \n  \n In this method, the application can use the `operationContext` parameter to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>). By returning the <xref:System.ServiceModel.Channels.RequestContext> object from the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>). By returning the <xref:System.ServiceModel.Channels.MessageHeaders> object from the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, the application can access the service URL (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>). With this information, the application can perform the authorization decision accordingly.  \n  \n The claims made by a user are found in the <xref:System.IdentityModel.Claims.ClaimSet> returned by the <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> property of the `AuthorizationContext`. The current `AuthorizationContext` is returned by the <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> property of the <xref:System.ServiceModel.OperationContext> class.","nodes":[{"pos":[0,129],"content":"<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> is generally the result from the default policy evaluation.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;</ph> is generally the result from the default policy evaluation.","pos":[0,129],"source":"<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> is generally the result from the default policy evaluation."}]},{"pos":[136,199],"content":"Override this method to provide custom authorization decisions.","nodes":[{"content":"Override this method to provide custom authorization decisions.","pos":[0,63]}]},{"pos":[206,493],"content":"This method can be used to make authorization decisions based on claim sets that are inferred based on incoming tokens, or added through external authorization policies. It can also make authorization decisions based on properties of the incoming message: for example, the action header.","nodes":[{"content":"This method can be used to make authorization decisions based on claim sets that are inferred based on incoming tokens, or added through external authorization policies. It can also make authorization decisions based on properties of the incoming message: for example, the action header.","pos":[0,287],"nodes":[{"content":"This method can be used to make authorization decisions based on claim sets that are inferred based on incoming tokens, or added through external authorization policies.","pos":[0,169]},{"content":"It can also make authorization decisions based on properties of the incoming message: for example, the action header.","pos":[170,287]}]}]},{"pos":[500,1396],"content":"In this method, the application can use the `operationContext` parameter to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>). By returning the <xref:System.ServiceModel.Channels.RequestContext> object from the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>). By returning the <xref:System.ServiceModel.Channels.MessageHeaders> object from the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, the application can access the service URL (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>). With this information, the application can perform the authorization decision accordingly.","nodes":[{"content":"In this method, the application can use the <ph id=\"ph1\">`operationContext`</ph> parameter to access the caller identity (<ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;</ph>).","pos":[0,175],"source":"In this method, the application can use the `operationContext` parameter to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>)."},{"content":"By returning the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> object from the <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A&gt;</ph> property, the application can access the entire request message (<ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A&gt;</ph>).","pos":[176,457],"source":" By returning the <xref:System.ServiceModel.Channels.RequestContext> object from the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>)."},{"content":"By returning the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.MessageHeaders&gt;</ph> object from the <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A&gt;</ph> property, the application can access the service URL (<ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.MessageHeaders.To%2A&gt;</ph>) and the operation (<ph id=\"ph4\">&lt;xref:System.ServiceModel.Channels.MessageHeaders.Action%2A&gt;</ph>).","pos":[458,805],"source":" By returning the <xref:System.ServiceModel.Channels.MessageHeaders> object from the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, the application can access the service URL (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>)."},{"content":"With this information, the application can perform the authorization decision accordingly.","pos":[806,896]}]},{"pos":[1403,1805],"content":"The claims made by a user are found in the <xref:System.IdentityModel.Claims.ClaimSet> returned by the <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> property of the `AuthorizationContext`. The current `AuthorizationContext` is returned by the <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> property of the <xref:System.ServiceModel.OperationContext> class.","nodes":[{"content":"The claims made by a user are found in the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Claims.ClaimSet&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A&gt;</ph> property of the <ph id=\"ph3\">`AuthorizationContext`</ph>.","pos":[0,211],"source":"The claims made by a user are found in the <xref:System.IdentityModel.Claims.ClaimSet> returned by the <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> property of the `AuthorizationContext`."},{"content":"The current <ph id=\"ph1\">`AuthorizationContext`</ph> is returned by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> class.","pos":[212,402],"source":" The current `AuthorizationContext` is returned by the <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> property of the <xref:System.ServiceModel.OperationContext> class."}]}],"pos":[14471,16287],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.ServiceModel.OperationContext\"></xref> for the current authorization request.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.OperationContext\"&gt;&lt;/xref&gt;</ph> for the current authorization request.","source":"The <xref href=\"System.ServiceModel.OperationContext\"></xref> for the current authorization request."}],"pos":[17098,17199],"yaml":true},{"content":"`true` if access is granted; otherwise, `false`. The default is `true`.","nodes":[{"pos":[0,71],"content":"`true` if access is granted; otherwise, `false`. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if access is granted; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,48],"source":"`true` if access is granted; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[49,71],"source":" The default is `true`."}]}],"pos":[17257,17331],"yaml":true},{"content":"Gets the set of policies that participate in policy evaluation.","nodes":[{"pos":[0,63],"content":"Gets the set of policies that participate in policy evaluation.","nodes":[{"content":"Gets the set of policies that participate in policy evaluation.","pos":[0,63]}]}],"pos":[18677,18741],"yaml":true},{"content":"The [!INCLUDE[indigo1](~/includes/indigo1-md.md)] implementation provides a default set of authorization policies. These include the primary token that contains the credentials of the requester and all supporting tokens, transport tokens, and external policies if specified.  \n  \n You can override this implementation and provide a different set of policies.","nodes":[{"pos":[0,274],"content":"The [!INCLUDE[indigo1](~/includes/indigo1-md.md)] implementation provides a default set of authorization policies. These include the primary token that contains the credentials of the requester and all supporting tokens, transport tokens, and external policies if specified.","nodes":[{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> implementation provides a default set of authorization policies.","pos":[0,114],"source":"The [!INCLUDE[indigo1](~/includes/indigo1-md.md)] implementation provides a default set of authorization policies."},{"content":"These include the primary token that contains the credentials of the requester and all supporting tokens, transport tokens, and external policies if specified.","pos":[115,274]}]},{"pos":[281,358],"content":"You can override this implementation and provide a different set of policies.","nodes":[{"content":"You can override this implementation and provide a different set of policies.","pos":[0,77]}]}],"pos":[18752,19115],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.ServiceModel.OperationContext\"></xref> of the current authorization request.","nodes":[{"pos":[0,99],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.OperationContext\"&gt;&lt;/xref&gt;</ph> of the current authorization request.","source":"The <xref href=\"System.ServiceModel.OperationContext\"></xref> of the current authorization request."}],"pos":[19449,19549],"yaml":true},{"content":"A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of type <xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy\"></xref>.","nodes":[{"pos":[0,153],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"&gt;&lt;/xref&gt;</ph> of type <ph id=\"ph2\">&lt;xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of type <xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy\"></xref>."}],"pos":[19692,19846],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.ServiceAuthorizationManager\n  commentId: T:System.ServiceModel.ServiceAuthorizationManager\n  id: ServiceAuthorizationManager\n  children:\n  - System.ServiceModel.ServiceAuthorizationManager.#ctor\n  - System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)\n  - System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)\n  - System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)\n  - System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)\n  langs:\n  - csharp\n  name: ServiceAuthorizationManager\n  nameWithType: ServiceAuthorizationManager\n  fullName: System.ServiceModel.ServiceAuthorizationManager\n  type: Class\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Provides authorization access checking for service operations.\n  remarks: \"This class is responsible for evaluating all policies (rules that define what a user is allowed to do), comparing the policies to claims made by a client, setting the resulting <xref:System.IdentityModel.Policy.AuthorizationContext> to the <xref:System.ServiceModel.ServiceSecurityContext>, and providing the authorization decision whether to allow or deny access for a given service operation for a caller.  \\n  \\n The <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method is called by the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure each time an attempt to access a resource is made. The method returns `true` or `false` to allow or deny access, respectively.  \\n  \\n The <xref:System.ServiceModel.ServiceAuthorizationManager> is part of the [!INCLUDE[indigo2](~/includes/indigo2-md.md)]*Identity Model* infrastructure. The Identity Model enables you to create custom authorization policies and custom authorization schemes. [!INCLUDE[crabout](~/includes/crabout-md.md)] how the Identity Model works, see [Managing Claims and Authorization with the Identity Model](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md).  \\n  \\n## Custom Authorization  \\n This class does not perform any authorization and allows users to access all service operations. To provide more restrictive authorization, you must create a custom authorization manager that checks custom policies. To do this, inherit from this class and override the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method. Specify the instance of the derived class through the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> property.  \\n  \\n In <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>, the application can use the <xref:System.ServiceModel.OperationContext> object to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).  \\n  \\n By getting the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, which returns a <xref:System.ServiceModel.Channels.MessageHeaders> object, the application can access the service (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>), and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).  \\n  \\n By getting the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, which returns a <xref:System.ServiceModel.Channels.RequestContext> object, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) and perform the authorization decision accordingly.  \\n  \\n For an example, see [How to: Create a Custom Authorization Manager for a Service](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).  \\n  \\n To create custom authorization policies, implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class.  For an example, see [How to: Create a Custom Authorization Policy](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md).  \\n  \\n To create a custom claim, use the <xref:System.IdentityModel.Claims.Claim> class.  For an example, see [How to: Create a Custom Claim](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md). To compare custom claims, you must compare claims, as shown in [How to: Compare Claims](~/docs/framework/wcf/extending/how-to-compare-claims.md).  \\n  \\n [!INCLUDE[crdefault](~/includes/crdefault-md.md)] [Custom Authorization](~/docs/framework/wcf/extending/custom-authorization.md).  \\n  \\n You can set the type of a custom authorization manager using the [\\\\&lt;serviceAuthorization\\\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) in a client application configuration file.\"\n  example:\n  - \"The following example shows a class named `MyServiceAuthorizationManager` that inherits from the <xref:System.ServiceModel.ServiceAuthorizationManager> and overrides the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method.  \\n  \\n [!code-csharp[c_CustomAuthMgr#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#2)]\\n [!code-vb[c_CustomAuthMgr#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#2)]\"\n  syntax:\n    content: public class ServiceAuthorizationManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ServiceAuthorizationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.ServiceAuthorizationManager.#ctor\n  commentId: M:System.ServiceModel.ServiceAuthorizationManager.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  langs:\n  - csharp\n  name: ServiceAuthorizationManager()\n  nameWithType: ServiceAuthorizationManager.ServiceAuthorizationManager()\n  fullName: ServiceAuthorizationManager.ServiceAuthorizationManager()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.ServiceAuthorizationManager\"></xref> class.\n  syntax:\n    content: public ServiceAuthorizationManager ();\n    parameters: []\n  overload: System.ServiceModel.ServiceAuthorizationManager.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ServiceAuthorizationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)\n  commentId: M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)\n  id: CheckAccess(System.ServiceModel.OperationContext)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  langs:\n  - csharp\n  name: CheckAccess(OperationContext)\n  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext)\n  fullName: ServiceAuthorizationManager.CheckAccess(OperationContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Checks authorization for the given operation context.\n  remarks: \"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method.  \\n  \\n Override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A> if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> or provide a different policy evaluation (chaining) model.  \\n  \\n This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.\"\n  example:\n  - \"The following code shows how to override this method to enforce custom access control requirements.  \\n  \\n [!code-csharp[c_Federation#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#1)]\\n [!code-vb[c_Federation#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#1)]\"\n  syntax:\n    content: public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext);\n    parameters:\n    - id: operationContext\n      type: System.ServiceModel.OperationContext\n      description: The <xref href=\"System.ServiceModel.OperationContext\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if access is granted; otherwise; otherwise `false`. The default is `true`.'\n  overload: System.ServiceModel.ServiceAuthorizationManager.CheckAccess*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ServiceAuthorizationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)\n  commentId: M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)\n  id: CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  langs:\n  - csharp\n  name: CheckAccess(OperationContext, Message)\n  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext, Message)\n  fullName: ServiceAuthorizationManager.CheckAccess(OperationContext, Message)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Checks authorization for the given operation context when access to a message is required.\n  remarks: \"In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method, which should only be used if the authorization decision depends on the message body. Because of performance issues, if possible you should redesign your application so that the authorization decision does not require access to the message body.  \\n  \\n Override this method if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> and <xref:System.ServiceModel.Channels.Message> or provide a different policy evaluation (chaining) model.  \\n  \\n This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.\"\n  example:\n  - \"The following code shows how to override this method to enforce custom access control requirements that require access to the message body.  \\n  \\n [!code-csharp[c_Federation#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#6)]\\n [!code-vb[c_Federation#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#6)]\"\n  syntax:\n    content: public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext, ref System.ServiceModel.Channels.Message message);\n    parameters:\n    - id: operationContext\n      type: System.ServiceModel.OperationContext\n      description: The <xref href=\"System.ServiceModel.OperationContext\"></xref>.\n    - id: message\n      type: System.ServiceModel.Channels.Message\n      description: The <xref href=\"System.ServiceModel.Channels.Message\"></xref> to be examined to determine authorization.\n    return:\n      type: System.Boolean\n      description: '`true` if access is granted; otherwise; otherwise `false`. The default is `true`.'\n  overload: System.ServiceModel.ServiceAuthorizationManager.CheckAccess*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ServiceAuthorizationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)\n  commentId: M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)\n  id: CheckAccessCore(System.ServiceModel.OperationContext)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  langs:\n  - csharp\n  name: CheckAccessCore(OperationContext)\n  nameWithType: ServiceAuthorizationManager.CheckAccessCore(OperationContext)\n  fullName: ServiceAuthorizationManager.CheckAccessCore(OperationContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Checks authorization for the given operation context based on default policy evaluation.\n  remarks: \"<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> is generally the result from the default policy evaluation.  \\n  \\n Override this method to provide custom authorization decisions.  \\n  \\n This method can be used to make authorization decisions based on claim sets that are inferred based on incoming tokens, or added through external authorization policies. It can also make authorization decisions based on properties of the incoming message: for example, the action header.  \\n  \\n In this method, the application can use the `operationContext` parameter to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>). By returning the <xref:System.ServiceModel.Channels.RequestContext> object from the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>). By returning the <xref:System.ServiceModel.Channels.MessageHeaders> object from the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, the application can access the service URL (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>). With this information, the application can perform the authorization decision accordingly.  \\n  \\n The claims made by a user are found in the <xref:System.IdentityModel.Claims.ClaimSet> returned by the <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> property of the `AuthorizationContext`. The current `AuthorizationContext` is returned by the <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> property of the <xref:System.ServiceModel.OperationContext> class.\"\n  example:\n  - \"The following example shows an override of the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method.  \\n  \\n [!code-csharp[c_CustomAuthMgr#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#6)]\\n [!code-vb[c_CustomAuthMgr#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#6)]  \\n  \\n For another example, see [How to: Create a Custom Authorization Manager for a Service](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).\"\n  syntax:\n    content: protected virtual bool CheckAccessCore (System.ServiceModel.OperationContext operationContext);\n    parameters:\n    - id: operationContext\n      type: System.ServiceModel.OperationContext\n      description: The <xref href=\"System.ServiceModel.OperationContext\"></xref> for the current authorization request.\n    return:\n      type: System.Boolean\n      description: '`true` if access is granted; otherwise, `false`. The default is `true`.'\n  overload: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ServiceAuthorizationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)\n  commentId: M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)\n  id: GetAuthorizationPolicies(System.ServiceModel.OperationContext)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  langs:\n  - csharp\n  name: GetAuthorizationPolicies(OperationContext)\n  nameWithType: ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)\n  fullName: ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Gets the set of policies that participate in policy evaluation.\n  remarks: \"The [!INCLUDE[indigo1](~/includes/indigo1-md.md)] implementation provides a default set of authorization policies. These include the primary token that contains the credentials of the requester and all supporting tokens, transport tokens, and external policies if specified.  \\n  \\n You can override this implementation and provide a different set of policies.\"\n  syntax:\n    content: protected virtual System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> GetAuthorizationPolicies (System.ServiceModel.OperationContext operationContext);\n    parameters:\n    - id: operationContext\n      type: System.ServiceModel.OperationContext\n      description: The <xref href=\"System.ServiceModel.OperationContext\"></xref> of the current authorization request.\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}\n      description: A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of type <xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy\"></xref>.\n  overload: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ServiceAuthorizationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ServiceModel.ServiceAuthorizationManager.#ctor\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: ServiceAuthorizationManager()\n  nameWithType: ServiceAuthorizationManager.ServiceAuthorizationManager()\n  fullName: ServiceAuthorizationManager.ServiceAuthorizationManager()\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: CheckAccess(OperationContext)\n  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext)\n  fullName: ServiceAuthorizationManager.CheckAccess(OperationContext)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.OperationContext\n  parent: System.ServiceModel\n  isExternal: false\n  name: OperationContext\n  nameWithType: OperationContext\n  fullName: System.ServiceModel.OperationContext\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: CheckAccess(OperationContext, Message)\n  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext, Message)\n  fullName: ServiceAuthorizationManager.CheckAccess(OperationContext, Message)\n- uid: System.ServiceModel.Channels.Message\n  parent: System.ServiceModel.Channels\n  isExternal: false\n  name: Message\n  nameWithType: Message\n  fullName: System.ServiceModel.Channels.Message\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: CheckAccessCore(OperationContext)\n  nameWithType: ServiceAuthorizationManager.CheckAccessCore(OperationContext)\n  fullName: ServiceAuthorizationManager.CheckAccessCore(OperationContext)\n- uid: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: GetAuthorizationPolicies(OperationContext)\n  nameWithType: ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)\n  fullName: ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<T>\n  nameWithType: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy\n  name: IAuthorizationPolicy\n  nameWithType: IAuthorizationPolicy\n  fullName: System.IdentityModel.Policy.IAuthorizationPolicy\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<IAuthorizationPolicy>\n  nameWithType: ReadOnlyCollection<IAuthorizationPolicy>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IdentityModel.Policy.IAuthorizationPolicy\n    name: IAuthorizationPolicy\n    nameWithType: IAuthorizationPolicy\n    fullName: System.IdentityModel.Policy.IAuthorizationPolicy\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.ServiceAuthorizationManager.#ctor*\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: ServiceAuthorizationManager\n  nameWithType: ServiceAuthorizationManager.ServiceAuthorizationManager\n  fullName: ServiceAuthorizationManager.ServiceAuthorizationManager\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ServiceAuthorizationManager.xml\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess*\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: CheckAccess\n  nameWithType: ServiceAuthorizationManager.CheckAccess\n  fullName: ServiceAuthorizationManager.CheckAccess\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ServiceAuthorizationManager.xml\n- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore*\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: CheckAccessCore\n  nameWithType: ServiceAuthorizationManager.CheckAccessCore\n  fullName: ServiceAuthorizationManager.CheckAccessCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ServiceAuthorizationManager.xml\n- uid: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies*\n  parent: System.ServiceModel.ServiceAuthorizationManager\n  isExternal: false\n  name: GetAuthorizationPolicies\n  nameWithType: ServiceAuthorizationManager.GetAuthorizationPolicies\n  fullName: ServiceAuthorizationManager.GetAuthorizationPolicies\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/ServiceAuthorizationManager.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}