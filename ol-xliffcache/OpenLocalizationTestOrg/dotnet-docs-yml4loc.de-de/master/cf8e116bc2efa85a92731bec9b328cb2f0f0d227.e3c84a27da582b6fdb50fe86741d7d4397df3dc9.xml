{"nodes":[{"content":"Provides data for the <xref href=\"System.Windows.Input.Touch.FrameReported\"></xref> event.","nodes":[{"pos":[0,90],"content":"Provides data for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Touch.FrameReported\"&gt;&lt;/xref&gt;</ph> event.","source":"Provides data for the <xref href=\"System.Windows.Input.Touch.FrameReported\"></xref> event."}],"pos":[729,820],"yaml":true},{"content":"The <xref:System.Windows.Input.Touch.FrameReported> event is included in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] to support compatibility with Silverlight. If you do not have to ensure compatibility with Silverlight, use the touch events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>, on <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, or <xref:System.Windows.ContentElement>.  \n  \n Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event. From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction.Down>, <xref:System.Windows.Input.TouchAction.Move>, or <xref:System.Windows.Input.TouchAction.Up> action. You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>. From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched.","nodes":[{"pos":[0,477],"content":"The <xref:System.Windows.Input.Touch.FrameReported> event is included in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] to support compatibility with Silverlight. If you do not have to ensure compatibility with Silverlight, use the touch events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>, on <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, or <xref:System.Windows.ContentElement>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event is included in <ph id=\"ph2\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> to support compatibility with Silverlight.","pos":[0,185],"source":"The <xref:System.Windows.Input.Touch.FrameReported> event is included in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] to support compatibility with Silverlight."},{"content":"If you do not have to ensure compatibility with Silverlight, use the touch events, such as <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>, on <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.UIElement3D&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","pos":[186,477],"source":" If you do not have to ensure compatibility with Silverlight, use the touch events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>, on <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, or <xref:System.Windows.ContentElement>."}]},{"pos":[484,1273],"content":"Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event. From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction.Down>, <xref:System.Windows.Input.TouchAction.Move>, or <xref:System.Windows.Input.TouchAction.Up> action. You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>. From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched.","nodes":[{"content":"Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event. From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction.Down>, <xref:System.Windows.Input.TouchAction.Move>, or <xref:System.Windows.Input.TouchAction.Up> action. You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>. From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched.","pos":[0,789],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchFrameEventArgs&gt;</ph> to get the <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph> values that are relevant to the touch event.","pos":[0,150],"source":"Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event."},{"content":"From the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph>, you can get the <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchPoint.Position%2A&gt;</ph> of the touch and determine whether the <ph id=\"ph3\">&lt;xref:System.Windows.Input.TouchAction&gt;</ph> was a <ph id=\"ph4\">&lt;xref:System.Windows.Input.TouchAction.Down&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Windows.Input.TouchAction.Move&gt;</ph>, or <ph id=\"ph6\">&lt;xref:System.Windows.Input.TouchAction.Up&gt;</ph> action.","pos":[151,497],"source":" From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction.Down>, <xref:System.Windows.Input.TouchAction.Move>, or <xref:System.Windows.Input.TouchAction.Up> action."},{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph> to get the <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph>.","pos":[498,609],"source":" You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>."},{"content":"From the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph>, you can determine the device <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchDevice.Id%2A&gt;</ph> and get information about the element that is touched.","pos":[610,789],"source":" From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched."}]}]}],"pos":[831,2109],"yaml":true,"extradata":"MT"},{"content":"Returns the current touch point of the primary touch device relative to the specified element.","nodes":[{"pos":[0,94],"content":"Returns the current touch point of the primary touch device relative to the specified element.","nodes":[{"content":"Returns the current touch point of the primary touch device relative to the specified element.","pos":[0,94]}]}],"pos":[4877,4972],"yaml":true},{"content":"In a set of active touch devices, the first device to be <xref:System.Windows.Input.TouchDevice.Activated> is the primary touch device. For example, if two fingers are touching the screen, the first finger that is down is represented by the primary touch device. If the first finger is lifted while the second finger is still down, the primary touch device becomes `null`.","nodes":[{"pos":[0,372],"content":"In a set of active touch devices, the first device to be <xref:System.Windows.Input.TouchDevice.Activated> is the primary touch device. For example, if two fingers are touching the screen, the first finger that is down is represented by the primary touch device. If the first finger is lifted while the second finger is still down, the primary touch device becomes `null`.","nodes":[{"content":"In a set of active touch devices, the first device to be <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice.Activated&gt;</ph> is the primary touch device.","pos":[0,135],"source":"In a set of active touch devices, the first device to be <xref:System.Windows.Input.TouchDevice.Activated> is the primary touch device."},{"content":"For example, if two fingers are touching the screen, the first finger that is down is represented by the primary touch device.","pos":[136,262]},{"content":"If the first finger is lifted while the second finger is still down, the primary touch device becomes <ph id=\"ph1\">`null`</ph>.","pos":[263,372],"source":" If the first finger is lifted while the second finger is still down, the primary touch device becomes `null`."}]}],"pos":[4983,5356],"yaml":true,"extradata":"MT"},{"content":"The element that defines the coordinate space. To use WPF absolute coordinates, specify <code>relativeTo</code> as `null`.","nodes":[{"pos":[0,122],"content":"The element that defines the coordinate space. To use WPF absolute coordinates, specify <code>relativeTo</code> as `null`.","nodes":[{"content":"The element that defines the coordinate space.","pos":[0,46]},{"content":"To use WPF absolute coordinates, specify <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">relativeTo</ph><ept id=\"p1\">&lt;/code&gt;</ept> as <ph id=\"ph2\">`null`</ph>.","pos":[47,122],"source":" To use WPF absolute coordinates, specify <code>relativeTo</code> as `null`."}]}],"pos":[6814,6937],"yaml":true},{"content":"The current position of the primary <xref href=\"System.Windows.Input.TouchDevice\"></xref> relative to the specified element; or `null` if the primary <xref href=\"System.Windows.Input.TouchDevice\"></xref> is not active.","nodes":[{"pos":[0,218],"content":"The current position of the primary <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> relative to the specified element; or <ph id=\"ph2\">`null`</ph> if the primary <ph id=\"ph3\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> is not active.","source":"The current position of the primary <xref href=\"System.Windows.Input.TouchDevice\"></xref> relative to the specified element; or `null` if the primary <xref href=\"System.Windows.Input.TouchDevice\"></xref> is not active."}],"pos":[7012,7231],"yaml":true},{"content":"Returns a collection that contains the current touch point for each active touch device relative to the specified element.","nodes":[{"pos":[0,122],"content":"Returns a collection that contains the current touch point for each active touch device relative to the specified element.","nodes":[{"content":"Returns a collection that contains the current touch point for each active touch device relative to the specified element.","pos":[0,122]}]}],"pos":[8435,8558],"yaml":true},{"content":"The element that defines the coordinate space. To use WPF absolute coordinates, specify <code>relativeTo</code> as `null`.","nodes":[{"pos":[0,122],"content":"The element that defines the coordinate space. To use WPF absolute coordinates, specify <code>relativeTo</code> as `null`.","nodes":[{"content":"The element that defines the coordinate space.","pos":[0,46]},{"content":"To use WPF absolute coordinates, specify <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">relativeTo</ph><ept id=\"p1\">&lt;/code&gt;</ept> as <ph id=\"ph2\">`null`</ph>.","pos":[47,122],"source":" To use WPF absolute coordinates, specify <code>relativeTo</code> as `null`."}]}],"pos":[9932,10055],"yaml":true},{"content":"A collection that contains the current <xref href=\"System.Windows.Input.TouchPoint\"></xref> for each active <xref href=\"System.Windows.Input.TouchDevice\"></xref>.","nodes":[{"pos":[0,162],"content":"A collection that contains the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchPoint\"&gt;&lt;/xref&gt;</ph> for each active <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph>.","source":"A collection that contains the current <xref href=\"System.Windows.Input.TouchPoint\"></xref> for each active <xref href=\"System.Windows.Input.TouchDevice\"></xref>."}],"pos":[10140,10303],"yaml":true},{"content":"This member is not implemented.","nodes":[{"pos":[0,31],"content":"This member is not implemented.","nodes":[{"content":"This member is not implemented.","pos":[0,31]}]}],"pos":[11486,11518],"yaml":true},{"content":"This method is provided for Silverlight compatibility. Because of device implementation differences, it is not implemented in WPF.","nodes":[{"pos":[0,130],"content":"This method is provided for Silverlight compatibility. Because of device implementation differences, it is not implemented in WPF.","nodes":[{"content":"This method is provided for Silverlight compatibility. Because of device implementation differences, it is not implemented in WPF.","pos":[0,130],"nodes":[{"content":"This method is provided for Silverlight compatibility.","pos":[0,54]},{"content":"Because of device implementation differences, it is not implemented in WPF.","pos":[55,130]}]}]}],"pos":[11529,11660],"yaml":true,"extradata":"MT"},{"content":"Gets the time stamp for this event.","nodes":[{"pos":[0,35],"content":"Gets the time stamp for this event.","nodes":[{"content":"Gets the time stamp for this event.","pos":[0,35]}]}],"pos":[12806,12842],"yaml":true},{"content":"The time stamp for this event.","nodes":[{"pos":[0,30],"content":"The time stamp for this event.","nodes":[{"content":"The time stamp for this event.","pos":[0,30]}]}],"pos":[12951,12982],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.TouchFrameEventArgs\n  commentId: T:System.Windows.Input.TouchFrameEventArgs\n  id: TouchFrameEventArgs\n  children:\n  - System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint(System.Windows.IInputElement)\n  - System.Windows.Input.TouchFrameEventArgs.GetTouchPoints(System.Windows.IInputElement)\n  - System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp\n  - System.Windows.Input.TouchFrameEventArgs.Timestamp\n  langs:\n  - csharp\n  name: TouchFrameEventArgs\n  nameWithType: TouchFrameEventArgs\n  fullName: System.Windows.Input.TouchFrameEventArgs\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Provides data for the <xref href=\"System.Windows.Input.Touch.FrameReported\"></xref> event.\n  remarks: \"The <xref:System.Windows.Input.Touch.FrameReported> event is included in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] to support compatibility with Silverlight. If you do not have to ensure compatibility with Silverlight, use the touch events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>, on <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, or <xref:System.Windows.ContentElement>.  \\n  \\n Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event. From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction.Down>, <xref:System.Windows.Input.TouchAction.Move>, or <xref:System.Windows.Input.TouchAction.Up> action. You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>. From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched.\"\n  example:\n  - \"The following example handles the <xref:System.Windows.Input.Touch.FrameReported> event and accesses the touch data in the <xref:System.Windows.Input.TouchFrameEventArgs>. When a touch is pressed on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \\n  \\n This example is part of a larger example that is available in the <xref:System.Windows.Input.Touch> class overview.  \\n  \\n [!code-csharp[TouchFrameSample#110](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#110)]\\n [!code-vb[TouchFrameSample#110](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#110)]\"\n  syntax:\n    content: 'public sealed class TouchFrameEventArgs : EventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchFrameEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint(System.Windows.IInputElement)\n  commentId: M:System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint(System.Windows.IInputElement)\n  id: GetPrimaryTouchPoint(System.Windows.IInputElement)\n  parent: System.Windows.Input.TouchFrameEventArgs\n  langs:\n  - csharp\n  name: GetPrimaryTouchPoint(IInputElement)\n  nameWithType: TouchFrameEventArgs.GetPrimaryTouchPoint(IInputElement)\n  fullName: TouchFrameEventArgs.GetPrimaryTouchPoint(IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Returns the current touch point of the primary touch device relative to the specified element.\n  remarks: In a set of active touch devices, the first device to be <xref:System.Windows.Input.TouchDevice.Activated> is the primary touch device. For example, if two fingers are touching the screen, the first finger that is down is represented by the primary touch device. If the first finger is lifted while the second finger is still down, the primary touch device becomes `null`.\n  example:\n  - \"The following code processes the touch points that are retrieved from the <xref:System.Windows.Input.TouchFrameEventArgs>. When a touch is pressed on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the <xref:System.Windows.Input.TouchDevice.Id%2A> matches the <xref:System.Windows.Input.TouchDevice.Id%2A> of the primary touch point, which indicates the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \\n  \\n This example is part of a larger example that is available in the <xref:System.Windows.Input.Touch> class overview.  \\n  \\n [!code-csharp[TouchFrameSample#120](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#120)]\\n [!code-vb[TouchFrameSample#120](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#120)]\"\n  syntax:\n    content: public System.Windows.Input.TouchPoint GetPrimaryTouchPoint (System.Windows.IInputElement relativeTo);\n    parameters:\n    - id: relativeTo\n      type: System.Windows.IInputElement\n      description: The element that defines the coordinate space. To use WPF absolute coordinates, specify <code>relativeTo</code> as `null`.\n    return:\n      type: System.Windows.Input.TouchPoint\n      description: The current position of the primary <xref href=\"System.Windows.Input.TouchDevice\"></xref> relative to the specified element; or `null` if the primary <xref href=\"System.Windows.Input.TouchDevice\"></xref> is not active.\n  overload: System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchFrameEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchFrameEventArgs.GetTouchPoints(System.Windows.IInputElement)\n  commentId: M:System.Windows.Input.TouchFrameEventArgs.GetTouchPoints(System.Windows.IInputElement)\n  id: GetTouchPoints(System.Windows.IInputElement)\n  parent: System.Windows.Input.TouchFrameEventArgs\n  langs:\n  - csharp\n  name: GetTouchPoints(IInputElement)\n  nameWithType: TouchFrameEventArgs.GetTouchPoints(IInputElement)\n  fullName: TouchFrameEventArgs.GetTouchPoints(IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Returns a collection that contains the current touch point for each active touch device relative to the specified element.\n  remarks: ''\n  example:\n  - \"The following code processes the touch points retrieved from the <xref:System.Windows.Input.TouchFrameEventArgs>. When a touch is pressed on the canvas, the <xref:System.Windows.Input.TouchDevice> is captured to the canvas. When the touch is raised, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the canvas, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the <xref:System.Windows.Input.TouchDevice.Id%2A> matches the <xref:System.Windows.Input.TouchDevice.Id%2A> of the primary touch point, which indicates the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \\n  \\n This example is part of a larger example that is available in the <xref:System.Windows.Input.Touch> class overview.  \\n  \\n [!code-csharp[TouchFrameSample#120](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#120)]\\n [!code-vb[TouchFrameSample#120](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#120)]\"\n  syntax:\n    content: public System.Windows.Input.TouchPointCollection GetTouchPoints (System.Windows.IInputElement relativeTo);\n    parameters:\n    - id: relativeTo\n      type: System.Windows.IInputElement\n      description: The element that defines the coordinate space. To use WPF absolute coordinates, specify <code>relativeTo</code> as `null`.\n    return:\n      type: System.Windows.Input.TouchPointCollection\n      description: A collection that contains the current <xref href=\"System.Windows.Input.TouchPoint\"></xref> for each active <xref href=\"System.Windows.Input.TouchDevice\"></xref>.\n  overload: System.Windows.Input.TouchFrameEventArgs.GetTouchPoints*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchFrameEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp\n  commentId: M:System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp\n  id: SuspendMousePromotionUntilTouchUp\n  parent: System.Windows.Input.TouchFrameEventArgs\n  langs:\n  - csharp\n  name: SuspendMousePromotionUntilTouchUp()\n  nameWithType: TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp()\n  fullName: TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: This member is not implemented.\n  remarks: This method is provided for Silverlight compatibility. Because of device implementation differences, it is not implemented in WPF.\n  syntax:\n    content: public void SuspendMousePromotionUntilTouchUp ();\n    parameters: []\n  overload: System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchFrameEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchFrameEventArgs.Timestamp\n  commentId: P:System.Windows.Input.TouchFrameEventArgs.Timestamp\n  id: Timestamp\n  parent: System.Windows.Input.TouchFrameEventArgs\n  langs:\n  - csharp\n  name: Timestamp\n  nameWithType: TouchFrameEventArgs.Timestamp\n  fullName: TouchFrameEventArgs.Timestamp\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the time stamp for this event.\n  syntax:\n    content: public int Timestamp { get; }\n    return:\n      type: System.Int32\n      description: The time stamp for this event.\n  overload: System.Windows.Input.TouchFrameEventArgs.Timestamp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchFrameEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint(System.Windows.IInputElement)\n  parent: System.Windows.Input.TouchFrameEventArgs\n  isExternal: false\n  name: GetPrimaryTouchPoint(IInputElement)\n  nameWithType: TouchFrameEventArgs.GetPrimaryTouchPoint(IInputElement)\n  fullName: TouchFrameEventArgs.GetPrimaryTouchPoint(IInputElement)\n- uid: System.Windows.Input.TouchPoint\n  parent: System.Windows.Input\n  isExternal: false\n  name: TouchPoint\n  nameWithType: TouchPoint\n  fullName: System.Windows.Input.TouchPoint\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.TouchFrameEventArgs.GetTouchPoints(System.Windows.IInputElement)\n  parent: System.Windows.Input.TouchFrameEventArgs\n  isExternal: false\n  name: GetTouchPoints(IInputElement)\n  nameWithType: TouchFrameEventArgs.GetTouchPoints(IInputElement)\n  fullName: TouchFrameEventArgs.GetTouchPoints(IInputElement)\n- uid: System.Windows.Input.TouchPointCollection\n  parent: System.Windows.Input\n  isExternal: false\n  name: TouchPointCollection\n  nameWithType: TouchPointCollection\n  fullName: System.Windows.Input.TouchPointCollection\n- uid: System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp\n  parent: System.Windows.Input.TouchFrameEventArgs\n  isExternal: false\n  name: SuspendMousePromotionUntilTouchUp()\n  nameWithType: TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp()\n  fullName: TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp()\n- uid: System.Windows.Input.TouchFrameEventArgs.Timestamp\n  parent: System.Windows.Input.TouchFrameEventArgs\n  isExternal: false\n  name: Timestamp\n  nameWithType: TouchFrameEventArgs.Timestamp\n  fullName: TouchFrameEventArgs.Timestamp\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint*\n  parent: System.Windows.Input.TouchFrameEventArgs\n  isExternal: false\n  name: GetPrimaryTouchPoint\n  nameWithType: TouchFrameEventArgs.GetPrimaryTouchPoint\n  fullName: TouchFrameEventArgs.GetPrimaryTouchPoint\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchFrameEventArgs.xml\n- uid: System.Windows.Input.TouchFrameEventArgs.GetTouchPoints*\n  parent: System.Windows.Input.TouchFrameEventArgs\n  isExternal: false\n  name: GetTouchPoints\n  nameWithType: TouchFrameEventArgs.GetTouchPoints\n  fullName: TouchFrameEventArgs.GetTouchPoints\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchFrameEventArgs.xml\n- uid: System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp*\n  parent: System.Windows.Input.TouchFrameEventArgs\n  isExternal: false\n  name: SuspendMousePromotionUntilTouchUp\n  nameWithType: TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp\n  fullName: TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchFrameEventArgs.xml\n- uid: System.Windows.Input.TouchFrameEventArgs.Timestamp*\n  parent: System.Windows.Input.TouchFrameEventArgs\n  isExternal: false\n  name: Timestamp\n  nameWithType: TouchFrameEventArgs.Timestamp\n  fullName: TouchFrameEventArgs.Timestamp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchFrameEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n"}